[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to lists for easier manipulation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # iterate through the lists and compare each element\n    shared_list = []\n    for item in list1:\n        if item in list2:\n            shared_list.append(item)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Convert the tuples to sets to remove duplicates and to perform set operations faster\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the shared elements using set intersection\n    shared_elements = set1.intersection(set2)\n\n    # Convert the shared elements back to a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # find the common elements in the two tuples\n    common_elements = set(test_tup1).intersection(set(test_tup2))\n    # convert the common elements into a list\n    shared_list = list(common_elements)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_list.append(item)\n    return shared_list\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup2[i] in test_tup1:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_set = set1.intersection(set2)\n    return list(shared_set)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return True\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is divisible by any number from 3 to the square root of the number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n\n    # If the loop ends without finding a divisor, then the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2 or n == 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 9:\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True\n    else:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n            i += 6\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2 or n == 3:\n        return False\n    if n < 2 or n % 2 == 0:\n        return True\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers.\n\n    Args:\n        nums: list of integers\n        n: integer specifying the number of largest integers to find\n\n    Returns:\n        list of integers, the n largest integers from the input list\n    \"\"\"\n    # Convert the list to a min-heap and extract the n largest elements\n    heap = hq.nlargest(n, nums)\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap\n    hq.heapify(nums)\n    # remove the smallest n elements from the heap\n    for _ in range(n):\n        hq.heappop(nums)\n    # convert the heap back to a list\n    return [x for x in nums]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # create a min heap from the given list of numbers\n    for i in range(n): # remove and return the n largest numbers\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a max heap of size n from the first n elements in the list\n    max_heap = nums[:n]\n    hq.heapify(max_heap)\n\n    # Remove the largest element from the max heap and add it to the end of the result list\n    for i in range(n, len(nums)):\n        hq.heappushpop(max_heap, nums[i])\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return nums\n    elif n == 1:\n        return [nums[0]]\n    else:\n        largest = []\n        hq.heapify(nums)\n        while n > 1:\n            largest.append(nums[0])\n            nums.pop(0)\n            n -= 1\n        hq.heapify(largest)\n        return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min heap of size n\n    hq.heapify(nums[:n])\n\n    # Extract the n largest integers from the heap and return them as a list\n    return hq.nlargest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap from the input numbers\n    heap = [num for num in nums]\n    hq.heapify(heap)\n    # Extract the largest n numbers in descending order\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    heapq.heapify(nums)  # convert the list into a max heap\n    return heapq.nlargest(n, nums)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the input list to a min-heap\n    max_heap = [(-num, i) for i, num in enumerate(nums)]\n    hq.heapify(max_heap)\n\n    # extract and return the n largest numbers\n    return [num for num, _ in max_heap[:n]]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a max-heap using a min-heap\n    heap = hq.nsmallest(n, nums)\n    \n    # Return the n largest integers from the min-heap in descending order\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    diff = 1 ^ x\n    if diff!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x > 1:\n        x = x >> 1\n        if x == 0:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    else:\n        if x & (x-1) == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        if x % 2 == 0:\n            count += 1\n            x /= 2\n        else:\n            return False\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    while x > 1:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True\n\nprint(is_Power_Of_Two(16))  # Output: True\nprint(is_Power_Of_Two(24))  # Output: True\nprint(is_Power_Of_Two(25))  # Output: False\nprint(is_Power_Of_Two(0))   # Output: True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x > 0:\n        count += x & 1\n        x >>= 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Check if x is a power of 2\n    if x & (x - 1) == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 0 and x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    while x!= 1:\n        if x & 1 == 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(x, int) or x <= 0:\n        return False\n    \n    # Find the largest power of 2 that is less than or equal to the input\n    while x > 1:\n        x = x >> 1\n    \n    # If the largest power of 2 is equal to the input, then the two numbers differ at one bit position only\n    if x == x >> 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into a list of words\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    \n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # matches words at least 4 characters long\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    words = re.findall(r'\\b\\w+\\b', text) # find all non-space words (words with at least one letter) in the string\n    long_words = [word for word in words if len(word) >= 4] # filter words that are at least 4 characters long\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # define a regular expression to match at least 4 characters long words\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # find all non-overlapping matches using the regular expression\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to find all words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= 2\n    return nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # convert the input string into a set\n    chars = set(str)\n    \n    # sort the set of characters\n    sorted_chars = sorted(chars)\n    \n    # iterate through the sorted set of characters\n    min_rotations = float('inf')\n    for i in range(len(sorted_chars)):\n        # find the number of rotations to its left\n        left_rotations = 0\n        current_char = sorted_chars[i]\n        for j in range(i-1, -1, -1):\n            if sorted_chars[j] == current_char:\n                left_rotations += 1\n            else:\n                break\n        \n        # find the number of rotations to its right\n        right_rotations = 0\n        for j in range(i+1, len(sorted_chars)):\n            if sorted_chars[j] == current_char:\n                right_rotations += 1\n            else:\n                break\n        \n        # update the minimum number of rotations\n        min_rotations = min(min_rotations, left_rotations + right_rotations)\n    \n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    n = len(str)  # length of the given string\n\n    # Loop for each possible rotation of the given string\n    for i in range(n): \n        for j in range(i+1, n): \n            # Calculate the number of rotations required to get the same string\n            count = 0\n            while str[i]!= str[j]: \n                str = str[j:] + str[:j] \n                count += 1 \n            # Return the minimum number of rotations required\n            if count < min_rotations: \n                min_rotations = count\n    \n    # Return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    if str == str[::-1]:\n        return 0\n    elif str == str[::-1][::-1]:\n        return 1\n    else:\n        min_rot = float('inf')\n        for i in range(len(str)):\n            for j in range(i+1, len(str)+1):\n                sub_str = str[i:j]\n                if sub_str == sub_str[::-1]:\n                    return 0\n                elif sub_str == sub_str[::-1][::-1]:\n                    return 1\n                else:\n                    rot_count = find_Rotations(sub_str)\n                    if rot_count < min_rot:\n                        min_rot = rot_count\n        return min_rot+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    start = 0\n    end = n-1\n    rotations = 0\n\n    while start < end:\n        if str[start]!= str[end]:\n            return rotations\n        start += 1\n        end -= 1\n        rotations += 1\n\n    if start == end:\n        return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    if len(str) == 0:\n        return 0\n    elif len(str) == 1:\n        return 0\n    else:\n        min_rotations = float('inf')\n        for i in range(len(str)):\n            for j in range(i+1, len(str)):\n                if str[j]!= str[i]:\n                    str1 = str[:i] + str[j] + str[i] + str[j+1:]\n                    str2 = str[j] + str[i] + str[:i] + str[j+1:]\n                    if str1 == str2:\n                        return 0\n                    elif str1 < str2:\n                        min_rotations = min(min_rotations, j - i + 1)\n                    else:\n                        min_rotations = min(min_rotations, i - j + 1)\n        return min_rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize the current and previous string as the original string\n    current_str = str\n    prev_str = str\n    count = 0\n\n    # Check if the original string is already a palindrome\n    if current_str == current_str[::-1]:\n        return 0\n\n    # Check for rotations until the current string is no longer a palindrome\n    while current_str!= prev_str:\n        prev_str = current_str\n        current_str = current_str[1:] + current_str[0]\n        count += 1\n\n        # Check if the current string is a palindrome\n        if current_str == current_str[::-1]:\n            return count\n\n    # If the current string is still not a palindrome, it means the string is already a palindrome\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Find the length of the string\n    n = len(str)\n    # Initialize the variables to keep track of the length of the string\n    max_length = n\n    min_length = n\n    # Initialize the variables to keep track of the minimum and maximum rotations required\n    min_rotations = 0\n    max_rotations = 0\n    # Initialize the variables to keep track of the character that has the maximum frequency\n    max_char = str[0]\n    # Iterate through the string\n    for i in range(n):\n        # Check if the current character is greater than the maximum frequency character\n        if str[i] > max_char:\n            # Update the maximum frequency character\n            max_char = str[i]\n            # Update the maximum length\n            max_length = i + 1\n        # Check if the current character is less than the minimum frequency character\n        elif str[i] < max_char:\n            # Update the minimum frequency character\n            min_char = str[i]\n            # Update the minimum length\n            min_length = i + 1\n        # Check if the frequency of the current character is greater than 1\n        if str.count(str[i]) > 1:\n            # Update the minimum rotations required\n            min_rotations += 1\n        # Check if the frequency of the current character is less than or equal to 1\n        else:\n            # Update the maximum rotations required\n            max_rotations += 1\n    # Check if the maximum and minimum lengths are equal\n    if max_length == min_length:\n        # Return the minimum rotations required\n        return min_rotations\n    # Check if the maximum and minimum lengths are equal\n    else:\n        # Return the minimum rotations required\n        return min(min_rotations, max_rotations)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    rotations = 0\n    for i in range(n-1): \n        if str[i] > str[i+1]: \n            rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the input string to lowercase\n    str = str.lower()\n\n    # Initialize two pointers at the start and end of the string\n    start = 0\n    end = len(str) - 1\n\n    # Initialize a counter to keep track of the number of rotations\n    rotations = 0\n\n    # While the start pointer is less than the end pointer\n    while start < end:\n        # If the characters at the start and end pointers are the same\n        if str[start] == str[end]:\n            # Increment the rotations counter\n            rotations += 1\n            # Move the start pointer to the right\n            start += 1\n            # Move the end pointer to the left\n            end -= 1\n        # If the characters at the start and end pointers are not the same\n        else:\n            # If the characters at the start and end pointers are in the reverse order\n            if str[start] == str[end-1] and str[end] == str[start-1]:\n                # Move the end pointer to the left\n                end -= 1\n            # If the characters at the start and end pointers are not in the reverse order\n            else:\n                # Move the start pointer to the right\n                start += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    dp = [0] * n\n    # Initialize dp as 0 for all indices\n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n    # Calculate the rotations for all substrings\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the substring of length i and j\n            substr = str[i:j+1]\n            # Calculate the number of rotations of the substring\n            rotations = 0\n            while substr!= substr[::-1]:\n                substr = substr[1:] + substr[0]\n                rotations += 1\n            dp[i] = min(dp[i], rotations)\n    # Return the minimum number of rotations\n    return min(dp)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, \"\", 1)\n        s = s.replace(ch, \"\", 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Check if the string is empty or not\n    if len(s) == 0:\n        return s\n    # If the character to remove is the first character of the string\n    elif s[0] == ch:\n        # Remove the first character and return the modified string\n        return s[1:]\n    # If the character to remove is the last character of the string\n    elif s[-1] == ch:\n        # Remove the last character and return the modified string\n        return s[:-1]\n    # If the character to remove is not the first or last character of the string\n    else:\n        # Remove the first and last occurrence of the character and return the modified string\n        return s.replace(ch, '', 1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # find the index of the first occurrence of the character\n    index = s.find(ch)\n    # if the character is not found, return the original string\n    if index == -1:\n        return s\n    # check if there is a last occurrence of the character\n    if index > 0 and s[index-1] == ch:\n        # if there is, remove it and continue removing until there are no last occurrences\n        while index > 0 and s[index-1] == ch:\n            index -= 1\n        # find the index of the last occurrence of the character\n        index = s.rfind(ch)\n        # remove the characters from the end of the string up to and including the last occurrence\n        s = s[:index] + s[index+len(ch):]\n    else:\n        # if there is not, remove the characters from the beginning of the string up to and including the first occurrence\n        s = s[index+len(ch):]\n    # return the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return \"Character not found in the string.\"\n    else:\n        return s.replace(ch, \"\")"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        index = s.index(ch) \n        s = s[:index-1] + s[index+1:] \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1) + s.replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into a list of characters\n    lst = list(s)\n\n    # Find the index of the first occurrence of the character\n    i = lst.index(ch)\n\n    # If the character is the first occurrence, remove it and return the string\n    if i == 0:\n        return ''.join(lst[1:])\n    # If the character is the last occurrence, remove it and return the string\n    elif i == len(lst)-1:\n        return ''.join(lst[0:-1])\n    # If the character is not the first or last occurrence, remove it and return the string\n    else:\n        return ''.join(lst[1:-1])"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Remove first and last occurrence of a given character from the string.\n    \"\"\"\n    return s[1:-1].replace(ch,'')"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n\n    if first_occ!= -1:\n        s = s[:first_occ] + s[first_occ+len(ch):]\n    if last_occ!= -1:\n        s = s[:last_occ] + s[last_occ+len(ch):]\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix by row sums in ascending order\n    sorted_M = sorted(M, key=lambda x: x[row_sums.index(sum(x))])\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    n = len(M)\n\n    # Find the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row_sums in ascending order\n    row_sums.sort()\n\n    # Use row_sums to sort the matrix\n    sorted_matrix = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            sorted_matrix[i][j] = M[j][row_sums.index(row_sums[i])]\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # calculate the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # sort the matrix by the sum of each row\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables\n    n = len(M)\n    temp = 0\n    \n    # sort each row of the matrix\n    for i in range(n):\n        # calculate the sum of the current row\n        row_sum = sum(M[i])\n        \n        # swap the current row with the first row with the smallest sum\n        for j in range(i+1, n):\n            if row_sum > sum(M[j]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n                row_sum = sum(M[i])\n    \n    # print the sorted matrix\n    for row in M:\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize the empty list to store the sorted matrix\n    sorted_M = []\n\n    # Sort each row in ascending order\n    for i in range(len(M)):\n        sorted_M.append(sorted(M[i]))\n\n    # Combine the sorted rows into a single matrix\n    sorted_matrix = []\n    for i in range(len(M[0])):\n        temp = []\n        for j in range(len(sorted_M)):\n            temp.append(sorted_M[j][i])\n        sorted_matrix.append(temp)\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for j in range(n):\n        for i in range(j+1, n):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    # Create a new list to store the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Sort the row in ascending order using the sum() function\n        sorted_row = sorted(row)\n        # Append the sorted row to the sorted_matrix list\n        sorted_matrix.append(sorted_row)\n\n    # Return the sorted_matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # iterate through each row of the matrix\n    for i in range(n):\n        # initialize the current row sum to the first element in the row\n        curr_row_sum = M[i][0]\n        # iterate through each element in the row and subtract the current sum from it\n        for j in range(1, n):\n            curr_row_sum -= M[i][j]\n            # if the current sum is less than 0, it means we need to shift all the elements in the row to the right\n            if curr_row_sum < 0:\n                for k in range(j, n):\n                    M[i][k] = M[i][k-1]\n                M[i][n-1] = curr_row_sum\n                curr_row_sum = 0\n                break\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    This function takes a matrix as input and sorts the matrix in ascending order based on the sum of its rows.\n    '''\n    \n    # Initialize the two variables for the sum of the rows and the sum of the columns\n    row_sum = 0\n    col_sum = 0\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        \n        # Initialize the variable for the current row sum\n        row = M[i]\n        \n        # Initialize the variable for the current column sum\n        col = 0\n        \n        # Loop through each column of the matrix\n        for j in range(len(M[0])):\n            \n            # Check if the current element is greater than the current column sum\n            if row[j] > col:\n                col = row[j]\n            \n            # Increment the column sum\n            col += row[j]\n        \n        # Check if the current row sum is greater than the current sum of the rows\n        if row_sum < row_sum + col:\n            row_sum = row_sum + col\n    \n    # Print the sorted matrix\n    for i in range(len(M)):\n        row = \"\"\n        for j in range(len(M[0])):\n            row += str(row[j]) + \", \"\n        print(row[:-2])\n    \n    # Return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Create a new matrix to store the sorted matrix\n    sorted_M = [[0]*n for i in range(n)]\n\n    # Iterate over each element in the matrix\n    for i in range(n):\n        for j in range(n):\n            # Calculate the sum of the current row\n            sum_row = sum(M[i])\n            # Calculate the sum of the current column\n            sum_col = sum(row[j] for row in M)\n            # If the sum of the current row is greater than the sum of the current column, swap the elements\n            if sum_row > sum_col:\n                sorted_M[i][j] = M[i][j]\n                sorted_M[j][i] = M[j][i]\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, breadth, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n\n    # Formula for Volume of a Triangular Prism\n    volume = (1/3) * l * b * h\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3)*l*b*h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!\\w)(?=[a-z])(?=[A-Z])(?=[a-z])([a-z]+)_([a-z]+)'\n    matches = re.findall(pattern, text.lower())\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'(?<![A-Z])[a-z]+(?![A-Z])')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"([a-z]+[_a-z]*)\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])([a-z])'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r\"^[a-z]+_[a-z]+$\"\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'\\b[a-z]+_[a-z]+\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'[a-z_]+'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+_)+[a-z]+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a list to store the characters from the first string\n    char_list1 = [string1[i] for i in range(len(string1))]\n\n    # Create a set to store the characters from the second string\n    char_set2 = set(string2)\n\n    # Create a list to store the characters from the first string which are not in the second string\n    char_list3 = [char for char in char_list1 if char not in char_set2]\n\n    # Join the characters from the list to form a string\n    string3 = ''.join(char_list3)\n\n    return string3"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list containing the characters of the string \n    without the characters present in the second string.\n    '''\n    first_string = list(string)\n    second_string = list('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,.<>/?')\n    for char in first_string:\n        if char in second_string:\n            first_string.remove(char)\n    return first_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_string = list(string)\n    list_string = [char for char in list_string if char not in set(string)]\n    result = ''.join(list_string)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_str = [chr(i) for i in range(NO_OF_CHARS)]\n    return ''.join([char for char in list_str if char not in string])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    # create a list of characters to remove\n    chars_to_remove = list(string)\n    # initialize an empty list to store the remaining characters\n    remaining_chars = []\n    # loop through the characters of the string\n    for char in string:\n        # if the character is not in the list of characters to remove, add it to the remaining characters list\n        if char not in chars_to_remove:\n            remaining_chars.append(char)\n    # convert the remaining characters list to a string and return it\n    return ''.join(remaining_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of all characters in the first string\n    chars = list(string)\n    # Create a list of all characters in the second string\n    remove_chars = list(set(string) - set(string.lower()))\n    # Iterate over the characters in the first string and remove characters from the list if they are in the second list\n    for char in chars:\n        if char in remove_chars:\n            chars.remove(char)\n    # Convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of characters to check for in the first string\n    char_list = list(string)\n    # Iterate over each character in the first string\n    for i in range(NO_OF_CHARS):\n        # Check if the character is present in the second string\n        if string[i] in char_list:\n            # If the character is present, remove it from the list and update the length of the string\n            char_list.remove(string[i])\n            string = string[:i] + string[i+1:]\n            NO_OF_CHARS -= 1\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_set = set(string)\n    result = []\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            result.append(chr(i))\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_string = string.lower()\n    second_string = 'abcdefghijklmnopqrstuvwxyz'\n    new_string = ''\n\n    for char in first_string: \n        if char not in second_string: \n            new_string += char\n\n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string.lower():\n            string = string.replace(char, '', 1)\n    return string"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns a boolean value indicating whether the array\n    contains any duplicate element or not.\n    \"\"\"\n    # Initialize a set to store unique numbers in the array\n    unique_set = set()\n    \n    # Loop through each number in the array\n    for num in arraynums:\n        # If the number is not already in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n        # If the number is already in the set, return True (indicating that there is a duplicate element)\n        else:\n            return True\n    \n    # If the loop completes without finding any duplicate elements, return False (indicating that there are no duplicates)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # loop through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store the unique elements of the array\n    unique_nums = set(arraynums)\n    # check if the length of the set is equal to the length of the array\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n\n    Args:\n        arraynums: a list of integers\n\n    Returns:\n        True if there is at least one duplicate element in the array, False otherwise.\n    \"\"\"\n    # Convert the list of integers to a set to remove duplicates\n    unique_nums = set(arraynums)\n\n    # Check if the length of the unique set is equal to the length of the original list\n    if len(unique_nums) == len(arraynums):\n        # If so, there are no duplicates\n        return False\n    else:\n        # If not, there are duplicates\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    frequency_dict = {}\n    \n    # Iterate through the array and count the frequency of each element\n    for num in arraynums:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    \n    # Check if there are any duplicate elements\n    has_duplicates = False\n    for num, freq in frequency_dict.items():\n        if freq > 1:\n            has_duplicates = True\n            break\n    \n    # Return True if there are duplicates, False otherwise\n    return has_duplicates"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    This function takes an array of integers as input and returns True if there are any duplicate elements in the array,\n    and False otherwise.\n    \"\"\"\n    hashmap = {}\n    for num in arraynums:\n        if num in hashmap:\n            return True\n        hashmap[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements of the array as keys and their count as values\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate over the dictionary and check if any element has a count greater than 1\n    for num, count in count_dict.items():\n        if count > 1:\n            return True\n    \n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2 or x == 4 or x == 8 or x == 16:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 2 or x == 5 or x == 7 or x == 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # list of values to check for woodball\n    woodballs = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]\n    \n    # check if the given number is in the list of woodballs\n    if x in woodballs:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x % 5 == 0:\n        return True\n    elif x % 3 == 0:\n        return True\n    elif x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 2 == 0 and x >= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 or x % 5 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 12:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        return True\n\nprint(is_woodall(12))  # Output: True\nprint(is_woodall(6))   # Output: False\nprint(is_woodall(10))  # Output: True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 5:\n        return 'Woodball'\n    elif x >= 2 and x <= 5:\n        return 'Wood'\n    else:\n        return 'Not a woodball'"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    rev_num = str(num)[::-1]\n    # Convert the reversed number to integer\n    rev_int = int(rev_num)\n    # Calculate the difference between the original number and the reversed number\n    diff = abs(num - rev_int)\n    # Check if the difference is one less than twice the reverse\n    return diff < num // 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    # convert the number to a string and reverse it\n    rev_num = str(num)[::-1]\n    # convert the reversed number back to an integer\n    rev_rev_num = int(rev_num)\n    # check if the original number is one less than twice its reverse\n    if num-2 == rev_rev_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp = temp // 10\n        \n    return num + reverse == 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the given number to a string\n    num_str = str(num)\n    \n    # reverse the string\n    rev_str = num_str[::-1]\n    \n    # convert the reversed string to an integer\n    rev_int = int(rev_str)\n    \n    # check if the original number is one less than twice its reverse\n    if num < 2 * rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num!= 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    if reverse % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    # Reverse the number\n    reverse = str(num)[::-1]\n    # Convert the reversed number to integer and add 1\n    new_num = int(reverse) + 1\n    # Check if the new number is one less than twice the reverse\n    if new_num < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if num == reverse - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Calculate the reverse of the reversed number\n    rev_num_str = str(int(num_str))[::-1]\n    # Convert the reversed number back to an integer and subtract 1\n    rev_num = int(rev_num_str) - 1\n    # Check if the result is one less than twice the reversed number\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num = str(num)\n    # Reverse the string\n    rev_num = num[::-1]\n    # Convert the reversed number back to an integer\n    rev_num = int(rev_num)\n    # Calculate the difference between the original number and its reverse\n    diff = num - rev_num\n    # Check if the difference is 1\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return num == 2 * rev(str(num)[::-1])"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n    '''\n    if len(arr) == 0 : \n        return 0\n    max_num = 0\n    for i in range(len(arr)) :\n        max_num = max_num * 10 + int(arr[i])\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n    \"\"\"\n    max_num = 0\n    max_length = 0\n    for i in range(1, 10):\n        for j in arr:\n            if len(str(i*j)) == len(str(i*j)) and int(str(i*j)) > max_num:\n                max_num = int(str(i*j))\n                max_length = len(str(i*j))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the digits in ascending order\n    arr.sort()\n    \n    # Initialize variables to keep track of the largest number formed so far and its length\n    max_num = 0\n    max_length = 0\n    \n    # Iterate through the sorted array\n    for i in range(len(arr)) : \n        \n        # Keep track of the current number formed and its length\n        curr_num = int(''.join(str(x) for x in arr[0:i+1]))\n        curr_length = i+1\n        \n        # Check if the current number is greater than the largest number found so far\n        if curr_num > max_num : \n            max_num = curr_num\n            max_length = curr_length\n    \n    # Return the largest number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    if len(arr) == 0:\n        return 0\n\n    largest = 0\n    for num in arr:\n        if num > largest:\n            largest = num\n\n    return largest + find_Max_Num(arr[:arr.index(largest)+1])"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Initialize variables\n    max_num = 0\n    temp_num = 0\n    # Loop through each digit in the list\n    for digit in arr:\n        # If the current digit is greater than the current max number\n        if int(digit) > int(temp_num[-1]):\n            # Update the max number and the temp number\n            max_num = int(temp_num + digit)\n            temp_num = digit\n        # If the current digit is less than the current max number\n        else:\n            # Append the current digit to the temp number\n            temp_num += digit\n    # Return the max number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Convert the list of digits to a string\n    digits_str = ''.join(map(str, arr))\n    # Convert the string to an integer\n    digits_int = int(digits_str)\n    # Use recursion to find the largest number that can be formed with the given list of digits\n    def largest_num(num, power):\n        if power == 0:\n            return num\n        return largest_num(num * 10 + power, power - 1)\n    # Find the largest number that can be formed with the given list of digits\n    result = largest_num(digits_int, len(arr))\n    # Convert the result to a list of digits\n    result_digits_str = str(result)\n    result_digits_list = list(map(int, result_digits_str))\n    return result_digits_list\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = int(''.join(sorted(str(arr[i:j]))))\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) #sorting in descending order\n    max_num = 0\n    for i in range(len(arr)):\n        num = arr[i]*(10**(len(arr)-i-1))\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        num = 0\n        for j in range(len(arr)):\n            if i!= j:\n                num += arr[j] * (j+1)\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(10):\n        if arr.count(str(i)) == len(arr):\n            max_num = max_num * 10 + i\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # Check if both numbers are of same sign or not\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0: \n        return True \n    elif x>0 and y>0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # If both the numbers are positive or negative, then check whether they have opposite signs or not.\n    if x > 0 and y > 0:\n        return False\n    elif x < 0 and y < 0:\n        return False\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0:\n        print(x, y, \"have opposite signs.\")\n    elif x < 0 and y > 0:\n        print(x, y, \"have opposite signs.\")\n    elif x == 0 and y == 0:\n        print(x, y, \"are both zero.\")\n    else:\n        print(x, y, \"have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y>0) or (x<0 and y<0): \n        print(\"The signs are opposite\") \n    else: \n        print(\"The signs are not opposite\")\n"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return 'Both integers are zero.'\n    \n    if x == 0:\n        return 'The first integer is zero and the second integer is positive.'\n    \n    if y == 0:\n        return 'The first integer is positive and the second integer is zero.'\n    \n    if x > 0 and y > 0:\n        return 'Both integers are positive.'\n    \n    if x < 0 and y < 0:\n        return 'Both integers are negative.'\n    \n    if x > 0 and y < 0:\n        return 'The first integer is positive and the second integer is negative.'\n    \n    if x < 0 and y > 0:\n        return 'The first integer is negative and the second integer is positive.'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    # check if both numbers are of same sign\n    if x == 0:\n        return \"Both numbers are of same sign\"\n    if y == 0:\n        return \"Both numbers are of same sign\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return \"Both numbers have opposite signs\"\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 8\n    else:\n        # Calculate the nth octagonal number\n        octagonal_number = 0\n        while octagonal_number <= n:\n            octagonal_number += 8 * n - 1\n        return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a, b = 1, 1\n    while a * a < n:\n        a += 1\n    while b * b < n:\n        b += 1\n    while b < n:\n        if a * a == b * b:\n            return b\n        a += 1\n        b += 1\n    return None\n\nn = int(input(\"Enter a positive integer: \"))\nprint(f\"The {n}th octagonal number is: {is_octagonal(n)}\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(3**(i-1))\n    return octagonal_numbers[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    i = 0\n    while i < n:\n        oct_num += i**3\n        i += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case: 1 is the only octagonal number\n    if n == 1:\n        return 1\n    \n    # find the square root of n\n    sqrt_n = int(n ** 0.5)\n    \n    # find the sum of the squares of the numbers from 1 to sqrt_n\n    squares = sum([i**2 for i in range(1, sqrt_n+1)])\n    \n    # add 8 to the sum to get the nth octagonal number\n    octagonal = squares + 8\n    \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    def is_odd(n):\n        return n % 2 == 1\n\n    def is_hexagonal(n):\n        return is_odd(n) and is_odd(n+1)\n\n    def is_pentagonal(n):\n        return is_odd(n) and is_odd(n-1)\n\n    if is_hexagonal(n):\n        return True\n    elif is_pentagonal(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    This function checks if the given number is octagonal or not.\n    A number is octagonal if it satisfies the following condition: \n    2x^3 + 2y^3 = n^2\n    '''\n    return 2 * n**3 + 2 * n**2 == n**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        # Calculate the position of the current number\n        position = (3*(i*i) - 1) // 2\n\n        # Check if the position is an octagonal number\n        if position == i:\n            print(i)\n            return True\n\n    # If the loop is finished without finding an octagonal number, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define the base and max values for the triangle\n    base = 1\n    max_val = 10000\n\n    # Iterate through the triangle\n    for i in range(1, max_val):\n        # Check if the current value is octagonal\n        if i ** 2 == base + i + i:\n            return True\n\n        # If the value is not octagonal, increment the base\n        base += 1\n\n    # If no octagonal number is found, return False\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # initialize variables\n    octagonal = 1\n    factor = 2\n    pow_factor = 2\n\n    # loop until we reach the nth octagonal number\n    while octagonal <= n:\n        # add the current octagonal number to the sum\n        octagonal += pow_factor\n\n        # calculate the next octagonal number by multiplying the current octagonal number by the factor\n        next_octagonal = octagonal * factor\n\n        # if the next octagonal number is less than or equal to the nth octagonal number, return True\n        if next_octagonal <= n:\n            return True\n\n        # update the variables for the next iteration\n        octagonal = next_octagonal\n        factor += 1\n        pow_factor += 2\n\n    # if we reach this point, the nth octagonal number is not in the given range\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the count of substrings of length i\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the substring has the sum of digits equal to its length\n            if sum([int(c) for c in s[i:j+1]]) == len(s[i:j+1]):\n                count[len(s[i:j+1])] += 1\n\n    # Return the count of substrings with the sum of digits equal to their length\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings[substring] += 1\n\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    char_freq = defaultdict(int)\n    for char in s:\n        char_freq[char] += 1\n    \n    # Initialize a dictionary to store the sum of digits for each substring\n    substring_sum = defaultdict(int)\n    \n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring and calculate its sum of digits\n            substring = s[i:j]\n            substring_sum[substring] = sum(int(digit) for digit in substring)\n    \n    # Count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for substring, sum_digits in substring_sum.items():\n        if sum_digits == len(substring):\n            count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with given length\n    d = defaultdict(int)\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # If the sum of digits of the substring is equal to its length, increment the count in the dictionary\n            if sum(int(digit) for digit in s[i:j]) == j-i:\n                d[j-i] += 1\n    # Return the dictionary of counts\n    return d"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    #convert the string to lowercase\n    s = s.lower()\n\n    #create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    counts = defaultdict(int)\n\n    #loop through all the possible substrings\n    for i in range(len(s)-1):\n        for j in range(i+1, len(s)+1):\n\n            #check if the sum of digits is equal to the length of the substring\n            if sum([int(digit) for digit in s[i:j]]) == len(s[i:j]):\n\n                #increment the count for this substring\n                counts[s[i:j]] += 1\n\n    #return the count of all the substrings\n    return sum(counts.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each digit\n    digit_freq = defaultdict(int)\n\n    # Iterate over each character in the string\n    for char in s:\n        # Convert the character to its digit value\n        digit = int(char)\n\n        # Increment the frequency of the digit\n        digit_freq[digit] += 1\n\n    # Initialize a dictionary to store the count of substrings with the given sum\n    substring_count = defaultdict(int)\n\n    # Iterate over all possible sums of digits\n    for i in range(10):\n        # Check if the current sum of digits is equal to the length of the substring\n        if sum(digit_freq) - i == len(s):\n            # Increment the count of substrings with the given sum\n            substring_count[i] += 1\n\n    # Return the count of substrings with the given sum\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(digit) for digit in s[i:j]) == j - i:\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            digits = sum(int(digit) for digit in substring)\n            if digits == len(substring):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    length = len(s)\n    d = defaultdict(int)\n    for i in range(length):\n        d[s[i]] += 1\n        d[s[i]-'0'] += 1\n\n    for i in range(length):\n        for j in range(i+1, length):\n            if d[s[i]+'0'] > d[s[j]+'0']:\n                count += (d[s[j]+'0'] - d[s[i]+'0'] + 1) * (j-i+1)\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    digit_count = defaultdict(int)\n    n = len(s)\n    count = 0\n    for i in range(n):\n        digit_count[ord(s[i])-ord('0')] += 1\n        \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(digit_count[ord(s[k])-ord('0')]*(k-i+1) for k in range(i, j)) == j-i+1:\n                count += 1\n                \n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        smallest = xs[0]\n        for x in xs:\n            if x < smallest:\n                smallest = x\n        return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        return None\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        smallest = smallest_num(xs[1:])\n        if smallest < xs[0]:\n            return smallest\n        else:\n            return xs[0]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    if len(xs) == 0:\n        raise ValueError(\"Input list is empty\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list\n    for num in xs[1:]:\n        # if the current number is smaller than the smallest number, update the smallest number\n        if num < smallest:\n            smallest = num\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Parameters:\n    test_list (list): A list of tuples containing a first and second element.\n\n    Returns:\n    int: The maximum difference between available pairs in the list.\n    \"\"\"\n\n    # Initialize max_diff to be 0\n    max_diff = 0\n\n    # Loop through the list of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the absolute difference between the elements in each pair\n            diff = abs(test_list[i][1] - test_list[j][1])\n\n            # Update max_diff if necessary\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][1] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff_list.append(abs(test_list[i][1] - test_list[j][1]))\n    return max(diff_list)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples and returns the maximum difference between available pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n\n    # Loop through each pair in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the elements of the pair and append it to the diff_list\n            diff_list.append(abs(test_list[i][1] - test_list[j][1]))\n\n    # Find the maximum value in the diff_list\n    max_diff = max(diff_list)\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize max_diff with the first element of the tuple list\n    max_diff = test_list[0][1] - test_list[0][0]\n\n    # Loop through the tuple list\n    for i in range(len(test_list)-1):\n        # Calculate the difference between current tuple and next tuple\n        diff = test_list[i+1][0] - test_list[i][1]\n        # Update max_diff if current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a dictionary to store the marks and subjects\n    marks = {}\n    for subject, mark in subjectmarks:\n        marks[subject] = mark\n\n    # Create a list of tuples with the marks and subjects\n    marks_list = [(subject, mark) for subject, mark in marks.items()]\n\n    # Sort the list of tuples based on the second value (i.e., the marks)\n    marks_list.sort(key=lambda x: x[1])\n\n    # Return the sorted list of tuples\n    return marks_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # create a new list with tuples sorted by second value\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Define a recursive function to flatten the list and sum its elements\n    def flatten_and_sum(lst):\n        if isinstance(lst, list):\n            return sum([flatten_and_sum(sub_list) for sub_list in lst])\n        else:\n            return lst\n\n    # Flatten the list and sum its elements\n    total_sum = flatten_and_sum(data_list)\n\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(data_list, accumulator=None):\n        if accumulator is None:\n            accumulator = []\n\n        for item in data_list:\n            if isinstance(item, list):\n                flatten(item, accumulator)\n            else:\n                accumulator.append(item)\n\n        return accumulator\n\n    def sum_flattened_list(flattened_list):\n        total = 0\n        for item in flattened_list:\n            total += item\n\n        return total\n\n    flattened_list = flatten(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        if isinstance(lst, list):\n            for item in lst:\n                flatten_list(item)\n        else:\n            yield lst\n\n    def sum_flat_list(lst):\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += sum_flat_list(item)\n            else:\n                total += item\n        return total\n\n    flat_list = list(flatten_list(data_list))\n    return sum_flat_list(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Flatten a list recursively.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    def sum_flat_list(flat_list):\n        '''\n        Sum all the elements in a flattened list.\n        '''\n        return sum(flat_list)\n\n    flattened_list = flatten_list(data_list)\n    return sum_flat_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive case\n    else:\n        head = data_list[0]\n        tail = data_list[1:]\n        \n        # Flatten the tail recursively and sum the elements\n        flattened_tail = recursive_list_sum(tail)\n        \n        # Flatten the head and tail and add them together\n        flattened_head_tail = [head] + flattened_tail\n        \n        # Sum the flattened list\n        flattened_sum = sum(flattened_head_tail)\n        \n        return flattened_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n\n    Args:\n    lst: list of numbers\n\n    Returns:\n    int: number of positive numbers in the list\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    Count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    pos = 0\n    for num in lst:\n        if num > 0:\n            pos += 1\n    return pos"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * (n-1) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    def get_partitions(num):\n        if num == 0:\n            return 1\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return get_partitions(num // 2) + get_partitions((num + 1) // 2)\n        else:\n            return get_partitions((num - 1) // 2) + get_partitions(num // 2)\n\n    return get_partitions(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Calculate the Bell numbers using the formula: B_n = B_{n-1} + B_{n-2}\n    Bell_numbers = [1, 1]\n    for i in range(2, n):\n        Bell_numbers.append(Bell_numbers[i-1] + Bell_numbers[i-2])\n    # Find the number of ways to partition the set of Bell numbers using the formula: sum(1/B_i)\n    return sum([1/B for B in Bell_numbers])"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, k):\n        '''\n        Helper function to find the number of ways to partition a set of Bell numbers.\n        '''\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k > 1:\n            return partition(n-1, k-1) + partition(n-1, k)\n\n    return partition(n, n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        raise ValueError('n must be non-negative')\n    elif n == 0:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": ""
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    :param n: A positive integer representing the number of Bell numbers to be partitioned.\n    :return: An integer representing the number of ways to partition the set of Bell numbers.\n    \"\"\"\n\n    def helper(n, k, memo):\n        \"\"\"\n        Helper function for finding the number of ways to partition the set of Bell numbers.\n\n        :param n: A positive integer representing the number of Bell numbers to be partitioned.\n        :param k: A positive integer representing the number of Bell numbers to be placed in a partition.\n        :param memo: A dictionary to store the results of previous calculations.\n        :return: An integer representing the number of ways to partition the set of Bell numbers.\n        \"\"\"\n        if k == 0:\n            return 1\n        if n < k:\n            return 0\n        if (n, k) in memo:\n            return memo[(n, k)]\n        total = 0\n        for i in range(n - k + 1):\n            total += helper(i, k - 1, memo)\n        memo[(n, k)] = total\n        return total\n\n    return helper(n, n, {})\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Bell numbers are Bernoulli numbers whose values are (2^k) for k>=0\n    # Initialize an array to store the values of Bell numbers up to n\n    bell_numbers = [2**k for k in range(n+1)]\n    # Initialize the count to 0\n    count = 0\n    # Iterate over all possible values of k\n    for k in range(n+1):\n        # Iterate over all possible values of n-k\n        for n_k in range(k, n+1):\n            # If the two values add up to n, increment the count\n            if n_k == k+bell_numbers[n]:\n                count += 1\n    return count"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic or False otherwise.\n    A monotonic array is one where the elements either increase or decrease in the sequence.\n\n    The function first checks if the array is empty or has only one element. If so, the function returns True.\n\n    If the array has more than one element, the function first checks if the array is sorted in ascending or descending order.\n    If it is sorted in ascending order, the function returns True. If it is sorted in descending order, the function returns False.\n\n    If the array is not sorted in either ascending or descending order, the function checks if the first and last elements are equal.\n    If they are equal, the function checks if the remaining elements are also equal or not. If they are all different, the function returns False.\n    If they are all equal, the function checks if the remaining elements are also equal or not. If they are all equal, the function returns True.\n\n    If none of the above conditions are met, the function returns True.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    if A[0] <= A[1]:\n        is_ascending = True\n    else:\n        is_ascending = False\n\n    if is_ascending:\n        for i in range(1, len(A) - 1):\n            if A[i] <= A[i - 1] or A[i] >= A[i + 1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A) - 1):\n            if A[i] >= A[i - 1] or A[i] <= A[i + 1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and checks whether it is monotonic or not. \n    The function returns True if the array is monotonic, otherwise False.\n    '''\n    if len(A) < 2: \n        return True\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]: \n            continue\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    # check for monotonicity of the array\n    if len(A) < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) == 1:\n        return True\n    \n    if A[1] >= A[0]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    n = len(A)\n    if n < 2:\n        return True\n\n    # check if all elements are same\n    if A[0] == A[n-1]:\n        return True\n\n    # check if array is monotonic in increasing order\n    if A[0] <= A[1]:\n        for i in range(1,n-1):\n            if A[i] > A[i+1]:\n                return False\n\n    # check if array is monotonic in decreasing order\n    elif A[0] >= A[1]:\n        for i in range(1,n-1):\n            if A[i] < A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n            if A[i] >= A[i-1]:\n                continue\n    else:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n            if A[i] <= A[i-1]:\n                continue\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if the array is monotonic, and False otherwise.\n    A monotonic array is an array where the elements are in a sequence where each element is either the same or the next element in the sequence.\n    For example, if the array is [1, 2, 3, 4, 5], then it is monotonic because the elements are in a sequence of increasing or decreasing values.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # Initialize variables\n    prev = A[0]\n    \n    # Check if all elements in the array are the same or the next element in the sequence\n    for i in range(1, len(A)): \n        if A[i] > prev: \n            return False\n        prev = A[i]\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A as input and returns True if the array is monotonic and False otherwise.\n    A monotonic array is one where for any i and j, either A[i] < A[j] or A[i] > A[j].\n    '''\n    if len(A) < 2:\n        return True\n    if A[0] == A[-1]:\n        return True\n    if A[0] < A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    \n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    if not s:  # base case\n        return True\n    if not l:  # if the list is empty\n        return False\n    if s[0] == l[0]:  # if the first elements of the lists match\n        if s[:1] == l:  # if the list s is a prefix of the list l\n            return is_sublist(l[1:], s[1:])\n        elif l[:1] == s:  # if the list l is a prefix of the list s\n            return is_sublist(l[1:], s)\n    return is_sublist(l[1:], s)  # otherwise, check the remaining elements of l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n\n    # Check if the length of the sublist is greater than the list\n    if len(s) > len(l):\n        return False\n\n    # Traverse the list from start to end\n    for i in range(len(l)-len(s)+1):\n        # Check if the sublist is present at the current index\n        if l[i:i+len(s)] == s:\n            return True\n\n    # If the sublist is not present in the list, return False\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the input list\n    for i in range(len(Input)):\n        # Check if all the tuples have the same length\n        if len(Input[i])!= len(Input):\n            # If any tuple has a different length, return False\n            return False\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(t) for t in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[count]):\n            count += 1\n        else:\n            return False\n    return True if count == len(Input) else False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n\n    # Initialize a variable to store the result\n    result = True\n\n    # Iterate over all the tuples in the list\n    for i in range(len(Input)):\n        # Check if the length of each tuple is equal\n        if len(Input[i])!= len(Input[0]):\n            # If not, set the result to False\n            result = False\n            break\n\n    # Return the result\n    return result"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    # get the length of the first tuple\n    length = len(Input[0])\n    \n    # loop through all the tuples\n    for i in Input:\n        # check if the length of the current tuple is equal to the length of the first tuple\n        if len(i)!= length:\n            return False\n    \n    # if the loop completes without finding any unequal length tuples, then all tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check if all the tuples have the same length\n    length = len(Input[0])\n    for i in range(1, len(Input)):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    max_iter = len(nums) // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(max_iter):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        max_iter //= 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    step = n\n    while swapped:\n        swapped = False\n        for i in range(step):\n            j = i + step\n            if nums[j] < nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n        step *= 1.3"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        \n        gap = min(gap * 2, n)\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n\n    # initialize variables\n    swapped = True\n    n = len(nums)\n    max_iter = 100\n\n    while swapped and max_iter > 0:\n        swapped = False\n        gap = n // 2\n\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n        n -= gap\n        max_iter -= 1\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    # get length of the list\n    n = len(nums)\n\n    # initialize gap and swapped flag\n    gap = n\n    swapped = True\n\n    while swapped:\n        # set swapped flag to False\n        swapped = False\n\n        # iterate over the list\n        for i in range(gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                # set swapped flag to True\n                swapped = True\n\n        # reduce the gap by half\n        gap = gap // 1.3\n\n        # stop sorting when the gap is less than 1\n        if gap < 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the gap size and the maximum swaps\n    gap = len(nums) // 2\n    swaps = 0\n\n    while gap > 0:\n        # iterate through the list\n        for i in range(len(nums) - gap):\n            # check if the current element is greater than the next element\n            if nums[i] > nums[i + gap]:\n                # swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swaps += 1\n        # shrink the gap size\n        gap = int(gap / 1.3)\n\n    return swaps"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap/1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    for i in range(1, int(n ** 0.5) + 1):\n        if n - i ** 2 == i ** 2:\n            return \"Yes\"\n        elif n - i ** 2 > i ** 2:\n            return \"No\"\n    return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square root of n\n    sqrt_n = int(n**0.5)\n\n    # Iterate over all possible values of i between 0 and sqrt_n\n    for i in range(0, sqrt_n+1):\n        # Calculate the square of i\n        square_i = i*i\n\n        # If i and n-i are both squares, n-i will be the difference\n        if square_i == n-square_i:\n            return True\n\n    # If the function reaches this point, there is no way to represent n as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    for i in range(int(n**0.5)+1):\n        if n - i*i == int(i**0.5)**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is even or not\n    if n%2 == 0:\n        return False\n    \n    # Find the difference of squares\n    sq = int(n**(1/2))\n    sq1 = int((n-sq)**(1/2))\n    sq2 = int((n+sq)**(1/2))\n    \n    # Check if the difference of squares is equal to the original number\n    if sq1**2 == n and sq2**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n % 4 == 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    else:\n        for i in range(1, int(n**0.5) + 1):\n            if (i**2)**2 == n:\n                return f\"The given number is representable as {i} and {n-i}.\"\n            elif (n-i)**2 == i**2:\n                return f\"The given number is representable as {n-i} and {i}.\"\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is a square number\n    if n**0.5 * n**0.5 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Get the square root of n\n    square_root = int(n ** 0.5)\n\n    # Check if the square root is equal to the floor square root of n\n    if square_root ** 2 == n:\n        return \"Yes, it can be represented as the difference of two squares.\"\n    else:\n        return \"No, it cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_square(n):\n    '''\n    Returns True if n is a perfect square, False otherwise.\n    '''\n    return n == int(n**0.5)**2\n\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if is_square(n):\n        return True\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if is_square(i**2 - n):\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_difference_of_squares(n):\n    \"\"\"\n    This function takes an integer as input and checks whether it can be represented as the difference of two squares.\n    \"\"\"\n    # check if n is less than 0\n    if n < 0:\n        return False\n\n    # check if n is equal to 0\n    elif n == 0:\n        return True\n\n    # loop through all possible values of i from 1 to sqrt(n)\n    for i in range(1, int(n**0.5)+1):\n        # check if the square of i can be represented as the difference of two squares\n        if n-i**2 == i**2:\n            return True\n\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the number is positive and less than or equal to 100000\n    if n <= 0 or n > 100000:\n        print(\"Please enter a positive integer less than or equal to 100000\")\n        return None\n    \n    # check if the number is a perfect square\n    if n == int(n**0.5)**2:\n        print(n, \"is a perfect square\")\n        return True\n    \n    # check if the number is a square root of a perfect square\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0 and n // i == i**2:\n            print(n, \"is a square root of a perfect square\")\n            return True\n    \n    # check if the number is a sum of two squares\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                print(n, \"is a sum of two squares\")\n                return True\n    \n    print(n, \"is not a difference of two squares\")\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the count of each pattern\n    pattern_count = {}\n    for pattern in patterns:\n        if pattern in pattern_count:\n            pattern_count[pattern] += 1\n        else:\n            pattern_count[pattern] = 1\n\n    # Compare the colors with the patterns\n    same_patterns = True\n    for i in range(len(colors) - len(patterns) + 1):\n        current_pattern = colors[i:i+len(patterns)]\n        if current_pattern in pattern_count:\n            pattern_count[current_pattern] -= 1\n            if pattern_count[current_pattern] < 0:\n                same_patterns = False\n        else:\n            same_patterns = False\n            break\n\n    return same_patterns"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i, pattern in enumerate(patterns):\n        if colors[i]!= pattern:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if not all(color in colors for color in pattern):\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to store the number of colors for each pattern\n    pattern_colors = {}\n    for pattern in patterns:\n        pattern_colors[pattern] = 0\n\n    # loop through the colors array\n    for color in colors:\n        # if the color is in the patterns array, increment the count in the pattern_colors dictionary\n        if color in pattern_colors:\n            pattern_colors[color] += 1\n        # if the color is not in the patterns array, remove it from the colors array\n        else:\n            colors.remove(color)\n\n    # check if there are any unassigned colors left\n    if colors:\n        return False\n\n    # loop through the pattern_colors dictionary to see if it follows the sequence in the patterns array\n    for i, pattern in enumerate(patterns):\n        if pattern_colors[pattern]!= i:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    # check if the number of colors and patterns are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # iterate through the patterns array\n    for i in range(len(patterns)):\n        # check if the current pattern matches the current color\n        if colors[i]!= patterns[i]:\n            return False\n    \n    # if we make it through the entire loop without returning False, it means the colors and patterns are the same\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # initialize count dictionary for each color\n    color_count = {}\n\n    # iterate through the colors and count them in the color_count dictionary\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n\n    # check whether each pattern matches the color count in the color_count dictionary\n    for pattern in patterns:\n        if not all(color in color_count for color in pattern):\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize variables\n    current_pattern = 0\n    count = 0\n\n    # iterate through the colors array\n    for color in colors:\n        # check if the current color matches the current pattern\n        if color == patterns[current_pattern]:\n            # if it does, increment the count and move to the next pattern\n            count += 1\n            current_pattern = (current_pattern + 1) % len(patterns)\n        # if the count is greater than or equal to the length of the pattern, the colors do not match the patterns\n        elif count >= len(patterns):\n            return False\n    # if the loop completes without finding any mismatches, the colors do match the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two arguments: colors and patterns. colors is a list of color names,\n    and patterns is a list of lists, where each inner list represents a pattern of colors.\n    The function checks whether the colors in the patterns follow the sequence given in the patterns array.\n    '''\n    # Create a dictionary to store the pattern colors\n    pattern_colors = {}\n    \n    # Loop through the patterns and add the colors to the dictionary\n    for pattern in patterns:\n        for color in pattern:\n            pattern_colors[color] = True\n    \n    # Loop through the colors and check if they are present in the pattern dictionary\n    for color in colors:\n        if color not in pattern_colors:\n            return False\n    \n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible, add the tuple to the result list\n            result.append(tup)\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and a number K as input, and returns a list of tuples which have all elements divisible by K from the given list of tuples.\n    '''\n    result = []\n    for tuple_1 in test_list:\n        flag = True\n        for element in tuple_1:\n            if element % K!= 0:\n                flag = False\n                break\n        if flag:\n            result.append(tuple_1)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns a list of tuples that have all elements divisible by k.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            print(tup)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    # create an empty list to store the tuples with all elements divisible by K\n    result = []\n    \n    # loop through each tuple in the test_list\n    for t in test_list:\n        # if all elements of the tuple are divisible by K, add it to the result list\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check whether the number is divisible by 11\n    if n % 11 == 0:\n        print(f\"{n} is divisible by 11.\")\n    else:\n        print(f\"{n} is not divisible by 11.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    if len(s) == 1:\n        return True\n    elif len(s) % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} has an odd length\")\n        else:\n            print(f\"{word} has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    odd_len = []\n    \n    for word in words: \n        if len(word) % 2 == 1: # check if the length of the word is odd\n            odd_len.append(word)\n    \n    return odd_len"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # split the sentence into words\n    words = s.split()\n\n    # iterate over each word and calculate its length\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, 'is an even length.')\n        else:\n            print(word, 'is an odd length.')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f'{word} is even length')\n        else:\n            print(f'{word} is odd length')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 1:\n            print(\"The length of the word is odd.\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    for word in s:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    words = s.split()\n    count = 0\n    for word in words:\n        count += 1\n    if count % 2 == 0:\n        print(f\"{s} is an even length word.\")\n    else:\n        print(f\"{s} is an odd length word.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    # Split the string into words\n    words = s.split()\n\n    # Iterate over each word and check its length\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length\")\n        else:\n            print(word, \"is an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: \n        return f\"The length of the word '{s}' is even.\"\n    else: \n        return f\"The length of the word '{s}' is odd.\""
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 5\n    elif n == 2: \n        return 10\n    elif n == 3: \n        return 15\n    else: \n        return n * (3*n - 1) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    def tetrahedral(n, i=0, prev=0):\n        if i == n:\n            return prev\n        else:\n            return tetrahedral(n, i + 1, prev + i * (4 * i - 3))\n\n    return tetrahedral(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime.\n        \"\"\"\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_armstrong_number(num):\n        \"\"\"\n        A helper function to check if a number is armstrong.\n        \"\"\"\n        total = 0\n        temp = num\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        return num == total\n\n    def generate_tetrahedral_numbers(start):\n        \"\"\"\n        A helper function to generate tetrahedral numbers.\n        \"\"\"\n        tetrahedral_numbers = []\n        num = start\n        while True:\n            if is_prime(num) and is_armstrong_number(num):\n                tetrahedral_numbers.append(num)\n            num += 1\n        return tetrahedral_numbers\n\n    def find_nth_tetrahedral_number(n):\n        \"\"\"\n        A helper function to find the nth tetrahedral number.\n        \"\"\"\n        return generate_tetrahedral_numbers(n)[-1]\n\n    return find_nth_tetrahedral_number(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize the first three tetrahedral numbers\n    tetra = [1, 6, 24, 120]\n    \n    # Check if n is valid\n    if n < 0 or n > len(tetra):\n        return \"Invalid input.\"\n    \n    # Return the nth tetrahedral number\n    return tetra[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the sum of the first n Fibonacci numbers\n    first_n_fibonacci = [1, 1]\n    for i in range(2, n):\n        first_n_fibonacci.append(first_n_fibonacci[i-1] + first_n_fibonacci[i-2])\n\n    # Define the sum of the first n tetrahedral numbers\n    first_n_tetrahedral = [1, 1]\n    for i in range(2, n):\n        first_n_tetrahedral.append(first_n_tetrahedral[i-1] + first_n_tetrahedral[i-2] + first_n_fibonacci[i-1] + first_n_fibonacci[i-2])\n\n    return first_n_tetrahedral[n-1]"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        raise ValueError('n must be positive.')\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return (2 * n - 1) * tetrahedral_number(n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (2 * n + 1) / 6"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    area = (4/3) * math.pi * r * r * r\n    volume = (4/3) * math.pi * r * r * r\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    pi = math.pi\n    volume = (4/3) * pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4.0 / 3.0 * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    # initialize the result string with the first character of the string\n    result = strr[0]\n    # loop over all the characters of the string starting from the second one\n    for char in strr[1:]:\n        # convert the character to its ASCII value\n        ascii_val = ord(char)\n        # add the ASCII value to the result modulo 26\n        result += chr((ascii_val - 96) % 26 + 97)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII value of each character to 0\n    sum_char = 0\n    # Iterate through each character of the string\n    for char in strr:\n        # Convert the character to ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the sum of ASCII value of each character\n        sum_char += ascii_val\n    # Find the character by taking the ASCII value modulo 26\n    char_val = sum_char % 26\n    # Convert the ASCII value back to the corresponding character and return it\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert the string to uppercase to remove case sensitivity\n    strr = strr.upper()\n    # initialize the result variable\n    result = 0\n    # loop through the characters of the string and add their ASCII values to the result variable\n    for char in strr:\n        result += ord(char)\n    # return the character made by adding the ASCII values of all the characters of the string modulo 26\n    return chr((result % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # convert string to list of characters\n    str_list = list(strr)\n\n    # initialize the sum of ASCII values to 0\n    sum_ascii = 0\n\n    # loop through each character in the string\n    for char in str_list:\n        # convert each character to its ASCII value\n        ascii_value = ord(char)\n\n        # add the ASCII value to the sum of ASCII values\n        sum_ascii += ascii_value\n\n    # find the character made by adding the ASCII value of all the characters of the given string modulo 26\n    char_made = chr((sum_ascii % 26) + ord('a'))\n\n    # return the character made\n    return char_made"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the ASCII value of each character\n    ascii_val = \"\"\n\n    # Loop through each character in the given string\n    for char in strr:\n        # Convert each character to its ASCII value and append it to the ascii_val string\n        ascii_val += str(ord(char))\n\n    # Convert the ascii_val string to an integer and add the ASCII value of each character modulo 26\n    result = int(ascii_val)\n    for i in range(len(strr)):\n        result += ord(strr[i])\n        if result >= 97 and result < 123:\n            result = result - 97\n            break\n\n    # Convert the integer back to a character and return it\n    return chr(result)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr((total % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    # Convert the string to a list of ASCII codes\n    ascii_codes = [ord(c) for c in strr]\n\n    # Compute the sum of all ASCII codes modulo 26\n    sum_ascii_codes = sum(ascii_codes) % 26\n\n    # Convert the sum back to a character by taking the ASCII value modulo 26\n    return chr(sum_ascii_codes)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr(((sum % 26) + 65))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(3 * sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sum(sequence[-2:]))\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with the first two numbers\n    sequence = [1, 2]\n\n    # loop through the remaining n-2 numbers\n    for i in range(3, n+1): \n        # if the current number is even, add it to the sequence\n        if i % 2 == 0: \n            sequence.append(i) \n        # if the current number is odd, find the previous even number in the sequence\n        else: \n            # if there is no even number in the sequence, return -1\n            if sequence[0] % 2!= 0: \n                return -1 \n            # find the previous even number in the sequence\n            for j in range(1, len(sequence)): \n                if sequence[j] % 2 == 0: \n                    # add the previous even number to the sequence\n                    sequence.append(sequence[j-1]) \n                    # break out of the loop\n                    break "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence \n    sequence = [0] * n \n\n    # set the starting number of the sequence \n    sequence[0] = 1 \n\n    # iterate over the sequence to generate the next number \n    for i in range(1, n): \n\n        # calculate the next number in the sequence \n        next_number = sequence[i] * 2 \n\n        # check if the next number is greater than the maximum number \n        if next_number > 9: \n\n            # set the next number to 0 \n            next_number = 0 \n\n        # add the next number to the sequence \n        sequence.append(next_number) \n\n    # return the nth number in the sequence \n    return sequence[n-1] \n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1, 0, 1]\n    for i in range(n-1):\n        sequence = [sequence[i], sequence[i+1]] + sequence[i+2:]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence with the first number\n    sequence = [1]\n    # keep track of the previous numbers in the sequence\n    prev_numbers = [1]\n    # keep track of the current number being generated\n    current_number = 1\n    # loop through the sequence until we reach the nth number\n    for i in range(1, n):\n        # generate the next number in the sequence by adding the previous two numbers\n        next_number = current_number + prev_numbers[-1]\n        # add the new number to the sequence and the previous numbers to the list\n        sequence.append(next_number)\n        prev_numbers.append(current_number)\n        # update the current number for the next iteration\n        current_number = next_number\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(4*sequence[-1] - sequence[-2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence to be the first n terms of the sequence\n    sequence = [1]\n    # Check if the given number is in the sequence or not\n    if n in sequence:\n        # If it is, return the given number\n        return n\n    # If the given number is not in the sequence, generate the next number in the sequence\n    else:\n        # Generate the next number in the sequence\n        next_number = (2 * sequence[0] + 1) % 2\n        # Add the next number to the sequence and return it\n        sequence.append(next_number)\n        return next_number"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1, 1] # start with 0, 1, 1\n    for i in range(2, n): # loop n-2 times to get to n-1\n        new_sequence = []\n        for j in range(len(sequence)):\n            if sequence[j] == 0:\n                new_sequence.append(0)\n            elif sequence[j] == 1:\n                new_sequence.append(sequence[j] + sequence[j+1])\n        sequence = new_sequence\n    return sequence[-1] # return the last element in the sequence"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r ** 3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4*math.pi*r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere.\n    \n    Args:\n    r (float): radius of the sphere\n    \n    Returns:\n    float: surface area of the sphere in square units (m^2)\n    '''\n    \n    # pi is a mathematical constant, approximately equal to 3.1415926...\n    pi = math.pi\n    \n    # surface area of a sphere is 4*pi*r^2\n    surface_area = 4*pi*r**2\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    S = 4*math.pi*r**2\n    return S"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * r**3\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # First centered hexagonal number is 3\n    if n == 1:\n        return 3\n    # Calculating the value of 2^n - 1 and 2^(n-1) - 1\n    x = 2**n - 1\n    y = 2**(n-1) - 1\n    # Returning the value of the centered hexagonal number\n    return (x + y) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 6 * (n-1) + centered_hexagonal_number(n-1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the base and edge values\n    base = 1\n    edge = 1.61803398875\n\n    # Calculate the centered hexagonal number\n    centered_hexagonal = base + (edge * (n-1))\n\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n % 2 == 0:\n        return 4*n**2 + 1\n    else:\n        return 4*n**2 - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Find the number of hexagons to the left and right of n\n    # (centered hexagons have odd numbers of right and left neighbors)\n    left_neighbors = n % 2\n    right_neighbors = n % 2 + 1\n\n    # Calculate the number of hexagons to the left and right of n in an array\n    hexagon_neighbors = [left_neighbors, right_neighbors]\n\n    # Calculate the centered hexagonal number by adding up the number of\n    # hexagons to the left and right of n and adding the number of hexagons\n    # to the left of n times the number of hexagons to the right of n\n    centered_hexagonal = n + hexagon_neighbors[0] + hexagon_neighbors[1]\n\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    if n == 2:\n        return 8\n    return (n * (n - 1) * (2 * n - 1)) // 6"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    hexagonal_sequence = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153, 171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465, 496, 528, 561, 595, 630, 666, 703, 741, 780, 820, 861, 903, 946, 990, 1035, 1081, 1128, 1176, 1225, 1275, 1326, 1378, 1431, 1485, 1540, 1596, 1653, 1711, 1770, 1830, 1891, 1953, 2016, 2080, 2145, 2211, 2278, 2346, 2415, 2485, 2556, 2628, 2701, 2775, 2850, 2926, 3003, 3081, 3160, 3240, 3321, 3403, 3486, 3570, 3655, 3741, 3828, 3916, 4005, 4095, 4186, 4278, 4371, 4465, 4560, 4656, 4753, 4851, 4950, 5050, 5151, 5253, 5356, 5460, 5565, 5671, 5778, 5886, 5995, 6105, 6216, 6328, 6441, 6555, 6670, 6786, 6903, 7021, 7140, 7260, 7381, 7503, 7626, 7750, 7875, 8001, 8128, 8256, 8385, 8515, 8646, 8778, 8911, 9045, 9180, 9316, 9453, 9591, 9730, 9870, 10011, 10153, 10296, 10440, 10585, 10731, 10878, 11026, 11175, 11325, 11476, 11628, 11781, 11935, 12090, 12246, 12403, 12561, 12720, 12880, 13041, 13203, 13366, 13"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n\n    for i in range(n):\n        temp = a + b + c\n        a = b\n        b = c\n        c = temp\n\n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # first centered hexagonal number\n    centered_hexagonal = 1\n    \n    # loop through each row\n    for i in range(1, n+1):\n        # loop through each hexagon in the row\n        for j in range(1, i+1):\n            # add the centered hexagonal number to the sum\n            centered_hexagonal += centered_hexagonal\n    \n    # subtract the first centered hexagonal number from the total sum\n    return centered_hexagonal - centered_hexagonal + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 8\n    c = 27\n    d = 64\n    \n    for i in range(1, n+1):\n        centered_hexagonal = (a + (i * b)) / 2\n        print(\"The centered hexagonal number\", i, \"is:\", centered_hexagonal)\n        \n        a = centered_hexagonal\n        b = c\n        c = d\n        d = (a + (i * b)) / 2"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = dict1.copy()  # make a copy of dict1\n    merged_dict.update(dict2)   # update merged_dict with dict2\n    merged_dict.update(dict3)   # update merged_dict with dict3\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Combine the two dictionaries into a single dictionary using the update() method\n    combined_dict = {**dict1, **dict2}\n    \n    # Combine the two combined dictionaries into a single dictionary using the update() method\n    combined_dict = {**combined_dict, **dict3}\n\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = ct.defaultdict(dict)\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to hold the final result\n    merged_dict = {}\n\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # If the key is not already in the merged dictionary, add it and set its value to the value from the first dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n        # If the key is already in the merged dictionary, add its value to the value from the first dictionary\n        else:\n            merged_dict[key] += dict1[key]\n\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # If the key is not already in the merged dictionary, add it and set its value to the value from the second dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        # If the key is already in the merged dictionary, add its value to the value from the second dictionary\n        else:\n            merged_dict[key] += dict2[key]\n\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # If the key is not already in the merged dictionary, add it and set its value to the value from the third dictionary\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n        # If the key is already in the merged dictionary, add its value to the value from the third dictionary\n        else:\n            merged_dict[key] += dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = collections.defaultdict(int)\n    \n    # iterate through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        freq[element] += 1\n    \n    # return the dictionary containing the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int) # Using the defaultdict from the collections module\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.defaultdict(int)\n    for num in lst:\n        freq_dict[num] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for elem in list1:\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = [i for i in range(N)]\n    num_list.sort()\n    closest_num = num_list[1]\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    smallest_num = N\n    smallest_diff = abs(N - smallest_num)\n\n    # Find the smallest number smaller than N\n    for i in range(1, N):\n        if N - i < smallest_num:\n            smallest_num = N - i\n            smallest_diff = abs(N - smallest_num)\n\n    # Return the smallest number smaller than N\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # initialize variables\n    min_diff = float('inf')\n    closest_num = None\n\n    # loop through all numbers from 1 to N\n    for num in range(1, N+1):\n        # calculate difference between num and N\n        diff = abs(num - N)\n\n        # check if the difference is smaller than min_diff so far\n        if diff < min_diff:\n            # if it is, update min_diff and closest_num\n            min_diff = diff\n            closest_num = num\n\n    # return closest_num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    closest = N\n    \n    for num in range(1, N):\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n            \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = min(N, 1)\n    for i in range(2, N+1):\n        if i % 2 == 0:\n            smaller = min(smaller, i)\n        else:\n            smaller = min(smaller, i+1)\n    return smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N as input and returns the closest smaller number than N.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    \n    for i in range(1, N+1):\n        if abs(i-N) < abs(smallest):\n            closest = smallest\n            smallest = i\n        elif abs(i-N) < abs(closest):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    # initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    \n    # iterate through the numbers 1 to N\n    for i in range(1, N+1):\n        # calculate the absolute difference between the current number and N\n        diff = abs(N - i)\n        \n        # if the current difference is smaller than the smallest difference found so far, update smallest and closest\n        if diff < smallest:\n            smallest = diff\n            closest = i\n    \n    # return the closest smaller number than N\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = N\n    closest = n\n    for i in range(1, N):\n        if i > closest:\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest = N\n\n    while n >= 1:\n        if n - closest < closest - n:\n            closest = n\n        n -= 1\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n\n    for i in range(N):\n        num = int(input(\"Enter a number: \"))\n        if num < smallest:\n            closest = smallest\n            smallest = num\n        elif num < closest:\n            closest = num\n\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = 0\n    word = ''\n\n    # loop through the list\n    for i in list1:\n        # check if the current word is longer than the previous longest word\n        if len(i) > longest:\n            longest = len(i)\n            word = i\n\n    # return the longest word\n    return word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n\n    max_length = 0\n    \n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # If the sub_str is not present in the str1, return False\n    if sub_str not in str1:\n        return False\n\n    # If the sub_str is present in the str1, check if it is present in all the strings in the list\n    for item in str1:\n        if sub_str in item:\n            return True\n\n    # If the sub_str is present in the str1 and also present in all the strings in the list, return True\n    return True"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert sub_str to list to make it iterable\n    sub_str = list(sub_str)\n    \n    # Loop through each string in the list\n    for string in str1:\n        # Check if string is a substring of sub_str\n        if string in sub_str:\n            # If it is, return True\n            return True\n    \n    # If no string in the list is a substring of sub_str, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the substring is present in the given string\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Convert the string into a list of strings\n    lst = str1.split()\n    # Iterate over the list of strings\n    for s in lst:\n        # Check if the substring is present in the current string\n        if sub_str in s:\n            return True\n    # If the substring is not found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes in two strings: str1 and sub_str. It checks if the first string contains the second string as a substring.\n\n    Parameters:\n    str1: A string that we want to check if it contains the second string as a substring.\n    sub_str: A string that we want to check if it is present in the first string.\n\n    Returns:\n    A boolean value indicating whether the first string contains the second string as a substring.\n\n    Raises:\n    TypeError: If str1 is not a string or sub_str is not a string.\n    \"\"\"\n    if not isinstance(str1, str) or not isinstance(sub_str, str):\n        raise TypeError(\"Both str1 and sub_str must be strings.\")\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Check if the number is odd\n    if n % 2 == 1:\n        # If the number is odd, check if it is a prime number\n        is_prime = True\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return True\n        else:\n            return False\n    else:\n        # If the number is even, it is not undulating\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check for even numbers\n    if n % 2 == 0:\n        return False\n\n    # check for prime factors\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    elif n == 1 or n == 3 or n == 5 or n == 7:\n        return True\n    elif n > 7:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    This function takes a positive integer n as input and returns True if it is undulating, else False.\n    A number is considered undulating if the sum of its odd digits is equal to the sum of its even digits.\n    '''\n    # Convert the integer to a string\n    str_n = str(n)\n    \n    # Initialize variables for sum of odd and even digits\n    sum_odd = 0\n    sum_even = 0\n    \n    # Iterate through each digit of the string\n    for digit in str_n:\n        # Check if the digit is odd or even\n        if int(digit) % 2 == 0:\n            # Add the even digit to the sum\n            sum_even += int(digit)\n        else:\n            # Add the odd digit to the sum\n            sum_odd += int(digit)\n            \n    # Compare the sums of odd and even digits\n    if sum_odd == sum_even:\n        # Return True if the sums are equal, else False\n        return True\n    else:\n        # Return False if the sums are not equal\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n <= 1:\n        return True\n\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    If the number is divisible by 13, it is undulating, otherwise, it is not.\n    '''\n    if n % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the given number is even or odd\n    if n % 2 == 0:\n        # If it is even, check if it is divisible by 3 or not\n        if n % 3 == 0:\n            return True\n        else:\n            return False\n    else:\n        # If it is odd, check if it is divisible by 2 or 3 or not\n        if n % 2 == 0:\n            if n % 3 == 0:\n                return True\n            else:\n                return False\n        else:\n            if n % 3 == 0:\n                return True\n            else:\n                return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return 'Not undulating'\n    else:\n        return 'Undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    while b>0:\n        if b%2==1:\n            result = result*a\n        a = a*a\n        b = b//2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result\n\nprint(power(2, 3)) # Output: 8\nprint(power(3, 4)) # Output: 81"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int/float): the base of the exponentiation.\n    b (int): the exponent of the base.\n\n    Returns:\n    float: the value of 'a' to the power 'b'.\n    \"\"\"\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    \n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Using the sorted function to sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Extracting the first value of each tuple and returning the index of the first occurrence of the minimum value\n    return sorted_list.index(min(test_list, key=itemgetter(0)))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for lst in lst:\n        if len(lst) < min_len:\n            min_len = len(lst)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  \n    for lst in lst:  \n        if len(lst) < min_length:  \n            min_length = len(lst)  \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = lst[0][0]\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n\n    min_length = len(lst[0])\n\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(smallest):\n            smallest = lst[i]\n    return len(smallest)"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    if len(lst) == 0:\n        return 0\n    else:\n        min_len = Find_Min_Length(lst[1:])\n        if len(lst[0]) < min_len:\n            return len(lst[0])\n        else:\n            return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf') #initialize min_length to infinity\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Initialize min_length to the length of the first list\n    min_length = len(lst[0])\n    \n    # Loop through each list in the list of lists\n    for lst in lst:\n        \n        # Check if the length of the current list is smaller than the current min_length\n        if len(lst) < min_length:\n            min_length = len(lst)\n    \n    # Return the min_length\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize a boolean array \"prime[0..n]\" and\n    # \"prime[i] = true\" if i is prime, else false.\n    # Initialize all entries it as true.\n    prime = [True for i in range(n+1)]\n    p = 2\n    while (p**2 <= n):\n        # If prime[p] is not changed, then it is a prime\n        if (prime[p] == True):\n            # Update all multiples of p\n            for i in range(p**2, n+1, p):\n                prime[i] = False\n        p += 1\n\n    # Initialize count\n    count = 0\n    # Iterate over all numbers from 2 to n\n    for i in range(2, n+1):\n        # If prime[i] is changed, then i is a divisor of n\n        if prime[i]:\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize the list of numbers to be checked\n    numbers = list(range(1, n+1))\n    # Initialize a boolean array to keep track of the divisors\n    divisors = [True] * (n+1)\n    # Initialize the index of the first number to be checked\n    i = 2\n    while i*i <= n:\n        # Check if the current number is a divisor\n        if divisors[i]:\n            # If it is, mark its multiples as non-divisors\n            for j in range(i*i, n+1, i):\n                divisors[j] = False\n        # Move to the next number to be checked\n        i += 1\n    # Count the number of divisors\n    count = 0\n    for number in numbers:\n        if divisors[number]:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    A divisor of an integer n is an integer x such that n = p * x.\n    '''\n    divisors = 1\n    for i in range(2, n):\n        if n % i == 0:\n            divisors += 1\n    return divisors"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists into a single list\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    frequency_dict = {}\n    \n    # Iterate over each element in the flattened list\n    for element in flat_list:\n        # Check if the element is already in the dictionary\n        if element in frequency_dict:\n            # Increment the frequency of the element\n            frequency_dict[element] += 1\n        else:\n            # Add the element to the dictionary with a frequency of 1\n            frequency_dict[element] = 1\n    \n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flattened = [item for sublist in list1 for item in sublist]\n    \n    # Create a dictionary to store the frequency of each element\n    frequency = {}\n    \n    # Iterate over the flattened list and update the frequency dictionary\n    for item in flattened:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    \n    # Return the frequency dictionary\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        for subelem in elem:\n            if subelem in freq:\n                freq[subelem] += 1\n            else:\n                freq[subelem] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary\n    freq_dict = {}\n\n    # loop through each element in the list\n    for elem in list1:\n        # check if the element is in the dictionary\n        if elem in freq_dict:\n            # if it is, increment its frequency\n            freq_dict[elem] += 1\n        else:\n            # if it's not, add it to the dictionary with a frequency of 1\n            freq_dict[elem] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store frequency of each element\n    freq_dict = {}\n\n    # Iterate through the flattened list and update the frequency of each element\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    # Create an empty dictionary\n    freq_dict = {}\n    \n    # Loop through each element in the flattened list\n    for element in list1:\n        # If the element is already in the dictionary, increment its frequency\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[element] = 1\n    \n    # Return the dictionary of frequency\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Iterate over each element in the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq_dict:\n            # Increment the count of the element in the dictionary\n            freq_dict[element] += 1\n        else:\n            # Add the element to the dictionary with a count of 1\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for elem in lst:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product // len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_str = \"\"\n    while n > 0: \n        remainder = n % 2 \n        binary_str = str(remainder) + binary_str \n        n = n // 2 \n    return binary_str "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n //= 2\n    return binary_num[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to hold the binary number\n    binary = ''\n\n    # Loop until n becomes zero\n    while n > 0:\n        # Extract the last digit of n\n        digit = n % 2\n\n        # Append the digit to the beginning of the binary string\n        binary = str(digit) + binary\n\n        # Remove the last digit of n\n        n //= 2\n\n    # Return the binary string without any leading zeros\n    return binary if binary[0] == '0' else binary[1:]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = ''\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n //= 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize an empty string to store the binary equivalent of the number\n    binary_str = \"\"\n\n    # Convert the decimal number to binary recursively\n    def convert_decimal(num, length):\n        # If the number is zero, append a zero to the binary string and return\n        if num == 0:\n            binary_str += \"0\"\n            return length\n\n        # Convert the last digit of the number to binary and append it to the binary string\n        last_digit = num % 2\n        binary_str += str(last_digit)\n\n        # Recursively convert the remaining digits of the number\n        num //= 2\n        length += 1\n        return convert_decimal(num, length)\n\n    # Call the recursive function to convert the decimal number to binary\n    length = convert_decimal(n, 0)\n\n    # If the length of the binary string is not a multiple of 4, pad it with zeros\n    if length % 4!= 0:\n        binary_str += \"0\" * (4 - length % 4)\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    if is_palindrome(num):\n        while True:\n            num += 1\n            if is_palindrome(num):\n                return num - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Find the smallest palindrome greater than or equal to the original number\n    for i in range(10**len(num_str), 10**(len(num_str)+1), -1):\n        if is_palindrome(str(i)) and int(str(i)) >= int(num_str):\n            return int(str(i))\n\ndef is_palindrome(s):\n    '''\n    Helper function to check if a string is a palindrome.\n    '''\n    return s == s[::-1]\n\nif __name__ == \"__main__\":\n    # Test cases\n    print(next_smallest_palindrome(123)) # Should print 121\n    print(next_smallest_palindrome(10)) # Should print 11\n    print(next_smallest_palindrome(100)) # Should print 101\n    print(next_smallest_palindrome(9999)) # Should print 10000\n    print(next_smallest_palindrome(123456789)) # Should print 123456788\n    ```\n\nHere's how it works:\n\n1. The input integer is first converted to a string and reversed using slicing.\n2. A loop is started with the range function, starting from 10^len(num_str), ending at 10^(len(num_str)+1), and decrementing by 1 in each iteration. This gives us a list of numbers to check for palindromes.\n3. In each iteration, the number is converted to a string and checked if it's a palindrome using the is_palindrome function. If it is, and its value is greater than or equal to the original number, it is returned as the next smallest palindrome.\n\nNote that this function uses a helper function called is_palindrome to check if a string is a palindrome. This function simply reverses the string and checks if the reversed string is equal to the original string."
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of a specified integer as an integer.\n    \"\"\"\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Check if the reversed string is palindrome\n    if num_str == rev_str:\n        # Check for the next smallest palindrome\n        for i in range(10, 100):\n            if i < 1000:\n                if str(i) + str(i) == rev_str:\n                    return i\n                elif str(i) + str(i) + str(i) == rev_str:\n                    return i + 1\n\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(n):\n        \"\"\"\n        Helper function to check if a given integer is palindrome or not.\n        \"\"\"\n        if n < 0:\n            return False\n        rev_n = 0\n        while n > 0:\n            rem = n % 10\n            rev_n = (rev_n * 10) + rem\n            n = n // 10\n        return n == rev_n\n\n    def next_palindrome(n):\n        \"\"\"\n        Helper function to find the next smallest palindrome of a given integer.\n        \"\"\"\n        while True:\n            n += 1\n            if is_palindrome(n):\n                return n\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a given integer is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def smallest_prime_palindrome(n):\n        \"\"\"\n        Helper function to find the smallest prime palindrome less than or equal to a given integer.\n        \"\"\"\n        while not is_prime(n):\n            n += 1\n        return n\n\n    def next_smallest_palindrome_helper(n):\n        \"\"\"\n        Helper function to find the next smallest palindrome of a given integer.\n        \"\"\"\n        if n < 10:\n            return str(n)\n        else:\n            if not is_prime(n):\n                n = smallest_prime_palindrome(n)\n            return next_palindrome(n)\n\n    next_num = int(next_smallest_palindrome_helper(num))\n    return next_num\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    max_num = 10**(len(str(num))+1) # find the maximum possible integer that can be represented as num+1 digits\n    min_num = 10**(len(str(num))-1) # find the minimum possible integer that can be represented as num digits\n    \n    for i in range(max_num, min_num, -1):\n        if is_palindrome(i):\n            if i >= num and is_palindrome(i+1):\n                return i+1\n            \n    return None\n\ndef is_palindrome(num):\n    '''\n    A function to check if a number is palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if input is valid\n    if type(num)!= int:\n        return \"Invalid input. Please enter an integer.\"\n\n    # Initialize variables\n    smallest_palindrome = 0\n    current_number = 0\n    is_palindrome = True\n    has_found_smallest_palindrome = False\n\n    # Check if the input is a palindrome\n    if is_palindrome(num):\n        current_number = num - 1\n    else:\n        current_number = num\n\n    # Loop until we find the smallest palindrome\n    while not has_found_smallest_palindrome:\n        # Check if the current number is a palindrome\n        if is_palindrome(current_number):\n            smallest_palindrome = current_number\n            has_found_smallest_palindrome = True\n        else:\n            # Check the next number\n            current_number += 1\n\n        # Check if the maximum number has been reached\n        if current_number > num:\n            has_found_smallest_palindrome = True\n\n    return smallest_palindrome\n\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Convert the reversed number back to an integer and compare it to the original number\n    return int(reversed_num) == num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    # Convert integer to string and reverse it\n    s = str(num)[::-1]\n    \n    # Convert string to integer and add 1\n    next_num = int(s) + 1\n    \n    # Check if the next number is a palindrome\n    is_palindrome = s == str(next_num)[::-1]\n    \n    # If the next number is not a palindrome, return the original number\n    if not is_palindrome:\n        return num\n    \n    # If the next number is a palindrome, return the next smallest palindrome\n    while True:\n        s = str(next_num)[::-1]\n        next_num += 1\n        is_palindrome = s == str(next_num)[::-1]\n        if is_palindrome:\n            break\n    \n    return next_num - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Find the length of the string\n    len_str = len(num_str)\n\n    # If the length of the string is odd, reverse the string and add a 0 at the end\n    if len_str % 2!= 0:\n        num_str = num_str[::-1] + '0'\n\n    # Convert the string to an integer\n    num_int = int(num_str)\n\n    # Find the largest palindrome less than the input integer\n    largest_palindrome = num_int - 1\n\n    # Find the smallest palindrome greater than the input integer\n    smallest_palindrome = num_int + 1\n\n    # Loop through the palindromes from largest to smallest\n    while largest_palindrome >= smallest_palindrome:\n\n        # Calculate the middle integer of the palindrome range\n        middle = (largest_palindrome + smallest_palindrome) // 2\n\n        # Check if the middle integer is a palindrome\n        middle_str = str(middle)\n        if middle_str == middle_str[::-1]:\n\n            # If it is, check if it is smaller than the current largest palindrome\n            if int(middle_str) < largest_palindrome:\n                smallest_palindrome = middle\n\n        # If the middle integer is not a palindrome, update the largest palindrome\n        else:\n            largest_palindrome = middle\n\n    # Return the smallest palindrome greater than the input integer\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # check if input is a positive integer\n    if not isinstance(num, int) or num <= 0:\n        return None\n    # convert input integer to string\n    num_str = str(num)\n    # check if palindrome is smaller than input integer\n    if is_palindrome(num_str) and int(num_str) > num:\n        return int(num_str)\n    # check for smallest palindrome greater than input integer\n    else:\n        # convert input integer to list of digits\n        num_list = [int(digit) for digit in num_str]\n        # check for smallest palindrome greater than input integer\n        for i in range(len(num_list)):\n            for j in range(i, len(num_list)):\n                # calculate palindrome from left and right indices\n                palindrome = int(''.join(map(str, num_list[i:j+1])))\n                # check if palindrome is smaller than input integer\n                if is_palindrome(str(palindrome)) and palindrome > num:\n                    # return palindrome as integer\n                    return palindrome\n\ndef is_palindrome(s):\n    \"\"\"\n    Check if a string is a palindrome.\n    \"\"\"\n    # convert string to list of characters\n    s_list = list(s)\n    # check if string is a palindrome\n    return s_list == s_list[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    reversed_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        reversed_num = reversed_num * 10 + digit\n        temp //= 10\n    return reversed_num == num\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num + 1\n    \n    if num % 10 == 0:\n        return next_smallest_palindrome(num + 1)\n    \n    for i in range(10, 0, -1):\n        temp = num * 10 + i\n        if is_palindrome(temp):\n            return temp\n    \n    return 1000\n\nif __name__ == \"__main__\":\n    if len(sys.argv) == 2:\n        num = int(sys.argv[1])\n        print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    # check if k is valid\n    if k < 1 or k > n:\n        raise ValueError(\"k is out of range\")\n\n    # find the pivot index\n    pivot_index = k - 1\n    # initialize variables\n    left = 0\n    right = n - 1\n    # swap the pivot element with the last element\n    arr[pivot_index], arr[right] = arr[right], arr[pivot_index]\n\n    # loop through the array and partition it\n    for i in range(left, right):\n        if arr[i] < arr[right]:\n            arr[left], arr[i] = arr[i], arr[left]\n            left += 1\n\n    # return the kth element\n    return arr[left]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # Check if the array is empty\n    if not arr:\n        return \"Error: empty array\"\n    \n    # Check if the index is valid\n    if k < 1 or k > len(arr):\n        return \"Error: invalid index\"\n    \n    # Iterate through the array and return the kth element\n    for i, num in enumerate(arr, start=1):\n        if i == k:\n            return num\n    return \"Error: kth element not found\""
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if not arr:\n        return None\n    \n    # Calculate the length of the array\n    length = len(arr)\n    \n    # Check if k is valid\n    if k < 1 or k > length:\n        return None\n    \n    # Find the kth element using binary search\n    left, right = 1, length\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the mid element is the kth element, return it\n        if mid == k:\n            return arr[mid - 1]\n        \n        # If the mid element is smaller than k, search in the right half\n        elif mid < k:\n            left = mid + 1\n        \n        # If the mid element is larger than k, search in the left half\n        else:\n            right = mid - 1\n    \n    # If the while loop ends and the element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    # check if the array is empty\n    if len(arr) == 0:\n        return None\n    # check if the k is 1-based or not\n    if k < 1:\n        return None\n    # find the length of the array\n    n = len(arr)\n    # find the number of elements in the first half of the array\n    half = n // 2\n    # if k is less than or equal to the number of elements in the first half,\n    # find the kth element in the first half of the array\n    if k <= half:\n        return arr[k-1]\n    # if k is greater than the number of elements in the first half,\n    # find the kth element in the second half of the array\n    else:\n        # find the index of the first element in the second half\n        index = half + 1\n        # initialize the count of elements in the first half to 0\n        count = 0\n        # iterate through the array from the first element to the nth element\n        for i in range(n):\n            # if the element is greater than the kth element,\n            # increment the count and move to the next element\n            if arr[i] > arr[half]:\n                count += 1\n                # if the count is equal to k, return the kth element\n                if count == k:\n                    return arr[i]\n                # if the count is greater than k, move to the next element\n                elif count > k:\n                    break\n        # if the loop completes without returning the kth element, return None\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k == mid + 1:\n            return arr[mid]\n        elif k < mid + 1:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid:], k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    if k > len(arr):\n        raise ValueError(\"The index k is greater than the length of the array.\")\n\n    # Use binary search to find the kth element\n    left, right = 1, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid-1] == k:\n            return arr[mid-1]\n        elif arr[mid-1] < k:\n            left = mid\n        else:\n            right = mid\n\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid or not\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n\n    # Initialize variable to keep track of index\n    index = 1\n\n    # Iterate through the array and find the kth element\n    for i in arr:\n        if index == k:\n            return i\n        index += 1\n\n    # If k is not found, return \"Element not found\"\n    return \"Element not found\""
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words using underscore as separator\n    words = word.split('_')\n    # Initialize an empty string to store the camel case version of the word\n    camel_case_word = ''\n    # Iterate over each word in the split words list\n    for word in words:\n        # Capitalize the first letter of each word\n        camel_case_word += word.capitalize()\n    # Return the camel case version of the word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for char in word:\n        if char.isupper():\n            camel_case += char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into a list of words using spaces as a separator\n    words = word.split()\n    # capitalize the first letter of each word except the first word\n    capitalized_words = [word[0].upper() + word[1:].lower() for word in words[1:]]\n    # join the capitalized words with underscores\n    camel_case_word = ''.join(capitalized_words)\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the input string into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them back together with underscores\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the input string to a list of words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except the first one\n    camel_words = [word.capitalize() for word in words[1:]]\n\n    # Join the camel case words with a hyphen\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += '_' + word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    return ''.join(camel_case_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif i == len(word)-1:\n            camel_case += word[i]\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_case = ''.join(word.title() for word in words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the first letter to lowercase\n    first_letter = word[0].lower()\n    # Convert the remaining letters to uppercase\n    remaining_letters = [letter.capitalize() for letter in word[1:]]\n    # Join the letters and return the camel case string\n    return first_letter + ''.join(remaining_letters)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    return (n**2) + (m**2) - ((n - 1)**2) - ((m - 1)**2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m) as the sum of the number of paths of length n from the \n    starting vertex to all vertices of the graph with m edges in it.\n\n    Parameters:\n    n (int): The length of the paths to start from.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n    '''\n\n    # Initialize a list to store the sum of paths of length n\n    path_sums = [0] * (n + 1)\n\n    # Calculate the sum of paths of length n from the starting vertex\n    path_sums[0] = 1\n\n    # Initialize a dictionary to store the count of paths of length n\n    path_counts = {}\n\n    # Calculate the count of paths of length n from the starting vertex\n    path_counts[0] = n\n\n    # Initialize a variable to store the sum of paths of length n\n    path_sum = 0\n\n    # Calculate the sum of paths of length n from all other vertices\n    for i in range(1, m + 1):\n        # Iterate through all the paths of length i from the starting vertex\n        for j in range(n - i + 1):\n            # Increment the count of paths of length i\n            path_counts[j + i] = path_counts.get(j + i, 0) + 1\n            # Calculate the sum of paths of length i from the starting vertex\n            path_sum += (path_counts[j + i] * (path_counts[j + i] - 1) // 2)\n\n    # Calculate the Eulerian number a(n, m)\n    return path_sum"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize a list to store all possible combinations of n items from 1 to m\n    combinations = [[i] for i in range(1, m+1)]\n    \n    # Traverse through all possible combinations of n items and check if they form an Eulerian path\n    for i in range(m):\n        # Remove the first item in each combination\n        combinations[i].pop(0)\n        # Check if the combination forms an Eulerian path\n        if combinations[i][0] == n:\n            # If it does, return the number of items in the combination\n            return m - len(combinations[i])\n    \n    # If no Eulerian path is found, return -1\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to check if a number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Function to calculate a(n, m) using prime numbers\n    def prime_eulerian_num(n, m):\n        a = 1\n        b = 1\n        count = 1\n        while count < n:\n            a *= (m - 1) // count + 1\n            b *= (m - 1) // (count - 1) + 1\n            count += 1\n        return a * b\n\n    # Function to calculate a(n, m) using non-prime numbers\n    def non_prime_eulerian_num(n, m):\n        a = 1\n        b = 1\n        count = 1\n        while count < n:\n            a *= (m - 1) // count + 1\n            b *= (m - 1) // (count - 1) + 1\n            count += 1\n        return a * b\n\n    # Check if n is a prime number or not\n    if is_prime(n):\n        return prime_eulerian_num(n, m)\n    else:\n        return non_prime_eulerian_num(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # To find the Eulerian number a(n, m), we need to find the number of 1's in the pattern of 1s\n    # in the following way:\n    # 1, 2, 1, 2, 1, 2,..., 1, 2, 1, 2, 1, 2,...\n    # Note that the pattern starts with 1 and ends with 1.\n    \n    # Initialize a counter variable\n    count = 0\n    \n    # Iterate over the first n numbers\n    for i in range(1, n+1):\n        # Compute the pattern by multiplying the previous two numbers\n        pattern = i*m\n        \n        # Check if the pattern ends with 1\n        if pattern % 2 == 0:\n            # If yes, increment the counter\n            count += 1\n    \n    # Return the counter\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    p = 2\n    a = 1\n\n    # Loop through until a(n, m) is found\n    while True:\n        if a % n == 0 and a % m == 0:\n            return a\n        a += p\n        p += 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    count = 0\n    a = 1\n    b = n\n\n    # Loop until we have found the Eulerian number\n    while True:\n        # Check if a is a prime number\n        if all(a % i!= 0 for i in range(2, b)):\n            count += 1\n            if count == m:\n                return a\n            a += 1\n            b += n\n        else:\n            count = 0\n            b -= n\n            a += n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n    prime = [True for i in range(n+1)]\n\n    # Fill the matrix with prime numbers\n    for i in range(2, n+1):\n        if prime[i]:\n            for j in range(2, m+1):\n                if prime[j]:\n                    matrix[i][j] = True\n\n    # Calculate the Eulerian number\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            if matrix[i][j]:\n                matrix[i][j] = (matrix[i-1][j] + matrix[i][j-1] - matrix[i-1][j-1]) % 2\n\n    return matrix[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    if n == 0:\n        return 0\n    \n    if m == 0:\n        return n\n    \n    if n == 1:\n        return m\n    \n    if m == 1:\n        return n\n    \n    a = n * eulerian_num(n-1, m)\n    b = m * eulerian_num(n, m-1)\n    \n    return a - b"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Check if the input values are valid\n    if n <= 0 or m <= 0:\n        return \"Invalid input values.\"\n    \n    # Initialize the variables for the calculation\n    a = [[1 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i <= j:\n                a[i][j] = a[i-1][j-1] + a[i-1][j] + a[i][j-1] - a[i-1][j-1] - a[i-1][j] - a[i][j-1]\n    return a[n][m]"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in alphabetical order\n        sublist.sort()\n    # Return the sorted input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Create a new list to store the concatenated list and tuple\n    combined_list = []\n    # Loop through each item in the tuple and append it to the combined list\n    for item in test_tup:\n        combined_list.append(item)\n    # Loop through each item in the list and append it to the combined list\n    for item in test_list:\n        combined_list.append(item)\n    # Return the combined list\n    return combined_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = list(test_tup)\n    test_tup.extend(test_list)\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)  # convert the list to a list so that we can modify it\n    for item in test_tup:\n        test_list.append(item)  # append each item in the list to the tuple\n    return tuple(test_list)  # convert the modified list back to a tuple and return it"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup + test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the test_list to a list to allow for list concatenation\n    test_list = list(test_list)\n    # Convert the test_tup to a list to allow for tuple concatenation\n    test_tup = list(test_tup)\n    # Append the list to the tuple\n    test_tup.extend(test_list)\n    # Return the updated tuple\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    new_list = test_list + list(test_tup)\n    return new_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Remove duplicates from the merged list\n    unique_list = []\n    for num in merged_list:\n        if num not in unique_list:\n            unique_list.append(num)\n\n    # Return the unique list as the result\n    return unique_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use a heap to merge the three lists into a single sorted list\n    max_heap = []\n    heapq.heappush(max_heap, num1)\n    heapq.heappush(max_heap, num2)\n    heapq.heappush(max_heap, num3)\n    sorted_list = []\n    while max_heap:\n        sorted_list.append(heapq.heappop(max_heap))\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Initialize an empty list to store the merged list\n    merged_list = []\n    # Initialize two pointers for each list\n    i, j = 0, 0\n    # Iterate over each element of the lists\n    while i < len(num1) and j < len(num2) and j < len(num3):\n        # Compare the elements at the pointers and add the smaller one to the merged list\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    # Add any remaining elements from the lists to the merged list\n    merged_list += num1[i:]\n    merged_list += num2[j:]\n    merged_list += num3[k:]\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge the three lists into one\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Convert the combined list into a heap queue\n    heapq.heapify(combined_list)\n    \n    # Convert the heap queue back into a sorted list\n    sorted_list = [heapq.heappop(combined_list) for i in range(len(combined_list))]\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    \"\"\"\n    This function merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the first two lists\n    heap1 = [num1[0]]\n    heap2 = num2[1:]\n    heapq.heapify(heap2)\n    heap_merged = []\n\n    while heap1 and heap2:\n        if heap1[0] < heap2[0]:\n            heap_merged.append(heap1[0])\n            heapq.heappop(heap1)\n        else:\n            heap_merged.append(heap2[0])\n            heapq.heappop(heap2)\n\n    while heap1:\n        heap_merged.append(heap1[0])\n        heapq.heappop(heap1)\n\n    while heap2:\n        heap_merged.append(heap2[0])\n        heapq.heappop(heap2)\n\n    return heap_merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists\n    all_numbers = num1 + num2 + num3\n    \n    # create a min heap from the concatenated list\n    min_heap = []\n    for num in all_numbers:\n        heapq.heappush(min_heap, num)\n    \n    # extract the sorted list from the min heap\n    sorted_numbers = []\n    while min_heap:\n        sorted_numbers.append(heapq.heappop(min_heap))\n    \n    return sorted_numbers"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n\n    # initialize an empty list to store the merged list\n    merged_list = []\n\n    # use heapq to merge the three sorted lists into a single sorted list\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            merged_list.append(heapq.heappop(num1))\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    # concatenate the remaining lists to form the merged list\n    merged_list.extend(num1)\n    merged_list.extend(num2)\n    merged_list.extend(num3)\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the two smallest lists\n    merged = heapq.merge(heapq.merge(num1, num2), num3)\n    # Remove duplicates from the merged list\n    unique = []\n    for item in merged:\n        if item not in unique:\n            unique.append(item)\n    return unique"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as input and returns a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    while i < len(num1):\n        merged_list.append(num1[i])\n        i += 1\n    \n    while j < len(num2):\n        merged_list.append(num2[j])\n        j += 1\n    \n    while k < len(num3):\n        merged_list.append(num3[k])\n        k += 1\n        \n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    n_rotations = (n - 1) * (len(s) - 1) + (n - 1) + 1\n    odd_numbers = 0\n    for i in range(n_rotations):\n        odd_numbers += 1 if s[i] == '1' else 0\n    return odd_numbers"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Initialize count to 0\n    count = 0\n\n    # Initialize variables for left and right pointers\n    left, right = 0, len(s) - 1\n\n    # Iterate n times\n    for i in range(n):\n        # Swap left and right pointers\n        left, right = right, left\n\n        # Iterate through the left and right pointers\n        while left <= right:\n            # If the current character is odd, increment count\n            if int(s[left]) % 2 == 1:\n                count += 1\n\n            # Move the left pointer to the right\n            left += 1\n\n            # Move the right pointer to the left\n            right -= 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list\n    binary_list = list(s)\n    \n    # Find the length of the binary string\n    length = len(binary_list)\n    \n    # Initialize count variable\n    count = 0\n    \n    # Loop n times\n    for i in range(n):\n        \n        # Rotate the binary list by 1 index\n        rotated_list = binary_list[1:] + [binary_list[0]]\n        \n        # Convert the rotated list back to binary string\n        rotated_string = ''.join(str(x) for x in rotated_list)\n        \n        # Find the number of odd values in the rotated binary string\n        for j in range(length):\n            if binary_list[j] == '1' and rotated_string[j] == '0':\n                count += 1\n    \n    # Return the count of odd values\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # convert binary string to list of digits\n    binary_list = [int(x) for x in s]\n\n    # find the number of digits in the binary string\n    num_digits = len(binary_list)\n\n    # calculate the number of rotations\n    rotations = n % num_digits\n\n    # reverse the binary list\n    binary_list = binary_list[::-1]\n\n    # count the number of odd digits after each rotation\n    odd_count = 0\n    for i in range(rotations):\n        odd_digit_count = sum(1 for digit in binary_list if digit % 2!= 0)\n        odd_count += odd_digit_count\n        binary_list = binary_list[1:]\n\n    # return the total number of odd digits in the final rotated binary string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        s (str): Binary string to be rotated.\n        n (int): Number of times to rotate the binary string.\n\n    Returns:\n        int: The number of odd values in the rotated binary string after rotating it the given number of times.\n    \"\"\"\n\n    # Initialize variables\n    odd_count = 0\n    original_length = len(s)\n\n    # Rotate the binary string n times\n    for i in range(n):\n        s = s[1:] + s[0]\n\n    # Iterate through the rotated binary string and count the odd values\n    for i in range(len(s)):\n        if s[i] == '1':\n            odd_count += 1\n\n    # Return the number of odd values in the rotated binary string after rotating it the given number of times\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of odd numbers in a binary string after rotating it n times.\n    \"\"\"\n    binary = \"\"\n    for i in range(len(s)):\n        if s[i] == \"0\":\n            binary += \"0\"\n        elif s[i] == \"1\":\n            binary += \"1\"\n        else:\n            binary += \"0\"\n    rotated = binary[n:] + binary[:n]\n    return sum(int(x) for x in rotated if int(x) % 2 == 1)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary_str = ''.join(bin(ord(i))[2:].rjust(8, '0') for i in s)\n    binary_str = binary_str[n:] + binary_str[:n]\n    odd_count = 0\n    for i in binary_str:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Count the number of odd digits in the binary string\n    odd_count = sum([int(digit) for digit in s if int(digit) % 2!= 0])\n\n    # Rotate the binary string the given number of times\n    rotated_s = s[n:] + s[:n]\n\n    # Count the number of odd digits in the rotated binary string\n    rotated_odd_count = sum([int(digit) for digit in rotated_s if int(digit) % 2!= 0])\n\n    # Return the difference between the two counts\n    return abs(odd_count - rotated_odd_count)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables for the count and odd numbers \n    count = 0\n    odd_num = 0\n    \n    # Check if the length of the binary string is odd or even\n    if len(s) % 2 == 1:\n        # Initialize the first character of the binary string\n        binary_str = s[0]\n    else:\n        # Initialize the first two characters of the binary string\n        binary_str = s[0:2]\n    \n    # Iterate n number of times\n    for i in range(n):\n        # Get the next character of the binary string\n        next_char = s[i+len(binary_str)]\n        \n        # Check if the next character is an odd number\n        if int(next_char) % 2!= 0:\n            # Increment the count and odd number\n            count += 1\n            odd_num = int(next_char)\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Initialize the binary string s to lowercase\n    s = s.lower()\n    \n    # Loop n times\n    for i in range(n):\n        # Convert the binary string to a list of digits\n        l = [int(x) for x in s]\n        \n        # Reverse the list of digits\n        l = l[::-1]\n        \n        # Convert the list of digits back to a binary string\n        s = ''.join(map(str, l))\n        \n        # Count the number of odd digits in the binary string\n        odd_count = s.count('1')\n        \n        # Add the count to the count variable\n        count += odd_count\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n\n    Args:\n    nestedlist (list): A list of lists, where each sublist contains elements that are also lists.\n\n    Returns:\n    list: A list containing the common elements between all nested lists.\n\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if set(nestedlist[i]) & set(nestedlist[j]):\n                common_elements.append(nestedlist[i] & nestedlist[j])\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty list to store common elements\n    common = []\n    # loop through the nested list\n    for sublist in nestedlist:\n        # loop through the sublist\n        for item in sublist:\n            # check if the item is not already in the common list\n            if item not in common:\n                # add the item to the common list\n                common.append(item)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    # Loop through each nested list\n    for i in nestedlist:\n        # Check if the current nested list is not empty\n        if i:\n            # Loop through each element in the nested list\n            for j in i:\n                # If the current element is not None and is not already in the common set, add it to the set\n                if j is not None and j not in common:\n                    common.add(j)\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty dictionary to store the counts of each element\n    element_counts = {}\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n\n        # If the element is already in the dictionary, increment its count\n        if element in element_counts:\n            element_counts[element] += 1\n\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            element_counts[element] = 1\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Loop through each element in the dictionary and compare its count with 2\n    for element, count in element_counts.items():\n        if count == 2:\n            common_elements.append(element)\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                continue\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common_elements.append(nestedlist[i])\n            if nestedlist[j] in nestedlist[i]:\n                common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for item in nestedlist:\n        common_set.update(item)\n    return common_set"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = set()\n    for innerlist in nestedlist:\n        common_elements.update(innerlist)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # Check if the text contains only digits\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pattern = r'\\b[-+]?[0-9]+\\b'\n    match = re.search(pattern, text)\n    return True if match else False\n\ntext = input(\"Enter a string: \")\nif check_integer(text):\n    print(text, \"is an integer.\")\nelse:\n    print(text, \"is not an integer.\")"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if len(d)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dict in list1:\n        if dict!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for item in list1:\n        if item:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers as input and returns a single integer.\n    \"\"\"\n    # Initialize a variable to store the sum of all the integers in the tuple\n    total = 0\n\n    # Iterate through each integer in the tuple and add it to the total\n    for num in nums:\n        total += num\n\n    # Return the total as the output\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for item in test_list:\n        try:\n            float(item)\n        except ValueError:\n            # If an element in the list is not convertible to a float, add an error message to the list of errors.\n            test_list[test_list.index(item)].append('Error: element is not convertible to float.')\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                # If the element cannot be converted to a float, it remains as a string\n                pass\n            else:\n                # If the element can be converted to a float, it is converted to a float\n                row[row.index(element)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each element in the list of lists\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Convert the element to a float and append it to a new sublist\n            try:\n                float_element = float(element)\n                new_sublist.append(float_element)\n            except ValueError:\n                # If the element cannot be converted to a float, append it to the original sublist\n                new_sublist.append(element)\n    # Return the new list of lists with converted elements\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for elem in row:\n            try:\n                float(elem)\n            except ValueError:\n                raise ValueError(\"Not a convertible element: {}\".format(elem))\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(element)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": ""
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                float(item)\n                row[row.index(item)] = float(item)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                element = None\n            else:\n                element = float(element)\n        if element is not None:\n            sublist.remove(element)\n        else:\n            sublist.append(element)\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string by space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    This function takes a string as input and converts it to a list of strings, where each string is split on the space character.\n    '''\n    # Split the string on space characters and store the resulting list in a variable\n    result = string.split()\n    # Return the list\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on space character and return the list of strings\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    unique_element = None\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is unique and has not been found yet, update the count and the unique element\n        if arr[i] == arr[i+1] and arr[i]!= unique_element:\n            count += 1\n            unique_element = arr[i]\n\n    # If there is only one unique element, return it\n    if count == 1:\n        return unique_element\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # loop through the dictionary and find the element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            elif unique_element!= arr[i]:\n                unique_element = None\n                break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    count = {}\n    \n    # Traverse through the array and count the occurrences of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    \n    # Traverse through the array again and find the element that appears only once\n    for num in arr:\n        if count[num] == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize the frequency map with all values set to 0\n    freq = {x: 0 for x in arr}\n\n    # Iterate through the array and increment the frequency of each element in the map\n    for num in arr:\n        freq[num] += 1\n\n    # Iterate through the frequency map and return the key (element) with a frequency of 1\n    for key, value in freq.items():\n        if value == 1:\n            return key\n\n    # If no element with frequency 1 is found, return None\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Initialize a dictionary to store the elements and their count\n    freq_dict = {}\n    # Iterate over the array and count the frequency of elements\n    for i in range(n):\n        if arr[i] in freq_dict:\n            freq_dict[arr[i]] += 1\n        else:\n            freq_dict[arr[i]] = 1\n    # Initialize a variable to store the unique element\n    unique_elem = None\n    # Iterate over the dictionary and find the element that appears only once\n    for key in freq_dict:\n        if freq_dict[key] == 1:\n            unique_elem = key\n            break\n    return unique_elem"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    count = 0\n    unique_element = None\n    for i in range(len(arr)):\n        if arr[i] == arr[count]:\n            count += 1\n        else:\n            unique_element = arr[i]\n            break\n    return unique_element"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product between numbers\n    in pairs of tuples within the list.\n\n    Args:\n    list1 (list): A list of tuples.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n\n    # Initialize variables\n    max_product = -float('inf')\n    product_pair = []\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each other tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Calculate the absolute value of the product\n            abs_product = abs(product)\n            # Update the maximum product if the current absolute product is greater\n            if abs_product > max_product:\n                max_product = abs_product\n                product_pair = [list1[i], list1[j]]\n\n    # Return the maximum product and the pair of tuples that produced it\n    return max_product, product_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = max(abs(list1[i][0] * list1[j][1]), abs(list1[i][1] * list1[j][0]))\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_product_tuple = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_product_tuple = [list1[i], list1[j]]\n    \n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize the maximum product to negative infinity\n    max_product = -float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the rest of the list of tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers and the product of the two numbers\n            abs_diff = abs(list1[i][0] - list1[j][0]) * abs(list1[i][1] - list1[j][1])\n            # Update the maximum product if the current absolute difference is greater than the current maximum product\n            if abs_diff > max_product:\n                max_product = abs_diff\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_tuple = float('-inf')\n    min_product = float('inf')\n    min_product_tuple = float('inf')\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > max_product:\n                max_product = abs(product)\n                max_product_tuple = (list1[i], list1[j])\n            elif abs(product) < min_product:\n                min_product = abs(product)\n                min_product_tuple = (list1[i], list1[j])\n    \n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize the maximum absolute product and the list of tuples\n    max_product = 0\n    pairs = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            # Calculate the absolute product of the numbers in the pair\n            product = abs(list1[i][0] * list1[j][1])\n\n            # If the product is greater than the current maximum, update the maximum and the list of pairs\n            if product > max_product:\n                max_product = product\n                pairs = [(i, j), (j, i)]\n\n    # Return the list of pairs and the maximum absolute product\n    return pairs, max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(lst):\n    # initialize max_product to 1, since no pair of tuples would have a product larger than 1\n    max_product = 1\n    # iterate over all pairs of tuples in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # calculate the product of the two tuples\n            product = lst[i][0] * lst[j][1]\n            # update max_product if the current product is larger\n            if product > max_product:\n                max_product = product\n    # return the max_product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if is_prime(num) and is_prime(limit - num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for num in range(1, limit+1):\n        if num in amicable_numbers(num):\n            total += num\n    return total\n\ndef amicable_numbers(n):\n    '''\n    Returns a list of all the amicable numbers up to n.\n    '''\n    amicable = []\n    for i in range(1, n):\n        if n % i == 0 and i!= n/i:\n            amicable.append(i)\n            amicable.append(n/i)\n    return amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        # check if the number is amicable\n        if i == sum_of_divisors(i):\n            amicable_sum += i\n    \n    return amicable_sum\n\ndef sum_of_divisors(n):\n    '''\n    Calculate the sum of the divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_prime(num) and is_prime(limit - num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable or not.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Helper function to check if a number is a prime number\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Helper function to find the sum of all proper divisors of a number\n    def sum_proper_divisors(num):\n        proper_divisors = []\n        for i in range(1, num+1):\n            if num % i == 0 and is_prime(i):\n                proper_divisors.append(i)\n        return proper_divisors\n    \n    # Find all numbers from 1 to the specified limit that are both amicable and prime\n    amicable_primes = []\n    for num in range(1, limit+1):\n        if is_prime(num) and is_prime(sum_proper_divisors(num)[0]):\n            amicable_primes.append(num)\n    \n    # Return the sum of all amicable prime numbers\n    return sum(amicable_primes)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable(num):\n    \"\"\"\n    A function to check if a given number is amicable or not.\n    \"\"\"\n    sum_of_proper_divisors = sum(range(1, num))\n    return sum_of_proper_divisors == num\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    A function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i == sum_of_divisors(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef sum_of_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit):\n        if num == 1:\n            amicable_sum += num\n        elif num == 2:\n            amicable_sum += num\n        else:\n            for i in range(2, int(num/2)+1):\n                if (num % i) == 0:\n                    break\n            else:\n                amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(2, limit):\n        if is_amicable(i):\n            amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Helper function to check if a number is amicable to 1.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a+b*1j)\n    angle_deg = angle_rad * 180/cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = a + bj\n    angle = cmath.phase(z)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle_rad = angle * cmath.pi / 180.0\n    angle_deg = angle_rad * 180.0 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # Initialize variables to keep track of 0s and 1s in the binary string\n    zero_count = 0\n    one_count = 0\n    \n    # Initialize variables to keep track of the maximum difference between 0s and 1s seen so far\n    max_difference = 0\n    \n    # Loop through each character in the binary string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            zero_count += 1\n            \n        # If the character is a 1, increment the count of 1s\n        else:\n            one_count += 1\n            \n        # Calculate the difference between the counts of 0s and 1s\n        difference = abs(zero_count - one_count)\n        \n        # Update the maximum difference if the current difference is greater than the previous maximum\n        if difference > max_difference:\n            max_difference = difference\n            \n    # Return the maximum difference between 0s and 1s seen in the binary string\n    return max_difference"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            sub_string = string[i:j+1]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            if count_0 > count_1:\n                max_diff = max(max_diff, j-i)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    # Initialize the number of 0s and 1s in the entire string\n    num_0s = 0\n    num_1s = 0\n\n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            num_0s += 1\n        # If the character is a 1, increment the number of 1s\n        else:\n            num_1s += 1\n\n    # Initialize the maximum difference between the number of 0s and number of 1s found so far\n    max_diff = 0\n\n    # Loop through each possible sub-string of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # Calculate the difference between the number of 0s and number of 1s in the sub-string\n            sub_diff = abs(num_0s - num_1s)\n\n            # If the sub-string difference is greater than the current maximum difference, update the maximum difference\n            if sub_diff > max_diff:\n                max_diff = sub_diff\n\n    # Return the maximum difference between the number of 0s and number of 1s found in the entire string\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n            count_1 += 0\n        else:\n            count_1 += 1\n            count_0 += 0\n\n        diff = count_0 - count_1\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    # Initialize a dictionary to store the count of 0s and 1s in each sub-string of the binary string\n    counts = {}\n    max_diff = 0\n    \n    # Loop through each sub-string of the binary string\n    for i in range(len(string)):\n        # Check if the sub-string starts with a 0 or a 1\n        if string[i] == '0':\n            # If the sub-string starts with a 0, increment the count of 0s in the sub-string\n            counts[string[i:i+2]] = counts.get(string[i:i+2], 0) + 1\n        else:\n            # If the sub-string starts with a 1, increment the count of 1s in the sub-string\n            counts[string[i:i+2]] = counts.get(string[i:i+2], 0) + 1\n        \n        # Calculate the difference between the count of 0s and 1s in the current sub-string and the count of 0s and 1s in the previous sub-string\n        diff = abs(counts[string[i:i+2]] - counts.get(string[i:i+2], 0))\n        \n        # Update the maximum difference if the current difference is greater than the previous maximum difference\n        max_diff = max(max_diff, diff)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    prev = string.find('0')\n    for i in range(len(string)):\n        if string[i] == '0':\n            if prev == -1:\n                prev = i\n            else:\n                diff = i - prev\n                max_diff = max(max_diff, diff)\n                prev = i\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = string.count('0', i, len(string))\n        count_1 = string.count('1', i, len(string))\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for i in range(n):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    max_diff = 0\n    for i in range(1, len(string)):\n        if string[i] == '0':\n            if string[i - 1] == '0':\n                max_diff = max(max_diff, i - len(string))\n        elif string[i] == '1':\n            if string[i - 1] == '1':\n                max_diff = max(max_diff, i - len(string))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    def count_zeros_ones(substring):\n        '''\n        Helper function to count the number of 0s and 1s in a given substring.\n        '''\n        count = 0\n        for char in substring:\n            if char == '0':\n                count += 0\n            else:\n                count += 1\n        return count\n    \n    # Initialize variables\n    max_diff = 0\n    prev_count = 0\n    \n    # Iterate through all possible substrings\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            curr_count = count_zeros_ones(substring)\n            \n            # Update max_diff if current count is greater\n            if curr_count > prev_count:\n                max_diff = max(max_diff, curr_count - prev_count)\n            \n            # Update prev_count\n            prev_count = curr_count\n    \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and finds the sum of the common divisors of both numbers.\n    \"\"\"\n\n    # To find the common divisors of two numbers, we need to find the largest common factor of both numbers.\n    # We can then find all the common factors of that factor.\n    # We can then add all the factors of each number together.\n\n    # To find the largest common factor of two numbers, we can use the Euclidean algorithm.\n    # The Euclidean algorithm states that the GCD of two numbers a and b is equal to the GCD of b and the remainder of a divided by b.\n    # We can implement this algorithm in Python as follows:\n\n    # If a is equal to 0, return b.\n    # Otherwise, return the GCD of b and the remainder of a divided by b.\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    # To find all the common factors of a number, we can use a loop to iterate through all the possible divisors of a.\n    # We can then check if each divisor divides a evenly into a.\n    # If it does, then it is a factor of a and we add it to a list of factors.\n    def factors(n):\n        factors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n\n    # We can use the gcd function to find the largest common factor of the two numbers.\n    # We can then use the factors function to find all the common factors of the largest common factor.\n    # Finally, we can add all the factors together to get the sum of the common divisors.\n    a_factors = factors(num1)\n    b_factors = factors(num2)\n    common_divisor = gcd(num1, num2)\n    sum_of_common_divisors = sum(a_factors) + sum(b_factors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = []\n    divisor = 1\n    \n    while divisor <= a and divisor <= b:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    \n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Function to check if a number is divisible by another number\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    # Calculate the sum of common divisors of two given numbers\n    sum_divisors = 0\n    for i in range(1, a + 1):\n        if is_divisible(a, i):\n            if is_divisible(b, i):\n                sum_divisors += i\n\n    # Return the sum of common divisors of two given numbers\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Get all the common divisors of a and b\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Return the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # function to check if two numbers have common divisors\n    def common_divisors(a, b):\n        for i in range(1, a + 1):\n            if a % i == 0 and b % i == 0:\n                return True\n        return False\n\n    # function to find the sum of common divisors of two numbers\n    def sum_common_divisors(a, b):\n        divisors_sum = 0\n        if common_divisors(a, b):\n            for i in range(1, a + 1):\n                if a % i == 0 and b % i == 0:\n                    divisors_sum += i\n        return divisors_sum\n\n    # calling the sum_common_divisors function and printing the result\n    result = sum_common_divisors(a, b)\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is:\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(num1, num2):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a list to store the common divisors of num1 and num2\n    common_divisors = []\n\n    # Find the common divisors of num1 and num2\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            common_divisors.append(i)\n\n    # Calculate the sum of common divisors\n    sum_of_common_divisors = sum(common_divisors)\n\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"\n        Recursive function to find the greatest common divisor of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def lcm(a, b):\n        \"\"\"\n        Recursive function to find the least common multiple of two numbers.\n        \"\"\"\n        return a * b // gcd(a, b)\n\n    def common_divisors(n1, n2):\n        \"\"\"\n        Recursive function to find the set of common divisors of two numbers.\n        \"\"\"\n        if n1 == 0 or n2 == 0:\n            return set()\n        elif n1 % n2 == 0:\n            return {n1, n2} | common_divisors(n1 // n2, n2)\n        else:\n            return common_divisors(n1, n2 - 1)\n\n    a_cd = common_divisors(a, b)\n    b_cd = common_divisors(b, a)\n    return sum(a_cd) + sum(b_cd)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for num in range(1, b + 1):\n        if a % num == 0 and b % num == 0:\n            divisors.append(num)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    i = 1\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    carry = 0\n    while y!= 0:\n        temp = x & y # perform bitwise AND between x and y to get the carry bit\n        result = result + (x ^ y) # perform XOR between the previous result and the current sum\n        x = carry << 1 # shift the carry bit left by one to prepare for the next iteration\n        carry = temp # save the carry bit for the next iteration\n    if carry == 1: # if the carry bit is still 1, add it to the result\n        result = result + carry\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()  # Split the string into words\n    long_words = []\n\n    for word in words:\n        if len(word) > n:  # Check if the length of the word is greater than n\n            long_words.append(word)  # Add the word to the list of long words\n\n    return long_words  # Return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words_list = []\n    \n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    \n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n\n        if len(word) > n:\n            # If it is, append it to the long_words list\n            long_words.append(word)\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the same dimensions as a 3x3 magic square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Calculate the sum of the rows\n    row_sum = sum(row)\n    # Calculate the sum of the columns\n    col_sum = sum(my_matrix[i] for i in range(len(my_matrix)))\n    # Calculate the sum of the diagonals\n    diag_sum = my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] + my_matrix[0][2] + my_matrix[1][0] + my_matrix[2][1]\n    # Check if the row, column and diagonal sums are equal to 0\n    if row_sum == 0 or col_sum == 0 or diag_sum == 0:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                # Check if there are any unique numbers in the row or column\n                row_set = set(my_matrix[i])\n                col_set = set(my_matrix[j])\n                if len(row_set)!= len(my_matrix[i]) or len(col_set)!= len(my_matrix[j]):\n                    return False\n\n                # Check if there are any unique numbers in the diagonal\n                if i == j:\n                    if my_matrix[i][j] in row_set or my_matrix[i][j] in col_set:\n                        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonals\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of the diagonals is equal to the sum of the rest of the elements\n    if diagonal_sum == sum(sum(row) for row in my_matrix) or diagonal_sum == sum(sum(row[i] for row in my_matrix) for i in range(len(my_matrix))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonals\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    \n    # Check if the diagonal sum is equal to the sum of the matrix elements\n    if diagonal_sum == sum(sum(row) for row in my_matrix):\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    max_value = 10**4\n    \n    # check if matrix has 4 rows and 4 columns\n    if rows!= 4 or cols!= 4:\n        return False\n    \n    # check if all elements in matrix are unique\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[i][j+1:cols] + my_matrix[i+1:rows][j] + [my_matrix[i+1][j+1] for k in range(rows-i-1) if k!=0]:\n                return False\n    \n    # check if sum of all elements in each row is equal to the sum of all elements in the matrix\n    for i in range(rows):\n        row_sum = 0\n        for j in range(cols):\n            row_sum += my_matrix[i][j]\n        if row_sum!= sum(my_matrix[i][j] for j in range(cols)):\n            return False\n    \n    # check if sum of all elements in each column is equal to the sum of all elements in the matrix\n    for j in range(cols):\n        col_sum = 0\n        for i in range(rows):\n            col_sum += my_matrix[i][j]\n        if col_sum!= sum(my_matrix[i][j] for i in range(rows)):\n            return False\n    \n    # check if sum of diagonal elements is equal to the sum of all elements in the matrix\n    diagonal_sum = sum(my_matrix[i][i] for i in range(rows))\n    if diagonal_sum!= sum(my_matrix[i][i] for i in range(rows)):\n        return False\n    \n    # check if sum of anti-diagonal elements is equal to the sum of all elements in the matrix\n    anti_diagonal_sum = sum(my_matrix[i][rows-i-1] for i in range(rows))\n    if anti_diagonal_sum!= sum(my_matrix[i][rows-i-1] for i in range(rows)):\n        return False\n    \n    # check if sum of all elements in the matrix is less than or equal to 4000\n    if sum(sum(my_matrix[i][j] for j in range(cols)) for i in range(rows)) > max_value:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n\n    # Calculate the sum of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the diagonal sum and the row and column sums are equal\n    if diagonal_sum == sum(row_sums) == sum(col_sums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    for i in range(n):\n        # check rows for magic squares\n        for j in range(n):\n            row_sum = sum(my_matrix[i][j:j+3])\n            if row_sum == 0:\n                return False\n        # check columns for magic squares\n        for j in range(n):\n            col_sum = sum(my_matrix[j][i:i+3])\n            if col_sum == 0:\n                return False\n        # check diagonals for magic squares\n        diag1_sum = sum(my_matrix[i][i] for i in range(n))\n        diag2_sum = sum(my_matrix[i][n-i-1] for i in range(n))\n        if diag1_sum == 0 or diag2_sum == 0:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the input matrix is a square matrix\n    if not (len(my_matrix) == len(my_matrix[0])):\n        return False\n\n    # Check if the matrix contains only numbers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # Check for the magic squares\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            # Check for a magic square diagonally from top-left to bottom-right\n            diagonal = [my_matrix[i][j], my_matrix[j][i]]\n            if all(element in diagonal for element in range(1, len(my_matrix) + 1)):\n                return True\n\n            # Check for a magic square diagonally from bottom-left to top-right\n            diagonal = [my_matrix[j][len(my_matrix) - 1 - k] for k in range(len(my_matrix))]\n            if all(element in diagonal for element in range(1, len(my_matrix) + 1)):\n                return True\n\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has the same dimensions as a standard magic square\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check if every row and column has the same numbers\n    for row in my_matrix:\n        if len(set(row))!= 1:\n            return False\n    \n    # Check if the matrix is a magic square\n    sum_of_rows = [sum(row) for row in my_matrix]\n    sum_of_columns = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    sum_of_squares = [sum(my_matrix[i][j] for i in range(3)) for j in range(3)]\n    \n    if sum_of_rows == sum_of_columns == sum_of_squares:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = sum(sum(row) for row in my_matrix)\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum - sum(my_matrix[k][j] for k in range(n)) + sum(my_matrix[i][k] for k in range(n)):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Create a list of all the numbers in the magic square (1 to 9)\n    magic_square = [x for x in range(1, 10)]\n\n    # Check if the matrix has the same number of rows and columns as the magic square\n    if len(my_matrix)!= len(my_matrix[0]) or len(my_matrix)!= len(magic_square):\n        return False\n\n    # Check if the matrix matches the magic square\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]) or row!= magic_square:\n            return False\n\n    # If the matrix passes all the tests, it's a magic square\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n\n    for num, count in freq.items():\n        if max_num is None or count > max_freq:\n            max_num = num\n            max_freq = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of items and update the frequency dictionary\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    max_item = None\n\n    # Iterate through the items again and find the item with the maximum frequency\n    for item, freq in freq.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_item = None\n    max_count = 0\n    for item, count in count.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        frequency_map[num] += 1\n        if frequency_map[num] > max_freq:\n            max_freq = frequency_map[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    freq = defaultdict(int)\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # Increment the count of the current item\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    \n    # Iterate through the list of numbers again and return the item with the maximum frequency\n    for num in nums:\n        # If the current item has the same frequency as the maximum frequency, return it\n        if freq[num] == max_freq:\n            return num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with maximum frequency in the list\n    max_num = None\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    \n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    # Define a string containing all vowels\n    vowels = 'aeiouAEIOU'\n    \n    # Create an empty list to store the reversed vowels\n    reversed_vowels = []\n    \n    # Loop through each character in the input string\n    for char in str1:\n        \n        # If the character is a vowel, add it to the reversed vowels list\n        if char in vowels:\n            reversed_vowels.append(char)\n    \n    # Reverse the order of the vowels in the reversed_vowels list\n    reversed_vowels.reverse()\n    \n    # Convert the reversed_vowels list to a string and return it\n    return ''.join(reversed_vowels)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    vowel_start = -1\n    result = []\n\n    for i, char in enumerate(str1):\n        if char.lower() in vowels:\n            if vowel_count == 0:\n                vowel_start = i\n            vowel_count += 1\n        else:\n            if vowel_count!= 0:\n                result.append(str1[vowel_start:i])\n                vowel_count = 0\n\n    if vowel_count!= 0:\n        result.append(str1[vowel_start:])\n\n    return ''.join(result)\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n\n    # converting the string to lowercase\n    str1 = str1.lower()\n\n    # initializing an empty string to store the reversed vowels\n    vowel_reverse = ''\n\n    # iterating through each character of the string\n    for char in str1:\n\n        # checking if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u']:\n\n            # reversing the character and adding it to the vowel_reverse string\n            vowel_reverse = char + vowel_reverse\n\n        # adding the non-vowel character to the vowel_reverse string\n        else:\n            vowel_reverse += char\n\n    # returning the reversed vowels string\n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_index = []\n    result = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n    for i in range(len(vowel_index)-1, -1, -1):\n        result.append(str1[vowel_index[i]])\n    result = ''.join(result)\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_set = set(vowels)\n    reversed_str = ''\n    for char in str1:\n        if char in vowels_set:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if char.islower():\n                char = char.upper()\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    result = ''\n    \n    # find all indices of vowels in the given string\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    \n    # reverse the vowels while excluding any vowels from the reversed string\n    for i in range(len(vowel_indices)-1, -1, -1):\n        if str1[vowel_indices[i]] not in vowels:\n            result += str1[vowel_indices[i]]\n    \n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tup = str(tup1)\n    \n    # Return the string\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Use join() method to convert the tuple to a string\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # join() function is used to concatenate the elements of a tuple.\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [x for x in nums if x < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += num\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def get_bin(n):\n        return bin(n)[2:]\n\n    def hex_num(bin_num):\n        hex_num = []\n        for i in range(len(bin_num) - 1):\n            hex_num.append(int(bin_num[i]) + int(bin_num[i + 1]))\n        return hex_num\n\n    def dec_to_hex(decimal_num):\n        hex_num = []\n        hex_num.append(hex(decimal_num)[2:].upper())\n        return hex_num\n\n    def get_hex(n):\n        hex_num = get_bin(n)\n        hex_num = hex_num[:-1]\n        hex_num = hex_num.lstrip('0')\n        hex_num = hex_num.replace('1', 'A')\n        hex_num = hex_num.replace('0', 'B')\n        hex_num = ''.join(hex_num)\n        hex_num = hex_num.upper()\n        return hex_num\n\n    def get_hex_dec(hex_num):\n        decimal_num = int(hex_num, 16)\n        return decimal_num\n\n    hex_num = get_hex(n)\n    hex_decimal = get_hex_dec(hex_num)\n    hex_list = hex_num.split('B')\n    decimal_list = []\n    for hex_num in hex_list:\n        decimal_list.append(int(hex_num, 16))\n\n    total = decimal_list[0]\n    for i in range(1, len(decimal_list)):\n        total += decimal_list[i] * 2 ** (i - 1)\n\n    return total\n\nn = int(input(\"Enter a number: \"))\nresult = hexagonal_num(n)\nprint(\"The nth hexagonal number is:\", result)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 2\n    count = 0\n    \n    # loop through each hexagon\n    while count < n:\n        # calculate the nth hexagon\n        hex = (a + b**2)**(1/2)\n        # increment the count\n        count += 1\n        \n        # print the nth hexagon\n        print(hex)\n        \n        # update the values of a and b for the next iteration\n        a = 2*a - b\n        b = 3*b + a"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n\n    Args:\n    n (int): The nth hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    22\n    >>> hexagonal_num(3)\n    343\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return 2 * n * (n + 1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return None\n\n    i = 1\n    hex_num = 1\n\n    while i <= n:\n        hex_num += 6 * (2 * i - 1)\n        i += 1\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        hexagonal_numbers = [0, 6, 20, 54, 126, 270, 498, 894, 1588, 2680, 4370, 6858, 10338, 15116, 21574, 29930, 40366, 53258, 68974, 87948, 110522, 137096, 167968, 203538, 244206, 289372, 339436, 394798, 455858, 522916, 595372, 673628, 757982, 848834, 946484, 1051232, 1163378, 1283322, 1411364, 1547804, 1692942, 1846978, 2010112, 2182644, 2364874, 2557002, 2759228, 2971852, 3195074, 3429194, 3674412, 3931028, 4199342, 4479654, 4772264, 5077472, 5395578, 5726882, 6071684, 6429284, 6800002, 7183148, 7579042, 7988004, 8410354, 8846412, 9296408, 9760672, 10239534, 10733324, 11242372, 11766908, 12307162, 12863364, 13435744, 14024622, 14630218, 15252752, 15892444, 16549514, 17224182, 17916678, 18627232, 19355964, 20103094, 20868842, 21653328, 22456772, 23279394, 24121314, 24982752, 25863828, 26764762, 27685774, 28626984, 29588612, 30570788, 31573732, 32597564, 33642404, 34708372, 35795588, 36904272, 38034544, 39186624, 40360632, 41556698, 42774942, 44015584, 45278744, 46"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        print(a, end=' ')\n        a, b = b, 3*a + b\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case \n    if n == 0: \n        return 1 \n    elif n == 1: \n        return 6\n    else:\n        # Find the nth hexagonal number using the formula H(n) = 1/2 * (2n-1)^2\n        # 1/2 = 0.5 in decimal form\n        # 2n-1 = (2n-1) in decimal form\n        # (2n-1)^2 = 4n-3 in decimal form\n        # H(n) = 0.5 * (4n-3) = 4/2 * (4n-6)\n        # Simplifying the expression: 4/2 * (4n-6) = 12n-10\n        # Substituting n to get: 4/2 * 12n-10 = 12n-12\n        # Taking the integer part: 12n-12 = n*10 + 8\n        # Substituting n to get: 12n-12 = n*10 + 8\n        # Taking the floor: n*10 + 8 = 8n + 8\n        return n * 10 + 8"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 3"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # convert the list to an array of integers\n    num_array = array('i', nums)\n    \n    # count the number of zeros and non-zeros\n    zero_count = num_array.count(0)\n    non_zero_count = len(num_array) - zero_count\n    \n    # calculate the ratio of zeros to non-zeros\n    if non_zero_count == 0:\n        ratio = 1\n    else:\n        ratio = zero_count / non_zero_count\n    \n    # return the ratio of zeros to non-zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # initialize counters for non-zero and zero values\n    zeros = array('i', [0])\n    ones = array('i', [0])\n    \n    # iterate through array and increment counters for non-zero and zero values\n    for num in nums:\n        if num == 0:\n            zeros[0] += 1\n        else:\n            ones[0] += 1\n    \n    # calculate ratio of zeroes to non-zeroes\n    zero_ratio = zeros[0] / ones[0]\n    \n    # return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    non_zeroes = len(nums) - sum(nums)\n    zeroes = sum(nums)\n    return non_zeroes / zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n    return num_zeros / num_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = len([x for x in nums if x == 0])\n    num_non_zero = len([x for x in nums if x!= 0])\n    return num_zero / num_non_zero"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create an empty array to store the count of zeroes and non-zeroes\n    count_array = array('i', [0] * 2)\n\n    # Iterate through the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            count_array[0] += 1\n        else:\n            count_array[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = count_array[0] / (count_array[0] + count_array[1])\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to a list of integers\n    num_list = nums.tolist()\n\n    # Initialize the count of zeroes and non-zeroes to 0\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate through the list of integers\n    for num in num_list:\n        # If the integer is zero, increment the count of zeroes\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = (zero_count / non_zero_count) * 100\n\n    # Return the ratio as a float value with two decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def zero_count(nums):\n    # convert the input array to an array of characters\n    arr = array('i', nums)\n\n    # count the number of zeroes and non-zeroes in the array\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    zero_non_zero_ratio = zero_count / non_zero_count\n\n    # return the ratio\n    return zero_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create an array to store the number of zeros and non-zeros\n    count = array('i', [0] * (max(nums) + 1))\n\n    # Iterate through the array and increment the count for each non-zero value\n    for num in nums:\n        count[num] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zeros = sum(count[0:num])\n    non_zeros = sum(count[1:])\n    ratio = zeros / non_zeros if non_zeros!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    # Convert the decimal number to binary\n    binary = bin(n)[2:]\n    \n    # Calculate the sum of powers of 2 in binary\n    sum_of_powers = 0\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            sum_of_powers += 2 ** i\n    \n    # Check if the sum of powers of 2 is equal to n\n    if sum_of_powers == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # check if the given number is a power of 2 or not\n    if (n & (n-1)) == 0:\n        # check if the sum of powers of 2 is less than or equal to the given number\n        if (n & (n-2)) == 0:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    \n    def is_power_of_two(num):\n        if num == 0:\n            return False\n        while num % 2 == 0:\n            num //= 2\n        return num == 1\n    \n    count = 0\n    while n > 0:\n        if is_power_of_two(n):\n            count += 1\n        n = n // 2\n    \n    return count >= 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # check if n is even\n    if n % 2 == 0: \n        return False\n    # count number of set bits\n    count = 0\n    while n: \n        n &= n - 1 # clear the least significant set bit\n        count += 1\n    # check if count is a power of 2\n    if count == 0 or (1 << count) == count: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    num = n\n    \n    # Loop until the number is 0\n    while num!= 0:\n        # Count the number of non-zero digits in the current digit\n        while num % 2 == 0:\n            num //= 2\n            count += 1\n        \n        # Update the number by removing the count of non-zero digits from the leftmost non-zero digit\n        num -= 2**count\n        \n        # Check if the number is 0, if yes, then the number can be represented as sum of non-zero powers of 2\n        if num == 0:\n            return True\n        \n    # If the number is not 0, then it can't be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Function to check if the given number is a sum of powers of 2\n    def is_sum_of_powers_of_two(num):\n        if num == 0:\n            return True\n        elif num % 2 == 0:\n            return is_sum_of_powers_of_two(num//2)\n        else:\n            return False\n\n    # Check if the given number is a sum of powers of 2\n    if is_sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Convert the given number to binary string\n    binary_string = bin(n)[2:]\n\n    # Count the number of ones in the binary string\n    count = sum(1 for bit in binary_string if bit == '1')\n\n    # Check whether the count is even or odd\n    if count % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False \n    for i in range(1, int(n**0.5)+1): \n        if n % i == 0: \n            if n // i == 1: \n                return True \n            else: \n                return is_Sum_Of_Powers_Of_Two(n // i) \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # loop through the powers of 2 from 0 to log2(n)\n    for i in range(int(math.log2(n)) + 1):\n        # check if n can be represented as sum of powers of 2 with i bits\n        if (n >> i) & 1 == 1:\n            # check if there are any non-zero bits in the remaining bits of n\n            if (n & ((1 << i) - 1))!= 0:\n                # if there are non-zero bits, return False\n                return False\n    # if all bits are zero, return True\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        return (is_Sum_Of_Powers_Of_Two(n//2) + 1)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Calculate the circumference of a circle using the formula:\n    circumference = 2 * pi * r\n    '''\n    pi = math.pi  # Define the value of pi for convenience\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r #multiplying pi by radius and multiplying by 2 to get the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    print(\"The circumference of a circle with radius\", r, \"is\", circumference)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for number in sublist:\n            result.add(number)\n    return list(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        flat_list.extend(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(item for sublist in test_list for item in sublist)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return flattened_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of indices to represent the pancakes\n    indices = list(range(n))\n    # create a list of booleans to keep track of swapped elements\n    swapped = [False] * n\n\n    # bubble sort the list of indices\n    for i in range(n):\n        for j in range(n-i-1):\n            if not swapped[j] and nums[indices[j]] > nums[indices[j+1]]:\n                # swap the elements and remember that they were swapped\n                nums[indices[j]], nums[indices[j+1]] = nums[indices[j+1]], nums[indices[j]]\n                swapped[j], swapped[j+1] = True, True\n                # update the indices to represent the swapped elements\n                indices[j], indices[j+1] = indices[j+1], indices[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the index of the largest element in nums[:i]\n        max_idx = i - 1\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the largest element with nums[i-1]\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array.\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the i-th element.\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the part of the array from i+1 to the end.\n        start = i + 1\n        end = n - 1\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Store the length of the list\n    length = len(nums)\n\n    # Travel through each element of the list\n    for i in range(length):\n\n        # Find the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, length):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the i-th element of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # Reverse the part of the list that is already sorted, from i+1 to the end\n        for j in range(i+1, max_index, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    def reverse(start, end):\n        \"\"\"\n        Reverse the elements in the range [start, end] of the list.\n        \"\"\"\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def sort(start, end):\n        \"\"\"\n        Sort the elements in the range [start, end] of the list using the pancake sort algorithm.\n        \"\"\"\n        if start >= end:\n            return\n        reverse(start, end)\n        sort(start + 1, end)\n\n    sort(0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n\n    # Iterate through the list of elements n-1 times\n    for i in range(n-1):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # If the maximum element is not already at the beginning of the list, swap it\n        if max_index!= i:\n            nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n    \n    # bubble sort\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    # reverse the sorted array\n    for i in range(n//2):\n        nums[i], nums[n-i-1] = nums[n-i-1], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a copy of the list\n    nums_copy = nums[:]\n    # initialize variables\n    max_index = 0\n    swapped = True\n    \n    # loop until the list is sorted\n    while swapped:\n        swapped = False\n        # find the maximum element in the list\n        for i in range(1, len(nums_copy)):\n            if nums_copy[i] > nums_copy[max_index]:\n                max_index = i\n                swapped = True\n        # swap the maximum element with the first element\n        nums_copy[0], nums_copy[max_index] = nums_copy[max_index], nums_copy[0]\n    \n    # return the sorted list\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n\n    # Initialize the length of the list\n    n = len(nums)\n\n    # Perform a selection sort on each sublist of length 1 to n\n    for start in range(n):\n        max_idx = start\n\n        # Find the maximum element in the sublist and swap it with the first element of the sublist\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n\n        # Swap the maximum element with the first element of the sublist\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n\n        # Reverse the sublist from start to max_idx\n        nums[start:max_idx+1] = nums[start:max_idx+1][::-1]\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # initialize variables\n    max_diff = 0\n    prev_element = arr[0]\n\n    # iterate through the array\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - prev_element)\n        max_diff = max(max_diff, diff)\n        prev_element = arr[i]\n\n    # return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least two elements.\"\n    \n    max_diff = abs(arr[0] - arr[1])\n    for i in range(2, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes a list of integers as input and returns the maximum absolute difference between any two elements in the list.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least two elements\"\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        if abs(arr[i] - arr[i-1]) > max_diff:\n            max_diff = abs(arr[i] - arr[i-1])\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    # Initialize the maximum absolute difference to be the first element of the array\n    max_diff = abs(arr[0])\n    \n    # Iterate through the array from index 1 to the end\n    for i in range(1, len(arr)):\n        # Find the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        \n        # Update the maximum absolute difference if the current absolute difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        print(\"Array should have at least two elements.\")\n        return None\n    \n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    This function finds two integers x and y such that ax + by = n. If no such solution exists, it returns None.\n    \"\"\"\n\n    # initialize x and y\n    x = 0\n    y = 1\n\n    # loop until x^2 + y^2 >= n\n    while x**2 + y**2 < n:\n\n        # calculate the next x and y\n        x_next = (y**2 - n + (a * x)) / (2 * b)\n        y_next = (x**2 - n + (b * y)) / (2 * a)\n\n        # update x and y\n        x = x_next\n        y = y_next\n\n    # check if x and y are equal to the square root of n\n    if x == int(x**0.5):\n        return (int(x), int(x))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    \n    d = b**2 - 4*a*n\n    \n    if d < 0:\n        return None\n    \n    x1 = (-b + d**0.5)/(2*a)\n    x2 = (-b - d**0.5)/(2*a)\n    \n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = (-n + b) / a\n        y = (-n - b) / a\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant of the quadratic equation\n    d = b ** 2 - 4 * a * n\n    \n    # Check if the discriminant is positive\n    if d > 0:\n        # Calculate the two roots of the quadratic equation\n        x1 = (-b + d ** 0.5) / (2 * a)\n        x2 = (-b - d ** 0.5) / (2 * a)\n        \n        # Sort the roots in ascending order\n        x1, x2 = sorted((x1, x2))\n        \n        # Return the solution as a tuple\n        return (x1, x2)\n    # If the discriminant is negative, there are no real roots\n    elif d == 0:\n        return None\n    # If the discriminant is negative, the equation has two complex roots\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are zero\n    if a == 0 or b == 0:\n        return None\n\n    # Initialize variables\n    x = 0\n    y = 0\n    found = False\n\n    # Iterate until a solution is found\n    while not found:\n        # Calculate the next value of x and y\n        x = int((-n + a * y) / b)\n\n        # Check if x and y satisfy the given condition\n        if a * x + b * y == n:\n            found = True\n        else:\n            y += 1\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x0 = int((-b + n**0.5) / a)\n    x1 = int((-b - n**0.5) / a)\n    if x0**2 + x1**2 == n:\n        return (x0, x1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize x and y\n    x = 0\n    y = 0\n    \n    # loop until x and y have the same sign\n    while (x ** 2 + y ** 2) % (a * b)!= n:\n        \n        # update x if it's positive, and y if it's negative\n        if n < 0:\n            y = -y\n        else:\n            x = -x\n        \n        # update n\n        n = (n + a * x + b * y) % (a * b)\n    \n    # return x and y as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are non-zero and n is positive\n    if a == 0 or b == 0 or n <= 0:\n        return None\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # Check if discriminant is positive\n    if discriminant > 0:\n        x1 = (-b + discriminant**(1/2))/(2*a)\n        x2 = (-b - discriminant**(1/2))/(2*a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = -b/(2*a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(a, n+1):\n        if a * x + b * (n-x) == n:\n            return (x, n-x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check that a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n\n    # find the values of x and y that satisfy the equation ax + by = n\n    x = (-b + n // a) // b\n    y = (-a + n // b) // a\n\n    # check that the solution exists and is valid\n    if x < 0 or x >= a or y < 0 or y >= b:\n        return None\n\n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.pop(i)\n            i -= 1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1.remove(list2)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Initialize an empty list to store the final list\n    final_list = []\n    # Iterate through the first list\n    for item in list1:\n        # If the item is not present in the second list, append it to the final list\n        if item not in list2:\n            final_list.append(item)\n    # Return the final list\n    return final_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list that will hold the elements not in list2\n    result = []\n    # Loop through list1 and remove elements present in list2\n    for element in list1:\n        if element not in list2:\n            result.append(element)\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Using set() to remove duplicates from both lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    # Using list comprehension to remove the elements present in both lists\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for item in list1:\n        if item not in list2:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n + sum_series(n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    elif n % 2 == 1:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += (n - 2 * i)\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n // 2):\n        sum_val += (n - 2 * i)\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n - 2*sum_series(n-2) + sum_series(n-4)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    elif n < 2:\n        return 0\n    else:\n        total = n\n        for i in range(n // 2):\n            total += (n - 2*i)\n        return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = (s*s)/(4*math.tan(math.pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula\n    area = (s * (s - 1)) / 2\n    \n    # Return the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert the sides length and number to radians and then to degrees\n    sides = s * l\n    sides_in_rad = sides / 180 * pi\n    # Calculate the area of the polygon using the Heron's formula\n    area = (3 * tan(sides_in_rad / 3)) ** 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    sp = s * (l - 2)\n\n    # Calculate the area of the polygon using Heron's formula\n    return (sp * (tan(pi/l) ** 2)) / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the angle between the x-axis and each side\n    theta = math.pi / l\n    \n    # calculate the area of the polygon\n    A = 0.5 * s * l * math.sin(theta)\n    \n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * (s - l) * tan(pi/l)) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / (2 * pi)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the perimeter of the polygon\n    perimeter = s * l\n\n    # Calculate the area using the formula for a regular polygon\n    area = (s * (s - perimeter) * tan(pi/l)) / (4 * perimeter)\n\n    # Return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/2)*tan(pi/l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors\n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    \n    # Return True if the sum of the divisors of n is the same as the sum of its divisors\n    return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # use math.sqrt() to find the square root of n\n    square_root = math.sqrt(n)\n    # calculate the sum of the divisors\n    divisor_sum = 0\n    for i in range(1, square_root + 1):\n        if n % i == 0:\n            divisor_sum += i\n            divisor_sum += n // i\n    # check if the divisor sum is equal to n\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the given integer is equal to the original integer, otherwise False.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n%i == 0])\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n using a loop\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if i!= n/i:\n                div_sum += n/i\n    \n    # Check if the sum of the divisors of n is the same as the sum of the divisors of n+1\n    return div_sum == (n+1)**2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(num):\n        \"\"\"\n        Return the sum of the divisors of a given number.\n        \"\"\"\n        div_sum = 0\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_sum += i + num // i\n        return div_sum\n    \n    a = sum_of_divisors(n)\n    b = sum_of_divisors(a)\n    return a == b"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    \n    for i in range(int(math.sqrt(n))+1, n+1):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and returns True if the sum of the divisors of the integer is the same as the integer itself, otherwise False.\n    '''\n    # calculate the sum of the divisors of the integer\n    div_sum = sum(int(i) for i in str(n))\n    # check if the sum of divisors and integer are the same\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        '''\n        Recursive function to calculate the sum of all divisors of a given number.\n        '''\n        if num == 1:\n            return 1\n        return num + sum_divisors(num - 1)\n\n    div1, div2 = map(int, input(\"Enter two integers: \").split())\n    div1_sum = sum_divisors(div1)\n    div2_sum = sum_divisors(div2)\n    if div1_sum == div2_sum:\n        print(\"The sum of the divisors of\", div1, \"and\", div2, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", div1, \"and\", div2, \"are different.\")\n\nif __name__ == \"__main__\":\n    div_sum()"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n//i)\n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for i in range(26):\n        # Get the character at the current position in the alphabet and add 1 to its count in the dictionary\n        char_count[chr(ord('a') + i)] = char1.count(chr(ord('a') + i))\n    # Return the dictionary containing the count of characters at each position in the alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower().count(chr(i+97)) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    count = 0\n    str2 = str1.lower()\n    for i in range(26): \n        if str2.find(chr(i+97))!= -1: \n            count += 1\n    return count "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to ignore case\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of characters at each position\n    char_count = {}\n\n    # Loop through each character in the string\n    for i in range(26): \n        # If the current character is not already in the dictionary, add it with a count of 1\n        if chr(i+97) not in char_count: \n            char_count[chr(i+97)] = 1\n\n        # Otherwise, increment the count of that character in the dictionary\n        else: \n            char_count[chr(i+97)] += 1\n\n    # Loop through each character in the English alphabet\n    for i in range(26): \n        # If the current character is not already in the input string, continue to the next iteration\n        if chr(i+97) not in str1: \n            continue\n\n        # If the current character is already in the input string, increment the count in the dictionary\n        else: \n            char_count[chr(i+97)] -= 1\n\n    # Count the number of characters that occur at the same position in the string as in the English alphabet (case insensitive)\n    count = sum(value for value in char_count.values() if value > 0)\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all characters to lowercase\n    str1 = str1.lower()\n\n    # Initialize an empty dictionary to store the count of each character\n    count_dict = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the dictionary, increment its count by 1\n        if char in count_dict:\n            count_dict[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[char] = 1\n\n    # Initialize a variable to store the count of characters that occur at the same position in the English alphabet\n    same_pos_count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is in the English alphabet, check if it occurs at the same position in the string as well\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # If it does, increment the same_pos_count by 1\n            if str1.index(char) == str1.index(str1[str1.index(char)+1].upper()):\n                same_pos_count += 1\n\n    # Return the sum of the count of characters that occur at the same position in the English alphabet and the count of all other characters in the string\n    return same_pos_count + len(str1) - 26"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is a lowercase letter, update the count in the dictionary\n        if char.isalpha() and char.islower():\n            char_count[char] = char_count.get(char, 0) + 1\n    # return the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            index = alphabet.index(char.lower())\n            count += 1 if index == alphabet.index(char.lower().lower()) else 0\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize a dictionary to store the character counts\n    char_counts = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase\n        char = char.lower()\n        \n        # If the character is an English alphabet character, increment its count in the dictionary\n        if 'a' <= char <= 'z':\n            if char in char_counts:\n                char_counts[char] += 1\n            else:\n                char_counts[char] = 1\n    \n    # Return the dictionary containing the character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert all characters in the string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store the count of each character in the alphabet\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is in the alphabet (case insensitive)\n        if 'a' <= char <= 'z':\n            # Check if the character has already been counted in the dictionary\n            if char in char_count:\n                # Increment the count of the character in the dictionary\n                char_count[char] += 1\n            else:\n                # If the character has not been counted before, add it to the dictionary with a count of 1\n                char_count[char] = 1\n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Create a dictionary to store the frequency of characters at each position in the English alphabet\n    freq_dict = {}\n    # Loop through the string and count the frequency of characters at each position\n    for i in range(len(str1)):\n        if str1[i] in freq_dict:\n            freq_dict[str1[i]] += 1\n        else:\n            freq_dict[str1[i]] = 1\n    # Loop through the English alphabet and count the frequency of characters in the given string\n    count = 0\n    for i in range(len(str1)):\n        if i < 26:\n            char = chr(ord('a') + i)\n            if char in freq_dict and freq_dict[char] > 0:\n                count += freq_dict[char]\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                xor_value = A[i] ^ A[j]\n                if xor_value % 2 == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    '''\n    This function takes a list A as input and returns the number of pairs of integers in A\n    that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1 # subtract 1 to ensure we have a power of 2\n    n |= n >> 1 # double each bit until we reach the next power of 2\n    n |= n >> 2 # double each bit until we reach the next power of 2\n    n |= n >> 4 # double each bit until we reach the next power of 2\n    n |= n >> 8 # double each bit until we reach the next power of 2\n    n |= n >> 16 # double each bit until we reach the next power of 2\n    n += 1 # add 1 back to get the actual next power of 2\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # find the highest power of 2 smaller than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    # return the next highest power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the result to 1\n    result = 1\n    \n    # Iterate until we find a power of 2 greater than or equal to n\n    while result < n:\n        # Multiply the result by 2\n        result *= 2\n        \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the largest power of 2 less than or equal to n\n    largest_power_of_2 = 1\n    while largest_power_of_2 < n:\n        largest_power_of_2 <<= 1\n        \n    # Return the smallest power of 2 greater than or equal to n\n    return largest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return 1\n    \n    # binary search to find the next power of 2\n    left = 1\n    right = n\n    while left < right:\n        mid = (left + right) // 2\n        if mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid\n    \n    return 2 * left"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to keep track of the power of 2\n    power = 1\n    \n    # Loop until we find the smallest power of 2 greater than or equal to n\n    while power < n:\n        # Increment the power of 2\n        power *= 2\n    \n    # Return the power of 2 found\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the result variable with n\n    result = n\n    \n    # Loop while result is not a power of 2\n    while result & (result - 1)!= 0:\n        # If result is a power of 2, increment it by 1\n        result += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # convert n to binary\n    binary_str = bin(n)[2:]\n    # count the number of 1's in the binary string\n    count = sum(1 for i in binary_str if i == '1')\n    # calculate the power of 2 that is greater than or equal to n\n    return 2 ** count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Use bitwise operations to find the smallest power of 2 greater than or equal to n\n    i = 1\n    while i <= n:\n        if i == 1 << 16: # stop when 32-bit limit is reached\n            return None # return None if 32-bit limit is reached\n        if (i << 16) >= n:\n            return i # return the smallest power of 2 greater than or equal to n\n        i <<= 1 # multiply i by 2 to find the next power of 2"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in range(len(a)): \n        if a[i] == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as input and returns the number of times the given number appears in the list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # check if the range is valid\n    if m > n:\n        m, n = n, m\n\n    # initialize the sum variable\n    sum_value = 0\n\n    # iterate through the list\n    for i in range(m, n+1):\n        # check if the current index is in the range\n        if i in range(len(list1)):\n            # add the value to the sum variable\n            sum_value += list1[i]\n\n    # return the sum value\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(lst, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the indices are valid\n    if m < 0 or n < 0 or m >= len(lst) or n >= len(lst):\n        return None\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the indices in the range and add the corresponding elements to the sum\n    for i in range(m, n+1):\n        total += lst[i]\n    \n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(i, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_ = 0\n    for i in range(m, n+1):\n        sum_ += list1[i-m]\n    return sum_\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the pentagon using the formula: 5 * a\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of a regular pentagon using the formula (5*a)/2\n    perimeter = (5*a)/2\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculating the length of a side of the pentagon\n    b = 5/4 * a\n    # using the formula for the area of a triangle and calculating the semi-perimeter of the pentagon\n    s = (3*a**2 + 5*b**2)**0.5\n    # using the formula for the area of a triangle and calculating the area of the pentagon\n    area = (5*b**2)/(4*s)\n    # using the formula for the perimeter of a regular polygon\n    perimeter = 5 * a\n    # returning the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the sine and cosine of the angles of each side of the pentagon\n    sine_angles = [math.sin(i*math.pi/5) for i in range(5)]\n    cosine_angles = [math.cos(i*math.pi/5) for i in range(5)]\n    \n    # Calculate the length of each side of the pentagon\n    side_lengths = [a*cosine_angles[i] + a*sine_angles[i] for i in range(5)]\n    \n    # Calculate the perimeter of the pentagon\n    perimeter = 5*sum(side_lengths)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Use Heron's formula to calculate the semi-perimeter\n    semi_perimeter = (5 * a**2) / 4\n    \n    # Use the formula to calculate the area and use it to calculate the perimeter\n    area = (5 * a**2) / 10\n    perimeter = semi_perimeter + area\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the pentagon\n    s = (5 * a) / 2\n\n    # Calculate the area of the pentagon\n    area = (5 * a * a) / 4\n\n    # Calculate the perimeter of the pentagon\n    perimeter = (10 * a) + (5 * a * a) + (5 * a * a * a)\n\n    # Return the values of perimeter and area\n    return perimeter, area"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for char in s:\n        if char =='s' and s.count(char) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find(\"std\", index)\n        if index!= -1:\n            count += 1\n            index += 3  # skip the'std' string\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    while'std' in s:\n        count += s.count('std')\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to keep track of the data type of the first element in the tuple\n    first_data_type = type(test_tuple[0])\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # If the current element's data type is not equal to the first element's data type, return False\n        if type(element)!= first_data_type:\n            return False\n    # If all elements in the tuple have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # create a set to keep track of the data types of all the elements in the tuple\n    data_types = set()\n    # iterate over all the elements in the tuple\n    for element in test_tuple:\n        # add the data type of the current element to the set of data types\n        data_types.add(type(element))\n    # check if all the data types in the set are the same or not\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = []\n    for element in test_tuple:\n        data_types.append(type(element))\n\n    if len(set(data_types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n\n    data_type = type(test_tuple[0]) # get first element's data type\n\n    for item in test_tuple:\n        if type(item)!= data_type: # if current element's data type is different from first element's data type\n            return False # return False if any item has different data type\n\n    return True # return True if all items have same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as an argument and returns True if all elements in the tuple have the same data type,\n    else it returns False.\n    '''\n    # first check if the tuple is empty\n    if not test_tuple:\n        return False\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n    # check if all elements in the tuple are of the same data type\n    for element in test_tuple:\n        if type(first_element)!= type(element):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = set()\n    for item in test_tuple:\n        types.add(type(item))\n    return len(types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # count the number of occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    # check if the number of occurrences is more than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # initialize the count and the candidate element to 0\n    count = 0\n    candidate = 0\n\n    # loop through the array\n    for i in range(n):\n        # if the element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        # if the count is greater than n/2, return True\n        elif count > n//2:\n            return True\n        # otherwise, set the candidate to the current element and reset the count\n        else:\n            count = 1\n            candidate = arr[i]\n\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    left, right = 0, n - 1\n    count_left, count_right = 0, 0\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            count_left += 1\n            count_right += 1\n            left = mid + 1\n        elif arr[mid] < x:\n            count_left += 1\n            left = mid + 1\n        else:\n            count_right += 1\n            right = mid - 1\n\n        if count_left > n // 2:\n            return True\n        elif count_right > n // 2:\n            return True\n\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Count the occurrences of x in the array\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    # Return whether the element is the majority element or not\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        elif count > 0:\n            count -= 1\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function takes a positive integer n and returns the count of set bits in it.\n\n    Examples:\n    count_Set_Bits(25) # Output: 5\n    count_Set_Bits(128) # Output: 8\n\n    The function works by iterating through each bit in the binary representation of n and checking if it is set or not.\n    If a bit is set, we increment a counter. Once the iteration is complete, we return the count of set bits.\n    \"\"\"\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer `n` and counts the number of set bits (binary digits with value 1) in it.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Counts the number of set bits (binary digits with value 1) in a given number.\n    \n    Parameters:\n    n (int): a positive integer\n    \n    Returns:\n    int: the number of set bits in n\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        if n & 1 == 1: \n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(ord(c) - 1) if i % 2 == 1 else c for i, c in enumerate(str)])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i%2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    \n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_values = []\n    for i in range(len(str)):\n        if i % 2 == 1:\n            odd_values.append(str[i])\n    return ''.join(odd_values)\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(c)-1) if (i%2==0) else c for i, c in enumerate(str)])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str: A string.\n\n    Returns:\n        The modified string without odd index values.\n    \"\"\"\n    # initialize an empty string to store the modified string\n    modified_str = \"\"\n    \n    # iterate through each character in the input string\n    for i in range(len(str)):\n        # if the index of the current character is odd, append it to the modified string\n        if i % 2!= 0:\n            modified_str += str[i]\n            \n    # return the modified string\n    return modified_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function finds the minimum of three numbers.\n    \"\"\"\n    # Initialize a variable to store the minimum number\n    min_num = None\n    \n    # Check if the first number is smaller than the second number\n    if a < b:\n        if a < c:\n            min_num = a\n        else:\n            min_num = c\n    else:\n        if b < c:\n            min_num = b\n        else:\n            min_num = c\n    \n    # Return the minimum number\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b < c:\n        return a\n    elif b < a < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if l is greater than or equal to 0\n    if l < 0:\n        return \"Invalid input: l should be greater than or equal to 0\"\n\n    # Check if r is less than or equal to n\n    if r > n:\n        return \"Invalid input: r should be less than or equal to n\"\n\n    # If both conditions are satisfied, then check if all bits are unset in the given range\n    bit_set = False\n    for i in range(l, r+1):\n        if bin(i)[2:].count('1')!= 0:\n            return \"All bits are set in the given range\"\n\n    return \"All bits are unset in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Find the number of set bits in the range [l, r]\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n & (1 << i)).count('1')\n    # Check whether all bits are set or not\n    return count == 32"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the input values to binary strings\n    binary_n = bin(n)[2:]\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n\n    # Check if all the bits in binary_n are set to 1\n    all_bits_n_set = all(int(binary_n[i]) == 1 for i in range(len(binary_n)))\n\n    # Check if all the bits in binary_l are set to 1\n    all_bits_l_set = all(int(binary_l[i]) == 1 for i in range(len(binary_l)))\n\n    # Check if all the bits in binary_r are set to 1\n    all_bits_r_set = all(int(binary_r[i]) == 1 for i in range(len(binary_r)))\n\n    # If all the bits in binary_n are set to 1, all the bits in binary_l and binary_r are set to 1\n    if all_bits_n_set:\n        return all_bits_l_set and all_bits_r_set\n\n    # If all the bits in binary_l are set to 1 and all the bits in binary_r are set to 1, all the bits in binary_n are unset\n    elif all_bits_l_set and all_bits_r_set:\n        return False\n\n    # If none of the above conditions are satisfied, all the bits are set in the given range\n    else:\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Loop through the range and check if all the bits are set or not\n    for i in range(l, r+1):\n        if bin(n & (1 << i))[2:].zfill(32)!= '0' * (32 - i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1)!= 0:\n        return False\n    # Check if n is within the given range\n    if n < l or n > r:\n        return False\n    # Check if all the bits are set to 1 in the given range\n    mask = 1\n    for i in range(l,r+1):\n        if (n & mask)!= mask:\n            return False\n        mask <<= 1\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    # Calculate the range of bits that need to be checked\n    range_bits = r - l + 1\n    \n    # Iterate over all possible values of the first l bits\n    for i in range(2**l):\n        # Calculate the binary representation of the current value of l bits\n        current_bits = bin(i)[2:].zfill(l)\n        \n        # Check if the current value of l bits is unset in the given range\n        if not (current_bits.replace('0', '') == '' or (int(current_bits.replace('0', ''), 2) & (1 << range_bits - 1))):\n            return False\n    \n    # If all the bits are unset in the given range, the function should return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # loop through all bits in the range\n    for i in range(l, r+1):\n        # check if the i-th bit is set\n        if (n & (1 << i))!= 0:\n            # if it is set, return False\n            return False\n    # if we get here, all bits are unset in the given range\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: Integer value representing the given range\n    :param l: Integer value representing the left bound of the given range\n    :param r: Integer value representing the right bound of the given range\n    :return: Boolean value indicating whether all the bits are set in the given range or not.\n    \"\"\"\n\n    # Convert the given range to binary and check if all the bits are set\n    binary = bin(n)[2:]\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            if int(binary[i]) >= l and int(binary[i]) <= r:\n                return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Create a list to store the unset bits\n    unset_bits = []\n    # Iterate through each bit in the integer n\n    for i in range(32):\n        # Calculate the bit position and check if it is set or not\n        bit_pos = l + i\n        if (n & (1 << bit_pos)) == 0:\n            unset_bits.append(bit_pos)\n    # Check if all the unset bits are in the range of [l, r]\n    if len(unset_bits) == r-l+1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Check if the array has less than n elements\n    if len(arr) < n:\n        print(\"Array has less than n elements.\")\n        return\n    \n    # Separate the negative and positive elements of the array\n    negative = []\n    positive = []\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Combine the negative and positive elements into a single array\n    result = negative + positive\n    \n    # Re-arrange the array to preserve the relative order of negative and positive elements\n    for i in range(n):\n        arr[i] = result[i]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in range(n):\n        if arr[i] > 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n    \n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            positive.append(arr[i])\n        else:\n            negative.append(arr[i])\n    \n    return negative + positive"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables for negative and positive indices\n    neg_index = 0\n    pos_index = 0\n    \n    # iterate through the array and find the first n negative and positive indices\n    for i in range(n):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index += 1\n    \n    # iterate through the array again and find the remaining negative and positive indices\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[neg_index], arr[i] = arr[i], arr[neg_index]\n            neg_index += 1\n        else:\n            arr[pos_index], arr[i] = arr[i], arr[pos_index]\n            pos_index += 1\n    \n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize three pointers to keep track of the current positive element, negative element, and the current index\n    i = 0\n    j = 0\n    k = 0\n    \n    # Traverse the array until we reach the end of the first n elements\n    while i < n:\n        # If the current element is positive, move to the next element\n        if arr[i] > 0:\n            i += 1\n        # If the current element is negative, move it to the current position and move the current position to the next positive element\n        elif arr[i] < 0:\n            arr[j], arr[i] = arr[i], arr[j]\n            i += 1\n            j += 1\n        # If the current element is zero, move to the next element\n        else:\n            i += 1\n    \n    # Traverse the array again, this time moving the negative elements to the current position and the positive elements to the next position\n    while j < len(arr):\n        # If the current element is positive, move to the next element\n        if arr[j] > 0:\n            j += 1\n        # If the current element is negative, move it to the current position and move the current position to the next negative element\n        elif arr[j] < 0:\n            arr[k], arr[j] = arr[j], arr[k]\n            j += 1\n            k += 1\n        # If the current element is zero, move to the next element\n        else:\n            j += 1\n    \n    # Print the final re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    # Sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    # Initialize two pointers, one for the positive elements and one for the negative elements\n    pos = 0\n    neg = n\n    # Iterate over the sorted array\n    for num in sorted_arr:\n        # If the current element is negative, swap it with the element pointed to by neg\n        if num < 0:\n            arr[pos], arr[neg] = arr[neg], arr[pos]\n            pos += 1\n            neg += 1\n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two empty lists to hold negative and positive elements\n    neg_lst = []\n    pos_lst = []\n    \n    # Iterate through the array and add each element to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_lst.append(arr[i])\n        else:\n            pos_lst.append(arr[i])\n    \n    # Add the remaining elements to the end of the appropriate list\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            neg_lst.append(arr[i])\n        else:\n            pos_lst.append(arr[i])\n    \n    # Concatenate the two lists and return the resulting array\n    return neg_lst + pos_lst"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Traverse the array from the beginning to the end\n    for i in range(n):\n        # Initialize two variables to keep track of the minimum and maximum elements seen so far\n        min_element = arr[i]\n        max_element = arr[i]\n        # Traverse the array from the i+1th index to the end\n        for j in range(i+1, len(arr)):\n            # If the current element is negative, update the minimum element\n            if arr[j] < 0:\n                if arr[j] < min_element:\n                    min_element = arr[j]\n                # If the current element is positive, update the maximum element\n                elif arr[j] > max_element:\n                    max_element = arr[j]\n        # Swap the minimum and maximum elements\n        arr[i], arr[min_element] = arr[min_element], arr[i]\n        arr[i], arr[max_element] = arr[max_element], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize the variables to store the positive and negative elements\n    pos = []\n    neg = []\n\n    # iterate through the array and add elements to the positive and negative lists\n    for i in range(n):\n        if arr[i] > 0:\n            pos.append(arr[i])\n        elif arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            # if the element is zero, add it to both lists\n            pos.append(arr[i])\n            neg.append(arr[i])\n\n    # iterate through the array and add elements to the remaining lists\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            pos.append(arr[i])\n        elif arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            # if the element is zero, add it to both lists\n            pos.append(arr[i])\n            neg.append(arr[i])\n\n    # concatenate the positive and negative lists and return the result\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n\n    # create two lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # iterate over the array and add elements to the appropriate list\n    for num in arr:\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n\n    # concatenate the two lists into a single list\n    new_list = neg_list + pos_list\n\n    # sort the new list in ascending order\n    new_list.sort()\n\n    # remove the first n elements from the array and replace them with the first n elements of the new list\n    arr[:n] = new_list[:n]\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Function to check if two elements are equal\n    def compare(a, b):\n        if a < b:\n            return -1\n        elif a == b:\n            return 0\n        else:\n            return 1\n    \n    # Sort the array in ascending order\n    arr.sort(key=lambda x: x, reverse=False)\n    \n    # Check if the first n elements are negative\n    negative = [x for x in arr[:n] if x < 0]\n    \n    # Check if the first n elements are positive\n    positive = [x for x in arr[:n] if x > 0]\n    \n    # Check if the first n elements are zero\n    zero = [x for x in arr[:n] if x == 0]\n    \n    # Concatenate the negative, positive, and zero lists\n    arr_sorted = negative + positive + zero\n    \n    # Return the sorted array\n    return arr_sorted"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if c.isspace() else c for c in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Using replace() method to replace blank spaces with the given character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n        elif i == \" \" and char!= \"\":\n            new_str += char\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # replace all blank spaces with the specified character\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # split the string into words\n    words = str1.split()\n    # loop through each word in the list\n    for i in range(len(words)):\n        # replace all blank spaces with the character\n        words[i] = words[i].replace(\" \", char)\n    # join the words back into a string with the replaced blank spaces\n    return \" \".join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq to extract the n largest elements from the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # Remove the largest element from the heap and append it to the result list\n    result = [heapq.heappop(heap)]\n\n    # Append the remaining elements from the original list to the result list in decreasing order\n    for item in list1[n:]:\n        if item > result[0]:\n            heapq.heappushpop(heap, item)\n            result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, i)\n        elif i > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, i)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the surface area of a cylinder using its formula:\n    # Area = pi * r^2 * h\n    area = math.pi * (r**2) * h\n\n    # Return the calculated area:\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * math.pi * r * h  # Formula to find the lateral surface area of a cylinder\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*(r**2+h**2)\n\nr = int(input(\"Enter the radius of the cylinder: \"))\nh = int(input(\"Enter the height of the cylinder: \"))\n\narea = lateralsuface_cylinder(r,h)\nprint(\"The lateral surface area of the cylinder is:\",area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = math.pi*r**2\n    B = math.pi*r*h\n    C = math.pi*r*r\n    lateral_surface = (A + B + C)/3\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    area = math.pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * (r * r) * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * (h + r)\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # Cube of the side length is the volume of the cube\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3  # calculating the volume of the cube by squaring the side length\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0 # initialize the result to 0\n    while n > 0: # loop through each bit of n\n        if n & 1 == 0: # if the current bit is even\n            result |= 1 # set the corresponding bit in the result to 1\n        n >>= 1 # shift the bits to the right by 1 bit\n    return result # return the final result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit in the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1 and add it to the result\n        if int(bit) % 2 == 0:\n            result += int(bit)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n ^ n >> 1\n    even_bits |= (1 << 2) << (n & 1)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the set bits\n    set_bits = []\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, add it to the set_bits list\n        if int(bit) == 0:\n            set_bits.append(bit)\n        # If the bit is odd, remove it from the set_bits list\n        else:\n            set_bits.remove(bit)\n    # Convert the list to an integer and return it\n    return int(''.join(set_bits), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n    \n    # Loop through each bit of n\n    for i in range(len(bin(n)[2:])):\n        # Check if the current bit is even\n        if bin(n)[2:].count('0') % 2 == 0:\n            # If the current bit is even, append it to the list of even bits\n            even_bits.append(bin(n)[2:].count('0') % 2)\n    \n    # Convert the list of even bits to an integer and return it\n    return int(''.join(str(x) for x in even_bits))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of the input number\n    even_bits = 0\n    # loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the bit is an even number, set the corresponding bit in the even_bits variable to 1\n        if int(bit) % 2 == 0:\n            even_bits |= int(bit)\n    # return the even bits of the input number\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits\n    even_bits = 0\n    # loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set the corresponding bit in the even_bits variable to 1\n        if int(bit) == 0:\n            even_bits += 1\n    # return the sum of even_bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    result = 0\n    # Loop through each bit of the number and set it to 1 if it's even, otherwise set it to 0.\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to keep track of the number of bits set to 1\n    count = 0\n    \n    # loop through each bit in the binary representation of n\n    for i in range(32): \n        # if the current bit is even, set it to 1\n        if n & (1 << i): \n            n |= (1 << i)\n            count += 1\n            \n    # return the number of bits set to 1\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize result variable\n    result = 0\n\n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # Check if the current bit is even\n        if int(bit) % 2 == 0:\n            # Set the corresponding bit to 1\n            result = result | (1 << int(bit))\n\n    # Return the updated number\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of unique tuples\n    count_dict = {}\n\n    # loop through the test_list and count the occurrences of each unique tuple\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Iterate over the list of tuples\n    for tup in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[tup] += 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Use Counter to count the occurrences of each tuple in the set\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object to count the occurrences of each tuple in the test_list\n    counter = Counter(test_list)\n    # Create an empty dictionary to store the result\n    result = {}\n    # Loop over the items in the Counter object and add them to the result dictionary\n    for key, value in counter.items():\n        result[key] = value\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tuple in unique_tuples:\n        count_dict[tuple] = test_list.count(tuple)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts of each unique tuple\n    counts = {}\n    # loop through the list of tuples\n    for item in test_list:\n        # add 1 to the count for each tuple in the list\n        counts[item] = counts.get(item, 0) + 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Check if the tuple exists in the dictionary\n        if tup in counts:\n            # Increment the count for the tuple\n            counts[tup] += 1\n        else:\n            # If the tuple does not exist, add it to the dictionary with a count of 1\n            counts[tup] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Use the Counter object to create a dictionary mapping each unique tuple to its count\n    result = dict(counter)\n    return result"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    # Initialize an empty dictionary to store the count of non-empty substrings\n    counts = {}\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize a variable to store the current substring\n        current_substring = str[i]\n        \n        # Initialize a variable to store the previous substring\n        prev_substring = None\n        \n        # Loop through each character from the current index\n        for j in range(i+1, len(str)+1):\n            # Check if the current substring is not empty\n            if j - i > 0:\n                # Check if the substring is a substring of the previous substring\n                if str[i:j] in str[i:j] and (prev_substring is None or current_substring not in prev_substring):\n                    # If it is, add it to the dictionary with a count of 1\n                    if current_substring not in counts:\n                        counts[current_substring] = 1\n                    else:\n                        counts[current_substring] += 1\n            \n            # Update the previous substring\n            prev_substring = current_substring\n    \n    # Return the number of non-empty substrings\n    return len(counts)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function calculates the total number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    sequence_count = 0\n    for i in range(1, m):\n        if i >= 2 * sequence_count:\n            sequence_count += 1\n        if i >= 2 * sequence_count and i <= m:\n            sequence_count += 1\n\n    return sequence_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m):\n        current_sum = i + 2\n        while current_sum <= m:\n            if current_sum == n:\n                total_sequences += 1\n            current_sum += 2\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables to store the number of possible sequences and the current sequence\n    num_sequences = 0\n    current_sequence = [0]\n\n    # Initialize the previous element as -1 and iterate through the range of elements to consider\n    prev_element = -1\n    for i in range(2, m + 1):\n        # Check if the current element is greater than or equal to twice the previous element but less than or equal to m\n        if i >= 2 * prev_element <= m:\n            # Add 1 to the number of possible sequences and add the current element to the sequence\n            num_sequences += 1\n            current_sequence.append(i)\n            # Update the previous element\n            prev_element = i\n\n    # Return the total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Counting the number of possible sequences\n    count = 0\n    # Loop through all numbers between 2 and m\n    for i in range(2, m+1):\n        # Loop through all numbers between 2 and i-1\n        for j in range(2, i):\n            # If the sum of the two numbers is greater than or equal to n\n            if j+i >= n:\n                # Increment the count\n                count += 1\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    if m < 1 or n < 1:\n        return 0\n    \n    prev = 1\n    count = 0\n    \n    while prev <= m:\n        count += 1\n        temp = prev\n        while temp + prev <= m and temp + prev <= n:\n            temp += prev\n        prev = temp\n    \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(2, m+1):\n        if i >= 2*i <= m:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the count variable\n    count = 0\n\n    # Initialize the two-pointer variables\n    i = 0\n    j = 2\n\n    # Loop until the two-pointer variables meet\n    while i < m:\n        if j >= m:\n            j = 2\n        if j <= 2 * i:\n            j += 1\n        if i < j:\n            count += 1\n        i += 1\n\n    # Return the count of possible sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(i, j, prev_value):\n        if j == 0:\n            return True\n        return i == j - 1 or (i - j - 1) % 2 == 0 and i - j - 1 >= prev_value * 2 and i - j - 1 <= m * 2\n\n    total_sequences = 0\n    for i in range(1, m + 1):\n        prev_value = i\n        for j in range(1, n + 1):\n            if is_valid(i, j, prev_value):\n                total_sequences += 1\n                prev_value = i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    prev = 0\n    for i in range(1,n+1):\n        current = (i*2) % m\n        if current > prev and current <= m:\n            count += 1\n        prev = current\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize variables\n    prev = 0\n    count = 0\n    total_count = 0\n\n    # Iterate over all possible sequences of length n\n    for i in range(2, n + 1):\n        # Calculate the next element of the sequence\n        next_element = max(prev * 2, m)\n        # Check if the next element is within the specified range\n        if next_element <= m:\n            # Increment the count\n            count += 1\n        # Update the previous element and count\n        prev = next_element\n        total_count += count\n\n    return total_count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Find the index of the last element in list1\n    last_index = len(list1) - 1\n    \n    # Replace the last element of list1 with the elements of list2\n    list1[last_index] = list2\n    \n    # Return the updated list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        return \"Lists must have the same length.\"\n    else:\n        # Replace the last element of list1 with the elements of list2\n        list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_element = list1[-1]\n    list1[-1] = list2\n    list1.append(last_element)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    last_index = len(list1) - 1\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        list1.extend([list2[-1]] * (len(list1) - len(list2)))\n    else:\n        list2.extend([list1[-1]] * (len(list2) - len(list1)))\n    list1[len(list1)-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Check if the number is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return N + 1\n\n    # Find the next perfect square number greater than N\n    i = math.ceil(math.sqrt(N))\n    j = math.floor(math.sqrt(N))\n    while i <= j:\n        next_num = 2 * i * i + 1\n        if next_num > N:\n            return next_num\n        elif next_num < N:\n            i += 1\n        else:\n            j -= 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Multiply the square root by 2 and round down to get the next perfect square\n    next_sqrt_N = math.floor(sqrt_N * 2)\n\n    # Multiply the square root by 2 again to get the next perfect square\n    next_next_sqrt_N = math.floor(next_sqrt_N * 2)\n\n    # Check if the next perfect square is greater than the given number\n    if next_next_sqrt_N > N:\n        return next_next_sqrt_N\n    else:\n        return -1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initializing variables\n    x = N\n    y = N + 1\n\n    # finding the next perfect square greater than x\n    while y*y <= x:\n        x = y\n        y += 1\n\n    # finding the next perfect square greater than y\n    while x*x <= y:\n        x = x + 1\n        y = x*x\n\n    # returning the next perfect square greater than N\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n\n    # Helper function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # Check if the given number is a perfect square\n    if is_perfect_square(N):\n        return N\n\n    # Find the next number greater than the given number that is a perfect square\n    i = N\n    while True:\n        i += 1\n        if is_perfect_square(i):\n            break\n\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number N as input and returns the next perfect square greater than N.\n    '''\n    N = int(N)\n\n    # Find the largest prime factor of N\n    largest_prime_factor = math.ceil(math.sqrt(N))\n\n    # If N is already a perfect square, return N+2\n    if largest_prime_factor**2 == N:\n        return N+2\n\n    # If N is not a perfect square, calculate the next perfect square\n    else:\n        return largest_prime_factor**2 + 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Find the square root of the given number N\n    root = math.sqrt(N)\n    # Convert the square root to an integer\n    root = int(root)\n    # Check if the square root is odd or even\n    if root % 2 == 1:\n        # If it's odd, then the next square greater than N is (root+1)**2\n        next_square = (root+1)**2\n    else:\n        # If it's even, then the next square greater than N is (root+2)**2\n        next_square = (root+2)**2\n    # Check if the next square is greater than N\n    if next_square > N:\n        # If it is, then we need to find the next larger odd square root\n        while next_square > N:\n            root += 1\n            next_square = (root+1)**2\n        # Now we need to check if the next square is even or odd\n        if next_square % 2 == 1:\n            return (root-1)**2\n        else:\n            return (root+1)**2\n    else:\n        # If it's not greater than N, then we can return the next square\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # find the square root of N\n    root_N = math.sqrt(N)\n\n    # check if the square root is an integer\n    if root_N.is_integer():\n        # if it is, calculate the next integer greater than the square root\n        next_integer = root_N + 1\n    else:\n        # if it's not, round up to the nearest integer\n        next_integer = int(root_N) + 1\n\n    # calculate the square of the next integer\n    next_integer_squared = next_integer**2\n\n    # check if the next integer is greater than N\n    if next_integer_squared > N:\n        # if it is, return the square of the next integer\n        return next_integer_squared\n    else:\n        # if it's not, return the square of the next perfect square greater than N\n        return next_Perfect_Square(next_integer)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n\n    Args:\n        N: An integer representing the number for which the next perfect square is required.\n\n    Returns:\n        An integer representing the next perfect square greater than N.\n\n    Example:\n        >>> next_Perfect_Square(10)\n        16\n        >>> next_Perfect_Square(16)\n        25\n        >>> next_Perfect_Square(25)\n        36\n    \"\"\"\n\n    # Use binary search to find the next perfect square greater than N\n    low = N\n    high = int(math.sqrt(N))\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid > N:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n    return high * high"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        N += 1\n        square = math.sqrt(N)\n        if math.isqrt(square) == int(math.isqrt(square)):\n            return N\n        N += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    if N == 0:\n        return 1\n    elif N == 1:\n        return 4\n\n    square = int(math.sqrt(N))\n    root = square * square\n\n    while True:\n        square += 1\n        root = square * square\n        if root > N:\n            return root\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return 0\n\n    # Initialize variables for the maximum sum and the last element of the array\n    max_sum = arr[0]\n    last_elem = arr[-1]\n\n    # Loop through the array from left to right and calculate the maximum sum of a bitonic subsequence\n    for i in range(1, len(arr)):\n        # If the current element is increasing and the last element is decreasing, update the maximum sum\n        if arr[i] > arr[i-1] and last_elem < arr[i]:\n            max_sum = max(max_sum, arr[i])\n        # If the current element is decreasing and the last element is increasing, update the last element\n        if arr[i] < arr[i-1] and last_elem > arr[i]:\n            last_elem = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_left = 0\n    max_right = 0\n    max_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_left += arr[i]\n            max_right = max(max_right, max_left)\n        else:\n            max_right += arr[i]\n            max_left = max(max_left, max_right)\n        max_sum = max(max_sum, max_left + max_right)\n\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    max_sum = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            # bitonic increasing subsequence\n            curr_sum = arr[i]\n        else:\n            # bitonic decreasing subsequence\n            curr_sum = arr[i] - arr[i-1]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables\n    inc_sum = 0\n    dec_sum = 0\n    max_sum = float('-inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the sequence is increasing\n        if i == 0 or arr[i] > arr[i-1]:\n            # If the sequence is increasing, add the value to the sum\n            inc_sum += arr[i]\n        else:\n            # If the sequence is decreasing, add the value to the sum\n            dec_sum += arr[i]\n\n        # Update the maximum sum if necessary\n        if i == 0 or (arr[i] > arr[i-1] and arr[i] > max_sum):\n            max_sum = arr[i]\n        elif (arr[i] < arr[i-1] and arr[i] > max_sum):\n            max_sum = inc_sum - dec_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n    for i in range(n):\n        if arr[i] < arr[i + 1]:\n            # increasing subsequence\n            curr_sum = arr[i] + prev_sum\n        else:\n            # decreasing subsequence\n            curr_sum = arr[i + 1] + prev_sum\n        max_sum = max(max_sum, curr_sum)\n        prev_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # Initialize variables for maximum sum and sum of increasing subsequence\n    max_sum = sum_inc = 0\n    # Iterate through the array and find the maximum sum of increasing subsequence\n    for i in range(n):\n        if i % 2 == 0:\n            sum_inc += arr[i]\n            if sum_inc > max_sum:\n                max_sum = sum_inc\n        else:\n            sum_inc -= arr[i]\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return arr[0]\n\n    # Find the maximum sum of a decreasing subsequence\n    decreasing_sum = max_sum(arr[1:])\n\n    # Initialize the maximum sum of a bitonic subsequence to be the maximum sum of a decreasing subsequence\n    max_bitonic_sum = decreasing_sum\n\n    # Find the maximum sum of a bitonic subsequence using a sliding window approach\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_bitonic_sum = max(max_bitonic_sum, arr[i] + arr[i-1])\n\n    return max_bitonic_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Find the length of the array\n    n = len(arr)\n    \n    # Create an auxiliary array to store the maximum sum of subsequences ending at each index\n    max_ending_here = [0] * n\n    \n    # Initialize the maximum sum to be the first element of the array\n    max_sum = arr[0]\n    \n    # Loop through the array from the second element\n    for i in range(1, n):\n        # Calculate the maximum sum of a subsequence ending at the current index\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1] + arr[i])\n        \n        # Update the maximum sum if necessary\n        if max_sum < max_ending_here[i]:\n            max_sum = max_ending_here[i]\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    # initialize max_sum to the first element\n    max_sum = arr[0]\n    # initialize two pointers to the first and second elements\n    i = 0\n    j = 1\n    # calculate the sum of the first two elements\n    current_sum = arr[i] + arr[j]\n    # keep track of the maximum sum found so far\n    max_ending_here = current_sum\n    # loop through the rest of the array\n    while j < n:\n        # calculate the sum of the next two elements\n        next_sum = arr[i] + arr[j]\n        # if the next sum is greater than the current sum, update the current sum and move the i pointer\n        if next_sum > current_sum:\n            current_sum = next_sum\n            i += 1\n        else:\n            # otherwise, update the current sum and move the j pointer\n            current_sum = next_sum\n            j += 1\n        # update the maximum sum found so far\n        max_ending_here = max(max_ending_here, current_sum)\n    return max_ending_here"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    n = len(arr)  # find the length of the array\n    \n    # check if the array is bitonic\n    if arr[0] < arr[1]:\n        if arr[n-1] > arr[n-2]:\n            return max(arr[i] + arr[j] for i in range(1, n-1) for j in range(i+1, n))\n        else:\n            return max(arr[i] + arr[j] for i in range(1, n-1) for j in range(i+1, n))\n    else:\n        if arr[n-1] < arr[n-2]:\n            return max(arr[i] + arr[j] for i in range(1, n-1) for j in range(i+1, n))\n        else:\n            return max(arr[i] + arr[j] for i in range(1, n-1) for j in range(i+1, n))"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Base case: if the number is less than or equal to 1, return the number itself\n    if number <= 1:\n        return number\n    \n    # Initialize variables\n    current_guess = number / 2\n    previous_guess = current_guess\n    previous_difference = 0\n    \n    # Iterate until we find an approximate square root\n    while True:\n        # Calculate the difference between the current guess and the actual square root\n        difference = current_guess**2 - number\n        \n        # If the difference is very small, return the current guess as the approximate square root\n        if abs(difference) < 1e-15:\n            return current_guess\n        \n        # Update the previous values of the guess and difference\n        previous_guess = current_guess\n        previous_difference = difference\n        \n        # Update the current guess by finding the average of the previous two guesses\n        current_guess = (previous_guess + number/previous_guess) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        x = 1\n        y = number\n        while abs(x*x - y) > 0.00001:\n            x = (x + y/x) / 2\n        return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # initialize x and y\n    x = y = number / 2\n    # iterate until x converges to within a tolerance of 0.00001\n    while abs(x - y) > 0.00001:\n        # update x\n        x = (x + y) / 2\n        # update y\n        y = (number / x + x) / 2\n    # return the final x value\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        print(\"Error: Input must be a positive number.\")\n        return\n    \n    sqrt_guess = 1\n    sqrt_prev = 0\n    \n    while abs(sqrt_guess*sqrt_guess - number) > 0.0001:\n        sqrt_prev = sqrt_guess\n        sqrt_guess = (sqrt_guess + number / sqrt_guess) / 2\n    \n    return sqrt_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    n = number\n    i = 1\n    root = 0.0\n    \n    # while n is greater than 1, perform babylonian method\n    while n > 1:\n        # compute n^(i/2)\n        factor = n**(0.5)\n        n = n/factor\n        \n        # update root and iteration count\n        root = root + factor\n        i = i + 1\n    \n    # return computed square root\n    return root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Define a tolerance for the iterative process\n    TOLERANCE = 1e-12\n\n    # Initialize the guess for the square root\n    guess = number / 2\n\n    # Keep track of the number of iterations\n    num_iterations = 0\n\n    # Iterate until the difference between the guess and the square root is less than or equal to the tolerance\n    while abs(guess**2 - number) > TOLERANCE:\n        guess = (guess + number / guess) / 2\n        num_iterations += 1\n\n    # Print the final guess and the number of iterations taken\n    print(\"The square root of\", number, \"is approximately\", guess, \"with\", num_iterations, \"iterations.\")\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the first two guesses for the square root\n    guess_1 = number / 2\n    guess_2 = number / (2 * guess_1)\n    \n    # Initialize a counter for the number of iterations\n    count = 0\n    \n    # Loop until the difference between the first two guesses is less than or equal to 10^-6\n    while abs(guess_1 - guess_2) > 10**-6:\n        # Compute the next guess for the square root using the babylonian method\n        next_guess = guess_1 - (guess_1 ** 2 - number) / (2 * guess_1)\n        \n        # Update the guess_1 and guess_2 values\n        guess_1 = next_guess\n        guess_2 = next_guess\n        \n        # Increment the iteration counter\n        count += 1\n    \n    # Return the value of the square root and the number of iterations\n    return guess_1, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Find the square root of the number using babylonian method\n    guess = 1\n    lower_bound = 0\n    upper_bound = number\n    iterations = 0\n\n    while guess*guess > number:\n        iterations += 1\n        if iterations > 100:\n            print('Error: Maximum number of iterations reached')\n            return None\n        middle = (lower_bound + upper_bound) / 2\n        if middle*middle == number:\n            return middle\n        elif middle*middle < number:\n            guess = middle\n        else:\n            upper_bound = middle\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n\n    # initialize the guess and the delta\n    guess = number / 2\n    delta = number - guess**2\n\n    # check if the delta is zero\n    while delta > 0.000001:\n        # update the guess\n        guess = guess - (guess**2 - number) / (2*guess)\n\n        # update the delta\n        delta = number - guess**2\n\n    # return the guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [0] * n\n    max_len = 0\n    start = 0\n\n    for i in range(1, n):\n        if str[i] == str[i - 1]:\n            dp[i] = dp[i - 1] + 2\n            if dp[i] > max_len:\n                max_len = dp[i]\n                start = i - dp[i] + 1\n        else:\n            dp[i] = 0\n            if dp[i - 1] > dp[i]:\n                dp[i] = dp[i - 1]\n\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    n = len(str) \n\n    # Create a 2D table to store the lengths of substrings of the string\n    table = [[0] * n for _ in range(n)] \n\n    # Initialize the table with 0 as it is the base case\n    for i in range(n): \n        table[i][i] = 1\n\n    # Calculate the lengths of substrings for all possible substrings of the string\n    for length in range(3, n + 1): \n        for i in range(n - length + 1): \n            j = i + length - 1 \n\n            # Check if the substring is a palindrome and update the table accordingly\n            if str[i] == str[j]: \n                table[i][j] = table[i + 1][j - 1] + 2\n\n            # If the substring is not a palindrome, check if it is a valid subsequence\n            else: \n                if length % 2 == 0: \n                    if i > 0 and str[i - 1] == str[j]: \n                        table[i][j] = table[i - 1][j] + 2\n\n                else: \n                    if i > 0 and str[i - 1] == str[j]: \n                        table[i][j] = max(table[i - 1][j], table[i][j - 1]) + 2\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Convert the given string into a list of characters\n    str_list = list(str)\n\n    # Initialize two variables to store the length of the longest palindrome subsequence\n    max_len = 1\n    start_index = 0\n\n    # Initialize two pointers, one for starting from the beginning of the string and the other for starting from the end of the string\n    left = 0\n    right = len(str_list) - 1\n\n    # Loop until the pointers meet in the middle of the string\n    while left < right:\n        # If the characters at the left and right pointers are equal, move both pointers forward\n        if str_list[left] == str_list[right]:\n            max_len = max(max_len, 2 * (right - left + 1))\n            left += 1\n            right -= 1\n\n        # If the characters at the left and right pointers are not equal, move the right pointer backward\n        else:\n            left += 1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Create a 2D array to store the length of the longest palindromic subsequence for each substring\n    # in the string\n    table = [[0 for j in range(len(str))] for i in range(len(str))]\n    \n    # Initialize the base cases\n    for i in range(len(str)):\n        table[i][i] = 1\n    \n    # Fill the table by comparing each substring with its mirror image\n    for i in range(1, len(str)):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = 1 + table[j+1][i-1]\n            else:\n                table[i][j] = max(table[i][j], table[j][i])\n    \n    # Return the length of the longest palindromic subsequence for the entire string\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0]*n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    max_len = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n\n    # Create a 2D table to store the lengths of LPS subsequences\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Initialize the length of the longest palindromic subsequence ending at index i\n    for i in range(n):\n        lps_table[i][i] = 1\n\n    # Fill in the 2D table\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                lps_table[i][j] = lps_table[i + 1][j - 1] + 2\n            else:\n                lps_table[i][j] = max(lps_table[i + 1][j], lps_table[i][j - 1])\n\n    return lps_table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(string):\n    \"\"\"\n    Given a string, find the length of the longest palindromic subsequence in it.\n    \"\"\"\n    max_len = 1\n    start = 0\n    n = len(string)\n\n    for i in range(1, n):\n        # Case 1: both characters are same\n        if string[i] == string[i - 1]:\n            start = i - 1\n            max_len += 2\n            # Case 2: if current character is odd, continue to expand from previous start\n            # Case 3: if current character is even, extend from previous start if possible\n        elif i - start > 1 and (i - start) % 2 == 0:\n            while i + 1 < n and string[i] == string[i + 1]:\n                i += 1\n            if i + 1 == n:\n                start = i - 1\n            else:\n                start = i\n\n    # Return the length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position in the string\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column with 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the rest of the table\n    for length in range(2, n+1):\n        for start in range(n-length+1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                table[start][end] = table[start+1][end-1] + 2\n            else:\n                table[start][end] = max(table[start+1][end], table[start][end-1])\n\n    # Return the length of the longest palindromic subsequence ending at the last position in the string\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Initialize variables for longest palindrome found and its starting and ending indices\n    max_len = 0\n    start = 0\n    end = 0\n\n    # Iterate through the string and for each character, expand the palindromes around the character\n    for i in range(len(str)):\n        # Expand the left palindrome\n        left = expand_palindrome(str, i, i)\n\n        # Expand the right palindrome\n        right = expand_palindrome(str, i, i + 1)\n\n        # Compare the lengths of the expanded palindromes and update the longest palindrome if necessary\n        if left > max_len:\n            max_len = left\n            start = i - left + 1\n            end = i\n        elif right > max_len:\n            max_len = right\n            start = i - right + 1\n            end = i + 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_len\n\n\ndef expand_palindrome(str, start, end):\n    \"\"\"\n    Helper function to expand a palindrome around a given starting and ending indices in the string.\n    \"\"\"\n\n    while start >= 0 and end < len(str) and str[start] == str[end]:\n        start -= 1\n        end += 1\n\n    return end - start - 1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    n = len(str) \n    dp = [1] * n \n    max_length = 1 \n    for i in range(1, n): \n        if str[i] == str[i-1]: \n            dp[i] = dp[i-1] + 2 \n            if max_length < dp[i]: \n                max_length = dp[i] \n        else: \n            dp[i] = 1 \n            if max_length < dp[i]: \n                max_length = dp[i] \n    return max_length "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)\n\nprint(harmonic_sum(5))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n):\n        sum_of_squares += i\n    harmonic_sum = 1/n * sum_of_squares\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # calculate the harmonic sum of n-1\n    harmonic_sum_n = 0\n    for i in range(1, n+1):\n        harmonic_sum_n += 1/i\n    # return the harmonic sum of n-1\n    return harmonic_sum_n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n - 1"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum to 0\n    harmonic_sum = 0\n\n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic number for i\n        harmonic = 1/i\n\n        # Add the harmonic number to the sum\n        harmonic_sum += harmonic\n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1.0 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return 1/(1/n + 1/harmonic_sum(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array and then intersect it with the second array\n    set_nums1 = set(array_nums1)\n    return list(set_nums1.intersection(array_nums2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains all the common elements\n    between the two lists.\n    \"\"\"\n    result = []\n    for num1 in array_nums1:\n        if num1 in array_nums2:\n            result.append(num1)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of the arrays.\n    \"\"\"\n    intersection_list = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection_list:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    common_nums = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    for num in set1:\n        if num in set2:\n            common_nums.append(num)\n    return common_nums"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert the arrays to sets to eliminate duplicates\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n\n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    if not array_nums1 or not array_nums2:\n        return []\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Convert the input arrays to sets to make the intersection faster\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the sets and convert back to a list\n    intersection = list(set_nums1.intersection(set_nums2))\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n\n    :param array_nums1: list of integers\n    :param array_nums2: list of integers\n    :return: list of integers - the intersection of the two input arrays\n    \"\"\"\n    # create two dictionaries to store the elements of the arrays\n    dict1 = {}\n    dict2 = {}\n    # iterate through the first array and add each element to the dictionary\n    for num in array_nums1:\n        dict1[num] = True\n    # iterate through the second array and add each element to the dictionary\n    for num in array_nums2:\n        if num in dict1:\n            dict2[num] = True\n    # create an empty list to store the intersection\n    intersection = []\n    # iterate through the second array and add the elements that are present in both dictionaries to the intersection list\n    for num in array_nums2:\n        if num in dict2:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = [element] * len(list)\n    for i in range(1,len(list)):\n        result[i] = list[i-1]\n    result[0] = element\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    res = []\n    for i in lst:\n        res.append(elem)\n        res.append(i)\n    return res"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.insert(0, element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list.\n    \"\"\"\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Define a complex number from the input string\n    complex_number = complex(numbers.split(' + ')[0], numbers.split(' + ')[1])\n\n    # Compute the polar coordinates of the complex number\n    angle = cmath.phase(complex_number)\n    radius = abs(complex_number)\n\n    # Return the polar coordinates as a string\n    return f'({angle:.3f}, {radius:.3f})'"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        if isinstance(num, complex):\n            # convert to polar coordinates\n            r = abs(num)\n            phi = cmath.phase(num)\n            # add result to list\n            result.append((r, phi))\n        else:\n            # add non-complex numbers as is\n            result.append(num)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print polar coordinates\n        print(r, theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        abs_val = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print(\"(%.2f, %.2f), angle = %.2f\" % (abs_val, angle, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        theta = cmath.phase(number)\n        \n        # Print polar coordinates\n        print(f\"({r:.2f} + {theta:.2f}i)\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = cmath.sqrt(number.real**2 + number.imag**2)\n        imag = cmath.phase(number)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns the polar coordinates of each number.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        real, imag = cmath.rect(num)\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        angle = cmath.phase(number)\n        polar_numbers.append((magnitude, angle))\n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r, phi = cmath.polar(num)\n        # Print the polar coordinates\n        print(\"{:.2f}+{}j\".format(r, cmath.phase(num)))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            num_polar = cmath.polar(num)\n            print(num_polar)\n        else:\n            print(\"Not a complex number\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in the given list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    \n    colors = set()\n    for i in range(len(l)):\n        colors.add(l[i])\n    \n    color_combinations = []\n    for i in range(len(colors)):\n        for j in range(i+1, len(colors)):\n            color_combinations.append((colors[i], colors[j]))\n    \n    result = []\n    for c in combinations_with_replacement(color_combinations, n):\n        result.append(tuple(c))\n    \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    \n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j <= n:\n                combinations.append((l[i], l[j-1]))\n    \n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all combinations (with repetition) of length n\n    for comb in combinations_with_replacement(l, n):\n        # Create a tuple with the elements of the combination\n        tup = tuple(comb)\n        # Append the tuple to the result list\n        result.append(tup)\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l, n):\n            combos.append(tuple(combo))\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            result.append((l[i],) + j)\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if all(num % i!= 0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    A helper function that returns True if the given number is prime, and False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than n.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Both tuples should have the same length\"\n    # Check if the maximum value is negative\n    max_val = max(test_tup1 + test_tup2)\n    if max_val < 0:\n        return \"Error: The maximum value should be non-negative\"\n    # Find the indices of the maximum values in each tuple\n    max_ind1 = max(test_tup1.index(val) for val in test_tup1 if val == max_val)\n    max_ind2 = max(test_tup2.index(val) for val in test_tup2 if val == max_val)\n    # Return the indices of the maximum values in both tuples\n    return (max_ind1, max_ind2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # If one tuple is greater than the other, swap them\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    # Initialize the maximum element to the first tuple's first element\n    max_element = test_tup1[0]\n    \n    # Iterate through the second tuple, swapping the maximum element with the maximum element in the second tuple\n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_element:\n            max_element = test_tup2[i]\n    \n    # Return the swapped tuple\n    return test_tup1, test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    elif test_tup1[1] < test_tup2[1]:\n        return test_tup2\n    else:\n        if test_tup1[0] > test_tup2[0]:\n            return test_tup1\n        else:\n            return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Check if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length!\")\n        return\n\n    # Initialize variables to store the maximum values in the tuples\n    max1 = max2 = float('-inf')\n\n    # Loop through the tuples and find the maximum values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max2 = max1\n            max1 = test_tup1[i]\n        elif test_tup2[i] > max2:\n            max2 = test_tup2[i]\n\n    # Return the maximum values in the tuples\n    return max1, max2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # If the first tuple is greater than the second tuple, swap them\n    if len(test_tup1) > len(test_tup2):\n        test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # Iterate through the tuple, comparing the elements\n    max_index = 0\n    for index, element in enumerate(test_tup1):\n        if element > test_tup2[max_index]:\n            max_index = index\n\n    # Return the tuple with the max element at the specified index\n    return test_tup1[max_index], test_tup2[max_index]"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Returns: the tuple that maximizes the sum of its elements.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n\n    # Find the maximum value in the list\n    max_value = max(combined_list)\n\n    # Create a new list with the indices of the max_value\n    max_indices = [i for i in range(len(combined_list)) if combined_list[i] == max_value]\n\n    # Return the tuple that contains these indices\n    return tuple(test_tup1[i] for i in max_indices), tuple(test_tup2[i] for i in max_indices)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    max_num = test_tup1[0]\n    max_index = 0\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_num:\n            max_num = test_tup1[i]\n            max_index = i\n        elif test_tup1[i] == max_num:\n            max_index = i\n    return (max_num, test_tup2[max_index])"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Find the maximum element in the first tuple\n    max_num1 = max(test_tup1)\n    \n    # Find the maximum element in the second tuple\n    max_num2 = max(test_tup2)\n    \n    # Find the minimum of the two maximum numbers\n    min_num = min(max_num1, max_num2)\n    \n    # Return the minimum number as the max element in the new tuple\n    return (max_num1, max_num2, min_num)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n    if max_num1 > max_num2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the given tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The tuples have different lengths.\"\n    else:\n        # Loop through the tuples and compare the values\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Returns the nth Newman-Shanks-Williams prime number.\n\n    The Newman-Shanks-Williams primes are 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97.\n\n    This function uses the Sieve of Eratosthenes algorithm to generate prime numbers up to the nth Newman-Shanks-Williams prime number.\n\n    Args:\n        n (int): The index of the nth Newman-Shanks-Williams prime number to find.\n\n    Returns:\n        int: The nth Newman-Shanks-Williams prime number.\n    \"\"\"\n\n    def sieve_of_eratosthenes(limit):\n        \"\"\"\n        Returns a list of prime numbers up to the given limit using the Sieve of Eratosthenes algorithm.\n\n        Args:\n            limit (int): The upper limit of the primes to find.\n\n        Returns:\n            list[int]: A list of prime numbers up to the given limit.\n        \"\"\"\n        is_prime = [True] * (limit + 1)\n        is_prime[0] = is_prime[1] = False\n        p = 2\n        while p * p <= limit:\n            if is_prime[p]:\n                for i in range(p * p, limit + 1, p):\n                    is_prime[i] = False\n            p += 1\n        return [i for i in range(limit + 1) if is_prime[i]]\n\n    primes = sieve_of_eratosthenes(n)\n    return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while True:\n        if i**2 > n:\n            break\n        j = 2\n        while True:\n            if i*j > n:\n                break\n            if i*j == n:\n                return i\n            j += 1\n        i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # create a list of numbers from 2 to 1000000\n    nums = list(range(2, 1000001))\n    # initialize count variable to zero\n    count = 0\n    # iterate through the list of numbers\n    for num in nums:\n        # check if the number is a newman\u2013shanks\u2013williams prime\n        if is_prime(num) and is_newman_shanks_williams(num):\n            count += 1\n        # if the count reaches the nth newman\u2013shanks\u2013williams prime, return it\n        if count == n:\n            return num\n\ndef is_prime(num):\n    '''\n    Determine if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_newman_shanks_williams(num):\n    '''\n    Determine if a number is a newman\u2013shanks\u2013williams prime.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        # check if the number is divisible by 11 or 13\n        if num % 11 == 0 or num % 13 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        i = 5\n        while True:\n            if is_prime(i) and is_prime(i+2):\n                return i\n            i += 6\n\ndef is_prime(n):\n    \"\"\"\n    A helper function to check if a number is prime or not.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a list to store the primes\n    primes = []\n\n    # Starting with 2, check all odd numbers up to the square root of n\n    for i in range(3, n + 1, 2):\n        # If the number is prime, add it to the list of primes\n        if is_prime(i):\n            primes.append(i)\n\n    # Iterate over the list of primes and find the nth prime number\n    for i in range(1, n + 1):\n        # If the nth prime number is not in the list of primes, it's a new prime number\n        if primes[i - 1]!= primes[i - 1] + 2:\n            return primes[i - 1] + 2\n\ndef is_prime(num):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any odd number up to the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    # Generate a list of prime numbers up to nth prime number\n    primes = [2]\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in range(len(primes)):\n            if primes[j] * primes[j] > i:\n                break\n            if i % primes[j] == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    # Count the number of distinct powers of 2 that each prime number has\n    powers_of_2 = {}\n    for p in primes:\n        count = 0\n        while p % 2 == 0:\n            count += 1\n            p //= 2\n        powers_of_2[p] = count\n\n    # Find the nth newman-shanks-williams prime number\n    for p in powers_of_2:\n        if powers_of_2[p] == n:\n            return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define a function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define a function to check if a number is a newman-shanks-williams prime number\n    def is_newman_prime(num):\n        if num < 10:\n            return False\n        if num < 100:\n            return num % 2 == 0\n        return num % 2!= 0\n\n    # Iterate from 2 to n\n    for i in range(2, n+1):\n        # Check if i is a newman-shanks-williams prime number\n        if is_newman_prime(i):\n            # Check if i is prime\n            if is_prime(i):\n                # Return i if it is both newman-shanks-williams prime and prime\n                return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize variables\n    count = 0\n    i = 0\n\n    # loop through numbers from 1 to n\n    while i <= n:\n        # check if the number is a newman-shanks-williams prime\n        if is_newman_prime(i):\n            count += 1\n\n        # increment i\n        i += 1\n\n    # return the nth newman-shanks-williams prime\n    return n - count\n\n\ndef is_newman_prime(n):\n    \"\"\"\n    A helper function to check if a number is a newman-shanks-williams prime.\n    \"\"\"\n    # check if the number is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    # check if the number is divisible by any number between 4 and the square root of the number\n    for i in range(4, int(n**0.5)+1, 2):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n\n    # if none of the above conditions are met, it's a newman-shanks-williams prime\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i]/test_tup2[i])\n        except ZeroDivisionError:\n            print(\"Warning: division by zero encountered\")\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # Initialize an empty list to hold the element-wise division result\n    result = []\n\n    # Loop through each element of the first tuple and perform element-wise division\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    # Return the list of element-wise division results\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples should have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    Returns the resulting lists in a tuple.\n    '''\n    \n    # Initialize two empty lists\n    part1 = []\n    part2 = []\n    \n    # Loop through the list and add each element to the appropriate part\n    for elem in lst:\n        if len(part1) < L:\n            part1.append(elem)\n        else:\n            part2.append(elem)\n    \n    # Convert the two parts into tuples and return them as a tuple\n    return (tuple(part1), tuple(part2))"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # calculate the length of the second part of the list\n    n = len(list1) - L\n    \n    # split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        return ([list1[:L]], [list1[L:]])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return list1, []\n    else:\n        return list1[:L], list1[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Splitting the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Converting the parts into lists\n    list1 = list(part1)\n    list2 = list(part2)\n    # Returning the tuples containing the lists\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        return None\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"Length of list must be greater than or equal to L\")\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L == 0:\n        n = len(list1) // L\n        first_part = list1[:n*L]\n        second_part = list1[n*L:]\n        return (first_part, second_part)\n    else:\n        n = len(list1) // L + 1\n        first_part = list1[:n*L]\n        second_part = list1[n*L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a new list with the first L elements of the original list\n    first_part = list1[:L]\n    # Create a new list with the last L-1 elements of the original list\n    last_part = list1[L-1:]\n    # Return a tuple containing the first part and last part of the original list\n    return (first_part, last_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts based on L\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return part1, part2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age in hours to dog years\n    dog_years = h_age * 7\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = 7 * h_age\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # Calculate the dog's age in dog's years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # converting human age to dog's years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert human age to dog years\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7 # Assuming 7 dog years for an hour of age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate the dog's age in dog years\n    dog_years = 7 * (h_age // 7)\n    # calculate the remainder of the division by 7\n    remainder = h_age % 7\n    # add the remainder to the dog's age in dog years\n    dog_years += remainder\n    # return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    n = int(step)\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(len(S))[::step]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # Convert the input list to a set to remove duplicates\n    S = list(set(S))\n    # Initialize an empty list to hold the resulting lists\n    result = []\n    # Loop through the input list\n    for i in range(0, len(S), step):\n        # Append a copy of the current list to the result list\n        result.append(S[i:i+step].copy())\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n    # Loop through the list\n    for i in range(0, len(S), step):\n        # Split the current list at the nth element\n        sublist = S[i:i+step]\n        # Append the resulting sublist to the result list\n        result.append(sublist)\n    # Return the resulting list of sublists\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list) or not isinstance(step, int):\n        return None\n    if step <= 0:\n        return None\n    if step > len(S):\n        return [S]\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return l ** 2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6*l**2  # assuming a square base, the lateral surface area is the product of the base and the side\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the lateral surface area using Heron's formula\n    area = (2 * l * l + 2 * l * l + l * l) ** 0.5 / 2\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6*l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (6 * l * l) + (2 * l * l * l) + (2 * l * l * l * l)\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube\n    surface_area = 6 * l**2\n    \n    # Return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    # initialize the sum of squares to 0\n    sum_of_squares = 0\n    \n    # iterate from 1 to n\n    for i in range(1, n+1, 2):\n        # add the square of i to the sum of squares\n        sum_of_squares += i*i\n    \n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (2*i+1)**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    # initializing the sum variable to zero\n    total = 0\n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # calculating the square of odd natural number i\n        square = i**2\n        # adding the square to the sum variable\n        total += square\n    # returning the sum of squares of odd natural numbers\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    result = 1\n    for i in range(1, n+1):\n        result = result * i\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a counter variable to keep track of how many stars have been printed\n    count = 1\n    # Loop through each row of stars\n    for i in range(1, n+1):\n        # Print the number of stars in each row\n        print('*' * count)\n        # Increment the counter variable\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    # iterate from 1 to n and multiply the count variable by 2\n    for i in range(1, n+1):\n        count *= 2\n    # return the final count variable\n    return count"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number and its length\n    star_num = \"\"\n    length = 1\n    \n    # Loop n times to append the star number to the result string\n    for i in range(n):\n        # Append the star to the result string\n        star_num += \"*\"\n        \n        # Double the length of the star number\n        length *= 2\n    \n    return star_num, length"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the result variable\n    result = ''\n\n    # Check if n is a positive integer\n    if isinstance(n, int) and n > 0:\n        # Loop through the number of stars\n        for i in range(1, n+1):\n            # Concatenate the current star to the result variable\n            result += '*'\n\n        # Print the result\n        print(result)\n    else:\n        # Raise an error if n is not a positive integer\n        raise ValueError('n must be a positive integer.')"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return \"1\"\n    else:\n        # Calculate the number of stars needed for each digit of the number\n        num_stars = [0] * (len(str(n))+1)\n        for i in range(1, len(str(n))+1):\n            num_stars[i] = n // (10 ** (i-1)) + n % (10 ** (i-1))\n\n        # Multiply the number of stars for each digit together\n        result = 1\n        for i in range(1, len(str(n))+1):\n            result *= num_stars[i]\n\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = ''\n    for i in range(1, n+1):\n        result += '*'\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize a counter variable to 1\n    counter = 1\n    # initialize an empty string to store the star numbers\n    star_numbers = \"\"\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the current number is 1, add a star to the string\n        if i == 1:\n            star_numbers += \"*\"\n        # if the current number is even, add two stars to the string\n        elif i % 2 == 0:\n            star_numbers += \"**\"\n        # if the current number is odd, add three stars to the string\n        else:\n            star_numbers += \"***\"\n        # add a line break after each number\n        if i!= n:\n            star_numbers += \"\\n\"\n    # return the final string with then'th star number\n    return star_numbers"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = ''\n    for i in range(n):\n        result += '*'\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Base case: if n is 0 or 1, return 0 or 1\n    if n == 0 or n == 1:\n        return n\n\n    # Recursive case: compute the n-1'th star number and add 1\n    return find_star_num(n-1) + 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == str:\n        k = ord(k)\n    if type(k) == int:\n        return k\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count = 0\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            count += 1\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for num in arr:\n        if num % 2 == 0 and even_index % 2 == 0:\n            even_sum += num\n        even_index += 1\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # Initialize variables\n    even_sum = 0\n    even_index = -1\n\n    # Loop through the list\n    for i in range(len(arr)):\n\n        # Check if the current number is even\n        if arr[i] % 2 == 0:\n\n            # Check if the current position is even\n            if i % 2 == 0:\n\n                # Add the even number to the sum\n                even_sum += arr[i]\n\n                # Update the even index\n                if even_index == -1:\n                    even_index = i\n\n    # Return the sum of even numbers and the even index\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(2,n+1):\n        if i % 2 == 0:\n            sum_of_even_powers += i ** 5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1) ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): # iterate through even numbers starting from 1 and increment by 2 in each iteration\n        sum += i ** 5 # add the square of the even number to the sum\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i ** 5 % 2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple cannot be greater than the second tuple\")\n            return\n        else:\n            test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] -= test_tup2[i]\n    print(\"The updated tuples are:\", test_tup1, test_tup2)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two tuples must have the same length.'\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] - test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: the input tuples have different lengths\"\n\n    # Create a new tuple to store the result\n    result_tup = ()\n\n    # Loop through the indices of the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements at the same index and append the result to the new tuple\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # loop through the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # check if the same index exists in the second tuple\n        if i < len(test_tup2):\n            # subtract the elements and assign the result to the same index in the new tuple\n            test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] is not None:\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to 0\n    total = 0\n    \n    # loop through all indices from 0 to n-1\n    for i in range(n):\n        # compute the even index binomial coefficient\n        coeff = math.comb(n, i, exact=True) * (2*i+1)\n        \n        # check if coefficient is even\n        if i % 2 == 0:\n            # add the even index binomial coefficient to the sum\n            total += coeff\n    \n    # return the sum\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients of the binomial series.\n\n    Note: The binomial series is defined as:\n        binomial(n, k) = n! / (k! * (n-k)!)\n\n    The sum of the even index binomial coefficients can be obtained by summing up the terms with even indices.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(5)\n    10\n    >>> even_binomial_Coeff_Sum(10)\n    20\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum_even_index_binomial_coeffs = 0\n\n    # Loop through the indices from 1 to n\n    for i in range(1, n+1):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Calculate the binomial coefficient of i and i-1\n            numerator = math.factorial(n)\n            denominator = math.factorial(i-1) * math.factorial(n-i)\n            # Add the current binomial coefficient to the sum\n            sum_even_index_binomial_coeffs += numerator // denominator\n\n    # Return the sum of the even index binomial coefficients\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Error: n should be a positive integer.\"\n    elif n == 0:\n        return \"Error: n should be a positive integer greater than 0.\"\n    else:\n        # sum of even index binomial coefficients\n        sum = 0\n        for i in range(1, n+1):\n            for j in range(2, i+1, 2):\n                sum += math.comb(i, j)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum to zero\n    coeff_sum = 0 \n    # loop through odd indices\n    for i in range(1, n+1, 2): \n        # calculate binomial coefficient\n        coeff = math.comb(n, i) \n        # if the coefficient is even, add it to the sum\n        if coeff % 2 == 0: \n            coeff_sum += coeff \n    return coeff_sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_index_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            even_index_sum += math.comb(n, i)\n    \n    return even_index_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum and current index\n    sum_coeffs = 0\n    current_index = 0\n\n    # Calculate the binomial coefficient for odd index\n    binomial_coeff = math.comb(n, current_index)\n\n    # Iterate through the even index\n    while current_index < n:\n        # Calculate the binomial coefficient for even index\n        even_binomial_coeff = math.comb(n, current_index)\n\n        # Add the even binomial coefficient to the sum\n        sum_coeffs += even_binomial_coeff\n\n        # Increment the current index\n        current_index += 2\n\n    return sum_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Find the number of terms in the series\n    num_terms = (n * (n - 1)) // 2\n\n    # Initialize the sum variable\n    sum_coeffs = 0\n\n    # Calculate the sum of even index binomial coefficients\n    for i in range(1, n+1):\n        term = math.comb(n, i)\n        if i % 2 == 0:\n            sum_coeffs += term\n\n    return sum_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum variable\n    even_sum = 0\n    # Loop through each index i from 0 to n-1\n    for i in range(n):\n        # Find the binomial coefficient for i\n        binomial_coeff = math.comb(n, i)\n        # If the index is even, add its value to the sum\n        if i % 2 == 0:\n            even_sum += binomial_coeff\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    if n == 0:\n        return 0\n\n    coeff = 0\n    for i in range(1, n+1):\n        coeff += math.comb(n, i) * 2 ** (2 * i - 1)\n\n    return coeff\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = (3.14 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = (1/3)*pi*r**2*h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14 * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (3.14/4) * r ** 2 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**3) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3)*pi*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**3)\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    # Create a new dictionary that will hold the filtered entries\n    filtered_dict = {}\n    # Loop through each key-value pair in the original dictionary\n    for key, value in dict.items():\n        # If the value is greater than or equal to n, add the key-value pair to the filtered dictionary\n        if value >= n:\n            filtered_dict[key] = value\n    # Return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n\n    new_dict = {}\n\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i + 1]:\n                break\n        else:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 0\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            if test_tup[i] == test_tup[i-1]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # Get the index of the first element in the tuple\n    index = test_tup.index(1)\n    # Count the number of elements before the first element\n    count = len(test_tup[:index])\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count = 0\n        else:\n            count += 1\n        if test_tup[i] == test_tup[i-1]:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i]!= test_tup[i-1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            count += 1\n            if test_tup[i] == test_tup[i + 1]:\n                break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if n is an integer greater than 0\n    if not isinstance(n, int) or n <= 0:\n        return None\n    # Initialize the number of rows and columns\n    rows = 1\n    cols = n\n    # Initialize the sum of the numbers\n    sum_numbers = 0\n    # Loop through each row and column\n    for i in range(rows):\n        for j in range(cols):\n            # Calculate the sum of the numbers in the row and column\n            if i == 0 or i == rows - 1 or j == 0 or j == cols - 1:\n                sum_numbers += i * j\n            # Move to the next number in the row or column\n            else:\n                sum_numbers += i * j + 1\n    # Return the nth decagonal number\n    return sum_numbers"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (n * 6 + 1)) // 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case: 1st decagonal number is 1\n    if n == 1:\n        return 1\n\n    # calculate the sum of all previous decagonal numbers\n    sum_decagonal = n * (3 * n - 1)\n\n    # calculate the base 10 equivalent of the sum\n    base_ten_sum = sum_decagonal\n    while base_ten_sum >= 10:\n        base_ten_sum /= 10\n\n    # return the base 10 equivalent of the sum\n    return int(base_ten_sum)\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return None\n    else:\n        for i in range(1, n+1):\n            if n - i == i**2:\n                return i\n        return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    while decagonal <= n:\n        if decagonal % 10 == 0:\n            return decagonal\n        decagonal += 10*10**len(str(decagonal))\n    return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return (10 * (is_num_decagonal(n - 1) - 1)) + (5 * n) + is_num_decagonal(n - 2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n+1):\n        decagonal = (i*(3*i - 1) + n) // 2\n        print(decagonal)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 0\n    for i in range(1, n + 1):\n        if i ** 2 == 2 * i:\n            decagonal_count += 1\n    return decagonal_count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_count = 0\n    for i in range(1, n+1):\n        decagonal_count += (i * (3*i-1)) // 2\n    return decagonal_count\n\nn = 10\nprint(is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n\n    # Initialize variables to store the decagonal number and the row number\n    decagonal_num = 0\n    row_num = 1\n\n    # Loop through the rows and columns of the decagonal matrix\n    for i in range(1, n+1):\n        # Check if the current row is a decagonal number\n        if row_num % 2 == 1 and i == 1:\n            decagonal_num = row_num\n        elif row_num % 2 == 0 and i == 1:\n            decagonal_num = 2 * row_num - 1\n        elif row_num % 2 == 0 and i!= 1:\n            decagonal_num = row_num + 1\n        elif row_num % 2 == 1 and i!= 1:\n            decagonal_num = 2 * row_num\n\n        # Increment the row number\n        row_num += 1\n\n    # Return the decagonal number\n    return decagonal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    \n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Iterate through the list\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return the result as a tuple\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Converting the list to a set to remove duplicates\n    unique_set = set(test_list)\n\n    # Checking if the length of the unique set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if all the elements of a given list are unique or not.\n\n    Args:\n    test_list (list): A list of elements.\n\n    Returns:\n    bool: True if all elements in the list are unique, False otherwise.\n\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_set = set(test_list)\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n\n    # iterate through the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # check if the set is empty, which means all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of the same length\")\n        return None\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the lists are of equal length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are of unequal length.\")\n        return\n    \n    # Subtract each element in the list\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n    for i in range(10):\n        if freq[i] > freq[i] * i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    freq = [0] * 10\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n    for i in range(10):\n        if freq[i] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n\n    # Count the frequency of each digit\n    while n > 0:\n        freq[n % 10] += 1\n        n //= 10\n\n    # Check whether the frequency of each digit is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # Iterate through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Iterate through each digit in the integer again\n    for digit in str(n):\n        # If the frequency of the digit in the dictionary is greater than the digit itself, return False\n        if freq[digit] > digit:\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10\n    for digit in str(n): \n        freq[int(digit)] += 1\n    for i in range(10): \n        if freq[i] > n: \n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # initialize a dictionary to store digit frequency\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # increment the frequency of the digit in the dictionary\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the dictionary\n    for digit in freq:\n        # check if the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > int(digit):\n            return False\n    \n    # if the loop completes without returning False, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Split the given integer into a list of digits\n    num_list = list(str(n))\n\n    # Dictionary to store the frequency of digits\n    freq = {}\n\n    # Iterate over the list of digits\n    for num in num_list:\n        # If the digit is already present in the dictionary, increment its frequency by 1\n        if num in freq:\n            freq[num] += 1\n        # If the digit is not present in the dictionary, add it with frequency 1\n        else:\n            freq[num] = 1\n\n    # Iterate over the list of digits and check if the frequency is less than or equal to the digit itself\n    for num in num_list:\n        # Check if the frequency is less than or equal to the digit itself\n        if freq[num] > num:\n            print(\"The frequency of digit '{}' is greater than the digit itself. Please enter a valid input.\".format(num))\n            return False\n\n    # If no errors are found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize frequency array with 0\n\n    # count frequency of each digit\n    for i in range(len(str(n))):\n        freq[int(str(n)[i])] += 1\n\n    # check if frequency of each digit is less than or equal to its value\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10   # Initialize frequency array with zeros\n    num = n\n    \n    # Count frequency of digits in the number\n    while num > 0:\n        freq[num % 10] += 1\n        num //= 10\n    \n    # Check if frequency of digits is less than or equal to the digits themselves\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > n % 10:\n            return False\n    \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    if len(set(list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) > 1:\n        if list[0] == element:\n            for i in range(1, len(list)):\n                if list[i]!= element:\n                    return False\n        else:\n            return False\n    else:\n        return list[0] == element"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return list[0] == element and check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba[bB]{2,3}\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b.*'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(?:(?:b(?:b)?){2})*b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=(?:b{2,3})b)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?i)\\ba{1}b{2,3}\\b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'\\ba(b{2,3})\\b')\n    match = pattern.search(text)\n    if match:\n        print('Match found:', match.group())\n        return True\n    else:\n        print('No match found.')\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[bB]{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab(b{2,3})'\n    matches = re.findall(pattern, text)\n    return any(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a.*b{2,3}')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize variables to store the maximum sum of a subarray and the start index of the subarray\n    max_sum = float('-inf')\n    start = 0\n\n    # loop through all the possible starting indices of the subarray\n    for i in range(n):\n        # calculate the sum of the subarray\n        sub_sum = 0\n        for j in range(i, i + k):\n            if j < n:\n                sub_sum += a[j]\n\n        # update the maximum sum if the current subarray sum is greater than the maximum sum found so far\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            start = i\n\n    # return the maximum sum of a contiguous array in the modified array\n    return max_sum, start"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    count = 0\n\n    # Loop through the input array\n    for i in range(n):\n        # If the current element is negative, reset the count\n        if a[i] < 0:\n            count = 0\n\n        # If the count is less than k, add the element to the current sum\n        if count < k:\n            curr_sum += a[i]\n            count += 1\n\n        # If the count is equal to k, add the repeated element to the current sum\n        elif count == k:\n            curr_sum += a[i] * k\n            count += 1\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_array = [a] * k\n    max_sum = max(a)\n    for i in range(n):\n        mod_array[i % k] += a[i]\n        max_sum = max(max_sum, max(mod_array))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # loop through the array k times\n    for i in range(k):\n        curr_sum += a[0]\n        max_sum = max(max_sum, curr_sum)\n        # move the left pointer to the right\n        for j in range(1, n):\n            curr_sum = curr_sum - a[j] + a[j+1]\n            max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum and the sum of the first k elements\n    max_sum = max(sum(a[:i+1]) for i in range(k))\n    max_sum_subarray = [a[0]]\n\n    # loop through the remaining elements of the array\n    for i in range(n-k):\n        # calculate the sum of the current subarray\n        curr_sum = sum(a[i:i+k+1])\n\n        # update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_sum_subarray = a[i:i+k+1]\n\n        # update the maximum sum subarray if the current subarray is greater\n        elif curr_sum == max_sum and len(max_sum_subarray) < k:\n            max_sum_subarray.append(a[i+k])\n\n    return max_sum_subarray"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    repeated_sum = 0\n\n    # Loop through the array\n    for i in range(n):\n        temp_sum = temp_sum + a[i]\n\n        # Check if the temp_sum is greater than the max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            repeated_sum = a[i] * k\n\n    return max_sum, repeated_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum to be equal to the first element of the array\n    max_sum = a[0]\n    \n    # Initialize the sum of the first k elements of the array\n    first_k_sum = sum(a[:k])\n    \n    # Loop through all possible starting indices for the modified array\n    for i in range(k, n):\n        # Calculate the sum of the modified array from the current index to the end\n        modified_sum = first_k_sum + a[i]\n        \n        # Update the maximum sum if the current modified sum is greater than the maximum sum\n        if modified_sum > max_sum:\n            max_sum = modified_sum\n            \n        # Update the sum of the first k elements of the modified array\n        first_k_sum -= a[i-k]\n        first_k_sum += a[i]\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # create the modified array\n    modified_array = [x for x in a for _ in range(k)]\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += modified_array[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize a list to store the sums of the modified arrays\n    sums = []\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n    # Loop through each element in the array\n    for i in range(n-k):\n        # Get the sum of the first k elements in the array\n        sub_sum = sum(a[i:i+k])\n        # If the sum is greater than the current maximum sum, update the maximum sum\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n        # Add the sum of the first k elements to the list of sums\n        sums.append(sub_sum)\n    # Sort the list of sums in descending order\n    sums.sort(reverse=True)\n    # Return the sum of the first k elements in the array\n    return sums[0]"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Check if the given array is of even length\n    if n % 2!= 0:\n        print(\"Array length must be even\")\n        return\n\n    # Initialize the maximum sum as 0\n    max_sum = 0\n\n    # Loop through the array and add the sub-arrays of length n\n    for i in range(n - k + 1):\n        # Calculate the sum of the sub-array and add it to the maximum sum\n        sub_array_sum = sum(a[i:i+k])\n        max_sum = max(max_sum, sub_array_sum)\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # initializing variable to store the sum of squares\n    sum = 0\n    # loop through first n even numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current even number to the sum\n        sum += i*i\n    # return the sum of squares of the even numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_squares += i*i  \n\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        sum_of_squares += count*count\n        count += 1\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, n+1, 2)]\n    sum_of_squares = sum([i**2 for i in even_numbers])\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n\n    sum = 0\n    count = 0\n\n    while count < n:\n        sum += count*count\n        count += 2\n\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Initialize the sum of squares to zero\n    total_sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current number\n        square = i*i\n\n        # Add the square to the total sum\n        total_sum += square\n\n    # Return the total sum of squares\n    return total_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    \n    for i in range(len(list1)):\n        max_length = len(list1[i])\n        \n        for j in range(len(list1[i])):\n            if list1[i][j] == None:\n                max_length += 1\n                \n        max_lengths.append(max_length)\n        \n    max_length_list = []\n    \n    for i in range(len(list1)):\n        if max_lengths[i] == max(max_lengths):\n            max_length_list.append(i)\n    \n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list, default=0):\n            max_length_list = [len(sublist)]\n        else:\n            max_length_list.append(len(sublist))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize empty list to store maximum lengths\n    max_lengths = []\n\n    # Iterate through each element in the input list\n    for element in list1:\n        # Check if the length of the current element is greater than the maximum length\n        if len(element) > len(max_lengths) or (len(element) == len(max_lengths) and len(element) > 0):\n            max_lengths = [len(element)]\n        elif len(element) > 0 and len(max_lengths) > 0:\n            # If the length of the current element is greater than the length of the first element in `max_lengths`\n            max_lengths.append(len(element))\n\n    # Return the list of maximum lengths\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_len):\n            max_len = list1[i]\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for i in lst:\n        if len(i) > max(max_length_list, default=0):\n            max_length_list = [len(i)]\n        elif len(i) == max(max_length_list, default=0):\n            max_length_list.append(len(i))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        max_lengths.append(len(sublist))\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def recursive_count_ways(n, k): \n        if n == 0: \n            return 1 \n        elif n == 1: \n            return k \n        else: \n            count = 0 \n            for i in range(k): \n                count += recursive_count_ways(n-1, k) \n            return count \n        \n    return recursive_count_ways(n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n    if k == 1:\n        return 0\n    dp = [0] * (n+1)\n    dp[1] = 1\n    dp[2] = 2\n    for i in range(3, n+1):\n        for j in range(1, k+1):\n            if j >= i:\n                dp[i] += dp[i-j]\n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D array to store the number of ways of painting the fence for each combination of colors and adjacent posts\n    ways = [[0] * (n+1) for _ in range(k+1)]\n\n    # Base case: if there are 0 posts, there is only 1 way to paint the fence\n    ways[0][0] = 1\n\n    # Fill in the rest of the array using dynamic programming\n    for i in range(1, k+1):\n        for j in range(1, n+1):\n            if i == 1:\n                ways[i][j] = ways[i][j-1]\n            elif j == 1:\n                ways[i][j] = ways[i-1][j]\n            else:\n                ways[i][j] = ways[i-1][j] + ways[i][j-1] + ways[i-1][j-1]\n\n    # Return the number of ways of painting the fence for the given input\n    return ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    def count_no_of_ways_helper(n, k, current_color, color_count):\n        if current_color == k:\n            return 1\n        if current_color + n - 1 >= k:\n            return 0\n\n        if color_count[current_color] == 0:\n            return 0\n\n        ways = 0\n        for i in range(1, n + 1):\n            ways += count_no_of_ways_helper(n - i, k, current_color + i, color_count)\n\n        return ways\n\n    color_count = [0] * k\n    return count_no_of_ways_helper(n, k, 0, color_count)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize variables to store the count of ways and the hash table\n    count = 0\n    color_count = [0] * k\n    \n    # Iterate through the fence from left to right\n    for i in range(n):\n        # Increment the count of ways if the previous post was not of the same color\n        if color_count[i]!= color_count[i-1]:\n            count += 1\n        # Update the hash table with the current color count\n        color_count[i] += 1\n        \n    # Return the count of ways\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize the count to 0\n    count = 0\n    \n    # Loop through all possible pairings of colors\n    for i in range(k):\n        for j in range(i+1, k):\n            count += n - (n - 2) * ((i + 1) // 2 + (j - i - 1) // 2)\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, current_color, count):\n        if count == 2:\n            return 1\n        if start == n:\n            return 0\n        ways = 0\n        for i in range(k):\n            if i!= current_color and i!= k - 1 - current_color:\n                ways += backtrack(start + 1, i, count + 1)\n        return ways\n\n    return backtrack(0, 0, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty list to store the number of ways of painting the fence\n    ways = []\n\n    # Loop through all possible colors from 1 to k\n    for color in range(1, k+1):\n        # Initialize an empty list to store the number of ways of painting the fence with the current color\n        color_ways = []\n\n        # Loop through all possible fence sizes from 1 to n\n        for size in range(1, n+1):\n            # Initialize a counter for the number of ways of painting the fence with the current color and size\n            count = 0\n\n            # Loop through all possible ways of painting the fence with the previous colors and sizes\n            for i in range(size):\n                for j in range(size):\n                    # Check if the adjacent colors are equal to the current color\n                    if fence[i][j] == color:\n                        count += 1\n\n            # Add the current count to the list of ways with the current color\n            color_ways.append(count)\n\n        # Add the list of ways with the current color to the list of ways\n        ways.append(color_ways)\n\n    # Return the final list of ways of painting the fence\n    return ways[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a list to store the number of ways of painting the fence for each combination of colors\n    ways = [[0 for j in range(k)] for i in range(2)]\n\n    # Initialize the first row and the first column of the ways list\n    ways[0][0] = 1\n    ways[0][1] = 1\n\n    # Iterate over the remaining rows and columns\n    for i in range(2, k+1):\n        for j in range(2, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\n    # Iterate over the fence posts to find the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    total_ways = 0\n    for i in range(n):\n        for j in range(k):\n            if (i!= 0 and j!= 0) and (ways[i][j] == ways[i-1][j] or ways[i][j] == ways[i][j-1]):\n                total_ways += ways[i][j]\n\n    return total_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a list of all possible colors\n    colors = list(range(k))\n    # Create a list to store the number of ways of painting the fence\n    ways = [0] * (n+1)\n    # Initialize the first row of the table\n    ways[0] = 1\n    # Fill the rest of the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(k):\n            ways[i] += ways[i-1] * (j + 1)\n            if i >= 2:\n                ways[i] %= 10**9 + 7\n    return ways[n]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Check if n and m are non-negative integers\n    if type(n)!= int or type(m)!= int or n < 0 or m < 0:\n        print(\"Error: Both n and m must be non-negative integers.\")\n        return\n    \n    # Calculate the quotient of n and m\n    quotient = n // m\n    \n    # Round down the quotient to the nearest integer\n    quotient = round(quotient)\n    \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    '''\n    This function takes two integer arguments n and m.\n    It calculates the quotient of n and m and returns the rounded down integer result.\n    '''\n    return (n // m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers n and m as input, and returns the quotient of n divided by m rounded down to the nearest integer.\n    \"\"\"\n\n    # Check if m is zero\n    if m == 0:\n        return \"Error: m cannot be zero.\"\n\n    # Calculate the quotient and round down to the nearest integer\n    quotient = n // m\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = int(n/m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # calculate the quotient\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    area = w * h / 2\n    c = math.sqrt(area)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    # Calculate the hypotenuse\n    hypot = math.sqrt(s**2 - w**2 - h**2)\n    # Return the third side\n    return hypot"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle\n    based on the given width and height of the triangle.\n    '''\n    # Formula to find the hypotenuse of a right angled triangle:\n    # sqrt(w^2 + h^2)\n    hypotenuse = math.sqrt(w**2 + h**2)\n    \n    # Formula to find the angle of the right angled triangle:\n    # 180 degrees\n    angle = 180\n    \n    # Formula to find the third side of the right angled triangle:\n    # hypotenuse * sin(radians(angle))\n    third_side = hypotenuse * math.sin(math.radians(angle))\n    \n    # Return the third side of the right angled triangle\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter and length of the third side\n    s = (w ** 2 + h ** 2) ** 0.5\n    l = math.sqrt(w ** 2 + h ** 2)\n    # Calculate the area of the triangle\n    A = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the angle of the triangle's hypotenuse\n    angle_h = math.degrees(math.acos((w ** 2 + h ** 2 - s ** 2) / (2 * w * h)))\n    # Calculate the angle of the triangle's other side\n    angle_other = 180 - angle_h\n    # Calculate the angle of the other side\n    angle_other_side = math.degrees(math.acos((w ** 2 + h ** 2 - s ** 2) / (2 * w * h)))\n    # Calculate the third side of the triangle\n    third_side = l * math.sin(math.radians(angle_other_side))\n    # Return the value of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n\n    # Calculate the area of a right triangle using Heron's formula\n    a = math.sqrt(s * (s - w) * (s - h) * (s - w + h))\n\n    # Calculate the side opposite the hypotenuse\n    b = math.sqrt(s * (s + w) * (s + h) * (s - w + h))\n\n    # Calculate the third side\n    c = a + b\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Using Heron's formula to find the semi-perimeter of the right angled triangle\n    s = (w + h) / 2\n\n    # Using the law of cosines to find the length of the hypotenuse\n    hypotenuse = math.sqrt(s**2 - w**2 - h**2)\n\n    # Using the law of cosines to find the angle of the hypotenuse\n    angle = math.acos((w**2 + h**2 - s**2) / (2*w*h))\n\n    # Finding the third side of the right angled triangle\n    return hypotenuse * math.sin(angle)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # Calculate the length of the other two sides\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the length of the adjacent side\n    a = math.sqrt(w**2 + s**2)\n\n    # Calculate the angle opposite the right angle\n    alpha = math.degrees(math.acos((w**2 + h**2 - s**2) / (2 * w * h)))\n\n    # Calculate the length of the hypotenuse\n    hypot = math.sqrt(w**2 + h**2 + s**2 - 2 * w * h * s)\n\n    # Calculate the value of the third side\n    third_side = (a * math.sin(math.radians(alpha))) - hypot\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for val in listval:\n        if max_num is None or val > max_num:\n            max_num = val\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for item in listval:\n        if maxval is None or item > maxval:\n            maxval = item\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) == int:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(listval[i]) == float:\n            if listval[i] > maxval:\n                maxval = listval[i]\n        elif type(listval[i]) == str:\n            if len(listval[i]) > len(maxval):\n                maxval = listval[i]\n        else:\n            print(\"Unsupported type!\")\n            break\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"The list is empty.\")\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for num in listval[1:]:\n            if num > max_val:\n                max_val = num\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = max(listval[0], listval[1])\n        return max_val if max_val == listval[0] else max_val + 1 if max_val == listval[1] else max_val + 2 if max_val == max(listval[0], listval[1]) else max_val + 3"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the maximum value in the list.\n    '''\n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > maxval:\n            maxval = listval[i]\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for i in listval:\n        if max_value is None or i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # Initialize a variable to store the sum of all divisors\n    sum_of_divs = 0\n    \n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(number**0.5)+1):\n        # Check if the given number is divisible by i\n        if number % i == 0:\n            # Add i to the sum of all divisors\n            sum_of_divs += i\n    \n    # Return the sum of all divisors\n    return sum_of_divs"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initializing variables\n    div_sum = 0\n    num = number\n\n    # loop to check all divisors\n    while num > 1:\n        # check if the number is a divisor\n        if num % 2 == 0:\n            # if it is a divisor, add it to the sum\n            div_sum += num\n            # reduce the number by half\n            num //= 2\n        else:\n            # if it is not a divisor, reduce the number by half\n            num //= 2\n\n    # return the sum of all divisors\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize variables to keep track of sum and divisor count\n    sum = 0\n    count = 0\n\n    # loop through all numbers from 1 to the square root of the given number\n    for i in range(1, int(number ** 0.5) + 1):\n        # check if the number is divisible by the current number in the loop\n        if number % i == 0:\n            # if it is, add it to the sum and increment the count\n            sum += i\n            count += 1\n\n    # return the sum of the divisors\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    # Count inversions using the merge sort algorithm\n    for i in range(n):\n        left, right = i, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if arr[mid] > arr[right]:\n                inv_count += right - left + 1\n                left = mid + 1\n            else:\n                right = mid\n        if left == n - 1 and arr[left] > arr[right]:\n            inv_count += right - left + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    # Sort the array in ascending order \n    arr.sort() \n    # Count inversions using two pointers \n    left = 0\n    right = n-1\n    inv_count = 0\n    while left < right: \n        if arr[left] < arr[right]: \n            inv_count += (right - left) \n            left += 1 \n        else: \n            right -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        left = 0\n        right = n-1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += right - left\n                left += 1\n            else:\n                right -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j-i)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                inv_count += (j - i)\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # initialize the count variable to 0\n    count = 0\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # iterate through the array\n    for i in range(len(arr)):\n        # iterate through the sorted array from index 0 to i-1\n        for j in range(i):\n            # if the current element is greater than the previous element, increment the count variable\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left, right = i, n-1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += right - left + 1\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n                right -= 1\n            elif arr[left] < arr[right]:\n                left += 1\n            else:\n                right -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr)\n    # sort the array in ascending order\n    arr.sort()\n    # initialize variables for counting inversions\n    i = 0\n    j = n-1\n    count = 0\n    # loop through the array and count inversions\n    while i < j:\n        if arr[i] > arr[j]:\n            count += j-i\n            i += 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Helper function to flatten a single level list\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # Flatten the list using the helper function\n    flattened_list = flatten(list1)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    This function takes a nested list and flattens it into a single-level list.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with all its elements flattened.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    lst (list): A nested list structure.\n\n    Returns:\n    A flattened list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened version of the list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) is list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples and update the max_aggr for each transaction\n    for t in stdata:\n        if t[0] == 'S':\n            # Add the sale amount to the current maximum aggregate\n            max_aggr[t[1]] += t[2]\n        else:\n            # Subtract the purchase amount from the current maximum aggregate\n            max_aggr[t[1]] -= t[2]\n\n    # Find the maximum aggregate across all transactions\n    max_aggr_total = max(max_aggr.values())\n\n    # Return the maximum aggregate as a list\n    return [(t, max_aggr[t]) for t in max_aggr if max_aggr[t] == max_aggr_total]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Using defaultdict to create a dictionary to store the maximum aggregate for each product\n    max_dict = defaultdict(int)\n    for item in stdata:\n        # Get the product and the maximum aggregate for that product\n        product, aggregate = item\n        # Update the maximum aggregate for that product\n        max_dict[product] = max(max_dict[product], aggregate)\n    # Calculate the maximum aggregate of all products\n    max_agg = sum(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a defaultdict to store the sum of each transaction\n    total_sum = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for item in stdata:\n        # Add the transactional amount to the defaultdict\n        total_sum[item[0]] += item[1]\n\n    # Initialize the maximum aggregate\n    max_agg = float('-inf')\n\n    # Iterate over the defaultdict and update max_agg if necessary\n    for key, value in total_sum.items():\n        if value > max_agg:\n            max_agg = value\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for data in stdata:\n        for item in data:\n            max_agg[item] += data[item]\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for item in stdata:\n        pid, sid, amt = item\n        max_agg[sid] = max(max_agg[sid], amt)\n    max_agg_list = sorted(max_agg.items(), key=lambda x: x[1], reverse=True)\n    for sid, agg in max_agg_list:\n        print(sid, agg)\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_dict = defaultdict(int)\n\n    for item in stdata:\n        for i, j in item:\n            max_dict[i] += j\n        max_sum = max(max_sum, max(max_dict.values()))\n\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    temp = defaultdict(int)\n    for i in range(len(stdata)):\n        temp[stdata[i][0]] += stdata[i][1]\n        if temp[stdata[i][0]] > max_sum:\n            max_sum = temp[stdata[i][0]]\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(list)\n    max_agg = 0\n    \n    # Adding tuples to dictionary\n    for x,y in stdata:\n        d[x].append(y)\n    \n    # Calculating maximum aggregate\n    for i,j in d.items():\n        if len(j) > 1:\n            max_agg = max(max_agg, sum(j))\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # Create a dictionary to store the maximum aggregate for each day\n    max_aggs = defaultdict(int)\n\n    # Iterate over each tuple in the list\n    for d, a in stdata:\n        # Update the maximum aggregate for the current day\n        max_aggs[d] = max(max_aggs[d], a)\n\n    # Calculate the maximum aggregate for each day\n    max_agg_list = [max(max_aggs[day], 0) for day in sorted(max_aggs.keys())]\n\n    # Return the maximum aggregate for each day\n    return max_agg_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    This function calculates the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(float)\n    for item in stdata:\n        for i in range(len(item[0])):\n            max_aggr[item[0][i]] += item[1][i]\n    return max(max_aggr.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = i\n        s = 0\n        while num > 0:\n            s += num % 2\n            num //= 2\n        if s == (2**n) - 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n): \n        seq = bin(i)[2:]\n        sum1 = sum([int(bit) for bit in seq[:n]])\n        sum2 = sum([int(bit) for bit in seq[n:]])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(i)[-n:].zfill(n)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(1, 2**n): \n        first_half = i >> (n-1)\n        last_half = i & ((1<<n)-1)\n        if first_half == last_half: \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        binary_num = bin(i)[2:].zfill(2*n)\n        first_half = binary_num[:n]\n        last_half = binary_num[n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        bits = bin(i)[2:].zfill(2*n)\n        if sum(int(bit) for bit in bits[:n]) == sum(int(bit) for bit in bits[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        binary_str = bin(i)[2:]\n        if sum(binary_str[:n]) == sum(binary_str[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"Count of binary sequences:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize count and binary sequence\n    count = 0\n    binary_seq = [0] * 2 * n\n    \n    # Generate binary sequences of length 2n and check if sum of first n bits is same as sum of last n bits\n    for i in range(2 * n):\n        binary_seq[i] = bin(i + 1)[2:].zfill(n)\n        \n        if sum(int(bit) for bit in binary_seq[:i + 1]) == sum(int(bit) for bit in binary_seq[i + 1:]):\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(1, 2**n):\n        if sum(map(int, list(format(i, '0{}b'.format(n))))) == n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        first_bit = int(str(i)[0])\n        last_bit = int(str(i)[-1])\n        if first_bit == last_bit:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(map(dict_depth, d.values()))\n        return depth\n    elif isinstance(d, list):\n        return max(map(dict_depth, d))\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case: an empty dictionary has a depth of 0\n    if not d:\n        return 0\n    \n    # Recursive case: depth of a dictionary is the maximum depth of its values\n    max_depth = 0\n    for value in d.values():\n        depth = dict_depth(value)\n        max_depth = max(depth, max_depth)\n    \n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k,v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v)+1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    count = 0\n    while stack:\n        count += 1\n        for _ in range(len(stack)):\n            d = stack.pop()\n            for k, v in d.items():\n                if isinstance(v, dict):\n                    stack.append(v)\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth = max(depth, dict_depth(d[key]))\n    return depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 1\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    :param arr: list of integers\n    :param ranges: list of tuples representing ranges of integers to rotate over\n    :param rotations: number of rotations to perform\n    :param index: index of element to find after rotations\n\n    :return: element at given index after rotations\n    \"\"\"\n\n    # Initialize variables to store the current and next index\n    current_index = 0\n    next_index = 0\n\n    # Initialize variables to store the sum of rotations and the element to find\n    total_rotations = 0\n    element_to_find = None\n\n    # Loop through each rotation range\n    for start, end in ranges:\n        # Compute the number of elements in the current range\n        num_elements = end - start + 1\n\n        # Compute the number of rotations needed to reach the desired index in the current range\n        num_rotations = (index - start + 1) // num_elements\n\n        # Check if the current range needs to be rotated\n        if num_rotations > 0:\n            # Rotate the range and update the current and next indices\n            arr = arr[current_index:next_index + 1]\n            arr = arr[::-1]\n            current_index = 0\n            next_index = len(arr) - 1\n\n            # Increment the total number of rotations\n            total_rotations += num_rotations\n\n        # If the current range doesn't need to be rotated, just update the current and next indices\n        else:\n            current_index += num_elements\n            next_index += num_elements\n\n    # Rotate the remaining elements in the array\n    arr = arr[current_index:next_index + 1]\n    arr = arr[::-1]\n\n    # Check if the element to find is at the last index\n    if index == next_index:\n        return arr[0]\n\n    # Find the element to find after rotations\n    while total_rotations > 0:\n        num_rotations = total_rotations // len(arr)\n        arr = arr[num_rotations:]\n        total_rotations %= len(arr)\n\n    # Return the element to find\n    return arr[total_rotations]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, an array of ranges, number of rotations, and an index as input and returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    rotated_arr = arr.copy()\n    for i in range(rotations):\n        for j in range(len(arr)):\n            if j % (len(ranges)) == index:\n                rotated_arr[j] = arr[(j + ranges[index]) % len(arr)]\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n\n    Args:\n    arr (list): a list of integers\n    ranges (list): a list of ranges where each range is a list of integers\n    rotations (int): the number of rotations to perform\n    index (int): the index of the element to be found\n\n    Returns:\n    int: the element at the given index after the specified number of rotations\n    \"\"\"\n\n    # iterate over the ranges and find the index of the element in each range\n    for i in range(len(ranges)):\n        if index in ranges[i]:\n            return arr[ranges[i].index(index)]\n\n    # if the index is not found, raise an exception\n    raise ValueError(\"Index not found\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges, a list of rotations and an index as input.\n    It returns the element at the given index after number of rotations.\n    '''\n\n    # If the index is beyond the array bounds, return None\n    if index >= len(arr):\n        return None\n\n    # Apply rotations to the array\n    for i in range(rotations):\n        arr = arr[ranges[i]:ranges[i+1]] + arr[:ranges[i]] + arr[ranges[i+1]:]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = arr[index]\n\n    # Calculate the rotation of the element\n    rotation = 0\n    for i in range(len(ranges)):\n        if element >= ranges[i][0] and element < ranges[i][1]:\n            rotation = i\n            break\n\n    # Calculate the number of rotations required\n    num_rotations = 0\n    for i in range(len(ranges)):\n        if element >= ranges[i][1]:\n            num_rotations += 1\n            if num_rotations >= rotations:\n                break\n\n    # Calculate the actual index after the rotation\n    actual_index = (index + num_rotations) % len(arr)\n\n    # Find the element at the actual index after the rotation\n    rotated_element = find_Element(arr, ranges, rotations, actual_index)\n\n    # If the rotated element is found, return the element at the actual index\n    if rotated_element is not None:\n        return rotated_element\n    else:\n        # Otherwise, return the element at the index\n        return arr[actual_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Initialize variables to store the value and index of the element\n    element = None\n    element_index = None\n\n    # Iterate over all rotations\n    for i in range(rotations):\n        # Find the element at the given index after the current rotation\n        element = arr[index]\n        # Find the index of the element at the given index after the current rotation\n        for j in range(index+1, len(arr)):\n            if arr[j] == element:\n                element_index = j\n                break\n        # If the element is found, break out of the loop\n        if element_index is not None:\n            break\n        # Increment the index to be checked after the current rotation\n        index = (index + 1) % len(arr)\n\n    # If the element is found, return its value\n    if element_index is not None:\n        return arr[element_index]\n    # If the element is not found, return None\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize variables\n    current_element = arr[index]\n    current_rotation = 0\n    rotated_index = index\n    \n    # perform rotations\n    while current_rotation < rotations:\n        # find next element to rotate to\n        next_index = index + ranges[current_rotation]\n        if next_index >= len(arr):\n            next_index -= len(arr)\n        \n        # rotate current element to next element\n        next_element = arr[next_index]\n        arr[next_index] = current_element\n        current_element = next_element\n        \n        # increment rotation count\n        current_rotation += 1\n    \n    # return current element\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the total number of rotations needed to get to the given index\n    total_rotations = 0\n    for i in range(len(ranges)):\n        if ranges[i][0] <= index <= ranges[i][1]:\n            total_rotations += rotations[i]\n\n    # Find the element at the given index after the required number of rotations\n    element = arr[index]\n    for i in range(total_rotations):\n        element = arr[(index + rotations[i]) % len(arr)]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of range tuples, a list of rotations, and an index as input.\n    The function returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize variables\n    start = 0\n    end = len(arr) - 1\n    element = None\n    count = 0\n\n    # Find the element after the specified number of rotations\n    while count < rotations:\n        # Calculate the middle point of the current range\n        mid = (start + end) // 2\n\n        # Check if the middle point is within the range\n        if mid >= ranges[0][0] and mid <= ranges[0][1]:\n            # If the middle point is within the range, check if the index is within that range\n            if mid == index:\n                element = arr[mid]\n                break\n            # If the middle point is outside the range, check if the index is within the left half of the range\n            elif mid < index and mid + 1 <= ranges[0][1]:\n                element = arr[mid + 1]\n                break\n            # If the middle point is outside the range and the index is within the left half of the range,\n            # update the start and end indices\n            else:\n                start = mid + 1\n                end = ranges[0][1]\n\n        # If the middle point is outside the left half of the range, update the start and end indices\n        elif mid < ranges[0][0]:\n            start = mid + 1\n            end = ranges[0][1]\n\n        # If the middle point is outside the right half of the range, update the start and end indices\n        else:\n            start = ranges[0][0]\n            end = mid - 1\n\n        # Increment the count of rotations\n        count += 1\n\n    # Return the element at the specified index after the specified number of rotations\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p[a-zA-Z]*$', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-zA-Z]*'\n    result = re.findall(pattern, words)\n\n    if len(result) == 0:\n        return 'No words starting with p found.'\n\n    return result[0] +'and'+ result[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = re.findall(r'\\bp[a-zA-Z]+\\b',''.join(words))\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    pattern_match = re.findall(pattern, words)\n\n    if len(pattern_match) == 2:\n        return pattern_match\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = []\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p')\n    for i, word in enumerate(words):\n        if p_pattern.match(word):\n            if i > 0 and i < len(words) - 1:\n                return word, words[i+1]\n            elif i == 0:\n                return None, words[i+1]\n            elif i == len(words) - 1:\n                return words[i-1], None\n            else:\n                return None, None\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word.startswith('p')]\n    return p_words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]*$'\n    words_list = [word for word in words if re.match(pattern, word)]\n    return words_list"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == 0:\n        return a[0]\n\n    max_sum = max_sum_increasing_subseq(a, index - 1, k, index)\n    current_sum = a[index] + max_sum_increasing_subseq(a, index - 1, k, k)\n\n    return max(current_sum, max_sum)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize max_sum and max_subseq\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Initialize dp array\n    dp = [0] * n\n\n    # Traverse through the array from 0 to k - 1\n    for i in range(k):\n        dp[i] = a[i]\n\n    # Traverse through the array from k to n - 1\n    for i in range(k, n):\n        # Find the maximum sum of increasing subsequence from 0 to i\n        for j in range(i):\n            dp[i] = max(dp[i], dp[j] + a[i])\n\n        # Update max_sum and max_subseq\n        max_sum = max(max_sum, dp[i])\n        if dp[i] == max_sum and i - k + 1 not in max_subseq:\n            max_subseq.append(i - k + 1)\n\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the maximum sum as 0\n    max_sum = 0\n    # Initialize an empty list to store the prefix sum\n    prefix_sum = []\n    # Traverse the array from the given index till the end\n    for i in range(index, n):\n        # If the current element is greater than or equal to the kth element, add the kth element to the prefix sum\n        if a[i] >= a[k]:\n            prefix_sum.append(a[k])\n        # Initialize the current sum as 0\n        current_sum = 0\n        # Traverse the prefix sum from the end to the i-th element and check if the sum is greater than the maximum sum\n        for j in range(len(prefix_sum)-1, -1, -1):\n            current_sum += prefix_sum[j]\n            # If the current sum is greater than the maximum sum, update the maximum sum and break the outer loop\n            if current_sum > max_sum:\n                max_sum = current_sum\n                break\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = a[0]\n\n    for i in range(1, n):\n        # If the element at i is greater than or equal to k\n        if a[i] >= k:\n            # Update dp[i] as max of dp[i-1] + a[i] and dp[i-2]\n            dp[i] = max(dp[i-1] + a[i], dp[i-2])\n            # Update max_sum if dp[i] is greater than max_sum\n            max_sum = max(max_sum, dp[i])\n\n        # If the element at i is less than k\n        else:\n            # Update dp[i] as dp[i-1]\n            dp[i] = dp[i-1]\n            # Update max_sum if dp[i] is greater than max_sum\n            max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a table to store the maximum sum of increasing subsequence from prefix until ith index for each index i\n    t = [[0] * n for i in range(n)]\n\n    # Initialize the maximum sum of increasing subsequence from prefix until ith index as infinity\n    max_sum = float('-inf')\n\n    # Iterate through the array from index 0 to n-1\n    for i in range(n):\n\n        # If the current element is greater than k, then set the maximum sum of increasing subsequence from prefix until i to infinity\n        if a[i] > k:\n            t[i][i] = 0\n\n        # Otherwise, iterate through the array from i+1 to n-1 and find the maximum sum of increasing subsequence from prefix until j, where j is the index where the sum is maximum\n        else:\n            for j in range(i+1, n):\n                if a[j] > k:\n                    # If the sum of increasing subsequence from prefix until i and including the current element is greater than the sum of increasing subsequence from prefix until j and including the current element, then set the maximum sum of increasing subsequence from prefix until i to the sum of increasing subsequence from prefix until j and including the current element\n                    t[i][j] = max(t[i][j], t[i][k-1] + a[j])\n                else:\n                    # If the sum of increasing subsequence from prefix until i and including the current element is greater than the sum of increasing subsequence from prefix until j and including the current element, then set the maximum sum of increasing subsequence from prefix until i to the sum of increasing subsequence from prefix until j and including the current element\n                    t[i][j] = max(t[i][j], t[i][k-1])\n\n        # Update the maximum sum of increasing subsequence from prefix until i\n        max_sum = max(max_sum, t[i][index])\n\n    # Return the maximum sum of increasing subsequence from prefix until k\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Create a table to store the maximum sum of increasing subsequence from index up to j\n    dp = [[0] * (k+1) for _ in range(n)]\n    \n    # Initialize the maximum sum of increasing subsequence from index up to ith index\n    for i in range(n):\n        dp[i][0] = a[i]\n    \n    # Fill the table using dynamic programming\n    for i in range(1, n):\n        for j in range(1, k+1):\n            if j > i:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(a[i] + dp[i-1][j-1], dp[i-1][j])\n    \n    # Return the maximum sum of increasing subsequence from index up to k\n    return dp[n-1][k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function will find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0:\n        return a[0]\n\n    # If the current element is less than or equal to the kth element\n    if a[index] <= a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index - 1, k)\n\n    # If the current element is greater than the kth element\n    else:\n        # Finding the maximum sum of increasing subsequence from prefix until i-1 index and excluding the kth element\n        if index > 1:\n            return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 2))\n\n        # If there is only one element in the array\n        elif index == 1:\n            return max(a[0], a[1])\n\n        # If there is no element in the array\n        else:\n            return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # base case: if k is less than index, there's no increasing subsequence to be found\n    if k < index:\n        return 0\n\n    # initialize dp array with zeros\n    dp = [0] * n\n\n    # fill the dp array using dynamic programming\n    for i in range(index, n):\n        # calculate the maximum sum of increasing subsequence until i\n        for j in range(i):\n            # if the current element is greater than the kth element, add it to the current subsequence\n            if a[j] < a[i] and j!= k:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    # return the maximum sum of increasing subsequence from prefix until k\n    return dp[k - 1]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if n < k:\n        return 0\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        if a[i - 1] > a[i]:\n            dp[i] = dp[i - 1] + a[i]\n            if i == index and a[i] <= a[k - 1]:\n                dp[i] += a[k - 1]\n        else:\n            dp[i] = dp[i - 1]\n\n    return max(dp)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0\n    if a[index] > a[k]:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple of integers and returns a colon of the given size.\n    '''\n    colon = deepcopy(tuplex)\n    \n    # Loop through the tuple and set every nth element to 0\n    for i in range(len(colon)):\n        if i % m == 0 and i!= 0:\n            colon[i] = 0\n            \n    # Loop through the colon and reverse it\n    for i in range(len(colon)):\n        colon[i] = colon[i] * n\n    \n    # Remove the last element in the colon\n    colon.pop()\n    \n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a new tuple by slicing the original tuple\n    colon = deepcopy(tuplex[m:n])\n    # add the colon to the original tuple and return the modified tuple\n    return tuplex[:m] + colon + tuplex[n:]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex_list = list(new_tuplex)\n    if n > len(new_tuplex_list):\n        return None\n    new_tuplex_list[m] = new_tuplex_list[n-1]\n    new_tuplex = tuple(new_tuplex_list)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = deepcopy(tuplex)\n    while len(row) < m:\n        row.append(None)\n    for i in range(len(row)):\n        if i == 0 or i == n - 1:\n            row[i] = i + 1\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the tuple is a 2-D tuple\n    if isinstance(tuplex, tuple):\n        # Check if the dimensions of the tuple are valid\n        if len(tuplex[0]) == m and len(tuplex) == n:\n            # Create a copy of the tuple\n            tuplex_copy = deepcopy(tuplex)\n            # Flatten the copy of the tuple\n            tuplex_flatten = [item for sublist in tuplex_copy for item in sublist]\n            # Get the indices of the colon\n            colon_indices = [i for i, x in enumerate(tuplex_flatten) if x == ',']\n            # Slice the flattened tuple to get the colon\n            colon = tuplex_flatten[colon_indices[0]:colon_indices[-1]+1]\n            # Return the colon as a tuple\n            return tuple(colon)\n        else:\n            # If the dimensions are invalid, raise an exception\n            raise ValueError('Invalid dimensions of the tuple')\n    else:\n        # If the input is not a tuple, raise an exception\n        raise TypeError('Input must be a tuple')"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): A tuple.\n    m (int): The number of rows in the colon.\n    n (int): The number of columns in the colon.\n\n    Returns:\n    tuple: A colon of the input tuple.\n    \"\"\"\n\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Calculate the number of elements in the new tuple\n    num_elements = m * n\n\n    # Check if the number of elements is less than the input tuple length\n    if num_elements > len(new_tuplex):\n        raise ValueError(\"The number of elements in the colon is greater than the length of the input tuple.\")\n\n    # Get the indices of the elements in the input tuple\n    indices = list(range(m)) * n\n\n    # Create a new tuple with the elements in the desired order\n    colon_tuplex = tuple(new_tuplex[i] for i in indices[:num_elements])\n\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Make a copy of the tuple to avoid modifying it\n    tuplex = deepcopy(tuplex)\n\n    # Get the number of elements in the tuple\n    num_elems = len(tuplex)\n\n    # Calculate the length of the colon\n    colon_length = (num_elems + m - 1) // m\n\n    # Add the elements to the colon\n    for i in range(colon_length):\n        for j in range(m):\n            # If the current element is not None, add it to the colon\n            if i*m + j < num_elems and tuplex[i*m+j] is not None:\n                tuplex[i*m+j] = tuplex[i*m+j] + (n-1)*m**(i+1)\n\n    return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    - tuplex: tuple of length m x n\n    - m: number of rows\n    - n: number of columns\n\n    Returns:\n    - colon: colon of the original tuple\n    \"\"\"\n    # Create a copy of the original tuple\n    colon = deepcopy(tuplex)\n\n    # Iterate over the rows of the colon\n    for i in range(m):\n        # Iterate over the columns of the colon\n        for j in range(n):\n            # Swap the value at the position i,j with the value at the position j,i\n            colon[i][j], colon[j][i] = colon[j][i], colon[i][j]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    if len(tuplex) == m * n:\n        colon = deepcopy(tuplex)\n        for i in range(n):\n            colon = (colon[i*m:(i+1)*m],)\n        return colon\n    else:\n        print(\"The length of the tuple is not correct.\")"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n    # Get the number of elements in the colon\n    num_elements = (length + m - 1) // m\n    # Create a new tuple with the elements in the colon\n    colon = (tuplex_copy[i:i+m] for i in range(0, length, m))\n    # Return the colon\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        product1 = max(nums1)\n        product2 = max(nums2)\n        largest_products.append(product1 * product2)\n        nums1.remove(product1)\n        nums2.remove(product2)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize variables for largest products and count of products\n    max_product = 0\n    count = 0\n    \n    # loop through each index in nums1 and nums2\n    for i in range(N):\n        # find the product of nums1[i] and nums2[N-1-i]\n        product = nums1[i] * nums2[N-1-i]\n        \n        # if the product is greater than the current largest product, update max_product and count\n        if product > max_product:\n            max_product = product\n            count = 1\n        \n        # if the product is the same as the current largest product, increment count\n        elif product == max_product:\n            count += 1\n            \n    # return the count of largest products\n    return count\n"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        # find the largest product between two lists using the sliding window technique\n        left = 0\n        right = 0\n        max_product = 0\n        while right < len(nums1) and right < len(nums2):\n            # calculate the product of the current window\n            product = nums1[left] * nums2[right]\n            if product > max_product:\n                max_product = product\n            # move the right pointer to the right\n            right += 1\n        largest_products.append(max_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # find the maximum product of nums1 and nums2\n    max_product = max(nums1[0] * nums2[0], nums1[1] * nums2[1])\n\n    # find the maximum product of nums1[i] and nums2[j] for i <= j <= N\n    max_product_i_j = max(nums1[0] * nums2[j] * nums1[i] for i in range(1, N) for j in range(i, N+1))\n\n    # find the maximum product of nums1[i] and nums2[j] for i <= j <= N and nums1[i] * nums2[j] * nums1[i] >= max_product\n    max_product_i_j_max_product = max(nums1[0] * nums2[j] * nums1[i] for i in range(1, N) for j in range(i, N+1) if nums1[0] * nums2[j] * nums1[i] >= max_product)\n\n    # find the maximum product of nums1[i] and nums2[j] for i <= j <= N and nums1[i] * nums2[j] * nums1[i] <= max_product\n    max_product_i_j_max_product_1 = max(nums1[0] * nums2[j] * nums1[i] for i in range(1, N) for j in range(i, N+1) if nums1[0] * nums2[j] * nums1[i] <= max_product)\n\n    # find the maximum product of nums1[i] and nums2[j] for i <= j <= N and nums1[i] * nums2[j] * nums1[i] = max_product\n    max_product_i_j_max_product_2 = max(nums1[0] * nums2[j] * nums1[i] for i in range(1, N) for j in range(i, N+1) if nums1[0] * nums2[j] * nums1[i] == max_product)\n\n    # return the maximum product of nums1 and nums2\n    return max(max_product, max_product_i_j, max_product_i_j_max_product, max_product_i_j_max_product_1, max_product_i_j_max_product_2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Calculate the product of the two lists\n    product = 1\n    for num in nums1:\n        product *= num\n    for num in nums2:\n        product *= num\n    \n    # Initialize an empty list to store the largest products\n    largest_products = []\n    \n    # Calculate the largest products\n    for i in range(N):\n        # Calculate the product of the two selected numbers\n        num1 = nums1[i]\n        num2 = nums2[i]\n        product1 = 1\n        product2 = 1\n        for j in range(i):\n            product1 *= nums1[j]\n            product2 *= nums2[j]\n        # Check if the product is larger than the largest product found so far\n        if product1 * product2 > product:\n            # Add the new largest product to the list\n            largest_products = [num1, num2]\n            product = product1 * product2\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        largest_product = 1\n        for j in range(len(nums1)):\n            largest_product *= max(nums1[j], nums2[i])\n        largest_products.append(largest_product)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 1:\n        return max(nums1) * max(nums2)\n\n    # Find the indices of the largest numbers in each list\n    index1 = nums1.index(max(nums1))\n    index2 = nums2.index(max(nums2))\n\n    # Find the indices of the smallest numbers in each list\n    smallest1 = min(nums1[index1-N:index1])\n    smallest2 = min(nums2[index2-N:index2])\n\n    # Calculate the largest products and subtract the smallest numbers from them\n    largest_products = []\n    for i in range(N):\n        product1 = max(nums1[index1-i-1], smallest1[i]) * max(nums1[index1-i], smallest1[i])\n        product2 = max(nums2[index2-i-1], smallest2[i]) * max(nums2[index2-i], smallest2[i])\n        largest_products.append(max(product1, product2))\n\n    return max(largest_products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize two lists to store the largest products found for each list\n    largest_products1 = []\n    largest_products2 = []\n\n    # Iterate through each number in nums1 and nums2\n    for num in nums1 + nums2:\n\n        # Iterate through all possible combinations of factors from nums1 and nums2\n        for i in range(1, len(nums1) + 1):\n            for j in range(1, len(nums2) + 1):\n\n                # Find the product of the selected factors and the current number\n                product = num * nums1[i-1] * nums2[j-1]\n\n                # If the product is greater than the current largest product found for the first list, update the largest product found for the first list\n                if product > largest_products1[-1] or (product == largest_products1[-1] and nums1[i-1] > nums1[largest_products1.index(-1)]):\n                    largest_products1.append(nums1[i-1])\n\n                # If the product is greater than the current largest product found for the second list, update the largest product found for the second list\n                if product > largest_products2[-1] or (product == largest_products2[-1] and nums2[j-1] > nums2[largest_products2.index(-1)]):\n                    largest_products2.append(nums2[j-1])\n\n        # If N largest products have been found for the first list, stop iterating through the second list\n        if len(largest_products1) == N:\n            break\n\n    # Return the N largest products found for the first list\n    return largest_products1[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        # Find the largest product of the two lists for the current factor i\n        product1 = max(nums1)\n        product2 = max(nums2)\n        product = product1 * product2\n        # If the product is greater than the current largest product found, update the largest_products list\n        if product > largest_products[-1]:\n            largest_products.append(product)\n        # Remove the largest product from one of the lists for the current factor i\n        if product1 == product:\n            nums1.remove(product1)\n        else:\n            nums2.remove(product2)\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables for largest products and counts\n    largest_products = []\n    product_counts = []\n    \n    # Iterate through the numbers in both lists\n    for i in range(N):\n        # Calculate the product of the first N numbers in both lists\n        product = nums1[i] * nums2[i]\n        \n        # Check if the product is greater than the largest product found so far\n        if product > largest_products[-1] or len(largest_products) == 0:\n            # If the product is larger than the current largest product or if there is no largest product yet, add it to the list of largest products and update the count\n            largest_products.append(product)\n            product_counts.append(1)\n        else:\n            # If the product is not larger than the current largest product, add it to the list of largest products if the count is less than the specified N or if the count is the same as the specified N but the product is larger, update the count\n            for j in range(len(largest_products)):\n                if product == largest_products[j] and product_counts[j] < N:\n                    product_counts[j] += 1\n                elif product == largest_products[j] and product_counts[j] == N:\n                    product_counts[j] += 1\n                    largest_products[j] = product\n                    break\n    \n    # Return the list of largest products and their counts\n    return largest_products, product_counts"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # split the string into a list of characters\n    char_list = list(str1)\n    # convert the list to a tuple\n    char_tuple = tuple(char_list)\n    # return the tuple\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the given string to a list of characters\n    str_list = list(str1)\n    # Convert the list to a tuple of characters\n    return tuple(str_list)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    # convert the string to a list\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list to a tuple\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert n to binary representation\n    binary = bin(n)[2:]\n    # Initialize index variable\n    index = 0\n    # Loop through each bit in the binary representation\n    while index < len(binary):\n        # If a bit is unset, set the index variable to the current index\n        if binary[index] == '0':\n            break\n        # Increment the index variable\n        index += 1\n    # Set the left most unset bit to 1\n    binary = binary[:index] + '1' + binary[index:]\n    # Convert binary representation back to decimal\n    decimal = int(binary, 2)\n    # Return the decimal value\n    return decimal"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the index variable to 0\n    index = 0\n    # Initialize the mask variable to 1\n    mask = 1\n    # Initialize the result variable to 0\n    result = 0\n    \n    # While mask is not 0\n    while mask!= 0:\n        # If the least significant bit of n is 0\n        if (n & mask) == 0:\n            # Set the result variable to the result variable OR mask\n            result = result | mask\n        # Shift the mask to the right by 1\n        mask = mask >> 1\n        # Increment the index by 1\n        index += 1\n    \n    # Return the result variable\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the index of the leftmost set bit.\n    i = 0\n    while (n & 1) == 0:\n        n >>= 1\n        i += 1\n\n    # Set the leftmost bit to 1.\n    n |= 1 << i\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # convert binary representation of n to a list of digits\n    binary_list = list(bin(n)[2:])\n    # find the index of the first unset bit\n    index = binary_list.index('1')\n    # set all the unset bits to 0\n    for i in range(index, len(binary_list)):\n        binary_list[i] = '0'\n    # convert the list of digits back to binary and return the result\n    return int(''.join(binary_list), 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize variables\n    bit_set = 0\n    bit = 1\n\n    # Iterate through each bit in the binary representation of n\n    while bit <= n:\n        if n & bit == 0:\n            bit_set += 1\n        bit <<= 1\n\n    # Check if bit_set is less than the number of bits in n\n    if bit_set < n.bit_length():\n        # Set the left most unset bit\n        n |= (1 << bit_set)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n = n >> 1\n    \n    while n > 1:\n        if n & 1 == 1:\n            n = n ^ (1 << 0)\n        n = n >> 1\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    # Convert binary number to integer\n    n = int(n, 2)\n    # Set the left most unset bit to 1\n    n |= 1\n    # Convert integer back to binary\n    return bin(n)[2:]"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n    \n    :param n: the number for which the left most unset bit is to be set\n    :return: the updated number with the left most unset bit set\n    \"\"\"\n    \n    # Initialize the number of set bits\n    set_bits = 0\n    \n    # Iterate through the bits of the number\n    while n:\n        # If the current bit is set, increment the count\n        if n & 1:\n            set_bits += 1\n        # Move to the next bit\n        n >>= 1\n    \n    # Set the left most unset bit to 1\n    n |= (1 << set_bits)\n    \n    # Return the updated number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in the given number n.\n    It returns the modified number.\n    '''\n    # Initialize the index of the first unset bit to -1\n    unset_bit_index = -1\n    # Iterate over all the bits in the binary representation of n\n    for i in range(32):\n        # Check if the i-th bit is 1\n        if (n & (1 << i)) == 0:\n            # If it is, update the unset_bit_index variable\n            unset_bit_index = i\n            # Break the loop since we have found the left most unset bit\n            break\n    # If unset_bit_index is still -1, it means that all the bits in n are 1\n    if unset_bit_index == -1:\n        # Return n since all the bits are set to 1\n        return n\n    else:\n        # Set the unset bit in n to 1\n        n |= (1 << unset_bit_index)\n        # Return the modified number\n        return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Iterate through the binary representation of n and set the bit if the corresponding bit is unset\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2:].count('0') - 1 == i:\n            result |= 1 << i\n    \n    # Return the result\n    return result"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone using the formula:\n    V = \u03c0r^2h\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Calculate the volume using the formula V = \u03c0r\u00b2h\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, representing the radius and height of the cone, respectively.\n    The function calculates and returns the volume of the cone using the following formula:\n    \n    V = \u03c0 r^2 h\n    \n    where V is the volume, r is the radius, and h is the height.\n    \n    The function uses the math.pi constant to represent the value of pi.\n    '''\n\n    V = math.pi * (r**2) * h\n\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    \n    Inputs:\n    r - radius of the cone\n    h - height of the cone\n    \n    Output:\n    The volume of the cone\n    '''\n\n    # Calculate the volume of the cone using the formula V = (1/3) * pi * r^2 * h\n    V = (1/3) * math.pi * r**2 * h\n    \n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Finding the volume of the cone\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n    '''\n    # Formula to calculate volume of a cone\n    volume = math.pi * r**2 * h\n    \n    # Return the volume of the cone\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    # Find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    for i in range(1, n+1):\n        if i & (i-1) == 0:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 8\n    elif n == 6:\n        return 8\n    elif n == 7:\n        return 16\n    elif n == 8:\n        return 16\n    elif n == 9:\n        return 32\n    else:\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                return i\n        return i * i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize max_power variable with 0\n    max_power = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1): \n        # If the number is a power of 2, update max_power\n        if i & (i-1) == 0:\n            max_power = i\n    \n    # Return max_power\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n % 2 == 0:\n        return 2 * highest_Power_of_2(n//2)\n    else:\n        return 2**((n-1)//2)*2 + 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Convert n to binary and count the number of 1's\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    # Calculate the highest power of 2\n    highest_power_of_2 = 1 << count\n\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while n > 1:\n        i += 1\n        n >>= 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variables\n    max_power = 1\n    power = 1\n\n    # Loop through powers of 2 up to n\n    while power <= n:\n        # Check if power is a power of 2\n        if power == 1 << power:\n            max_power = power\n\n        # Update power\n        power <<= 1\n\n    # Return highest power of 2\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Find the highest power of 2 that is less than or equal to n\n    highest_power = 0\n    while n > 1:\n        highest_power += 1\n        n >>= 1\n    # Return the highest power of 2 found\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize a variable to store the highest power of 2 found\n    highest = 1\n\n    # Loop through the integers from 2 to n, checking each one to see if it is a power of 2\n    for i in range(2, n+1): \n        if i == 2**highest:\n            # If it is, update the highest variable to the current power of 2 found\n            highest += 1\n\n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    '''\n    This function will find then'th Lucas number using the formula:\n        Lucas(n) = (2^(2n) - 1) // (n + 1)\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    # Calculate the 2^n and (n+1) terms of the formula\n    two_power_n = 2**n\n    plus_one = n + 1\n    \n    # Calculate Lucas(n) using the formula\n    return (two_power_n - 1) // plus_one"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Base case: if n is 0 or 1, return 2\n    if n == 0 or n == 1: \n        return 2\n\n    # Initialize variables\n    prev_prev = 0\n    prev = 1\n\n    # Loop for n-1 iterations\n    for i in range(2, n+1): \n        # Calculate the next number in the sequence\n        next_num = prev_prev + prev\n\n        # Update the variables\n        prev_prev = prev\n        prev = next_num\n\n    return prev"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input: n must be a positive integer.\"\n    elif n == 1:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2) + find_lucas(n-3) +... + find_lucas(1)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [2]\n    for i in range(1, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 1: \n        return 2\n    elif n == 2: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n\n    # Recursive case\n    prev_lucas = find_lucas(n-1)\n    curr_lucas = prev_lucas + find_lucas(n-2)\n\n    return curr_lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for element in list_:\n        result.append(string.format(element))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Parameters:\n    list_: the list of elements to modify\n    string: the format string to apply to each element\n\n    Returns:\n    A modified list with the elements formatted according to the given format string.\n    '''\n    return [format(element, string) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(item) for item in list_]\n    return formatted_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i in range(len(l1)):\n        key1 = l1[i]\n        for j in range(len(l2)):\n            key2 = l2[j]\n            for k in range(len(l3)):\n                key3 = l3[k]\n                value = (key1, key2, key3)\n                if key1 not in result:\n                    result[key1] = {}\n                if key2 not in result[key1]:\n                    result[key1][key2] = {}\n                result[key1][key2][key3] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = [l2[i][j] for j in range(len(l2[i]))]\n        if key not in result:\n            result[key] = {}\n        result[key] = {**result[key], **value}\n    for i in range(len(l3)):\n        key = l3[i]\n        value = [l2[i][j] for j in range(len(l2[i]))]\n        if key not in result:\n            result[key] = {}\n        result[key] = {**result[key], **value}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    \n    # iterate through all lists and add each item to the result dictionary\n    for i, item in enumerate(l1):\n        result[l2[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {}\n        for j in range(len(l2)):\n            result[l1[i]][l2[j]] = l3[i][j]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to hold the nested dictionary\n    nested_dict = {}\n    # loop through each list of lists\n    for i in range(len(l1)):\n        # loop through each list in the nested list\n        for j in range(len(l1[i])):\n            # if the value is not empty, add it to the nested dictionary\n            if l1[i][j]!= '':\n                # create a new key for the dictionary\n                key = l1[i][j]\n                # create a new list for the value\n                value = []\n                # loop through each item in the current list\n                for k in range(len(l1[i][:j]) + 1):\n                    value.append(l1[i][k])\n                    # if the value is not empty, add it to the nested dictionary\n                    if l1[i][k]!= '':\n                        key = '.'.join([key, l1[i][k]])\n                        value = []\n                        for l in range(k + 1, len(l1[i])):\n                            value.append(l1[i][l])\n                            if l1[i][l]!= '':\n                                key = '.'.join([key, l1[i][l]])\n                                value = []\n                # add the value to the nested dictionary\n                nested_dict[key] = value\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    result = []\n    for i in range(len(l1)):\n        result.append({l1[i]:l2[i], l3[i]:l3[i]})\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        if l1[i] not in result:\n            result[l1[i]] = {}\n        if l2[i] not in result[l1[i]]:\n            result[l1[i]][l2[i]] = {}\n        result[l1[i]][l2[i]][l3[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes in any number of lists and returns a nested dictionary.\n\n    Args:\n        *lists (list): List of lists to be converted to nested dictionary.\n\n    Returns:\n        dict: Nested dictionary created from input lists.\n    \"\"\"\n    # Create empty dictionary to hold nested dictionary\n    result = {}\n\n    # Loop through each input list and add each item to the dictionary\n    for i, lst in enumerate(lists):\n        for item in lst:\n            # Check if current item is a dictionary\n            if isinstance(item, dict):\n                # Check if current item is already in the result dictionary\n                if item not in result:\n                    # Add current item to the result dictionary\n                    result[item] = {}\n            else:\n                # Check if current item already exists as a key in the dictionary\n                if item in result:\n                    # If it does, append to the existing list\n                    result[item].append(i)\n                else:\n                    # If it doesn't, add the item to the dictionary as a key and a list containing its index\n                    result[item] = [i]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Creating a nested dictionary\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    \n    # Returning the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n    l1: list of lists containing elements for each dictionary\n    l2: list of dictionaries containing elements for each dictionary\n    l3: list of elements for each dictionary\n\n    Returns:\n    nested_dict: nested dictionary where each element is a dictionary\n\n    \"\"\"\n\n    nested_dict = []\n\n    for i in range(len(l1)):\n        nested_dict.append({l2[i][key]: l1[i][j] for j in range(len(l1[i])) for key in l2[i]})\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    sum_n = n\n    \n    for i in range(2, n//2+1):\n        sum_n += i\n    \n    for i in range(3, n//3+1):\n        sum_n += i\n    \n    for i in range(4, n//4+1):\n        sum_n += i\n    \n    for i in range(5, n//5+1):\n        sum_n += i\n    \n    return sum_n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case: if n is less than or equal to 1\n    if n <= 1:\n        return n\n    \n    # Recursive case: find the maximum sum possible by considering all possible values of n/2, n/3,..., n/n\n    max_sum_1 = get_max_sum(n//2)\n    \n    # Calculate the maximum sum possible by considering all possible values of n/3, n/4,..., n/n\n    max_sum_2 = get_max_sum(n//3)\n    \n    # Calculate the maximum sum possible by considering all possible values of n/4, n/5,..., n/n\n    max_sum_3 = get_max_sum(n//4)\n    \n    # Calculate the maximum sum possible by considering all possible values of n/5, n,..., n/n\n    max_sum_4 = get_max_sum(n//5)\n    \n    # Calculate the maximum sum possible by considering all possible values of n\n    max_sum_5 = n\n    \n    # Return the maximum sum possible\n    return max(max_sum_1, max_sum_2, max_sum_3, max_sum_4, max_sum_5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def sum_f(n):\n        if n == 1:\n            return n\n        else:\n            return n + sum_f(n//2) + sum_f(n//3) + sum_f(n//4) + sum_f(n//5)\n\n    return sum_f(n) - n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    elif n % 2 == 0:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n-1)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 4\n        elif n == 4:\n            return 8\n        elif n == 5:\n            return 15\n        else:\n            return f(n-1) + f(n-2) + f(n-3) + f(n-4) + f(n-5)\n\n    # Calculate the sum of the first n terms of the series\n    series_sum = sum(range(1, n+1))\n\n    # Calculate the maximum sum of the series\n    max_sum = max(series_sum, f(n))\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 10\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # recursive function to find sum of first n numbers in Fibonacci sequence\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    # calculate sum of first n numbers in Fibonacci sequence\n    fib_sum = fibonacci(n)\n\n    # calculate maximum sum possible using the given equation\n    max_sum = max(fib_sum * (1/2), n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # Base case\n    if n == 1:\n        return 0\n    \n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case for the recursive function\n    if n == 1:\n        return n\n\n    # Recursive case for the recursive function\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result_list = []\n    \n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            result_list = [i]\n        elif len(i) == max_length:\n            result_list.append(i)\n    \n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = [len(x) for x in input_list]\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as an input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    \n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Initialize variables\n    max_length = 0\n    max_list = None\n    \n    # Iterate through each item in the list\n    for item in input_list:\n        # If the length of the item is greater than the current maximum, update the max_length and max_list\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    \n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = input_list[0]\n    \n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n            \n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # If the length of the set is equal to the length of the tuple, there are no duplicates\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates and then check if the length is equal to the length of the tuple\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the elements of the tuple\n    set_of_elements = set(test_tup)\n    # Check if the set is empty\n    if len(set_of_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the character count\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through each character in the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # iterate over each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in freq:\n            # if it is, increment its frequency by 1\n            freq[char] += 1\n        else:\n            # if it's not, add it with a frequency of 1\n            freq[char] = 1\n    # iterate over the characters again and find the first non-repeating one\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    # if no non-repeating characters were found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char not in char_set:\n            char_set.add(char)\n        else:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Returns the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for char in str1:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n            \n    for char, count in count.items():\n        if count == 1:\n            return char\n            \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Loop through the string to find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n\n    # Loop through each character in the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Find the first character in the string that has a frequency of 1\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n\n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the characters and their frequency\n    char_freq = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            char_freq[char] = 1\n    # Loop through the dictionary again to find the first non-repeating character\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Iterate through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    # If the loop completes without finding a non-repeated character, return None\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = [a,b,c]\n    numbers.sort()\n    \n    # Find the median\n    if len(numbers) % 2 == 0:\n        # Find the average of the two middle numbers\n        average = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\n        print(\"The median of\", a, b, c, \"is\", average)\n    else:\n        # Find the middle number\n        median = numbers[len(numbers)//2]\n        print(\"The median of\", a, b, c, \"is\", median)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2])/2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median\n    mid = len(numbers) // 2\n    median = numbers[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Calculate the middle two numbers\n    mid1 = nums[1]\n    mid2 = nums[2]\n    \n    # Calculate the sum of the middle two numbers\n    mid_sum = mid1 + mid2\n    \n    # Calculate the median of the three numbers\n    median = mid_sum / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # calculate the median based on the length of the list\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n    \n    # find the middle element of the sorted array\n    middle = len(numbers) // 2\n    \n    # return the median\n    return numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    \n    # Determine the length of the list\n    length = len(nums)\n    \n    # If the list has an odd number of elements, the median is the average of the two middle numbers\n    if length % 2 == 1:\n        return nums[length // 2]\n    \n    # If the list has an even number of elements, the median is the average of the two middle numbers\n    else:\n        return (nums[length // 2 - 1] + nums[length // 2]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a_bigger = a > b\n    b_bigger = b > c\n    c_bigger = c > a\n\n    if a_bigger and b_bigger and c_bigger:\n        return a\n    elif a_bigger and b_bigger:\n        return (a + b) / 2\n    elif a_bigger and c_bigger:\n        return (a + c) / 2\n    elif b_bigger and c_bigger:\n        return (b + c) / 2\n    else:\n        return (a + b + c) / 3"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a,b,c])\n    \n    # Check if the length of the list is odd or even\n    if len(sorted_nums) % 2 == 0:\n        # Find the average of the two middle numbers\n        avg = (sorted_nums[len(sorted_nums)//2] + sorted_nums[len(sorted_nums)//2 - 1]) / 2\n    else:\n        # Find the middle number\n        avg = sorted_nums[len(sorted_nums)//2]\n    \n    return avg"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each digit\n        for digit in str(num):\n            # Add the digit to the sum of digits\n            sum_of_digits += int(digit)\n    \n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits for each number\n    sum_of_digits_list = []\n    # iterate through each number in the list\n    for num in nums:\n        # convert the number to a string and use the sum() function to add up its digits\n        sum_of_digits_list.append(sum(str(num)))\n    # return the sum of digits for each number in the list\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        sum_list.append(sum_num)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(d) for d in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        # Convert the number to a string and loop through each character\n        num_str = str(num)\n        for char in num_str:\n            # Add the integer value of the character to the total sum\n            total_sum += int(char)\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        # Convert the number to a string and then to a list of characters\n        num_str = str(num)\n        # Convert the list of characters to a list of integers and then sum the digits\n        num_digits = [int(digit) for digit in num_str]\n        sum += sum(num_digits)\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate over each number in the list\n    for num in nums:\n        # convert the number to a string and compute the sum of its digits\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        # print the result\n        print(\"Sum of digits of\", num, \"is:\", sum_of_digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and split it into digits\n        digits = list(str(num))\n\n        # Iterate over each digit in the list and add it to the total sum\n        for digit in digits:\n            total_sum += int(digit)\n\n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Combine the two tuples into one list\n    combined_list = test_tup1 + test_tup2\n\n    # Initialize a variable to store the result of the xor operation\n    xor_result = 0\n\n    # Loop through each element in the combined list\n    for element in combined_list:\n        # Perform the xor operation on the current element and the xor_result\n        xor_result ^= element\n\n    # Return the xor_result\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n\n    Args:\n    test_tup1: tuple of integers\n    test_tup2: tuple of integers\n\n    Returns:\n    The mathematical bitwise xor operation of the given tuples.\n    '''\n\n    # Perform the mathematical bitwise xor operation across the given tuples\n    result = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the variables for the result and counter\n    result = 0\n    counter = 0\n    \n    # Loop through each element in the first tuple\n    for element in test_tup1:\n        # Increment the counter\n        counter += 1\n        \n        # Perform the bitwise xor operation with the current element and the result\n        result ^= element\n        \n        # Print the result for each element in the first tuple\n        print(f\"Result for {counter} element in the first tuple: {result}\")\n    \n    # Loop through each element in the second tuple\n    for element in test_tup2:\n        # Increment the counter\n        counter += 1\n        \n        # Perform the bitwise xor operation with the current element and the result\n        result ^= element\n        \n        # Print the result for each element in the second tuple\n        print(f\"Result for {counter} element in the second tuple: {result}\")\n    \n    # Return the result\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    # Iterate over the elements of each tuple\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    # Return the result as an integer\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum += test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpack the tuples into individual variables\n    tup1 = test_tup1\n    tup2 = test_tup2\n    # loop through each element in the tuples\n    for i in range(len(tup1)):\n        # perform the bitwise xor operation between the current elements\n        tup1[i] = tup1[i] ^ tup2[i]\n    return tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_freq = {}\n    for item in test_list:\n        if tuple(item) in unique_freq:\n            unique_freq[tuple(item)] += 1\n        else:\n            unique_freq[tuple(item)] = 1\n    return len(unique_freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples in the list\n    unique_tuples = set()\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Check if the current tuple is in the set\n        if tup not in unique_tuples:\n            # If not, add it to the set and increment the count\n            unique_tuples.add(tup)\n\n    # Return the length of the unique_tuples set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) not in freq_dict:\n            freq_dict[tuple(item)] = 1\n        else:\n            freq_dict[tuple(item)] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n\n    for i in test_list:\n        for j in i:\n            unique_tuples.add(tuple(j))\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if (item[0], item[1]) not in freq:\n            freq[(item[0], item[1])] = 1\n        else:\n            freq[(item[0], item[1])] += 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(item) in freq_dict:\n            freq_dict[tuple(item)] += 1\n        else:\n            freq_dict[tuple(item)] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple\n    result_tup = ()\n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # get the element at index i from the first tuple\n        elem1 = test_tup1[i]\n        # iterate over the elements of the second tuple\n        for j in range(len(test_tup2)):\n            # get the element at index j from the second tuple\n            elem2 = test_tup2[j]\n            # add the two elements and append the result to the result tuple\n            result_tup += (elem1 + elem2,)\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check the length of both tuples\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have same length')\n    # add each element of the tuples\n    result_tup = tuple(map(lambda x, y: x+y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    \n    # Create an empty result tuple\n    result = []\n    \n    # Perform index wise addition of tuple elements\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    \n    # Return the result tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        row1 = test_tup1[i]\n        row2 = test_tup2[i]\n        row_sum = []\n        for j in range(len(row1)):\n            row_sum.append(row1[j] + row2[j])\n        result.append(tuple(row_sum))\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # unpack the two tuples\n    tup1 = test_tup1[0]\n    tup2 = test_tup2[0]\n    \n    # check if the two tuples have the same length\n    if len(tup1)!= len(tup2):\n        print(\"Error: The two tuples do not have the same length.\")\n        return\n    \n    # add the two tuples\n    result_tup = []\n    for i in range(len(tup1)):\n        result_tup.append(tup1[i] + tup2[i])\n    \n    # return the result tuple\n    return (result_tup, tup1, tup2)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    new_tuple = ()\n    # Loop through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of both tuples\n        new_tuple += (test_tup1[i] + test_tup2[i],)\n    # Return the result tuple\n    return new_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the length of the first tuple\n    tup1_length = len(test_tup1)\n    # Initialize a new list of tuples with the same length as the second tuple\n    result = [[0 for _ in range(tup1_length)] for _ in range(len(test_tup2))]\n\n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            # Add the corresponding elements of the two tuples and store the result in the corresponding index of the result list\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of the two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\nprint(minimum(3, 5)) # Output: 3\nprint(minimum(8, 3)) # Output: 3\nprint(minimum(20, 10)) # Output: 10"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes two tuples as input and returns True if the element exists within the first tuple, otherwise it returns False.\n\n    Parameters:\n    tuplex (tuple): The first tuple.\n    tuple1 (tuple): The second tuple.\n\n    Returns:\n    bool: True if the element exists within the first tuple, otherwise it returns False.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} found in tuple {tuple1}\")\n    else:\n        print(f\"{tuplex} not found in tuple {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for tup in tuplex:\n        if tup in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1[0]:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    This function takes two arguments: a tuple and a tuple of elements.\n    It returns True if the element exists in the tuple, and False otherwise.\n    '''\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0: # If the number is even, then it is odd\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # check if the number is even or not\n    if x % 2 == 0: \n        return \"The number is even.\"\n        \n    # if the number is odd\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the given number is even or odd\n    if x % 2 == 0:\n        # if the number is even, return False (odd parity)\n        return False\n    else:\n        # if the number is odd, return True (even parity)\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0: # if x is even\n        return False # parity is even\n    else: # if x is odd\n        return True # parity is odd"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x % 2 == 0:  # check if the number is even\n        print(x, \"is even.\")\n        return False\n    else:\n        print(x, \"is odd.\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0: #check if x is even\n        return False\n    else: #if x is odd, return True\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # check if x is a positive integer\n    if x < 0:\n        return \"Please enter a positive integer.\"\n    # check if x is an odd number\n    elif x % 2 == 0:\n        return \"The parity of an even number is even.\"\n    else:\n        return \"The parity of an odd number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"Even number\"\n    else: \n        return \"Odd number\""
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n    for i in range(len(digits)):\n        if digits[i] == max_digit:\n            digits.remove(max_digit)\n            digits.append(max_digit)\n            break\n    result = 0\n    for digit in digits:\n        result = result * 10 + digit\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # initialize the next bigger number to None\n    next_bigger = None\n    \n    # convert the input number to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # reverse the list of digits\n    digits.reverse()\n    \n    # find the index of the digit that is 1 digit smaller than the current number\n    index = 0\n    while digits[index] == '9':\n        index += 1\n    \n    # if there are no such digits, return None\n    if index == len(digits):\n        return None\n    \n    # determine the difference between the digits in the index position and the current number\n    diff = int(digits[index]) - n\n    \n    # if the difference is 0 or 1, the next bigger number is the current number plus 1\n    if diff == 0 or diff == 1:\n        next_bigger = n + 1\n    \n    # otherwise, the next bigger number is the current number plus the difference\n    else:\n        next_bigger = n + diff\n    \n    # convert the next bigger number to a string and return it\n    return str(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Convert the string to a list of digits\n    digits = [int(d) for d in num_str]\n    # Reverse the list of digits\n    digits.reverse()\n    # Find the index of the first digit that is greater than 0\n    for i, d in enumerate(digits):\n        if d > 0:\n            break\n    # Move the digit at that index to the last position\n    digits[i] = digits[-1]\n    # Reverse the list of digits again\n    digits.reverse()\n    # Convert the list of digits back to a string\n    next_bigger_str = ''.join(str(d) for d in digits)\n    # Convert the string to an integer\n    next_bigger = int(next_bigger_str)\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the input number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # reverse the list of digits\n    digits.reverse()\n\n    # find the largest digit\n    max_digit = max(digits)\n\n    # create a new list of digits with the same length as the input number\n    new_digits = [0] * len(digits)\n\n    # iterate over the digits and add the next bigger number to the new list of digits\n    for digit in digits:\n        # if the next digit is less than or equal to the maximum digit, add 1 to it\n        if digit <= max_digit:\n            new_digits[digit-1] += 1\n        # otherwise, add 1 to the maximum digit\n        else:\n            new_digits[max_digit-1] += 1\n            max_digit += 1\n\n    # convert the new list of digits back to a string and return it\n    return int(''.join(str(digit) for digit in new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the length of the given number\n    length = len(str(n))\n\n    # Rearrange the digits of the given number by swapping the first digit with the last digit\n    n = int(str(n)[::-1])\n\n    # Convert the rearranged number back to a string\n    n = str(n)\n\n    # Calculate the sum of the digits of the rearranged number\n    sum_digits = sum(int(digit) for digit in n)\n\n    # If the sum of the digits is even, the next bigger number is simply the rearranged number\n    if sum_digits % 2 == 0:\n        return int(n)\n\n    # Otherwise, the next bigger number is one digit longer than the rearranged number\n    else:\n        return int(n[:-1] + str(int(n[-1]) + 1))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the given number to a list of digits\n    digits = list(str(n))\n    # reverse the list of digits\n    digits.reverse()\n    # initialize the result variable with an empty list\n    result = []\n    # loop through the list of digits and append the digits to the result in reverse order\n    for digit in digits:\n        result.append(digit)\n    # convert the result list of digits back to a string and return it as the next bigger number\n    return int(''.join(result))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Find the index of the largest digit\n    max_idx = max(range(len(num_str)), key=lambda i: int(num_str[i]))\n    # Create a new string by rearranging the digits of the original number\n    new_str = ''\n    for i in range(max_idx + 1):\n        new_str += num_str[i]\n    # Convert the new string back to an integer and return it\n    return int(new_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    # Create a dictionary to map digits to their positions in the number\n    digits_dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n\n    # Convert the input number to a list of digits\n    digits = [str(n)[i] for i in range(len(str(n)))]\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Initialize the next bigger number\n    next_bigger = 0\n\n    # Iterate over the digits and create the next bigger number\n    for digit in digits:\n        # Calculate the position of the digit in the digits_dict\n        pos = digits_dict[digit]\n\n        # Calculate the next position for the digit\n        next_pos = (pos + 1) % 9\n\n        # Convert the position back to a digit and append to the next_bigger string\n        next_bigger += int(digit) * (10**(9-next_pos))\n\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert n to a string and split it into a list of digits\n    digits = list(str(n))\n\n    # reverse the list of digits\n    digits.reverse()\n\n    # use a while loop to rearrange the digits in the string\n    i = 0\n    while i < len(digits):\n        j = i + 1\n        while j < len(digits) and digits[j] > digits[i]:\n            # swap digits i and j\n            digits[i], digits[j] = digits[j], digits[i]\n            j += 1\n        i += 1\n\n    # convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string and split it into digits\n    digits = list(str(n))\n    \n    # Loop over the digits of the number and find the first non-zero digit\n    for i in range(len(digits)):\n        if digits[i]!= '0':\n            # Swap the first digit with the next bigger digit\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n            # Convert the digits back to a number and return it\n            return int(''.join(digits))\n\n    # If there is no non-zero digit, return the original number\n    return n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Initialize a min heap to store the pairs that have the minimum difference\n    min_heap = []\n\n    # Iterate through both arrays and for each pair, calculate the difference\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            diff = abs(nums1[i] - nums2[j])\n            heapq.heappush(min_heap, (-diff, (i, j)))\n\n    # Extract the top k pairs from the heap and store them in a list\n    result = []\n    while k > 0 and min_heap:\n        diff, pair = heapq.heappop(min_heap)\n        result.append(pair)\n        k -= 1\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # We can use heapq to keep track of the smallest k pairs\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the size of heap is less than k, add this pair to heap\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            # If the size of heap is greater than or equal to k, check if the current pair is the smallest\n            else:\n                # If the current pair is smaller than the smallest pair in heap, replace it with this pair\n                if (heap[0][0] > num1 + num2):\n                    heapq.heappop(heap)\n                    heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    # Return the result\n    result = []\n    for pair in heap:\n        result.append(pair[1])\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    min_heap = []\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, 0)) # negative to sort in ascending order\n    \n    for num2 in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-num2, 0))\n        else:\n            if -min_heap[0][0] > -num2:\n                heapq.heappushpop(min_heap, (-num2, 0))\n            \n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result[::-1]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a min heap to store the smallest elements from the two arrays\n    min_heap = [(-num1, num2) for num1 in nums1 for num2 in nums2]\n    heapq.heapify(min_heap)\n    \n    # Initialize the result list and the number of pairs found so far\n    result = []\n    count = 0\n    \n    # While there are still k pairs to find and there are elements in the min heap\n    while k > 0 and heapq.qsize(min_heap) > 0:\n        # Get the smallest pair from the min heap\n        pair = -heapq.heappop(min_heap)\n        \n        # If the pair is not already in the result list, add it and decrement the count\n        if pair not in result:\n            result.append(pair)\n            count += 1\n            \n            # If we have found k pairs, break out of the loop\n            if count == k:\n                break\n            \n            # Remove any duplicate pairs from the min heap\n            for other_pair in result:\n                if pair[0] == other_pair[1] or pair[1] == other_pair[0]:\n                    heapq.heappush(min_heap, other_pair)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the given arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min heap to store the smallest k elements\n    min_heap = []\n    for i in range(len(nums2)):\n        # Add the element at index i from the second array to the min heap\n        heapq.heappush(min_heap, nums2[i])\n\n        # Check if the min heap has reached k elements\n        if len(min_heap) == k:\n            # Pop the smallest element from the min heap and the element at index i from the second array\n            result = (heapq.heappop(min_heap), nums1[i])\n\n            # Print the result\n            print(result)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # convert the lists into a set to remove duplicates\n    nums1 = set(nums1)\n    nums2 = set(nums2)\n\n    # create a list of tuples containing (i,j) where i and j are the indices of the smallest elements in the first and second arrays\n    pairs = [(i,j) for i in nums1 for j in nums2 if i<j]\n\n    # sort the list of tuples by the first element of each tuple (i)\n    pairs.sort(key=lambda x: x[0])\n\n    # use a min heap to keep track of the k smallest pairs\n    min_heap = []\n    for i,j in pairs:\n        # if the size of the min heap is less than k, add the current pair to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (i,j))\n        # if the size of the min heap is equal to k, compare the first element of the smallest pair in the heap with the current pair\n        elif heapq.heappop(min_heap)[0] > i:\n            # if the first element of the smallest pair in the heap is greater than the current pair, add the current pair to the heap\n            heapq.heappush(min_heap, (i,j))\n        # if the size of the min heap is equal to k, and the first element of the smallest pair in the heap is less than or equal to the current pair, ignore the current pair\n        else:\n            continue\n\n    # extract the first k pairs from the min heap\n    result = []\n    while min_heap and len(result) < k:\n        result.append(heapq.heappop(min_heap))\n\n    # return the result as a list of tuples\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap\n    min_heap = []\n    # Iterate over the first array and add elements to the heap\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    # Iterate over the second array and add elements to the heap\n    for num in nums2:\n        # If the current element is smaller than the smallest element in the heap, add it to the heap\n        if heapq.heappushpop(min_heap, -num) == -num:\n            heapq.heappush(min_heap, -num)\n        # If the heap is full and the current element is smaller than the smallest element in the heap, pop the smallest element from the heap and add the current element to the heap\n        if len(min_heap) == k:\n            if -heapq.heappop(min_heap) > -num:\n                heapq.heappush(min_heap, -num)\n\n    # Extract the k elements from the heap and store them in a list\n    result = []\n    for _ in range(k):\n        result.append(-heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap to store the pairs with their indices\n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # add the pair to the heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n            # if the heap size is greater than k, remove the smallest pair\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    # return the pairs with their indices\n    result = []\n    while min_heap:\n        _, pair_indices = heapq.heappop(min_heap)\n        result.append(pair_indices)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n\n    # Build a heap of smallest pairs\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i] + nums2[j], (i, j))\n            heapq.heappush(heap, pair)\n\n            # Remove the smallest pair if the heap size exceeds k\n            if len(heap) > k:\n                pair = heapq.heappop(heap)\n\n    # Extract and return the k smallest pairs\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append(pair)\n\n        # Add the smallest pair to the heap again\n        if len(heap) < k:\n            pair = (pair[0][0], (pair[0][1][0], pair[0][1][1]))\n            heapq.heappush(heap, pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Initialize a min-heap to keep track of the pairs\n    min_heap = []\n\n    # Loop through each number in nums1 and nums2\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Add the pair (nums1[i], nums2[j]) to the min-heap\n            heapq.heappush(min_heap, (nums1[i] + nums2[j], (i, j)))\n\n            # If the size of the min-heap exceeds k, remove the smallest pair\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Extract the k smallest pairs from the min-heap\n    result = []\n    while min_heap:\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product and the list of products\n    min_product = float('inf')\n    product_list = []\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the product is smaller than the current minimum product\n            if product < min_product:\n                min_product = product\n                # Add the product to the list of products\n                product_list = [(list1[i], list1[j])]\n            # If the product is the same as the current minimum product, add the pair to the list of products\n            else:\n                product_list.append((list1[i], list1[j]))\n\n    # Return the list of products with the minimum product\n    return product_list"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if current_product < min_product:\n                min_product = current_product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum product\n    of pairs of tuples within the list.\n    \"\"\"\n    # initialize the minimum product to be greater than 1\n    min_product = 1\n\n    # loop through the list and for each pair of tuples, calculate the\n    # product and compare it with the current minimum product\n    for i in range(len(lst) - 1):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0]*lst[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product as infinity\n    min_product = float('inf')\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the remaining tuples in the list\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the current pair of tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the current product is smaller\n            min_product = min(min_product, product)\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list as input and finds the minimum product of pairs of tuples\n    within the list.\n    '''\n    min_product = 1\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            if product < min_product:\n                min_product = product\n                \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            products.append(list1[i][0] * list1[j][1])\n    return min(products)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of each tuple\n    sorted_list = sorted(list1, key=lambda x: x[0])\n\n    # Initialize the minimum product as the first element of the first tuple in the sorted list\n    min_product = sorted_list[0][0]\n\n    # Loop through the sorted list and find the minimum product of pairs of tuples\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][0] < sorted_list[i-1][0]:\n            # Update the minimum product if the current tuple is smaller than the previous tuple\n            min_product = sorted_list[i][0] * sorted_list[i-1][1]\n        else:\n            # Update the minimum product if the current tuple is greater than the previous tuple\n            min_product = sorted_list[i][0] * sorted_list[i-1][0]\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Create a dictionary to store the type of each value in the list\n    type_dict = {}\n    for val in listval:\n        if val in type_dict:\n            type_dict[val] += 1\n        else:\n            type_dict[val] = 1\n    \n    # Find the minimum value using the type_dict\n    min_val = None\n    for val in type_dict:\n        if min_val is None or type_dict[val] < type_dict[min_val]:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Use a helper function to find the minimum value of each element type\n    def min_helper(val):\n        if isinstance(val, int):\n            return val\n        elif isinstance(val, float):\n            return val\n        elif isinstance(val, bool):\n            return val\n        elif isinstance(val, str):\n            return val\n        elif isinstance(val, list):\n            return min_val(val)\n        else:\n            return min_helper(type(val).__bases__[0])\n\n    # Find the minimum value using the helper function\n    return min_helper(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Convert the list to a tuple to avoid comparing objects\n    listval = tuple(listval)\n    \n    # Find the minimum value in the tuple\n    return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    min_val = listval[0]\n    for num in listval:\n        if num < min_val:\n            min_val = num\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the minimum value in the list.\n    '''\n    # Initialize minimum value to the first value in the list\n    min_val = listval[0]\n    # Iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # Check if the current value is less than the minimum value\n        if listval[i] < min_val:\n            # Update the minimum value if the current value is less than the current minimum value\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list as an argument and returns the minimum value in it.\n    '''\n\n    min_val = listval[0]\n\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert a snake case string to camel case string.\n    '''\n    word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return word[0].lower() + word[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'[A-Z]+', word)\n    camel_case = ''.join([word[0].lower() + word[1:].title() for word in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'([A-Z])')\n    result = pattern.sub(r'_\\1', word).lower()\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(\\w)'\n    return re.sub(pattern, lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a string in snake case format and converts it to camel case format.\n    '''\n    # Remove any leading or trailing underscores\n    word = re.sub('^_|_$', '', word)\n    # Convert all underscores to spaces\n    word = re.sub('_','', word)\n    # Convert the first letter to uppercase and the rest to lowercase\n    word = word.capitalize()\n    # Remove any leading or trailing spaces\n    word = word.strip()\n    return word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into separate words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # convert the words to camel case\n    camel_case = ''.join([word.capitalize() for word in words])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub(r'_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() if x.islower() else x for x in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    first_part = word.split('_')[0]\n    rest_parts = re.findall(r'_(.)', word[len(first_part)+1:])\n    return first_part + ''.join(rest_parts)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscores as delimiters\n    words = re.findall(r'(_\\w+)', word)\n\n    # Convert the first letter of each word to upper case and the rest to lower case\n    result = words[0].upper() + words[1:].lower()\n\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create an empty list to store the even numbers\n    even_list = []\n    # loop through the input list\n    for num in l:\n        # if the number is even, add it to the even list\n        if num % 2 == 0:\n            even_list.append(num)\n    # return the even list\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2 == 1:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if n <= 0 or n > len(list1):\n            return None\n        else:\n            return list1[n-1]\n    except:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function extracts the nth element from a list of tuples.\n    \"\"\"\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as inputs.\n    It extracts the nth element from the list and returns it.\n    '''\n    if n > len(list1):\n        return \"Invalid input: n is greater than the length of the list.\"\n    elif n < 1:\n        return \"Invalid input: n is less than 1.\"\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Check if the index is valid\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # Extract the nth element\n    return list1[n]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n > len(list1) or n < 1:\n        print(\"Invalid input. n should be a positive integer less than or equal to the length of the list.\")\n        return\n    \n    # Extract the nth element from the list\n    result = list1[n-1]\n    print(f\"The {n}th element of the list is: {result}\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # sort the set in ascending order\n    sorted_set = sorted(set1)\n    # check if the length of the sorted set is greater than n\n    if len(sorted_set) > n:\n        return sorted_set[n-1]\n    else:\n        return None"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    \n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if there is any value that exists in both lists.\n    \"\"\"\n    if not set(list1).intersection(set(list2)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through each value in list1\n    for i in list1:\n        # check if the value exists in list2\n        if i in list2:\n            # if it does, return True\n            return True\n    # if no value exists in list1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # convert both lists to sets to remove duplicates and avoid duplicates in the final result\n    list1 = set(list1)\n    list2 = set(list2)\n    \n    # loop through the lists and check for overlap\n    for item in list1:\n        if item in list2:\n            return True\n    \n    # if no overlap found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = [0, 0]\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and finds a pair with highest product.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        temp1 = max(max1*arr[i], max2*arr[i], min1*arr[i], min2*arr[i])\n        temp2 = min(max1*arr[i], max2*arr[i], min1*arr[i], min2*arr[i])\n        max1 = temp1\n        max2 = temp2\n        min1 = temp2\n        min2 = temp1\n\n    return (max(max1, max2), min(min1, min2))"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    max1 = arr[0]\n    max2 = min1 = arr[0]\n\n    for num in arr[1:]:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        elif num < min1:\n            min1 = num\n        else:\n            continue\n\n        return max(max1 * max2, max2 * min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the two integers that\n    have the highest product in the array. If there are multiple pairs with the same highest product, then the\n    function returns a tuple containing the pair that appears first in the array.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        A tuple containing the two integers that have the highest product in the array, or None if there are\n        no such pairs.\n    \"\"\"\n\n    # Create a dictionary to store the products of subarrays of the given array\n    subarray_products = {}\n\n    # Loop through each subarray of the given array\n    for i in range(len(arr)):\n        # Calculate the product of the subarray starting from index i and ending at the end of the array\n        subarray_product = 1\n        for j in range(i, len(arr)):\n            subarray_product *= arr[j]\n        # Store the product of the subarray in the dictionary\n        subarray_products[i] = subarray_product\n\n    # Find the pair with the highest product\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Check if the products of the subarrays are equal\n            if subarray_products[i] * subarray_products[j] > max_product:\n                max_product = subarray_products[i] * subarray_products[j]\n                pair = (i, j)\n\n    # If there are no such pairs, return None\n    if max_product == float('-inf'):\n        return None\n\n    # Otherwise, return the pair with the highest product\n    else:\n        return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = float('-inf')\n    max2 = float('-inf')\n    max_product = float('-inf')\n    \n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            current_product = arr[i]*arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max1 = arr[i]\n                max2 = arr[j]\n            \n    print(\"Pair with highest product:\",max1,max2)\n    print(\"Product of pair:\",max_product)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_product = arr[i] * arr[j]\n            if curr_product > max_product:\n                max_product = curr_product\n                max_pair = (arr[i], arr[j])\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    max1, max2, min1, min2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n        elif i < min1:\n            min2 = min1\n            min1 = i\n        elif i < min2:\n            min2 = i\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_num1 = float('-inf')\n    max_num2 = float('-inf')\n    min_num1 = float('inf')\n    min_num2 = float('inf')\n    for num in arr:\n        if num > max_num1:\n            max_num2 = max_num1\n            max_num1 = num\n        elif num > max_num2:\n            max_num2 = num\n        elif num < min_num1:\n            min_num2 = min_num1\n            min_num1 = num\n        elif num < min_num2:\n            min_num2 = num\n    return max(max_num1*max_num2, max_num2*min_num1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = float('-inf'), float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = arr[i], arr[j]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Step 1: Sort the given array in descending order\n    arr.sort(reverse=True)\n\n    # Step 2: Check if there is any pair whose product is greater than the second largest element of the sorted array\n    for i in range(len(arr)):\n        if arr[i] * arr[i+1] > arr[i+2] * arr[i+3]:\n            return arr[i], arr[i+1]\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = []\n    for item in Input:\n        first_element = item[0]\n        if first_element not in common_first_element:\n            common_first_element.append(first_element)\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in Input:\n        if len(set(i[0])) == 1:\n            result.append(i)\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = []\n    for i in range(len(Input)):\n        for j in range(len(Input)):\n            if i!= j:\n                if Input[i][0] == Input[j][0]:\n                    common_element.append(Input[i][0])\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_element = None\n\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if common_element == None or common_element == Input[i][j]:\n                common_element = Input[i][j]\n                break\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = []\n    for t in Input:\n        if t[0] not in common_first:\n            common_first.append(t[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for i in Input:\n        if common_first == None:\n            common_first = i[0]\n        elif i[0] == common_first:\n            pass\n        else:\n            common_first = None\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n    \n    # Loop through the list of tuples\n    for tuple1 in Input:\n        # Loop through the rest of the list of tuples\n        for tuple2 in Input:\n            # Check if the first element of each tuple is equal\n            if tuple1[0] == tuple2[0]:\n                # If they are, check if the second element is already in the dictionary\n                if tuple1[1] not in common_dict:\n                    # If not, add the first element of the tuple to the dictionary\n                    common_dict[tuple1[1]] = True\n    \n    # Return the common elements\n    return common_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for item in Input:\n        if len(item) > 0:\n            first = item[0]\n            if first not in common:\n                common.append(first)\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_element = None\n\n    for tuple1 in Input:\n        for tuple2 in Input:\n            if tuple1[0] == tuple2[0]:\n                if common_element is None:\n                    common_element = tuple1[0]\n                else:\n                    common_element = (common_element, tuple1[0])\n\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for item in Input: \n        first_element = item[0] \n        common_elements.add(first_element)\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list of integers as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(element) > max_length: \n            max_length = len(element) \n            max_element = element \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # Initialize max variable to the first element of the list\n    max = lst[0]\n\n    # Loop through the rest of the list\n    for i in range(1, len(lst)): \n        # If the current element is greater than the current maximum element, update max\n        if lst[i] > max: \n            max = lst[i]\n\n    return max"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_elem = i\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_length = max([len(x) for x in lst])\n    max_element = [x for x in lst if len(x) == max_length][0]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = max(len(x) for x in lst)\n    return [x for x in lst if len(x) == max_length]"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Loop through the list and round each number to 2 decimal places\n    for i in range(len(list1)):\n        list1[i] = round(list1[i], 2)\n    \n    # Calculate the sum of the rounded numbers\n    total_sum = sum(list1)\n    \n    # Print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total*len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Initializing the sum variable to 0\n    total_sum = 0\n    \n    # Iterating through each number in the list\n    for num in list1:\n        # Rounding the number to 2 decimal places\n        rounded_num = round(num, 2)\n        \n        # Adding the rounded number to the total sum\n        total_sum += rounded_num\n        \n    # Multiplying the total sum by the length of the list\n    product = total_sum * len(list1)\n    \n    # Printing the final result\n    print(product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # initialize variables\n    total_sum = 0\n    \n    # loop through the list and round each number\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    \n    # loop through the list and add up the rounded numbers\n    for num in list1:\n        total_sum += num\n    \n    # print the total sum multiplied by the length of the list\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initializing the sum variable to zero\n    sum = 0\n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # checking if the number is even\n        if i % 2 == 0:\n            # multiplying the number by itself and adding to the sum variable\n            sum += i**3\n    # returning the cube sum of first n even natural numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_cubes += i*i*i\n    return sum_cubes\n\nprint(cube_Sum(10)) # Output: 385"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    \n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2): \n        # add cube of i to sum_of_cubes\n        sum_of_cubes += i**3\n    \n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n): \n        sum += i*i*i \n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join([str(x) for x in test_tup])"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n        delimiter = ','\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ''.join([str(i) for i in test_tup])\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of a tuple by the given delimiter.\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Concatenate each element of a tuple by a specified delimiter.\n\n    :param test_tup: tuple to be concatenated\n    :param delimiter: delimiter used to concatenate the elements of the tuple\n    :return: concatenated string with the specified delimiter between elements\n    \"\"\"\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\", \"):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n <= 0:\n        print(\"Invalid input!\")\n    else:\n        total_cubes = 0\n        for i in range(1, n+1):\n            total_cubes += i**3\n        average_of_cubes = total_cubes / n\n        print(\"Average of cubes of first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize sum and count variables to 0\n    sum = 0\n    count = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        # calculate the cube of the current number and add it to sum\n        sum += i**3\n        # increment count to track the number of cubes we've added\n        count += 1\n\n    # calculate the average and return it\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1,n+1):\n        sum_cube += i**3\n    average_cube = sum_cube/n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    average = 0.0\n    for i in range(1, n+1):\n        average += i**3\n    return average/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # initialize sum variable to 0\n    sum_of_cubes = 0\n\n    # loop through first n numbers and calculate cubes\n    for i in range(1, n+1):\n        cube = i ** 3\n        sum_of_cubes += cube\n\n    # calculate average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    # return the result\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0  \n    for i in range(1, n+1):  \n        sum_cubes += i*i*i  \n    average = sum_cubes/n  \n    return average  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i**3  \n    avg = sum/n  \n    return avg"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_indices = []\n    for index, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(len(item)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        if i == len(test_tuple) - 1: # last element of the tuple\n            rear_elements.append(string[0]) # add the first character of the last element\n        else: # middle element of the tuple\n            rear_elements.append(string[-1]) # add the last character of the middle element\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        if isinstance(item, str):\n            rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_list = []\n    for i in range(len(test_tuple)):\n        rear_index_list.append(test_tuple[i][-1])\n    return rear_index_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(i)\n    rear_indices.reverse()\n    return [test_tuple[i] for i in rear_indices]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for index, element in enumerate(test_tuple):\n        if isinstance(element, str):\n            rear_indices.append(index)\n    rear_elements = [test_tuple[index] for index in rear_indices]\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, element in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_elements.append(element)\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for sublist in list1:\n        if x in sublist:\n            count += 1\n            \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Use regex to extract the year, month, and day parts of the date string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    year, month, day = re.findall(pattern, dt)[0]\n    \n    # Convert the parts to the desired format and return the result\n    new_date = '{}-{}-{}'.format(day, month, year)\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all matches of the pattern in the input date\n    matches = re.findall(pattern, dt)\n\n    # If there are matches, return the date in dd-mm-yyyy format\n    if len(matches) > 0:\n        day, month, year = int(matches[0][2]), int(matches[0][1]), int(matches[0][0])\n        return f'{day}-{month:02d}-{year:04d}'\n\n    # Otherwise, return the input date as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # use re.sub() method to replace the date format with dd-mm-yyyy format\n    dt_new = re.sub(pattern, lambda m: m.group(0).replace('-', '.'), dt)\n    # return the modified date string in dd-mm-yyyy format\n    return dt_new"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Convert a date of format 'yyyy-mm-dd' to format 'dd-mm-yyyy'.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # search for a match in the date string and replace it with the desired format\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Find all the matches of the pattern in the date string\n    matches = re.findall(pattern, dt)\n    # If there are no matches, return the original date string as is\n    if not matches:\n        return dt\n    # Extract the year, month and day values from the matches\n    year, month, day = int(matches[0][0]), int(matches[0][1]), int(matches[0][2])\n    # Construct the new date string using the extracted values\n    new_dt = f'{day}-{month:02d}-{year}'\n    # Return the new date string\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # use the re.match() function to check if the input date matches the pattern\n    if re.match(pattern, dt):\n        # extract the day, month, and year from the input date using split() and reverse() functions\n        day, month, year = dt.split('-')[::-1]\n        # join the day, month, and year in the desired format\n        new_date = '-'.join([year, month, day])\n        # return the new formatted date\n        return new_date\n    else:\n        # if the input date does not match the pattern, raise an error\n        raise ValueError('Input date does not match the required format (yyyy-mm-dd)')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Step 1: Find the largest gap\n    gap = n // 2\n    while gap > 0:\n        # Step 2: Perform insertion sort on this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n\n        # Step 3: Reduce gap size\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Start with a large gap until the array is sorted\n    gap = n // 2\n    \n    while gap > 0:\n        # Within each gap, compare elements and swap them if they are not in place\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        \n        # Decrease the gap by a factor of 2 and repeat until the gap is 1\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap between elements in the array\n    n = len(my_list)\n    gap = n // 2\n\n    # Sort the array using the gap sequence\n    while gap > 0:\n        for i in range(gap, n):\n            # Insert the current element into the sorted sequence\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Reduce the gap sequence by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # calculate the increment factor\n    inc = n // 2\n    while inc > 0:\n        # traverse the list from the increment factor to the end\n        for i in range(inc, n):\n            # insert the current element in its correct position in the sorted sublist\n            j = i\n            while j >= inc and my_list[j - inc] > my_list[j]:\n                my_list[j], my_list[j - inc] = my_list[j - inc], my_list[j]\n                j -= inc\n        # decrease the increment factor\n        inc //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Calculate the largest power of 2 smaller than or equal to n\n    while n > 1:\n        n //= 2\n\n    # Do a greedy step of insertion sort\n    for gap in range(n//2, 0, -1):\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function extracts the elementwise and tuples from the given two tuples.\n    \"\"\"\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Iterate through both tuples and extract the elementwise and tuple\n    for i in range(len(test_tup1)):\n        and_tup = (test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i], test_tup1[i] & test_tup2[i])\n        and_list.append(and_tup)\n\n    return and_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple(x1 & x2 for x1, x2 in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    # initialize an empty list to store the and tuples\n    and_list = []\n\n    # iterate through each element in the tuples\n    for i in range(len(test_tup1)):\n        # use the bitwise AND operator to get the element-wise and\n        and_tup = (test_tup1[i] & test_tup2[i])\n        # append the and tuple to the and list\n        and_list.append(and_tup)\n\n    # return the and list\n    return and_list"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        print(\"There are no real roots.\")\n    elif delta == 0:\n        print(\"The directrix is equal to\", -b/2/a)\n    else:\n        x1 = (-b + delta**0.5)/(2*a)\n        x2 = (-b - delta**0.5)/(2*a)\n        print(\"The directrix is\", -b/2/a, \"and the roots are\", x1, \"and\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n\n    if delta > 0:\n        root1 = (-b + delta ** 0.5) / (2 * a)\n        root2 = (-b - delta ** 0.5) / (2 * a)\n        print(\"The directrix of the parabola is between\", root1, \"and\", root2)\n    elif delta == 0:\n        root = -b / (2 * a)\n        print(\"The directrix of the parabola is\", root)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Find the real and imaginary parts of the root of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Sort the roots in descending order\n    if root1 > root2:\n        root1, root2 = root2, root1\n\n    # Return the root with the largest absolute value\n    return max(abs(root1), abs(root2))"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is greater than 0\n    if discriminant > 0:\n        # calculate the roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # check if the roots are real\n        if root1.is_real and root2.is_real:\n            # return the directrix\n            return root1, root2\n        else:\n            # return the message that roots are imaginary\n            return 'Roots are imaginary.'\n    else:\n        # return the message that the discriminant is negative\n        return 'The discriminant is negative.'"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative\n    if discriminant < 0:\n        print(\"The parabola has no real roots.\")\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    # Print the results\n    print(\"The directrix of the parabola is:\", x1)\n    print(\"The other solution of the parabola is:\", x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters, a, b and c, which represent the coefficients of the quadratic equation ax^2 + bx + c = 0.\n    The function then finds the directrix by using the quadratic formula, which states that the directrix is the root of the equation x = (-b \u00b1 sqrt(b^2 - 4ac)) / 2a.\n    '''\n\n    # Defining the quadratic formula\n    d = b*b - 4*a*c\n\n    # Calculating the root of the quadratic equation\n    directrix = (-b + sqrt(d)) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    discriminant = b ** 2 - 4 * a * c\n    \n    # Check if the discriminant is real\n    if discriminant >= 0: \n        # Calculate the two roots of the discriminant\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        \n        # Sort the roots in ascending order\n        root1, root2 = sorted([root1, root2])\n        \n        # Return the directrix\n        return root1, root2\n    else: \n        # The discriminant is negative, so the directrix is non-existent\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b + (b**2 - 4*a*c)**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        x = -b/(2*a)\n        y = math.sqrt(b**2 - 4*a*c)/(2*a)\n        return (x, y)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set from each list and find the intersection\n    set1 = set(list1)\n    set2 = set(list2)\n    common_set = set1.intersection(set2)\n\n    # If the set is not empty, at least one element is common\n    if common_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is at least one common element in them.\n    '''\n    # create a set from list1 and list2 to get unique elements\n    unique_set = set(list1 + list2)\n    \n    # check if there is any element in list1 that is not in list2\n    for elem in list1:\n        if elem not in list2 and elem in unique_set:\n            return True\n    \n    # if no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for num in list1:\n        if num in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns true if they have at least one common element.\n    '''\n    # loop through the first list\n    for num in list1:\n        # check if the number is in the second list\n        if num in list2:\n            return True\n    # if we've gone through the entire list without finding a common element, return false\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the trapezium's base and side\n    side1 = 0.5 * base1\n    side2 = 0.5 * (base1 + base2)\n\n    # Calculate the lengths of the trapezium's base and side that are shorter than the side of the trapezium with the shorter length\n    base_shorter = side1\n    if side2 < side1:\n        base_shorter = side2\n\n    # Find the median length of the trapezium's base\n    if area == 0:\n        median = 0\n    else:\n        median = (area / (2 * base_shorter)) * base_shorter\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the base of the trapezium\n    length_base = base1 + base2\n\n    # Calculate the height of the trapezium\n    area_trapezium = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the area of the base\n    area_base = base1 * length_base\n\n    # Calculate the difference between the area of the trapezium and the area of the base\n    difference = area_trapezium - area_base\n\n    # Calculate the length of the side of the trapezium that is longer than the other\n    side_longer = 0.5 * base1 * (height ** 2)\n\n    # Calculate the area of the side of the trapezium that is longer than the other\n    area_longer = side_longer - area_base\n\n    # Find the length of the longer side\n    longer_side = side_longer / area_longer\n\n    # Calculate the area of the shorter side\n    area_shorter = base2 * length_base\n\n    # Find the length of the shorter side\n    shorter_side = length_base / area_shorter\n\n    # Calculate the length of the trapezium\n    length_trapezium = shorter_side + longer_side\n\n    # Return the median length of the trapezium\n    return length_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n\n    # Calculate the semi-perimeter\n    semi_perimeter = 0.5 * (base1 + base2)\n\n    # Calculate the hypotenuse using Pythagorean theorem\n    hypotenuse = math.sqrt(semi_perimeter**2 - area)\n\n    # Calculate the median length\n    median_length = hypotenuse / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    sides = [base1, base2, height]\n    sides.sort()\n    sides_lengths = [sides[0], sides[2]]\n\n    if area % 1 == 0:\n        return (sides_lengths[0] + sides_lengths[1]) / 2\n    else:\n        return sides_lengths[1]"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    return area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    # Calculate the total area of the pyramid\n    area_pyramid = area1 + area2\n    # Calculate the hypotenuse of the triangle\n    hypotenuse = 0.5 * base1 * base2\n    # Calculate the length of the base of the trapezium\n    base_trapezium = (area_pyramid * height) ** 0.5\n    # Calculate the length of the hypotenuse of the triangle\n    hypotenuse_trapezium = hypotenuse / height\n    # Calculate the length of the other side of the trapezium\n    side_trapezium = (base_trapezium ** 2 - hypotenuse_trapezium ** 2) ** 0.5\n    # Calculate the total length of the trapezium\n    total_length_trapezium = base_trapezium + side_trapezium\n    # Calculate the median length of the trapezium\n    median_trapezium = total_length_trapezium / 2\n    # Return the median length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using Heron's formula\n    s = (base1 + base2 + height) / 2\n    area = 0.5 * base1 * height\n    side = 2 * height\n\n    # Use the formula for the median of three numbers to find the median length\n    median = 2 * area / side\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1 (float): the length of the first half of the trapezium\n    base2 (float): the length of the second half of the trapezium\n    height (float): the height of the trapezium\n\n    Returns:\n    float: the median length of the trapezium\n    \"\"\"\n    # calculate the length of the trapezium\n    trapezium_length = base1 + base2\n\n    # calculate the width of the trapezium\n    trapezium_width = 2 * (height / 2)\n\n    # calculate the area of the trapezium\n    trapezium_area = trapezium_length * height\n\n    # calculate the area of the base of the trapezium\n    base_area = 0.5 * base1 * height\n\n    # calculate the area of the base of the second half of the trapezium\n    second_half_area = 0.5 * base2 * (height / 2)\n\n    # calculate the difference between the areas of the trapezium and the two halves\n    area_difference = abs(trapezium_area - (base_area + second_half_area))\n\n    # calculate the area of the trapezium's base\n    base_area = 0.5 * base1 * height\n\n    # if the area difference is less than or equal to the area of the trapezium's base,\n    # the trapezium's base is the median\n    if area_difference <= base_area:\n        return trapezium_width\n\n    # otherwise, the trapezium's base is the median\n    else:\n        return trapezium_width / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = base1 * height\n    area2 = base2 * height\n    \n    # Calculate the medians\n    median1 = area1 / 2\n    median2 = area2 / 2\n    \n    # Calculate the difference between the medians\n    median_diff = abs(median1 - median2)\n    \n    # Return the median difference\n    return median_diff"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the lengths of the sides and the half the height\n    side1 = base1\n    side2 = base2\n    half_height = height / 2\n\n    # Calculate the length of the top half\n    top_half_length = (base1 + base2 + height) / 2\n\n    # Calculate the length of the bottom half\n    bottom_half_length = (base1 + base2 - height) / 2\n\n    # Find the lengths of the trapezium sides\n    trapezium_side1 = side1 + half_height\n    trapezium_side2 = side2 + half_height\n\n    # Calculate the length of the trapezium\n    trapezium_length = trapezium_side1 + trapezium_side2\n\n    # Find the lengths of the two trapezium halves\n    half1_length = (trapezium_side1 - half_height) / 2\n    half2_length = (trapezium_side2 - half_height) / 2\n\n    # Calculate the lengths of the two trapezium halves\n    half1_trapezium_length = half1_length + half_height\n    half2_trapezium_length = half2_length + half_height\n\n    # Determine which half of the trapezium has the larger length\n    if trapezium_length > half1_trapezium_length and trapezium_length > half2_trapezium_length:\n        return top_half_length\n    elif half1_trapezium_length > trapezium_length and half1_trapezium_length > half2_trapezium_length:\n        return half1_length\n    else:\n        return half2_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through each element of the array and compare it with the entered number\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    \n    # If no element in the array is greater than the entered number, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in arr:\n        if i > number:\n            count += 1\n    if count == 0:\n        return \"The entered number is not greater than any element of the array.\"\n    else:\n        return f\"The entered number is greater than {count} elements of the array.\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'\\ba\\w*\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a(b+)')\n    match = pattern.search(text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b*)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a\\b\\1+\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its last digit.\n\n    Parameters:\n    n (int): A positive integer\n\n    Returns:\n    int: The last digit of n\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n    \"\"\"\n    # Remove any non-digit characters from the input number\n    clean_n = ''.join(filter(str.isdigit, str(n)))\n    # Convert the cleaned number to an integer\n    n = int(clean_n)\n    # Find the last digit of the number\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the given number to string\n    num = str(n)\n    # Find the length of the number\n    length = len(num)\n    # Find the last digit of the number\n    last_digit = num[length - 1]\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list with all the negative numbers from the input list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list as input and returns the negative numbers in the list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(lst):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in lst if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Return the negative numbers in the given list.\n\n    Parameters:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A list of negative numbers in the given list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = set('13579')\n    new_str = ''.join([char for char in str1 if char not in odd_chars])\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the new string\n    new_str = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # check if the character is odd (i.e. its remainder when divided by 2 is 1)\n        if char % 2!= 0:\n            # if it is odd, add it to the new string\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalpha(): # check if character is alphabetic\n            if int(char) % 2 == 0: # check if character is odd\n                new_str += char # add character to new string if it's odd\n    return new_str # return new string with removed odd characters"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if int(char) % 2 == 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or (char.isalpha() and char.isupper()):\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create a dictionary to store the count of each tuple pair\n    counter = Counter()\n    \n    # iterate over the test_list and add each tuple to the counter\n    for tup in test_list:\n        counter[tup] += 1\n    \n    # create a set of tuples with the reversed elements of each tuple pair\n    reversed_tuples = {frozenset(tup) for tup in counter.keys()}\n    \n    # subtract the count of each reversed tuple from the total count for that pair\n    result = sum(counter[tup] - counter[frozenset(tup)] for tup in reversed_tuples)\n    \n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] == test_list[j][1]) and (test_list[i][1] == test_list[j][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i][0] == test_list[j][1]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n\n    Parameters:\n    test_list: list\n        A list of tuples to check for bidirectional pairs.\n\n    Returns:\n    int\n        The number of bidirectional tuple pairs found in the list.\n\n    '''\n\n    bidirectional_count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in range(len(L)):\n        result *= L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for i in L:\n        result *= i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable with the first element of the list\n    result = L[0]\n    # Loop through the list starting from the second element\n    for i in range(1, len(L)):\n        # Check if the current element is multiple of the previous result\n        if L[i] % result == 0:\n            # Add the current element to the result\n            result = result * L[i]\n        else:\n            # If the current element is not a multiple of the previous result,\n            # update the result with the current element\n            result = L[i]\n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of all the integers in the list\n    total = 0\n    \n    # loop through each integer in the list\n    for num in L:\n        # add the integer to the total\n        total += num\n    \n    # return the total\n    return total"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Removing special characters and converting to lowercase\n    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n    text = text.lower()\n\n    # Splitting the text into words\n    words = text.split()\n\n    # Initializing variables for storing adverbs and their positions\n    adverb = ''\n    pos = ''\n\n    # Looping through each word in the sentence\n    for i, word in enumerate(words):\n\n        # Checking if the word is an adverb\n        if word.endswith('ing') or word.endswith('ed') or word.endswith('ingly') or word.endswith('ly'):\n\n            # Storing the adverb and its position in the sentence\n            adverb = word\n            pos = i\n\n            # Exiting the loop\n            break\n\n    return adverb, pos"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(before|after|during|between|than|as|or|but)\\b'\n\n    # Find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Iterate over the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f\"Adverb '{match}' is found at position {i+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find all adverbs\n    matches = re.findall(r'\\b\\w+(?:st|nd|rd|th)\\b', text, re.IGNORECASE)\n    if matches:\n        # sort the adverbs by their position in the sentence\n        matches.sort(key=lambda x: text.lower().index(x))\n        # return the first adverb and its position in the sentence\n        return (matches[0], text.lower().index(matches[0]))\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regex pattern for adverbs\n    pattern = r'\\b(big|little|hard|soft|thick|thin|thin\\s*|\\s*thin\\b)\\b'\n    \n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop over the matches and add their positions to the result list\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        result.append((match, start, end))\n    \n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regex pattern to match adverb\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Use re.findall to find all occurrences of adverb in the text\n    adverbs = re.findall(pattern, text)\n\n    # Iterate over each adverb and find its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Use re.search to find the first occurrence of the adverb in the text\n        match = re.search(r'\\b{}[.!?]'.format(adverb), text)\n        # If match is found, print the position of the adverb\n        if match:\n            print(\"Adverb: {} Position: {}\".format(adverb, i))\n            # Exit the loop\n            break"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize variables to keep track of the first adverb and its positions\n    adverb_found = False\n    first_adverb_position = None\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(rarely|often|seldom|frequently|many|often|very|sometimes|rarely|very|sometimes|rarely|much|very|seldom|rarely)\\b', word, re.IGNORECASE):\n            # If it is, update the first adverb and its position\n            if not adverb_found:\n                adverb_found = True\n                first_adverb_position = i\n    \n    # If no adverb was found, return None\n    if not adverb_found:\n        return None\n    \n    # Return the first adverb and its position\n    return (words[first_adverb_position], first_adverb_position)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b(?:adverb|adv|adv\\.|adv\\.|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|adv\\?|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b[A-Z][a-z]*\\b', text) # find all the adverbs\n    for i, adv in enumerate(adverbs):\n        print(f'{adv} found at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the pattern to search for the adverbs\n    pattern = r'\\b(adverb|adv)\\b'\n\n    # Use regular expressions to find the first adverb and their positions\n    matches = re.findall(pattern, text)\n\n    # Return the matches and their positions\n    return matches, [match.start() for match in matches]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n\n    # Find all the matches of the pattern in the given text\n    adverb_matches = re.findall(adverb_pattern, text)\n\n    # Initialize an empty dictionary to store the adverb positions\n    adverb_positions = {}\n\n    # Iterate over the adverb matches and add their positions to the dictionary\n    for index, match in enumerate(adverb_matches):\n        adverb_positions[match] = index + 1\n\n    # Return the adverb positions dictionary\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"Surface Area of a Cube: \", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # calculate the surface area of the cube\n    surface_area = 6 * l ** 2\n    \n    # return the surface area of the cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "The function uses the `math` library in Python to compute the value of $\\pi$."
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 12 * l + 8\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l ** 2) + (2 * l ** 3)\n    print(\"The surface area of the cube is:\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # create an array of integers to store the positive numbers\n    pos_arr = array('i')\n\n    # loop through the input array and append positive numbers to the array\n    for num in nums:\n        if num > 0:\n            pos_arr.append(num)\n\n    # find the ration of positive numbers in the array\n    pos_count = len(pos_arr)\n    neg_count = len(nums) - pos_count\n\n    # return the ration of positive numbers\n    return pos_count / neg_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # initialize count and sum\n    count = 0\n    total = 0\n    \n    # loop through array and count positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n        total += num\n    \n    # calculate ration\n    if total == 0:\n        return 0\n    else:\n        return count / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count / len(arr) * 100"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    pos_nums = array('i')\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n            pos_nums.append(num)\n\n    if pos_count > 0:\n        ratio = pos_count / len(nums)\n        return ratio\n    else:\n        return 0"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of integers to store the positive numbers\n    positive = array('i')\n\n    # Iterate through the array and add only the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive.append(num)\n\n    # Calculate the total number of positive numbers\n    total_positive = len(positive)\n\n    # Calculate the ration of positive numbers\n    ration = total_positive / len(nums)\n\n    # Return the ration of positive numbers\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_nums = [num for num in nums if num > 0]\n    positive_count = len(positive_nums)\n    total_count = len(nums)\n    return positive_count / total_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize an empty array to store the positive numbers\n    pos_array = array('i')\n    \n    # Iterate through the input array\n    for num in nums:\n        if num > 0:\n            pos_array.append(num)\n    \n    # Calculate the ration of positive numbers\n    pos_count = len(pos_array)\n    total_count = len(nums)\n    ration = pos_count / total_count\n    \n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Use a counter to count the number of positive numbers in the array\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    \n    # Calculate the ration of positive numbers in the array\n    pos_ratio = float(pos_count) / len(nums)\n    \n    # Return the ration as a float\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    total_count = len(nums)\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n            \n    ration = positive_count / total_count\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    total_count = len(nums)\n\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n\n    return pos_count / total_count"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number in the list.\n    \"\"\"\n    largest = lst[0]\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for num in list1: \n        if num < 0 and num > largest_num: \n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')  # initialize the maximum negative number to negative infinity\n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num  # if a negative number is found and is greater than the current maximum, update the maximum\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -float('inf')  # initialize max_neg with negative infinity\n    for num in list1: \n        if num < 0: \n            if num > max_neg: \n                max_neg = num  # update max_neg if num is greater than current max_neg\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as an input and returns the largest negative number from the list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0 and (largest is None or num > largest):\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number present in the list.\n    '''\n    neg_lst = [x for x in lst if x < 0]\n    return max(neg_lst) if neg_lst else None"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0:\n            if num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_list.append(tup[:K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # Initialize a variable to keep track of the number of items in the tuple\n        count = 0\n        # Iterate through each item in the tuple\n        for item in test_list[i]:\n            # Increment the count if the item is not None\n            if item is not None:\n                count += 1\n            # If the count is greater than k, remove the items until the count is equal to k\n            while count > K:\n                index = test_list[i].index(None)\n                del test_list[i][index]\n                count -= 1\n    # Return the updated tuple list\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1])\n        result.append(new_tup)\n    return result[:K]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        trimmed_tuple = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)\n        test_list[i] = trimmed_tuple\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Create a new list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the given list\n    for tuple in test_list:\n        # Check if the length of the tuple is greater than K\n        if len(tuple) > K:\n            # Trim the tuple by K elements\n            trimmed_tuple = tuple[:K]\n            # Append the trimmed tuple to the new list\n            trimmed_list.append(trimmed_tuple)\n\n    # Return the new list of trimmed tuples\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j % K == 0:\n                test_list[i][j] = None\n            else:\n                continue\n        test_list[i] = tuple(filter(lambda x: x is not None, test_list[i]))\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Using a loop to multiply the elements of the tuples\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have equal length.\")\n    \n    # Perform index wise multiplication\n    result_tup = tuple(a*b for a, b in zip(test_tup1, test_tup2))\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize the result tuple with 0s\n    result_tup = (0,0,0)\n    \n    # iterate over both tuples and multiply corresponding elements of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes two arguments: a tuple and a list. \n    It returns a dictionary where the keys are the elements in the tuple and \n    the values are the number of times the corresponding elements occur in the list.\n    '''\n    count_dict = {}\n    for elem in tup:\n        count_dict[elem] = count_dict.get(elem, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates\n    tup = set(tup)\n    \n    # Count the occurrence of each element in the list in the tuple\n    count_dict = Counter(tup)\n    \n    # Sort the dictionary keys in alphabetical order\n    sorted_keys = sorted(count_dict.keys())\n    \n    # Print the sorted dictionary\n    print(sorted_keys, count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter to count the occurrence of each element of lst in tup\n    count_dict = Counter(tup)\n    # Use set to remove duplicates from lst\n    lst = list(set(lst))\n    # Use Counter to count the occurrence of each element of lst in tup\n    count_dict_lst = Counter(lst)\n    # Use set to get the common elements between count_dict and count_dict_lst\n    common_elements = set(count_dict.keys()).intersection(set(count_dict_lst.keys()))\n    # Count the occurrence of common elements in count_dict_lst\n    count = sum(count_dict_lst[elem] for elem in common_elements)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple to list\n    tup_list = list(tup)\n    # convert list to Counter object\n    counter = Counter(tup_list)\n    # iterate over Counter object and count occurrence of each element in lst\n    for item in counter:\n        if item in lst:\n            count = counter[item]\n            lst.remove(item)\n            count = count + 1\n            lst.insert(lst.index(item), item)\n            counter[item] = count\n    # convert Counter object to tuple\n    result = tuple(counter.elements())\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in tup:\n        count_dict[element] = count_dict.get(element, 0) + 1\n    \n    for element in lst:\n        count_dict[element] = count_dict.get(element, 0) - 1\n    \n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list as arguments. It uses Counter module of collections to count the occurrence of all elements of the list in the tuple. \n    '''\n    count = Counter(lst) \n    count_dict = {} \n    for item in tup: \n        if item in count_dict: \n            count_dict[item] += 1 \n        else: \n            count_dict[item] = 1 \n\n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the tuple to a set to remove duplicate elements\n    set_lst = set(tup)\n\n    # count the occurrence of each element in the list using Counter function from collections module\n    count_dict = Counter(lst)\n\n    # convert the count dictionary to a list of tuples with element as the first element and its count as the second element\n    result_list = [(key, count_dict[key]) for key in set_lst]\n\n    # sort the result list in descending order of count\n    result_list.sort(key=lambda x: x[1], reverse=True)\n\n    # print the result list\n    print(result_list)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Using Counter() function from collections module\n    count = Counter(tup)\n    # Counting the occurence of each element in the list\n    for i in lst:\n        if i in count:\n            count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = {}\n    for i in lst:\n        count[i] = counter[i]\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict.update(tup)\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1, n+1):\n        perrin_numbers.append(sum(map(int, str(i))))\n    return sum(perrin_numbers)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    This function calculates the sum of the Perrin numbers.\n    \"\"\"\n    sum = 0\n    p = 2\n    while p <= n:\n        if p % 2 == 0:\n            sum += p\n            p += 1\n        else:\n            sum += p + 2\n            p += 4\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**2 + i + 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    sum_of_perrin = 0\n    perrin = 2\n    \n    while perrin <= n:\n        sum_of_perrin += perrin\n        perrin += 4\n\n    return sum_of_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n * (n + 1) // 2"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5]\n    total = 0\n    for i in perrin_numbers:\n        total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perrin_number(n):\n    \"\"\"\n    Check if a number is a Perrin number.\n    \"\"\"\n    # Sum of perrin numbers\n    s = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            s += i + n // i\n    return s == n\n\ndef cal_sum(n):\n    \"\"\"\n    Calculate the sum of Perrin numbers up to n.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    # Initialize the sum to 2 since 1 is not a Perrin number\n    s = 2\n\n    # Add up all Perrin numbers up to n\n    for i in range(3, n + 1, 2):\n        if is_perrin_number(i):\n            s += i\n\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i ** 3 \n\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and an integer l which represents the size of the strings to be extracted.\n    It returns a new list containing all the strings from the original list that are of size l.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == l:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a size of the strings to extract.\n    It returns a new list of extracted strings.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str for str in str_list if len(str) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the desired size of each string to extract and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        extracted_strings.append(string[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) >= size:\n            result.append(s[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n    str_list: A list of string values.\n    size: The size of the strings to be extracted.\n\n    Returns:\n    A list of strings of size `size`.\n    '''\n\n    extracted_strings = []\n\n    for i in range(len(str_list)):\n        extracted_strings.append(str_list[i][:size])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(l), l):\n        extracted_strings.append(l[i:i+l])\n    return extracted_strings"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text)  # replace multiple whitespaces with a single space\n    text = text.strip()  # remove leading and trailing whitespaces\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string\n    text2 = re.sub('\\s+','', text1)\n    # remove all newlines from the string\n    text3 = re.sub('\\n', '', text2)\n    # remove all tabs from the string\n    text4 = re.sub('\\t', '', text3)\n    # remove all leading and trailing whitespaces from the string\n    text5 = re.sub('^[ \\t]+', '', text4)\n    text5 = re.sub('[ \\t]+$', '', text5)\n    return text5"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(' +','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    return re.sub('\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regex to remove all whitespaces\n    text2 = re.sub('\\s+','', text1)\n    # Use strip() to remove all leading and trailing whitespaces\n    text3 = text2.strip()\n    # Return the cleaned string\n    return text3"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # create a regular expression object to match all whitespace characters\n    pattern = re.compile(r'\\s+')\n    \n    # replace all whitespaces with an empty string\n    text2 = pattern.sub('', text1)\n    \n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost >= sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # Initialize sum and count of even factors\n    sum = 0\n    count = 0\n\n    # Iterate from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n\n        # Check if i is evenly divisible by n\n        if n % i == 0:\n\n            # If it is evenly divisible, check if it is even\n            if i % 2 == 0:\n\n                # If it is even, add it to sum and increment count\n                sum += i\n                count += 1\n\n    # Return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    Write a Python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    even_sum = sum(even_factors)\n    return even_sum\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n < 2:\n        return 0\n    \n    sum = 0\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n            n //= i\n        else:\n            i += 1\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n//2+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b' # match a word containing 'z'\n    matches = re.findall(pattern, text) # find all matches in the text\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b\\s+\\b\\w+\\b')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        print(matches)\n    else:\n        print('No matches found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regular expressions to match a word containing 'z'\n    pattern = r'\\b(z\\w*)\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z0-9]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and checks whether it contains 31 days or not.\n    '''\n    if monthnum in range(1, 13):\n        if monthnum % 2 == 0:\n            if monthnum == 2:\n                return True\n            else:\n                return False\n        else:\n            if monthnum in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    \n    # Check if the month number is a valid integer\n    try:\n        monthnum = int(monthnum2)\n    except ValueError:\n        return \"Invalid input\"\n    \n    # Check if the month number is a valid month number\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid input\"\n    \n    # Check if the month number contains 31 days\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        return (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0))\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        print(\"Month has 31 days\")\n    elif monthnum2 in ['4', '6', '9', '11']:\n        print(\"Month has 30 days\")\n    else:\n        print(\"Month has 28 or 29 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13) and monthnum2 % 2!= 0:\n        return days[monthnum2 - 1]\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        if monthnum % 2 == 0 and monthnum % 4 == 0:\n            if monthnum == 2:\n                return True\n            else:\n                if days[monthnum - 1] == 29:\n                    return True\n        else:\n            if days[monthnum - 1] == 28:\n                return True\n    return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in ['01', '03', '05', '07', '08', '10', '12']:\n        return True\n    elif monthnum2 in ['02']:\n        return False\n    elif monthnum2 in ['04', '06', '09', '11']:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    if monthnum in ['1', '3', '5', '7', '8', '10', '12']:\n        return True\n    elif monthnum in ['4', '6', '9', '11']:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 3 == 0:\n            if monthnum2 == 2:\n                return True\n            elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return False\n            else:\n                return True\n        elif monthnum2 % 3!= 0:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid month number entered\")\n        return None"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    result = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        result.append(reversed_string)\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Iterate over each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string in place\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist with the minimum length in a given list. \n    The sublist is defined as a list that contains all the elements of the original list except for the first element.\n    \n    Example:\n    Original list: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    '''\n    # Create a new list containing all the elements of the original list except for the first element\n    sublist = lst[1:]\n    # Initialize a variable to store the minimum length of the sublist\n    min_length = len(lst)\n    # Loop through each sublist in the original list\n    for i in range(len(lst)):\n        # Check if the length of the current sublist is less than the minimum length\n        if len(lst[i]) < min_length:\n            # Update the minimum length with the length of the current sublist\n            min_length = len(lst[i])\n    # Return the sublist with the minimum length\n    return lst[1:min_length+1]\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as an argument and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list as input and returns a sublist with minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_len = j-i\n                min_sublist = lst[i:j]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    This function takes a list of lists and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]\\w*')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z][a-z]+\\b', '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase characters\n    pattern = re.compile('[A-Z]+')\n    # Find all the uppercase substrings in the given string\n    uppercase_substrings = pattern.findall(str1)\n    # Loop through all the uppercase substrings and replace them with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?<![a-z])([A-Z][a-z]+(?=[a-z]|$))(?![a-z])'\n    \n    # Use the pattern to find all uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    \n    # Loop through the matches and remove each one\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n        \n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define regex pattern to match uppercase substrings\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # find all uppercase substrings in the input string using regex\n    matches = pattern.findall(str1)\n\n    # loop through all matches and replace them with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z]\\w*\\b'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile('[A-Z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the search() method to find all uppercase substrings in the string\n    matches = pattern.findall(str1)\n\n    # Iterate over the matches and remove each uppercase substring from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)\\b[A-Z][a-z]+\\b', '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the first elements of the sublists\n    result = []\n    # iterate through each sublist in the input list\n    for sublist in lst:\n        # if the sublist is not empty, add its first element to the result list\n        if sublist:\n            result.append(sublist[0])\n        else:\n            # if the sublist is empty, add None to the result list\n            result.append(None)\n    # return the result list\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[1:] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            for item in sublist:\n                new_lst.append(item)\n        else:\n            new_lst.append(sublist)\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    res = []\n    for sublist in lst:\n        res.append(sublist[0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # Initialize an empty list to store the extracted elements\n    extracted_elements = []\n\n    # Loop through each sublist in the list\n    for sublist in lst:\n        # If the sublist is not empty\n        if sublist:\n            # Append the first element of the sublist to the extracted_elements list\n            extracted_elements.append(sublist[0])\n    \n    # Return the extracted_elements list\n    return extracted_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # define a list to store the extracted elements\n    result = []\n\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # if the sublist is not empty, get the first element and append it to the result list\n        if sublist:\n            result.append(sublist[0])\n\n    # return the result list\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            print(list1[i-1], list1[j-1])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            result.append(list1[j:j+i])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # length of the list\n    n = len(list1)\n    # creating a list to store the combinations\n    comb = []\n\n    # function to generate all combinations recursively\n    def helper(start, curr_comb):\n        # if all elements of the list are used, add the combination to the list\n        if start == n:\n            comb.append(curr_comb)\n            return\n        # add the current element to the combination\n        curr_comb.append(list1[start])\n        # recursively call the function for all remaining elements\n        helper(start+1, curr_comb)\n        # backtrack and remove the current element\n        curr_comb.pop()\n\n    # call the helper function to generate all combinations\n    helper(0, [])\n\n    # return the list of combinations\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Convert the list into a set to remove duplicates\n    list1_set = set(list1)\n    # Create an empty list to store the combinations\n    combinations = []\n    # Create a list of all possible combinations of the given list\n    for i in range(1, len(list1_set)+1):\n        for j in combinations:\n            new_combination = j + list1_set.pop()\n            # Add the new combination to the list of combinations\n            combinations.append(new_combination)\n        # Reset the set to remove duplicates and continue with the next combination\n        combinations.append(list1_set.copy())\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the list\n    for element in list1:\n        # create a new list to store the rest of the elements in the list\n        rest_list = list1.copy()\n        rest_list.remove(element)\n\n        # loop through each remaining element in the list\n        for rest_element in rest_list:\n            # create a tuple containing the two elements\n            combination = (element, rest_element)\n\n            # add the combination to the list of combinations\n            combinations.append(combination)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    This function takes a list as input and returns all possible combinations of its elements.\n    '''\n    # create an empty list to store all combinations\n    combinations = []\n    # loop through all possible combinations of the first element of the list\n    for i in range(len(list1)):\n        # loop through all possible combinations of the remaining elements of the list\n        for j in range(i+1, len(list1)+1):\n            # append the combination to the list of combinations\n            combinations.append(list1[i:j])\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n        min_product = min(min_product * arr[i], arr[i])\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Returns the maximum product subarray of the given array.\n    \"\"\"\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            current_product = 1\n            max_ending_here = 1\n        else:\n            current_product *= num\n            if current_product > max_product:\n                max_product = current_product\n            if max_ending_here < 0:\n                max_ending_here = current_product\n            else:\n                max_ending_here *= num\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = float('-inf')\n    current_product = 1\n    \n    for num in arr:\n        if num < 0:\n            current_product = 1\n        else:\n            current_product *= num\n        \n        if current_product > max_product:\n            max_product = current_product\n    \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate over the array\n    for num in arr:\n        current_product *= num\n\n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n\n        # Reset the current product if the product becomes negative\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize variables to store the maximum product subarray and its starting index\n    max_product = arr[0]\n    max_product_start = 0\n    min_product = arr[0]\n    min_product_start = 0\n\n    # Traverse the array from the second element to the last element\n    for i in range(1, len(arr)):\n        # Update the maximum product subarray if arr[i] is greater than the current maximum product subarray\n        if arr[i] > max_product:\n            max_product = arr[i]\n            max_product_start = i\n        # Update the minimum product subarray if arr[i] is less than the current minimum product subarray\n        if arr[i] < min_product:\n            min_product = arr[i]\n            min_product_start = i\n\n        # Update the maximum product subarray if arr[i] is the product of the maximum and minimum products\n        if i >= len(arr)//2:\n            max_product = arr[max_product_start] * max_product\n            min_product = arr[min_product_start] * min_product\n\n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_product = arr[0]\n    curr_product = 1\n    neg_product = 1\n    \n    for num in arr:\n        curr_product = max(num, curr_product * num)\n        neg_product = max(neg_product, curr_product * num)\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n\n    Args:\n        dict (dict): The dictionary to check.\n        n (int): The length of the values to check.\n\n    Returns:\n        bool: True if all values in the dictionary are of the same length, False otherwise.\n    \"\"\"\n    # Get the values from the dictionary as a list\n    values = [v for v in dict.values()]\n\n    # Check if all values in the list have the same length\n    for value in values:\n        if len(value)!= n:\n            return False\n\n    # If all values have the same length, the dictionary is valid\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to store the value of the first key in the dictionary\n    first_value = next(iter(dict.values()))\n    # loop through all values in the dictionary\n    for value in dict.values():\n        # check if all values are the same\n        if value!= first_value:\n            # if not, return False\n            return False\n    # if all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if i!= dict[i]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            first_value = value\n        else:\n            if value!= first_value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = list(dict.values())[0]\n    for v in dict.values():\n        if v!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            count += 1\n            if count == n:\n                return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set(dict.values())\n    if len(values) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Check if all values are same in a dictionary.\n\n    Parameters:\n    -----------\n    dict: dict\n        The dictionary to check.\n    n: int\n        The number of values to check.\n\n    Returns:\n    --------\n    bool\n        True if all values are same, False otherwise.\n    \"\"\"\n    if len(dict)!= n:\n        raise ValueError(\"Dictionary should have exactly n elements.\")\n    \n    for key in dict:\n        if dict[key]!= dict[key]:\n            return False\n    \n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = [dict[x] for x in dict]\n    return all(values[0] == value for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value:\n            dict1[key] = value\n        else:\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    # Loop through the keys of the dictionary\n    for key in dict1:\n        # Check if the value is an empty string\n        if not dict1[key]:\n            # If it is, remove the key-value pair from the dictionary\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    dp = [0] * n\n    max_product = float('-inf')\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                dp[j] = max(dp[j], dp[i] * arr[j])\n            else:\n                dp[j] = max(dp[j], dp[i] * arr[j])\n            max_product = max(max_product, dp[j])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize the maximum product to be the first element of the array\n    max_product = arr[0]\n\n    # Create a 2D array to store the maximum product of each subsequence ending at each index\n    max_product_of_subseq = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Loop through all possible subsequences of the array\n    for i in range(n):\n        for j in range(i, n):\n            # If the difference between the current element and the next element is greater than 1, then it is not possible to form a subsequence of increasing elements\n            if arr[j] - arr[i] <= 1:\n                break\n\n            # Find the maximum product formed by multiplying the current and the next element\n            max_product_of_subseq[i][j] = max(arr[i] * arr[j], arr[i] * max_product_of_subseq[i+1][j], arr[j] * max_product_of_subseq[i][j+1])\n\n            # Update the maximum product if the maximum product of a subsequence ending at index i is greater than the current maximum product\n            if max_product_of_subseq[i][j] > max_product:\n                max_product = max_product_of_subseq[i][j]\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_product_ending_here:\n            max_product_ending_here = arr[i]\n        elif arr[i] < max_product_ending_here:\n            max_product_ending_here = arr[i] * max_product_ending_here\n        \n        max_product = max(max_product, max_product_ending_here)\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    min_product = float('inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n            max_product = max(max_product, product)\n            min_product = min(min_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for the maximum product and the current subsequence\n    max_product = float('-inf')\n    current_product = 1\n    # Iterate over the array\n    for i in range(n):\n        # Add the current element to the current subsequence and update the current product\n        current_product *= arr[i]\n        # Update the maximum product if the current subsequence is a valid one\n        if i > 0 and arr[i] < 0:\n            # If the current subsequence is decreasing, update the maximum product\n            max_product = max(max_product, current_product)\n            # Reset the current subsequence and the current product\n            current_product = 1\n    # Update the maximum product if the current subsequence is valid\n    if current_product > 0:\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        max_so_far = max_ending_here = arr[0]\n        for i in range(1, n):\n            max_ending_here = max(max_ending_here*arr[i], arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    def increasing_subsequence_product(seq):\n        max_product = 1\n        prev_max_product = 1\n        for num in seq:\n            max_product = max(max_product, prev_max_product * num)\n            prev_max_product = max(prev_max_product, num)\n        return max_product\n\n    def max_increasing_subsequence(seq):\n        max_product = float('-inf')\n        for i in range(len(seq)):\n            subseq = seq[i:]\n            subseq_product = increasing_subsequence_product(subseq)\n            max_product = max(max_product, subseq_product)\n        return max_product\n\n    max_product = max_increasing_subsequence(arr)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n    max_product = float('-inf')\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j] and arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                dp[i] = arr[j] + dp[i] + 1\n                dp[j] = arr[i] + dp[j] + 1\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    def max_product_subseq(arr, start, end):\n        if start == end:\n            return 0\n        if start + 1 == end:\n            return arr[start] * arr[end]\n\n        max_product_left = float('-inf')\n        max_product_right = float('-inf')\n\n        for i in range(start + 1, end):\n            max_product_left = max(max_product_left, arr[i] * max_product_subseq(arr, start, i))\n            max_product_right = max(max_product_right, arr[i] * max_product_subseq(arr, i, end))\n\n        return max(max_product_left, max_product_right)\n\n    if len(arr) == 1:\n        return arr[0]\n\n    return max(max_product_subseq(arr, 0, len(arr) - 1), max_product_subseq(arr, 0, len(arr) // 2), max_product_subseq(arr, len(arr) // 2, len(arr) - 1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    else:\n        # loop through the tuple starting from the second element\n        for i in range(1, len(test_tup)):\n            # add the current element and the element to its right\n            test_tup[i] += test_tup[i-1]\n        return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the tuple to a list\n    lst = list(test_tup)\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the list and add the neighboring elements to the sum\n    for i in range(len(lst)-1):\n        sum += lst[i] + lst[i+1]\n    # Return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # List comprehension to create a new tuple with the sum of each pair of adjacent elements\n    result = tuple(map(lambda x, y: x+y, test_tup[0:len(test_tup)-1], test_tup[1:]))\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables to keep track of the sum of the neighboring elements\n    current_sum = 0\n    next_sum = 0\n\n    # Iterate through the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup)-1):\n        current_sum = test_tup[i] + test_tup[i+1]\n        next_sum = test_tup[i+1] + test_tup[i+2]\n        # Add the current sum to the next sum and set the current sum to the new sum\n        test_tup[i] = current_sum\n        current_sum = next_sum\n\n    # Return the modified tuple with the pairwise additions\n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a list to store the pairwise additions\n    pairwise_additions = []\n\n    # loop through each element in the tuple\n    for i in range(len(test_tup) - 1):\n        # calculate the pairwise addition of the current element and its neighbor\n        pairwise_addition = test_tup[i] + test_tup[i+1]\n        # add the pairwise addition to the list\n        pairwise_additions.append(pairwise_addition)\n\n    # return the list of pairwise additions\n    return pairwise_additions"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a positive integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Calculate the product of the array elements\n    product = 1\n    for element in arr:\n        product = (product * element) % n\n        \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and a number n and returns the remainder of the product of the elements of the array with n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array arr and a number n and returns the product of \n    the array multiplication modulo n.\n    '''\n\n    # Initialize the product to 1\n    product = 1\n\n    # Loop through the array\n    for num in arr:\n\n        # Multiply the current number by the product modulo n\n        product = (product * num) % n\n\n    # Return the final product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n        \n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    if len(l) < 2: \n        return \"The list should have at least 2 elements.\"\n\n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False\n\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list `l` as input and returns True if all the numbers in `l` are consecutive, and False otherwise.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    \n    for i in range(n-1):\n        if l[i] == l[i+1] - 1:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i+1] - l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    # Check if the list is empty\n    if len(l) == 0: \n        return True\n    \n    # Initialize variables to keep track of previous and current elements\n    prev = None\n    curr = l[0]\n    \n    # Loop through the list starting from the second element\n    for i in range(1, len(l)): \n        # Check if the current element is the same as the previous one\n        if l[i] == curr: \n            return False\n        # Update the previous and current elements\n        prev = curr\n        curr = l[i]\n    \n    # If we have checked all the elements and haven't found any consecutive numbers, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Check if the list is empty or contains only one element\n    if len(l) < 2:\n        return True\n    \n    # Initialize the current number and the flag to check if the current number is consecutive or not\n    current_num = l[0]\n    consecutive_flag = True\n    \n    # Iterate over the list\n    for i in range(1, len(l)):\n        \n        # If the current number is not consecutive, set the consecutive_flag to False\n        if l[i]!= current_num + 1:\n            consecutive_flag = False\n            \n        # If the current number is consecutive, update the current_num\n        else:\n            current_num = l[i]\n            \n    # Return the result of the consecutive flag\n    return consecutive_flag"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Initialize two variables to keep track of current and previous numbers in the list\n    current = l[0]\n    prev = l[0]\n\n    # Loop through the list\n    for i in range(1, len(l)):\n        # If the current number is equal to the previous number, it is not consecutive\n        if l[i] == prev:\n            return False\n        # Otherwise, update the current and previous numbers\n        current = l[i]\n        prev = l[i-1]\n\n    # If the loop completes without returning False, the list contains consecutive numbers\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == 0:\n        return True\n\n    prev = l[0]\n    for i in range(1, len(l)):\n        if l[i]!= prev + 1:\n            return False\n        prev = l[i]\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Merge the two lists and remove duplicates\n    merged_list = list(set(test_list1 + test_list2))\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Initialize an empty set to store the intersection\n    intersection_set = set()\n    # Iterate through the sorted list\n    for item in sorted_list:\n        # Check if the item is present in both lists\n        if item in test_list1 and item in test_list2:\n            # If it's present, add it to the intersection set\n            intersection_set.add(item)\n    # Return the intersection set as a tuple\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the two tuple lists to sets to eliminate duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return list(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of elements from the first list\n    set1 = set(test_list1)\n    # Create a set of elements from the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets using the symmetric difference operation\n    intersection = set1.symmetric_difference(set2)\n    # Convert the set back to a tuple and return it\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Define a function to check if two tuples are equal\n    def is_equal(tuple1, tuple2):\n        # Check if the length of both tuples are equal\n        if len(tuple1)!= len(tuple2):\n            return False\n        # Check if all elements of both tuples are equal\n        return all(x == y for x, y in zip(tuple1, tuple2))\n    \n    # Initialize an empty set to store the intersection tuples\n    intersection = set()\n    \n    # Loop through the first list and check if each tuple in the second list is equal to any of the tuples in the first list\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if is_equal(tuple1, tuple2):\n                intersection.add(tuple1)\n                break\n    \n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set to store unique elements of the first list\n    set1 = set(test_list1)\n    # Create a set to store unique elements of the second list\n    set2 = set(test_list2)\n    # Create an empty set to store the common elements\n    common_set = set()\n    # Iterate through the elements of set1 and check if they are also present in set2\n    for element in set1:\n        if element in set2:\n            common_set.add(element)\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two lists of tuples as input and returns a new list containing only the tuples that are common in both lists irrespective of their order.\n    \"\"\"\n    intersection = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2 and tuple1 not in intersection:\n                intersection.append(tuple1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = set(test_list1) & set(test_list2)\n    return tuple(common_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # iterate through the string and replace each occurrence of ch with newch\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through the string and replace the specified character with the new character\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # Split the string into a list of characters\n    lst1 = list(str1)\n    \n    # Loop through each character in the list\n    for i in range(len(lst1)):\n        if lst1[i] == ch:\n            lst1[i] = newch\n    \n    # Join the list of characters into a string\n    return ''.join(lst1)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three arguments: the first string, the character to be replaced, and the new character.\n    The function replaces all occurrences of the character in the string with the new character.\n    The function returns the modified string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n    # Convert the sorted Counter object to a dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = sorted(sorted_dict.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function takes in a dictionary and sorts it based on the value.\n    \"\"\"\n    # Create a Counter object to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the counter object by value in ascending order\n    sorted_counter = counter.most_common()\n\n    # Convert the sorted counter object back into a dictionary\n    sorted_dict = {key: sorted_counter[index][1] for index, (key, value) in enumerate(sorted_counter)}\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict = sorted(sorted_dict, key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    \n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        \n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the sum of the largest and smallest values in the sorted array\n    largest = nums[-1]\n    smallest = nums[0]\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array `nums` as input and returns the sum of the largest and smallest values in the array.\n    '''\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Iterate through the array and find the largest and smallest values\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        if nums[i] < smallest:\n            smallest = nums[i]\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n    \n    # Find the largest and smallest value in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # Calculate the sum of the largest and smallest value\n    total = largest + smallest\n    \n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        largest = nums[0]\n        smallest = nums[0]\n        for num in nums:\n            if num > largest:\n                largest = num\n            if num < smallest:\n                smallest = num\n        return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if the string is already lower case and False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n\n    # find all matches in the input string\n    matches = pattern.findall(str1)\n\n    # remove all lowercase substrings from the input string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str2 = str1.lower()\n    \n    # split the string into a list of substrings\n    substrings = re.findall(r'\\b[a-z]+\\b', str2)\n    \n    # join the list of substrings back into a string with spaces between them\n    result =''.join(substrings)\n    \n    # return the result\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use the re.findall() function to find all lowercase substrings in the given string\n    substrings = re.findall(r'[a-z]+', str1)\n\n    # Iterate through each substring and remove it from the original string\n    for substring in substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Compile the pattern\n    regex = re.compile(pattern)\n    # Find all lowercase substrings in the string\n    lower_substrings = regex.findall(str1)\n    # Remove lowercase substrings from the string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase and split it into a list of words\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Remove all lowercase substrings from the list of words\n    words = [word for word in words if not word.islower()]\n    \n    # Join the list of words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # remove all lowercase substrings using regular expressions\n    string = re.sub(r'\\b[a-z]+\\b', '', string)\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    substrings = re.findall(r'\\b[a-z]+\\b', str1)\n    \n    # Remove all lowercase substrings from the string\n    for substr in substrings:\n        str1 = re.sub(r'\\b'+substr+r'\\b', '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # Use re.sub() function to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile('[a-z]+')\n    # Use the pattern to find all the lowercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Loop through the matches and remove them from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    # extract the first digit of the string\n    first_digit = num_str[0]\n    # convert the first digit to an integer\n    first_digit_int = int(first_digit)\n    # return the first digit of the number\n    return first_digit_int"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10 : \n        return n\n    else :\n        return first_Digit(n//10) + 1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    return n//10**floor(log10(abs(n)))"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    s = str(n)\n    # find the first character of the string\n    return s[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the given number to string\n    num = str(n)\n    # get the first character of the string\n    first_char = num[0]\n    # return the first character\n    return first_char"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to string\n    str_n = str(n)\n    # Return the first digit of the number as an integer\n    return int(str_n[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    odd_list = []\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # create an empty list to store the odd numbers\n    odd_list = []\n    \n    # loop through each element in the input list\n    for num in list:\n        # check if the element is odd\n        if num % 2 == 1:\n            # if it is odd, add it to the odd_list\n            odd_list.append(num)\n            \n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Sum of cubes of natural numbers\n    sum_cubes = (n * n * n) // 3\n    # Sum of natural numbers\n    sum_natural = n * (n+1) // 2\n    # Difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i*i*i for i in range(n+1))\n    sum_natural = sum(range(1, n+1))\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    # Function to find the sum of cubes of the first n natural numbers\n    def sum_of_cubes(n):\n        return sum(i**3 for i in range(1, n+1))\n\n    # Find the sum of the first n natural numbers\n    sum_of_n = sum(range(1, n+1))\n\n    # Calculate the difference between the sums\n    return sum_of_cubes(n) - sum_of_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    diff = sum_cubes - sum_natural\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    # calculate sum of cubes of first n natural numbers\n    cubes = sum([i**3 for i in range(1, n+1)])\n\n    # calculate sum of first n natural numbers\n    sums = sum([i for i in range(1, n+1)])\n\n    # find the difference\n    diff = cubes - sums\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initialize sum of cubes and sum of natural numbers\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    \n    # Iterate through first n numbers and calculate sum of cubes and sum of natural numbers\n    for i in range(n):\n        sum_of_cubes += i**3\n        sum_of_natural += i\n    \n    # Find the difference between sum of cubes and sum of natural numbers\n    difference = abs(sum_of_cubes - sum_of_natural)\n    \n    # Return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Function to find the sum of cubes of the first n natural numbers\n    def cube_sum(n):\n        return sum([x**3 for x in range(1, n+1)])\n\n    # Function to find the sum of the first n natural numbers\n    def sum_natural_numbers(n):\n        return sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return cube_sum(n) - sum_natural_numbers(n)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Sum of cubes of the first n natural numbers\n    sum_cubes = n * (n**2) * (n**3)\n    # Sum of the first n natural numbers\n    sum_numbers = n * n\n    # Difference between the two sums\n    difference = sum_cubes - sum_numbers\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i+1,N) : \n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1 : # check if xor_val is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A containing N integers and returns the number of pairs whose XOR value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n\n    count = 0\n\n    # finding the sum of all elements in the array\n    sum = sum(A)\n\n    # loop through all elements of the array\n    for i in range(len(A)) : \n        \n        # finding the xor of the current element and all elements of the array except itself\n        xor_value = A[i] ^ sum - A[i]\n\n        # checking if the xor value is odd\n        if xor_value % 2!= 0 : \n            count += 1\n\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isalpha() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a new string with the same length as the input string\n    new_string = string * len(string)\n    \n    # loop through each character in the new string\n    for i in range(len(string)):\n        # get the current character from the input string\n        current_char = string[i]\n        \n        # convert the character to lowercase if it is uppercase, or vice versa\n        new_char = current_char.lower() if current_char.isupper() else current_char.upper()\n        \n        # replace the current character with the new character in the new string\n        new_string = new_string[:i] + new_char + new_string[i+1:]\n    \n    # return the new string with the toggled case\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the new string\n    new_string = \"\"\n    # Loop through each character in the input string\n    for char in string:\n        # If the character is a letter, convert it to its opposite case\n        if char.isalpha():\n            new_char = char.lower() if char.islower() else char.upper()\n        # If the character is not a letter, leave it unchanged\n        else:\n            new_char = char\n        # Append the new character to the new string\n        new_string += new_char\n    # Return the new string\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # if the character is a lowercase letter, convert it to uppercase\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # if the character is an uppercase letter, convert it to lowercase\n        elif string[i].isupper():\n            string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = n1 // 10**i - n2 // 10**i\n        sum_diff += diff * diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(len(str(n1))):\n        diff += abs(ord(str(n1)[i]) - ord(str(n2)[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_diff = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        num1 = int(str(n1)[:i+1])\n        num2 = int(str(n2)[:i+1])\n        diff = abs(num1 - num2)\n        total_diff += diff\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        digit_diff = abs(int(str(n1)[i]) - int(str(n2)[i]))\n        sum_diff += digit_diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two numbers into lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Initialize variables to keep track of the sum of differences\n    sum_diff = 0\n\n    # Loop through the digits of each number\n    for digit_num1, digit_num2 in zip(num1_digits, num2_digits):\n        # Calculate the difference between the two digits\n        diff = abs(digit_num1 - digit_num2)\n\n        # Add the difference to the sum of differences\n        sum_diff += diff\n\n    # Return the sum of differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # find the minimum length of the two lists\n    min_len = min(len(digits1), len(digits2))\n\n    # calculate the per-digit difference\n    diff = [digits1[i] - digits2[i] for i in range(min_len)]\n\n    # sum up the per-digit differences\n    sum_diff = sum(diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the two integers to lists of digits\n    digits_n1 = [int(d) for d in str(n1)]\n    digits_n2 = [int(d) for d in str(n2)]\n\n    # Calculate the difference between the two integers using a list comprehension\n    difference = [abs(n1 - n2)] * 10\n\n    # Initialize the sum variable\n    sum_diff = 0\n\n    # Loop through the digits of the difference and add them to the sum variable\n    for digit in difference:\n        sum_diff += digit\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert the numbers to lists of digits\n    num1_digits = [int(digit) for digit in str(n1)]\n    num2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the absolute differences between the digits\n    digit_sum = sum(abs(digit1 - digit2) for digit1, digit2 in zip(num1_digits, num2_digits))\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum variable\n    total_sum = 0\n    \n    # convert n1 and n2 to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n    \n    # loop through each digit in both lists\n    for i in range(len(num1_digits)):\n        # calculate per-digit difference\n        diff = abs(int(num1_digits[i]) - int(num2_digits[i]))\n        # add difference to total sum\n        total_sum += diff\n    \n    # return total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        diff = abs(ord(str(n1)[i]) - ord(str(n2)[i]))\n        sum_diff += diff\n    return sum_diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize max_sum and start with the first element\n    max_sum = a[0]\n    # Initialize current_sum and start with the first element\n    current_sum = a[0]\n    # Loop through the remaining elements\n    for i in range(1, size):\n        # If the current_sum is negative, set it to 0\n        if current_sum < 0:\n            current_sum = 0\n        # Add the next element to the current_sum\n        current_sum += a[i]\n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Return the max_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if len(a) < size:\n        return None\n\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n\n    for i in range(len(a)):\n        current_sum += a[i]\n\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum = a[i]\n            current_start = i\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(size):\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Add the current element to the current sum\n        current_sum += a[i]\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size > len(a):\n        size = len(a)\n    \n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    \n    if size == 2:\n        return max(a[0], a[1])\n    \n    max_sum = float('-inf')\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    max_sub_array = []\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n        if i >= size - 1:\n            max_sub_array.append(max_sum)\n        elif current_sum < 0:\n            current_sum = 0\n            \n    return max_sum, max_sub_array"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        max_so_far = max_ending_here = a[0]\n        for i in range(1, size):\n            max_ending_here = max(a[i], max_ending_here + a[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if i >= size - 1:\n            break\n    return max_so_far"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples\n    merged_tup = test_tup1 + test_tup2\n    # Remove duplicates\n    unique_tup = list(set(merged_tup))\n    # Sort the unique tuple\n    sorted_tup = sorted(unique_tup)\n    # Print the sorted tuple\n    print(sorted_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples using set union\n    union_set = test_tup1 | test_tup2\n    # convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # return the sorted list of union elements\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single list\n    combined_list = list(test_tup1) + list(test_tup2)\n    \n    # Sort the combined list in ascending order\n    combined_list.sort()\n    \n    # Remove duplicates from the sorted list\n    unique_list = list(set(combined_list))\n    \n    # Print the sorted and unique list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() method to convert both tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Union of two sets is obtained by using the union() method\n    union_set = set1.union(set2)\n\n    # Converting union set into a list and sorting it in ascending order\n    sorted_union = list(union_set)\n    sorted_union.sort()\n\n    # Outputting the sorted union list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Get the elements from both tuples\n    tup1_elements = test_tup1\n    tup2_elements = test_tup2\n    \n    # Concatenate both tuples into one\n    combined_elements = tup1_elements + tup2_elements\n    \n    # Remove duplicates from the combined elements\n    unique_elements = list(set(combined_elements))\n    \n    # Sort the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n    \n    # Return the sorted elements as a tuple\n    return tuple(sorted_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples into a single tuple\n    combined_tup = test_tup1 + test_tup2\n    \n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    \n    # Convert the set back to a list and sort it\n    sorted_list = sorted(unique_set)\n    \n    # Return the sorted list as a tuple\n    return tuple(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate both tuples and remove duplicates using set()\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it in ascending order\n    sorted_list = sorted(list(union_set))\n    # Print the sorted list of unique elements\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    union_list = sorted(union_set)\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # converting tuples into lists to make union operation possible\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    # finding the union of the lists\n    union_list = test_list1 + test_list2\n    # sorting the union list in ascending order\n    union_list.sort()\n    # converting the union list into tuple and returning it\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Merge the two tuples into a single list\n    merged_list = test_tup1 + test_tup2\n    \n    # Sort the list in ascending order\n    sorted_list = sorted(merged_list)\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize a variable to store the length of the longest sublist\n    max_length = 0\n\n    # Iterate over each sublist in the list\n    for sublist in lst:\n        # Find the length of the current sublist\n        length = len(sublist)\n\n        # Update the max_length variable if the length is greater\n        if length > max_length:\n            max_length = length\n\n    # Return the max_length variable\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i > max_length:\n                max_length = j-i\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1] or lst[i] == lst[i-2]:\n            continue\n        else:\n            longest_sublist.append(lst[i])\n            if len(longest_sublist) > len(longest_sublist[-1]):\n                longest_sublist = longest_sublist[-1:]\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_len = max(max_len, len(lst[i:j+1]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize a variable to store the length of the longest sublist\n    max_len = 0\n    # loop through each sublist in the list\n    for sublist in lst:\n        # loop through each element in the sublist\n        for i in range(len(sublist)):\n            # check if the length of the current sublist is greater than the max length\n            if i+1 >= max_len:\n                # update the max length if necessary\n                max_len = i+1\n    # return the max length\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list of integers as input and returns the length of the longest sublist.\n    '''\n\n    # Create an empty list to store the lengths of sublists\n    sublist_lengths = []\n\n    # Iterate through the list of integers\n    for i in range(len(lst)):\n        # Initialize a variable to keep track of the length of the current sublist\n        current_length = 1\n\n        # Iterate through the list from the current index to the end\n        for j in range(i, len(lst)):\n            # Add the length of the current integer to the current_length variable\n            current_length += 1\n            # If the length of the current integer exceeds the length of the sublist, update the sublist_lengths list\n            if current_length > sublist_lengths[-1] or len(sublist_lengths) == 0:\n                sublist_lengths.append(current_length)\n\n    # Return the length of the longest sublist\n    return max(sublist_lengths)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_sublist = 0\n    for i in range(len(lst)):\n        current_sublist = []\n        for j in range(i, len(lst)):\n            current_sublist.append(lst[j])\n            if len(current_sublist) > longest_sublist:\n                longest_sublist = len(current_sublist)\n    return longest_sublist"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    # Loop through the list\n    for item in lst:\n        # If the current item is the first item in the list, set current length to 1\n        if current_length == 0:\n            current_length = 1\n        # If the current item is the same as the previous item, increment the length by 1\n        elif item == lst[current_length-1]:\n            current_length += 1\n        # If the current item is a different item than the previous item, update the max length if needed and reset the current length to 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 1\n    # If the list is not completely filled, update the max length if needed\n    if current_length > max_length:\n        max_length = current_length\n    # Return the max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n    return max_len"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"' # regex pattern for extracting values between quotation marks\n    matches = re.findall(pattern, text) # find all matches in text using regex pattern\n    return matches # return list of extracted values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\"(.*?)\\\"' # matches values between quotes, groups them, and captures them as a group\n    matches = re.findall(pattern, text) # finds all occurrences of the pattern in the text, returns a list of groups\n    values = [match.strip() for match in matches] # removes leading and trailing spaces from each group and returns as a list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n\n    Args:\n    text (str): A string containing text with quotation marks around values.\n\n    Returns:\n    list: A list of extracted values.\n    '''\n\n    # Use regular expression to match quotes and extract values\n    pattern = re.compile(r'(?<!\\\\)\"([^\\\"]*)\"|\\'([^\\']*)\\'')\n    matches = pattern.findall(text)\n\n    # Extract values and return as list\n    values = []\n    for match in matches:\n        if match[0]:\n            values.append(match[0])\n        elif match[1]:\n            values.append(match[1])\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+(?=\")'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_values(text):\n    # regular expression pattern to match quotation marks and values\n    pattern = r'(?<=\\\")\\w+\\b(?=\\\")'\n    # find all matches in the input string\n    matches = re.finditer(pattern, text)\n    # loop over matches and extract values\n    values = [m.group().strip('\"') for m in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\".*?\"|\\'[^\\']*?\\')'\n    matches = re.findall(pattern, text)\n    values = []\n    for match in matches:\n        if match[0] == '\"' or match[0] == \"'\":\n            match = match[1:-1]\n            values.append(match)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<!\\\\)(?<!\\\\\")(\".*\")(?<!\\\\)(?<!\\\\\")\"\n    matches = re.finditer(pattern, text)\n    values = []\n    for match in matches:\n        value = match.group(1)\n        values.append(value.strip('\"'))\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\w)([\"\\'])(?:(?!\\1)[^\\\\\\1]|\\\\.)*?\\1(?=\\W)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"(?!\\\\)')\n    matches = pattern.findall(text)\n    values = [match.replace('\"', '') for match in matches]\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # initializing a dictionary to store the frequency of each element in the array\n    freq = {}\n    # iterating over the array and updating the frequency of each element in the dictionary\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    # initializing the count variable to 0\n    count = 0\n    # iterating over the array and checking if there exists a pair of elements where both elements are unequal\n    for i in range(n):\n        for j in range(i+1, n):\n            if freq[arr[i]] > 0 and freq[arr[j]] > 0:\n                count += 1\n                freq[arr[i]] -= 1\n                freq[arr[j]] -= 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    count=0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!=arr[j]: \n                count+=1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into a list of characters\n    characters = list(word)\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and convert each character to an integer\n    digits = [int(digit) for digit in str(n)]\n    # Sum up the integers in the list\n    sum_digits = sum(digits)\n    # Return the sum of the digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize a variable to store the sum\n    sum = 0\n    # Iterate through each digit in the string\n    for digit in s:\n        # Add the integer value of each digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    # convert the integer to a string and split into individual digits\n    digits = list(str(n))\n    # iterate over each digit and add it to the sum variable\n    for digit in digits:\n        total += int(digit)\n    # return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the number to a string to work with individual digits\n    num_str = str(n)\n    # Initialize a variable to hold the sum of the digits\n    digit_sum = 0\n    # Loop through each digit of the number and add it to the sum\n    for digit in num_str:\n        digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    \n    # Loop through each digit in the integer\n    while n > 0:\n        # Get the rightmost digit\n        digit = n % 10\n        \n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        \n        # Remove the rightmost digit from the integer\n        n //= 10\n        \n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    \n    # Initialize a variable to store the sum of the digits\n    total = 0\n    \n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += int(digit)\n    \n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # check if the list is empty\n    if not list1:\n        return True\n    \n    # check if the list has only one element\n    if len(list1) == 1:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if it is sorted in ascending order, and False otherwise.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes in a list and checks whether it is sorted or not.\n    \"\"\"\n    if len(lst) <= 1:\n        return True\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted, else False.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # Check if the list is sorted in ascending order\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # loop through each sublist in the list\n    for i in range(len(list1)):\n        # convert the sublist to a string and sort it\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sorts each sublist of strings in the given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Sort each sublist of strings in a given list of lists.\n\n    Args:\n        list1 (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A list of lists, where each sublist contains the same strings, but sorted.\n    \"\"\"\n    # Loop over each sublist in the list of lists\n    for sublist in list1:\n        # Convert the sublist to a set to remove duplicates, then back to a list\n        sublist = list(set(sublist))\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n        # Reconvert the sorted sublist to a list\n        list1[list1.index(sublist)] = list(sublist)\n    # Return the modified list of lists\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Removes duplicate numbers from a list of numbers.\n\n    Parameters:\n    nums (list): List of numbers to remove duplicates from.\n\n    Returns:\n    list: A new list with duplicate numbers removed.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n\n    for i in nums:\n        if i not in unique_nums:\n            unique_nums.append(i)\n\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    return [num for num in nums if num not in seen and not seen.add(num)]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty dictionary to store the unique numbers\n    unique_dict = {}\n    \n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is not already in the dictionary, add it to the dictionary and its index\n        if num not in unique_dict:\n            unique_dict[num] = [nums.index(num)]\n        # If the number is already in the dictionary, add its index to the existing list of indices\n        else:\n            unique_dict[num].append(nums.index(num))\n    \n    # Initialize an empty list to store the unique numbers without duplicates\n    unique_nums = []\n    \n    # Iterate through the dictionary to add the unique numbers to the new list\n    for num in unique_dict:\n        # If the number has only one index, add it to the new list\n        if len(unique_dict[num]) == 1:\n            unique_nums.append(num)\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Use set to remove duplicates from each list\n    unique_nums = set(num for lst in nums for num in lst)\n    # Convert set to list and return\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Initialize an empty set to store unique numbers\n    unique_nums = set()\n    # Loop through each list of numbers in the input list\n    for num_list in nums:\n        # Loop through each number in the current list\n        for num in num_list:\n            # If the number is not already in the unique_nums set, add it\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the unique_nums set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of numbers as input and returns the product of the unique numbers.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    unique_list = list(set(list_data))\n    unique_list.sort()\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Remove duplicates from the list\n    unique_numbers = list(set(list_data))\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_numbers = set(list_data)\n    return reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1 * sum(unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else reduce(lambda x, y: x*y, unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        list_data (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set of unique numbers in the given list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculating the surface area of the cylinder using the formula:\n    # A = pi * r * r * h\n    # where pi is the value of pi (3.14)\n    pi = 3.14\n    surface_area = pi * r * r * h\n    \n    # returning the surface area of the cylinder\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h  # pi is a mathematical constant defined in math module"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2*3.14*r*r)+(2*3.14*r*h)+((2*3.14*r)+(2*3.14*h))\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area using the formula\n    # surface area = 2*pi*r^2 + 2*pi*r*h + 2*pi*h^2\n    surface_area = 2 * 3.14159 * r ** 2 + 2 * 3.14159 * r * h + 2 * 3.14159 * h ** 2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # Calculate the surface area of the cylinder using the formula A = pi*r^2*h\n    A = math.pi * r ** 2 * h\n\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14 * r * r + 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*pi*r*h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(A)):\n        if A[i] in B:\n            j = B.index(A[i])\n            if j == 0:\n                continue\n            else:\n                if B[j-1]!= A[i]:\n                    return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n\n    # Check if B is sublist of A \n    if B in A: \n        return True \n    else: \n        return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check whether A is a sublist of B.\n\n    Args:\n        A (list): A list\n        B (list): Another list\n\n    Returns:\n        bool: True if A is a sublist of B, False otherwise.\n    \"\"\"\n\n    if len(B) > len(A):\n        return False\n\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B and checks if the list B is a sublist of list A.\n    '''\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    if B in A:\n        return True\n\n    # Check if B is a sublist of any sublist of A\n    for i in range(len(A)):\n        if B in A[i:]:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while i < len(A):\n        if A[i] == B[j]:\n            j += 1\n        i += 1\n    return j == len(B)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(B)-len(A)+1):\n        if A == B[i:i+len(A)]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B): \n        return False \n\n    i = 0 \n    j = 0 \n\n    while i < len(A): \n\n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        elif j!= 0: \n            j = max(j-1,0) \n        else: \n            return False \n\n    return True "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = int(n)\n    factorial = 1\n    \n    for i in range(1, num+1):\n        factorial *= i\n        \n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    factorial = 1\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        factorial *= digit\n        temp //= 10\n\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial = factorial * n\n        n = n - 1\n    return int(factorial % 10)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    last_digit = n // 10\n    factorial = 1\n    for i in range(2, last_digit+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Finding the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Finding the last digit in factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1 \n    temp = n \n    while temp > 0: \n        factorial = factorial * temp \n        temp = temp // 10 \n    return factorial % 10 "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes an integer n and returns the last digit of its factorial.\n    '''\n    # convert n to string to find its factorial\n    n_str = str(n)\n    # get the factorial of n\n    factorial = 1\n    for i in range(1, len(n_str) + 1):\n        factorial *= int(n_str[len(n_str)-i])\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Find the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Find the last digit of the factorial\n    last_digit = fact % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the last digit in factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through the 3 input lists and append each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        print(\"Lists must have the same length\")\n        return\n    \n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Iterate through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes 3 lists of the same length as input and returns a single flat list \n    that contains all the elements of all the input lists in the order given.\n\n    Example:\n    interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) = [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    '''\n    # creating an empty list to store the elements of the input lists\n    result = []\n    \n    # iterating over the input lists\n    for i in range(len(list1)):\n        # adding the i-th element of each input list to the result list\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must be of the same length.\")\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while i < len(list2):\n        result.append(list2[i])\n        i += 1\n    while i < len(list3):\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"All lists must have the same length\"\n\n    # Create a new list to store the interleaved values\n    interleaved_list = []\n\n    # Iterate through each list and add the corresponding values to the new list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Ensure that all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # Flatten the lists\n    flat_list = list1 + list2 + list3\n    \n    # Return the interleaved list\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to hold the interleaved list\n    interleaved = []\n    # Loop through each item in the input lists\n    for item in list1:\n        interleaved.append(item)\n    for item in list2:\n        interleaved.append(item)\n    for item in list3:\n        interleaved.append(item)\n    return interleaved"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create empty set to store dissimilar elements\n    dissimilar_set = set()\n    # loop through each element of tuple 1\n    for element in test_tup1:\n        # check if element is present in tuple 2\n        if element not in test_tup2:\n            # if element is not present in tuple 2, add it to dissimilar set\n            dissimilar_set.add(element)\n    # return the set of dissimilar elements\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Find the dissimilar elements in two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_elements.append(elem)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Get the set of unique elements in each tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the elements in set1 that are not in set2\n    dissimilar_elements1 = set1 - set2\n\n    # Find the elements in set2 that are not in set1\n    dissimilar_elements2 = set2 - set1\n\n    # Return the union of the two sets as a tuple\n    return tuple(dissimilar_elements1.union(dissimilar_elements2))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    \n    # Iterate through each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If it's not, append it to the dissimilar list\n            dissimilar.append(element1)\n    \n    # Return the list of dissimilar elements\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def is_even(x):\n        return x % 2 == 0\n\n    # Filter out even elements using a list comprehension\n    even_list = [x for x in test_tuple if is_even(x)]\n\n    # Apply the even_fnc function to the filtered list\n    even_list = even_fnc(even_list)\n\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            even_list.append(i)\n    return even_list\n\ndef even_fnc(num): \n    '''\n    Define a function to check if a number is even or odd.\n    '''\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    even_list = []\n    for sublist in test_tuple:\n        even_sublist = [even_fnc(x) for x in sublist if even_fnc(x)]\n        if even_sublist:\n            even_list.append(even_sublist)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    filtered_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            filtered_list.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                filtered_list.append(elem)\n    return filtered_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for tup in test_tuple:\n        if len(tup) % 2 == 0:\n            for item in tup:\n                new_tuple.append(even_fnc(item))\n        else:\n            new_tuple.extend(tup)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    \n    def is_odd(x):\n        return x % 2 == 1\n    \n    def is_mixed(x):\n        return isinstance(x, tuple)\n    \n    def remove_mixed(t):\n        return list(filter(lambda x: not is_mixed(x), t))\n    \n    def remove_even(t):\n        return list(filter(lambda x: not is_even(x), t))\n    \n    def remove_odd(t):\n        return list(filter(lambda x: not is_odd(x), t))\n    \n    def remove_none(t):\n        return list(filter(lambda x: x is not None, t))\n    \n    def remove_fnc(t, fnc):\n        return list(filter(lambda x: fnc(x), t))\n    \n    test_list = [tuple(range(i, i + 3)) for i in range(1, 10)]\n    print(\"Original list:\", test_list)\n    \n    test_list = remove_mixed(test_list)\n    print(\"Mixed list:\", test_list)\n    \n    test_list = remove_even(test_list)\n    print(\"Even list:\", test_list)\n    \n    test_list = remove_odd(test_list)\n    print(\"Odd list:\", test_list)\n    \n    test_list = remove_none(test_list)\n    print(\"None list:\", test_list)\n    \n    test_list = remove_fnc(test_list, is_even)\n    print(\"Even list:\", test_list)\n    \n    test_list = remove_fnc(test_list, is_odd)\n    print(\"Odd list:\", test_list)\n    \n    test_list = remove_fnc(test_list, is_mixed)\n    print(\"Mixed list:\", test_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            new_tuple.append(elem)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even or not\n    def is_even(x):\n        return even_fnc(x)\n    \n    # Define a list to store even elements\n    even_list = []\n    \n    # Loop through each element in the nested tuple\n    for element in test_tuple:\n        # If the element is even, add it to the even list\n        if is_even(element):\n            even_list.append(element)\n    \n    # Return a new tuple containing only the even elements\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for t in test_tuple:\n        if isinstance(t, tuple):\n            result.append(even_ele(t, even_fnc))\n        else:\n            result.append(even_fnc(t))\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # filter out all odd elements in the tuple using the even_fnc() function\n    even_tuple = list(filter(lambda x: even_fnc(x), test_tuple))\n\n    # flatten the tuple and return it\n    return tuple(even_tuple)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*(b*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base of the pyramid\n    base_area = b * b\n    \n    # Calculate the surface area of the upper half of the pyramid\n    upper_half_area = base_area * (s/2)\n    \n    # Calculate the surface area of the lower half of the pyramid\n    lower_half_area = base_area * (s/2)\n    \n    # Add up the surface areas of the upper and lower halves of the pyramid\n    total_area = upper_half_area + lower_half_area\n    \n    # Return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = b*s + b*s + b*s + b*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    #calculating the surface area of the pyramid\n    surface_area = b*s + s*s + b*b\n    \n    #printing the result\n    print(\"The surface area of the pyramid is:\", surface_area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #Calculate the surface area of the base\n    area_base = b**2\n    \n    #Calculate the area of the side of the pyramid\n    area_side = s*s\n    \n    #Calculate the height of the pyramid\n    height = s\n    \n    #Calculate the surface area of the pyramid\n    surface_area = area_base + area_side + 2*height\n    \n    #Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the pyramid using Heron's formula\n    area = 0.5 * b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 2*b + 2*s + 3*b*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Find the area of each half of the pyramid\n    half_area = b * s / 2\n    # Find the surface area of the pyramid by adding up the area of each half\n    surface_area = half_area + half_area + half_area\n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b + 2*s*s"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(d):\n    '''\n    This function takes a dictionary and returns True if it is empty and False otherwise.\n    '''\n    if len(d) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * catalan_number(n - 1)) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    n = num\n    catalan = 0\n    for i in range(1, n+1):\n        catalan += binomial(n, i)\n    return catalan\n\ndef binomial(n, k):\n    '''\n    This function returns the binomial coefficient C(n, k)\n    '''\n    if k > n:\n        k = n\n    f = 1\n    for i in range(1, k+1):\n        f *= (n-i+1)\n        f //= i\n    return f"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)*n\n\nprint(catalan_number(0))   # Output: 1\nprint(catalan_number(1))   # Output: 1\nprint(catalan_number(2))   # Output: 2\nprint(catalan_number(3))   # Output: 5"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 2*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return 0\n    elif num == 0:\n        return 1\n    else:\n        return (2*num-1) * catalan_number(num-1) // (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1) * catalan_number(n-1)\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    if n < 0:\n        return None\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + 4*catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    '''\n    Returns the nth Catalan number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = [0] * (2*num+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, 2*num+1):\n        catalan[i] = 0\n        for j in range(1, i+1):\n            catalan[i] += catalan[j-1]*catalan[i-j]\n    return catalan[2*num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (num + 1) // 2\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'(\\b\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w+\\s\\w"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[A-Za-z]*ly\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize a list to store the positions of the matches\n    positions = []\n    # Loop through each match and append its position to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n\n    # Use the re.finditer() function to find all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize a list to store the positions of the adverbs\n    adverb_positions = []\n\n    # Iterate over the matches and append their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all occurrences of the regular expression pattern in the given text\n    matches = re.findall(r'\\b\\w*ly\\b', text)\n    # Initialize an empty list to store the adverb positions\n    adverbs = []\n    # Iterate over the matches and append the position of the first match to the list\n    for match in matches:\n        adverbs.append(text.index(match))\n    # Return the list of adverb positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(f'Adverb found: \"{match}\"')\n        start = text.find(match)\n        end = start + len(match)\n        print(f'Positions: {start}, {end}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the adverb positions\n    positions = []\n\n    # Loop through all matches and extract the positions\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return the list of positions of adverbs ending with ly\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\bly\\b'\n    \n    # Find all non-overlapping occurrences of adverbs ending with ly in the given string\n    matches = re.findall(pattern, text)\n    \n    # Print the adverbs and their positions in the given string\n    for i, match in enumerate(matches):\n        print(\"Adverb found at position {}: {}\".format(i, match))\n    \n    # If no adverbs are found, print a message\n    if not matches:\n        print(\"No adverbs found in the given text\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n\n    # Define regex pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\w*s\\b'\n\n    # Search for adverbs using regex pattern in the given text\n    match = re.search(pattern, text)\n\n    # Check if match found and return its positions if found, else return None\n    if match:\n        return (match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    # Define a regular expression pattern to match adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Find all the occurrences of the pattern in the input text using re.findall() method\n    matches = re.findall(pattern, text)\n    # Iterate over the matches list and print the positions of the matches\n    for i, match in enumerate(matches):\n        print(f'Adverb at position {i}: {match}')"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Sort the items by their value (high to low) and by their index (low to high)\n    items = sorted(items, key=lambda x: (-x[1], x[0]))\n\n    # Use a min-heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is full, remove the smallest item\n        if len(heap) == n:\n            heapq.heappop(heap)\n\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n\n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a number n and returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n    # iterate through the items and add each item to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # if the heap size exceeds n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # convert the min heap to a list and return it\n    return list(min_heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Using a max heap to keep track of the n most expensive items\n    max_heap = []\n    for item in items:\n        # Add the item to the max heap if its price is greater than the price of the smallest item in the heap or if the heap is empty\n        if not max_heap or item[1] > max_heap[0][1]:\n            heapq.heappush(max_heap, item)\n        # Remove the smallest item from the heap if its price is less than the price of the smallest item in the heap\n        elif item[1] < max_heap[0][1]:\n            heapq.heappop(max_heap)\n        # If the heap has less than n items, add the item to the heap\n        if len(max_heap) == n:\n            heapq.heappush(max_heap, item)\n    \n    # Extract and return the n most expensive items from the max heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap)[0])\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min-heap to store the n most expensive items\n    min_heap = []\n    # Iterate over the items\n    for item in items:\n        # If the heap is not full, add the item\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # If the heap is full and the item is cheaper, remove the cheapest item\n        elif item < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, item)\n    # Return the n most expensive items\n    return min_heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min-heap with the n most expensive items\n    max_heap = []\n    for item in items:\n        if not max_heap or item > max_heap[0][0]:\n            heapq.heappush(max_heap, (item, 0))\n        elif item < max_heap[0][0]:\n            heapq.heappop(max_heap)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    # return the n most expensive items\n    return [item[0] for item in max_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes in a list of items and an integer n, and returns a list of the n most expensive items in the list.\n\n    Args:\n        items (list): A list of items to find the n most expensive items in.\n        n (int): The number of most expensive items to find.\n\n    Returns:\n        list: A list of the n most expensive items in the list.\n    \"\"\"\n    # Use a heap to store the n most expensive items\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # if the heap is full, remove the smallest element and add the current item\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        heapq.heappush(min_heap, item)\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a dataset of items and the number of items to find the most expensive items for.\n    The function returns a list containing the n most expensive items.\n    '''\n    # Sort the items based on their value in ascending order\n    items.sort(key=lambda x: x[1])\n\n    # Create a min heap of size n\n    min_heap = []\n\n    # Fill the min heap with the first n items\n    for i in range(n):\n        min_heap.append(items[i])\n\n    # Iterate through the remaining items in the dataset\n    for i in range(n, len(items)):\n        # If the current item's value is greater than the minimum value in the min heap, then update the min heap\n        if items[i][1] > min_heap[0][1]:\n            heapq.heapreplace(min_heap, items[i])\n\n    # Convert the min heap to a list and return it\n    return [item[0] for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items in the dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of the n largest items\n    min_heap = []\n    for item in items:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        elif item < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, item)\n    # Return the n largest items\n    return min_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if i == n:\n            new_list.extend(l[:n])\n            new_list.extend(l[n:])\n        else:\n            new_list.append(l[i])\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    This function takes a list and an integer n as input and returns a new list containing all the elements\n    in the original list except for the nth element, which is placed at the beginning of the new list.\n    '''\n    # Create a new list to hold the elements except for the nth element\n    new_list = l[:n]\n    \n    # Append the nth element to the new list\n    new_list.append(l[n])\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list\")\n        return None\n    \n    split_index = n - 1\n    return l[split_index:] + l[:split_index]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    return second_part + first_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n < 0 or n >= len(l):\n        return None\n\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Splitting the list at the nth element\n    mid = n // 2\n    left = l[:mid]\n    right = l[mid+1:]\n\n    # Adding the left part to the end of the right part of the list\n    l = left + right\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Find the index of the nth element\n    if n < 0:\n        raise ValueError(\"The index n must be non-negative.\")\n    elif n >= len(l):\n        raise ValueError(\"The index n is greater than the length of the list.\")\n    else:\n        index = l.index(n)\n    \n    # Split the list at the nth element\n    part1 = l[:index]\n    part2 = l[index:]\n    \n    # Add part1 to part2 and return the result\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_list = l[n:]\n    first_part = l[:n]\n    return first_part + split_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n\n    # Concatenate the two parts\n    result = first_part + second_part\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        return part1 + part2"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_x = tuple(listx)\n    return tuple_x"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Calculate the difference between largest and smallest values\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Finding the largest value in the list\n    max_num = max(nums)\n    \n    # Finding the smallest value in the list\n    min_num = min(nums)\n    \n    # Finding the difference between the two numbers\n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list must have at least two elements to find the difference between the largest and smallest.\"\n\n    max_val = max(nums)\n    min_val = min(nums)\n\n    return abs(max_val - min_val)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    elif len(nums) == 1:\n        return 0\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return \"List is empty\"\n\n    min_num = nums[0]\n    max_num = nums[0]\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n\n    return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n    # Return the difference between the first and second largest values\n    return nums[0] - nums[1]"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    perfect_squares_list = []\n    # Loop through all numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # If it is, add it to the list\n            perfect_squares_list.append(num)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables to store the sum and count of perfect squares\n    sum_of_squares = 0\n    count = 0\n\n    # Loop through the numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Calculate the square of the number\n        square = num**2\n\n        # Check if the square is a perfect square\n        if square == num:\n            sum_of_squares += square\n            count += 1\n\n    # Return the sum and count of perfect squares\n    return sum_of_squares, count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == perfect_square(square):\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers `a` and `b` and returns a list of all the perfect squares between them.\n\n    Parameters:\n    a (int): The lower limit of the range of perfect squares to find.\n    b (int): The upper limit of the range of perfect squares to find.\n\n    Returns:\n    list: A list of all perfect squares between `a` and `b`.\n    \"\"\"\n\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through all numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square is a perfect square\n        if i**0.5 == int(i**0.5):\n            perfect_squares_list.append(i**0.5)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two numbers as input and returns a list of perfect squares between them.\n    '''\n    # Check if the input is valid\n    if a > b:\n        a, b = b, a\n\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Iterate over all the numbers between a and b (inclusive)\n    for i in range(a, b+1):\n        # Calculate the square of the current number\n        square = i*i\n\n        # Check if the square is a perfect square\n        if square == i**2:\n            squares.append(square)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create an empty list to store perfect squares\n    squares = []\n    # loop through each number in the range of a to b (inclusive)\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num*num == num:\n            # if it is, add it to the list of perfect squares\n            squares.append(num)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a list to store perfect squares\n    squares = []\n\n    # Loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num == int(num**0.5)**2:\n            # If it is, add it to the list of perfect squares\n            squares.append(num)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two integers, a and b, and returns a list of all perfect squares between them.\n    '''\n    squares = []\n    for num in range(a, b + 1):\n        root = num ** 0.5\n        if root.is_integer():\n            squares.append(int(root))\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i ** 2 == a:\n            print(i)\n        elif i ** 2 == b:\n            print(i)\n        elif i ** 2 > a and i ** 2 < b:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x ** 2 + y ** 2)\n    theta = cmath.phase(x + y * 1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    rect_x = r*cmath.cos(theta)\n    rect_y = r*cmath.sin(theta)\n    return rect_x, rect_y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n        x: float\n            The radius of the circle in polar coordinates.\n        y: float\n            The angle of the circle in polar coordinates.\n\n    Returns:\n        x: float\n            The x-coordinate of the point in rectangular coordinates.\n        y: float\n            The y-coordinate of the point in rectangular coordinates.\n\n    '''\n\n    # Convert polar coordinates to rectangular coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(y)\n\n    # Return the rectangular coordinates\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n        r (float): The radius of the circle.\n        theta (complex): The angle of the point on the circle.\n    \n    Returns:\n        tuple: A tuple containing the x and y coordinates of the point in the rectangular coordinate system.\n    \"\"\"\n\n    # Convert angle from degrees to radians\n    theta = theta * (cmath.pi / 180)\n\n    # Calculate x and y coordinates using polar formulas\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Return tuple containing x and y coordinates\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): radius\n    theta (float): angle in radians\n\n    Returns:\n    (float, float): rectangular coordinates\n\n    \"\"\"\n\n    # Convert angle to degrees\n    theta = cmath.phase(theta) * 180 / cmath.pi\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n    \n    # Swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Get the length of the list\n    length = len(newList)\n    \n    # Check if the list has at least two elements\n    if length < 2:\n        return newList\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # interchange the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least 2 elements\n    if len(newList) < 2:\n        print(\"The list must have at least 2 elements.\")\n    else:\n        # Interchange the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        print(\"The new list is:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # check if the input is a list\n    if isinstance(newList, list):\n        # swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        print(\"Error: Input must be a list!\")\n        return None"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        # Interchanging the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The list must have at least two elements to swap.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Finding the length of the list\n    length = len(newList)\n\n    # Swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    coeff = 1\n    sum_of_coeffs = 0\n\n    for i in range(1, k+1):\n        coeff = coeff * (n - i + 1) // i\n        sum_of_coeffs += coeff\n\n    return sum_of_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return n * binomial_Coeff(n-1,k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n == 0 or k == 0 or k > n:\n        return 0\n\n    num = 1\n    den = 1\n\n    for i in range(1, k + 1):\n        num *= (n - i + 1) // i\n        den *= i\n\n    return num // den"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n\n    a = 1\n    b = n\n    c = 1\n    d = 1\n\n    for i in range(2, k+1):\n        a = a * (n-i+1) // i\n        b = b * i // (n-i+1)\n        c = c * (n-i+2) // i\n        d = d * (n+i-1) // i\n\n    return a + b + c + d"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Calculate the binomial coefficient using math.comb() function\n    coeff = math.comb(n, k)\n\n    # Calculate the product of consecutive binomial co-efficients and return the result\n    return coeff * (n - k + 1) / k"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+(\\.\\d+){3}$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regular expression pattern to match any sequence of one or more zeroes followed by an integer or dot\n    pattern = r'(?:0+)(\\d{1,2}|25[0-5]|2[0-4]\\d)(?:\\.\\d{1,3}){3}'\n    # use re.match to find a match in the ip address string\n    match = re.match(pattern, ip)\n    # if there is a match, return the non-zeroed-out ip address\n    if match:\n        return str(int(match.group(1)) + 1)\n    # if there is no match, return the original ip address as is\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regex to find all leading zeroes in the ip address\n    pattern = r'^\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+:\\d+$'\n    matches = re.findall(pattern, ip)\n\n    # Loop through all the matches and remove the leading zeroes\n    for match in matches:\n        ip = ip.replace(match, match.replace(':', '.'))\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Remove leading zeroes from each part of the ip address\n    ip = re.sub(r'^\\d{1,3}\\.0+\\.\\d{1,3}\\.0+', '', ip)\n    ip = re.sub(r'^\\d{1,3}\\.0+\\.\\d{1,3}', '', ip)\n    ip = re.sub(r'^\\d{1,3}\\.0+', '', ip)\n    ip = re.sub(r'^0+', '', ip)\n\n    # Return the cleaned ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Regular expression pattern to match leading zeros\n    pattern = re.compile(r'^0+')\n    \n    # Return the matched string after removing leading zeros\n    return pattern.sub('', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    match = re.match(pattern, ip)\n    \n    if match:\n        ip_list = ip.split('.')\n        for i, num in enumerate(ip_list):\n            if num == '0':\n                ip_list[i] = ''\n        \n        new_ip = '.'.join(ip_list)\n        return new_ip\n    else:\n        return \"Invalid IP address\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each part of the ip address\n    ip = re.sub(r'^\\d+(\\.|\\b)', '', ip)\n    ip = re.sub(r'(\\.|\\b)\\d+(\\.|\\b)', r'\\1\\2', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Replace all zeros with x\n    ip = re.sub('^0+', 'x', ip)\n    # Remove x from the beginning of the ip address\n    return ip.lstrip('x')"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    if even_num is not None and odd_num is not None:\n        return odd_num - even_num\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd_diff = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_odd_diff += list1[i]\n        elif list1[i] % 2!= 0:\n            even_odd_diff -= list1[i]\n    return even_odd_diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Check if the list has at least two elements\n    if len(list1) < 2:\n        print(\"The list must have at least two elements.\")\n        return\n\n    # Find the first even and first odd number\n    first_even = next(num for num in list1 if num % 2 == 0)\n    first_odd = next(num for num in list1 if num % 2!= 0)\n\n    # Calculate the difference\n    diff = first_even - first_odd\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return \"List is empty!\"\n    if len(list1) == 1:\n        return \"List has only one element!\"\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even = list1[i]\n        else:\n            odd = list1[i]\n    if even == 0 and odd == 0:\n        return \"Both elements are even or odd.\"\n    else:\n        return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Check if the list is not empty\n    if len(list1) == 0:\n        print(\"The list is empty.\")\n        return\n    \n    # Find the first even number\n    even_index = None\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n    \n    # Check if the list contains even numbers\n    if even_index is None:\n        print(\"The list does not contain even numbers.\")\n        return\n    \n    # Find the first odd number\n    odd_index = None\n    for i in range(even_index, len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n    \n    # Check if the list contains odd numbers\n    if odd_index is None:\n        print(\"The list does not contain odd numbers.\")\n        return\n    \n    # Calculate the difference\n    diff = list1[even_index] - list1[odd_index]\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                return even_num - num\n        elif num % 2 == 1:\n            if odd_num is None:\n                odd_num = num\n            else:\n                return odd_num - num\n    return 0"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the list contains any even or odd number\n    has_even = False\n    has_odd = False\n    for num in list1:\n        if num % 2 == 0:\n            has_even = True\n        else:\n            has_odd = True\n        if has_even and has_odd:\n            break\n\n    # Calculate the difference between the first even and first odd numbers\n    diff = 0\n    if has_even and has_odd:\n        diff = list1[0] - list1[1]\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the difference between the first even and the first odd number.\n    \"\"\"\n    even_num = None\n    odd_num = None\n    for i in lst:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    if even_num is None or odd_num is None:\n        return \"No even or odd numbers in the list.\"\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    return abs(even_num - odd_num)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    :param str1: A binary number represented as a string.\n    :param str2: Another binary number represented as a string.\n    :return: The minimum number of swaps required to convert str1 to str2.\n    \"\"\"\n\n    # Convert both strings to lists of characters\n    binary1 = list(bin(int(str1, 2))[2:])\n    binary2 = list(bin(int(str2, 2))[2:])\n\n    # Initialize the swaps counter and the swapped characters\n    swaps = 0\n    swapped_chars = set()\n\n    # Iterate through the characters of both binary strings\n    for i in range(len(binary1)):\n        # Check if the characters are the same and add a swap if they are not swapped already\n        if binary1[i] == binary2[i] and (binary1[i], binary2[i]) not in swapped_chars:\n            swaps += 1\n            swapped_chars.add((binary1[i], binary2[i]))\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * 2 for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(2):\n            if j == 0:\n                if str1[i-1] == '0':\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][1]\n            else:\n                if str1[i-1] == '0':\n                    dp[i][j] = min(dp[i-1][0], dp[i-1][1]) + 1\n                else:\n                    dp[i][j] = dp[i-1][0]\n    min_swaps = dp[n][1]\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n\n    # Find the length of the binary numbers\n    length1 = len(str1)\n    length2 = len(str2)\n\n    # Initialize a list to store the swaps required for each digit\n    swaps_list = [0] * length2\n\n    # Loop through the binary numbers and calculate the swaps required for each digit\n    for i in range(length1):\n        if str1[i]!= str2[i]:\n            # If the digits are not equal, calculate the swaps required for the digit to convert it to the other digit\n            diff = int(str1[i]) - int(str2[i])\n            swaps_list[diff] += 1\n\n    # Initialize the minimum swaps required to infinity\n    min_swaps = float('inf')\n\n    # Loop through the list and find the minimum number of swaps required to convert one binary number to another\n    for i in range(length2):\n        if swaps_list[i] < min_swaps:\n            min_swaps = swaps_list[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings str1 and str2 as input and returns the minimum number of swaps required to convert one to the other.\n\n    For example, if str1 = \"1011\" and str2 = \"1100\", the output should be 3 because the minimum number of swaps required is to change the second '1' to a '0' and the third '1' to a '0'.\n\n    The function should use the following rules:\n    - Both strings must have the same length.\n    - If the length of the strings is not a power of 2, then the function should return -1.\n    - If the strings are of the same length, then the function should return 0.\n    - If the strings have different lengths, then the function should iterate over all pairs of bits in the strings and swap the bits if they are different.\n    - The swaps are done in the order in which they occur in the strings.\n    \"\"\"\n\n    # check if the lengths of the strings are the same\n    if len(str1)!= len(str2):\n        return -1\n\n    # check if the lengths of the strings are powers of 2\n    if not (len(str1) & (len(str1) - 1)) == 0:\n        return -1\n\n    # count the number of bits in the strings\n    num_bits = len(str1) * 4\n\n    # initialize the result variable\n    min_swaps = 0\n\n    # iterate over all pairs of bits in the strings\n    for i in range(num_bits):\n        # check if the bits are different\n        if str1[i % len(str1)]!= str2[i % len(str1)]:\n            # increment the result variable\n            min_swaps += 1\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    \n    # Initialize variables to keep track of swaps and the indices of the characters in str1 and str2\n    swaps = 0\n    i = j = 0\n    \n    # Loop through each character in str1 and str2\n    while i < len(str1) and j < len(str2):\n        \n        # If the characters are not the same, swap them and increment swaps\n        if str1[i]!= str2[j]:\n            str1[i], str1[j] = str1[j], str1[i]\n            str2[i], str2[j] = str2[j], str2[i]\n            swaps += 1\n        \n        # Increment both indices\n        i += 1\n        j += 1\n    \n    # Return the final swaps count\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # create a list of tuples to store the swaps required for each bit position\n    swaps = []\n\n    # iterate through each bit position and find the number of swaps required to convert num1 and num2\n    for i in range(32):\n        if num1 & 1!= num2 & 1:\n            # swap bits if bits are different\n            num1 ^= 1\n            num2 ^= 1\n            swaps.append((i, 1))\n        num1 >>= 1\n        num2 >>= 1\n\n    # find the minimum number of swaps required\n    min_swaps = min(swaps, key=lambda x: x[1])[0]\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # Convert the two binary numbers into their respective lists of digits\n    num1 = [int(digit) for digit in str1]\n    num2 = [int(digit) for digit in str2]\n\n    # Find the length of the shorter binary number\n    length = min(len(num1), len(num2))\n\n    # Initialize variables to keep track of swaps and the current position in the binary number\n    swaps = 0\n    i = 0\n\n    # Iterate through the binary numbers, swapping the digits as required\n    while i < length:\n        if num1[i]!= num2[i]:\n            # Swap the digits\n            num1[i], num2[i] = num2[i], num1[i]\n            # Increment the swap counter\n            swaps += 1\n        i += 1\n\n    # If the number of swaps is greater than 0, return it\n    if swaps > 0:\n        return swaps\n    else:\n        return -1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function counts the minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Initialize variables for swaps and length of binary strings\n    swaps = 0\n    n1 = len(str1)\n    n2 = len(str2)\n\n    # Reverse the binary strings to convert to decimal form\n    dec_str1 = int(str1, 2)\n    dec_str2 = int(str2, 2)\n\n    # Calculate the number of swaps required to convert from decimal form to binary form\n    while dec_str1!= dec_str2:\n        if dec_str1 > dec_str2:\n            dec_str1 = dec_str1 - dec_str2\n            swaps += 1\n        else:\n            dec_str2 = dec_str2 - dec_str1\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the two binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to keep track of the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Iterate through all possible pairs of bits and count the number of swaps required to convert one to the other\n    for i in range(32):\n        # Get the binary string representation of the current number by shifting the original number to the left by i bits\n        bit1 = str(num1 >> i)\n\n        # Get the binary string representation of the current number by shifting the target number to the left by i bits\n        bit2 = str(num2 >> i)\n\n        # Compare the two binary strings and count the number of swaps required to convert one to the other\n        swaps = 0\n        for j in range(len(bit1)):\n            if bit1[j]!= bit2[j]:\n                swaps += 1\n\n        # Update the minimum number of swaps if the current number has less swaps than the previous minimum\n        if swaps < min_swaps:\n            min_swaps = swaps\n\n    # Return the minimum number of swaps required to convert one binary number to another\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the strings to binary\n    num1 = int(str1,2)\n    num2 = int(str2,2)\n    \n    # Calculate the number of swaps required to convert num1 to num2\n    swaps = 0\n    while num1!= num2:\n        if num1 > num2:\n            num1 = (num1 - num2) // 2\n            swaps += 1\n        else:\n            num2 = (num2 - num1) // 2\n            swaps += 1\n            \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the total size of the tuple in bytes\n    total_size = sys.getsizeof(tuple_list)\n\n    # Convert the total size to megabytes\n    total_size_mb = total_size / 1024 / 1024\n\n    # Return the result as a string\n    return \"{:.2f} MB\".format(total_size_mb)"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Calculate the size of the tuple in bytes using the sys.getsizeof() function\n    size_in_bytes = sys.getsizeof(tuple_list)\n    \n    # Return the size of the tuple in bytes\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    # Find the total number of elements in the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Initialize variables to keep track of the index of the first element of each array\n    i = 0\n    j = 0\n\n    # Loop through the arrays until we find k elements in each array\n    while i < n1 and j < n2 and k > 0:\n        # Check which of the two arrays has the smallest element at the current index\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the elements are equal, keep track of the index and decrement k\n            k -= 1\n            i += 1\n            j += 1\n\n    # If we found k elements in each array, return the element at the first index in each array\n    if k == 0:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and an integer k as input and returns the kth smallest element from both arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # Found a duplicate element, move both pointers to find the next occurrence\n            i += 1\n            j += 1\n    \n    # If we reached the end of one of the arrays, the remaining elements must be in the other array\n    if i == len(arr1):\n        return arr2[j]\n    elif j == len(arr2):\n        return arr1[i]\n    \n    # If we reached here, we found the kth smallest element\n    return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            \n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    if k > len(arr1) + len(arr2):\n        return None\n\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= len(arr1) - i\n            j += 1\n\n    if k == 1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is greater than the sum of the lengths of the two arrays\")\n\n    # Find the indices of kth element in arr1 and arr2\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    # If i reaches the end of arr1, the kth element is in arr2[j:j+k-i]\n    return arr2[j:j+k-i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) < len(arr2):\n        arr1, arr2 = arr2, arr1\n    lo, hi = 0, len(arr1) - 1\n    while lo <= hi and k > 0:\n        mid = (lo + hi) // 2\n        if arr1[mid] < arr2[mid]:\n            if k <= mid:\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        else:\n            if k <= len(arr2) - mid - 1:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        k -= 1\n    return arr1[lo] if lo < len(arr1) else None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    # Compare elements of the first array\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n            \n    # If we have not reached k, kth element is in the remaining part of either array\n    if i < k:\n        return find_kth(arr1[i:], arr2, k-i)\n    elif j < k:\n        return find_kth(arr1, arr2[j:], k-j)\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n\n    if i == len(arr1) and j < k:\n        return arr2[j]\n    elif i < k and j == len(arr2):\n        return arr1[i]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    n = len(arr1)\n\n    while i < n and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    if i < n:\n        return arr1[i]\n    else:\n        return arr2[j - 1]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    digits = []\n    while num > 0:\n        digits.append(num % 10)\n        num //= 10\n    total = sum(digits[::-1])\n    if num == total**len(digits):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(number)]\n    # Calculate the sum of the cube of each digit\n    cubed_digits = [digit ** 3 for digit in digits]\n    # Calculate the sum of the cubes of the digits\n    cube = sum(cubed_digits)\n    # Check if the number is equal to the cube\n    if number == cube:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        sum_of_digits += digit ** 3\n        n //= 10\n    if number == sum_of_digits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        num = number\n        sum = 0\n        while num > 0:\n            digit = num % 10\n            sum += digit ** 3\n            num //= 10\n        return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = number\n    length = len(str(num))\n    total = 0\n    power = 0\n\n    while num > 0:\n        digit = num % 10\n        total += digit ** power\n        power += 1\n        num //= 10\n\n    return length == power and num == total\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # Convert the input number to a list of digits\n    digits = [int(digit) for digit in str(number)]\n\n    # Calculate the sum of the cubes of the digits\n    cube_sum = sum([digit**3 for digit in digits])\n\n    # Compare the calculated sum with the original number\n    if number == cube_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit**3\n            temp //= 10\n        if number == sum:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum = 0\n    temp = num_str[::-1]\n    for digit in temp:\n        sum += int(digit) ** len(temp)\n    if num == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(number):\n    num_str = str(number)\n    num_sum = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        digit = int(digit)\n        num_sum += digit ** power\n\n    return num_sum == number\n\nnumber = int(input(\"Enter a number: \"))\nresult = is_armstrong(number)\n\nif result:\n    print(number, \"is an Armstrong number\")\nelse:\n    print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n\n    # Calculate the sum of the cubes of each digit in the number\n    sum_of_cubes = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_cubes += digit ** 3\n        temp //= 10\n\n    # Check if the sum of the cubes of each digit is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        total += i\n    average = total/number\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    print(\"Sum of first\", number, \"natural numbers is\", sum)\n    print(\"Average of first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if not isinstance(number, int) or number < 0:\n        raise ValueError('Invalid input. Please enter a non-negative integer.')\n    \n    sum = 0\n    count = 0\n    \n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # calculating sum of first n natural numbers\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n\n    # calculating average of first n natural numbers\n    average = sum / number\n\n    # printing the sum and average\n    print(\"The sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"The average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"The sum of first {} natural numbers is: {}\".format(number, sum))\n    print(\"The average of first {} natural numbers is: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    for i in range(1, number+1):\n        sum_of_numbers += i\n        count += 1\n    average = sum_of_numbers / count\n    return sum_of_numbers, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number n as input and returns True if it is even and False otherwise.\n    \"\"\"\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        print(n,\"is even\") \n    else : \n        print(n,\"is odd\") "
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is Even\")\n    else:\n        print(n, \"is Odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the dictionary to find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return \"No repeated character found in the string.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize variables\n    char_dict = {}\n    first_repeated = \"\"\n    \n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_dict:\n            # if it is, check if it is the first repeated character\n            if first_repeated == \"\":\n                first_repeated = char\n            # if it is not the first repeated character, return it\n            else:\n                return char\n        # if the character is not in the dictionary, add it to the dictionary\n        else:\n            char_dict[char] = True\n    \n    # if there are no repeated characters, return an empty string\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # Otherwise, add the character to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Initialize a variable to store the first repeated character\n    repeated_char = None\n\n    # Iterate over each character in the dictionary\n    for char, count in freq.items():\n        # If the character has a frequency of 2, update the repeated_char variable\n        if count == 2:\n            repeated_char = char\n\n    # Return the first repeated character or None if no repeated character was found\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it and set its frequency to 1\n        else:\n            freq_dict[char] = 1\n\n    # loop through the dictionary to find the first repeated character\n    for char, count in freq_dict.items():\n        if count == 1:\n            return char\n\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    # Initialize variables\n    char_set = {}\n    first_repeated_char = None\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not in the set of characters, add it\n        if char not in char_set:\n            char_set[char] = 1\n        # If the character is already in the set, update the index of the first repeated character\n        else:\n            if first_repeated_char is None:\n                first_repeated_char = char\n            elif char < first_repeated_char:\n                first_repeated_char = char\n    \n    # Return the first repeated character, or None if there is none\n    return first_repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the character\n        if char in freq:\n            return char\n\n        # If the character is not in the dictionary, add it to the dictionary with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if len(str(i)) == len(str(i**2)):\n            lucid.append(i**2)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(1, n):\n        lucid_num = num\n        while num > 1 and num % lucid_num == 0:\n            num //= lucid_num\n        if num == 1:\n            lucid_numbers.append(lucid_num)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        lucid_numbers.append(i*(3*i - 1) // 2)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = [i for i in range(n+1) if sum(int(d) for d in str(i)) % 2 == 0]\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    \n    while num <= n:\n        if is_lucid(num):\n            lucid_numbers.append(num)\n        num += 1\n    \n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    return all(num % i!= 0 for i in range(2, int(num**0.5)+1))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            ludic_list.append(i)\n        elif i % 2 == 0 and i % 3 == 0:\n            ludic_list.append(i)\n        elif i % 2 == 0 or i % 3 == 0:\n            ludic_list.append(i)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            ludic_numbers.append(2*i)\n        else:\n            ludic_numbers.append(3*i-1)\n    return ludic_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse the words and join them with spaces\n    reversed_words =''.join(words[::-1])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into a list of words\n    words = s.split()\n    # reverse the list of words\n    reversed_words = words[::-1]\n    # join the reversed words back into a string\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # Convert the string to a list of words\n    words = s.split()\n\n    # Reverse the list of words\n    words.reverse()\n\n    # Join the reversed words back into a string separated by spaces\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string with spaces\n    reversed_s =''.join(reversed_words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    \n    for word in words:\n        reversed_words.append(word[::-1])\n    \n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_sentence =''.join(reversed_words)\n    return reversed_sentence"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n    # Check if the given number is equal to 2 or 3\n    if num == 2 or num == 3:\n        return True\n    # Check if the given number is divisible by 2 or 3\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    # Check for remaining odd numbers up to the square root of the given number\n    for i in range(5, int(num**0.5)+1, 6):\n        if num % i == 0 or num % (i+2) == 0:\n            return False\n    # If the loop completes without finding a factor, the given number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # Initialize a boolean variable to keep track of whether the number is prime or not\n    is_prime = True\n    \n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Loop from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # If the number is divisible by any number from 2 to the square root of the number, it is not prime\n        if num % i == 0:\n            is_prime = False\n            break\n    \n    # Return True if the number is prime, False otherwise\n    return is_prime"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function checks if the given integer is a prime number or not.\n    '''\n    if is_prime(num):\n        return f\"{num} is a prime number.\"\n    else:\n        return f\"{num} is not a prime number.\""
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number\")\nelse:\n    print(num, \"is not a prime number\")"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n\n    # Convert degree to radians\n    radian = degree * math.pi / 180\n\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes a degree value as input and returns the corresponding value in radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n\n    # convert degree to radians\n    radians = degree * math.pi / 180\n\n    # return the result\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    This function takes in a degree value and returns the corresponding value in radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    # search for all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # initialize an empty list to store the matched substrings\n    literals = []\n    \n    # iterate over the matches and extract the substrings and their indices\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        literals.append((match, start, end))\n    \n    # return the list of matched substrings\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        literals.append((literal, start_index, end_index))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes in two parameters: text and pattern.\n    text: The string to search in.\n    pattern: The regular expression pattern to search for.\n\n    The function uses the re.search() function to search for the pattern in the text.\n    If a match is found, the function returns the matching subtring, a start index, and an end index.\n    If no match is found, the function returns None, None, None.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    else:\n        match = matches[0]\n        start_index = text.index(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use the re.findall function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the results\n    results = []\n    \n    # Loop through each match found\n    for match in matches:\n        # Use the start() and end() methods to get the start and end indices of the match\n        start = match.start()\n        end = match.end()\n        # Use the sub() method to extract the literal string from the match and append it to the results list\n        results.append(match.sub('', text[start:end]))\n        \n    # Return the list of literal strings found\n    return results"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return 2 * bell_Number(n-1) - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        bell = n*bell_Number(n-1)\n        return bell%1000000007"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is:\", bell_Number(n))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell number.\n    \"\"\"\n\n    if n < 0: \n        return None\n\n    elif n == 0: \n        return 0\n\n    elif n == 1: \n        return 1\n\n    else: \n        bell = 0\n        for i in range(1, n+1): \n            bell = bell + bell_Number(i-1)\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(n):\n        bell += ((2**i)*(2**i))/(i+1)\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Initialize the bell number as 1\n    bell = 1\n    # Initialize the count as 1\n    count = 1\n    \n    # Iterate till the count is equal to n\n    while count <= n:\n        # Calculate the next bell number\n        bell += bell * 2 * count\n        # Increment the count\n        count += 1\n    \n    # Return the nth bell number\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of the Bell number is:\", bell_Number(n))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize the index of the k'th element\n    kth_index = L-1\n    \n    # Loop through the list, starting from the k'th element\n    for i in range(kth_index, len(list1)):\n        # Swap the element at the current index with the element at the next index\n        list1[i], list1[i+1] = list1[i+1], list1[i]\n    \n    # Return the modified list without the k'th element\n    return list1[0:kth_index]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Check if the k value is valid\n    if L < 1 or L > length:\n        return \"Invalid k value\"\n    else:\n        # Remove the kth element\n        list1.pop(L-1)\n        # Return the modified list\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1.remove(list1[L-1])\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:L] + list1[L+1:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list to store the modified list\n    new_list = []\n    # initialize a counter for the position of the kth element\n    k = 0\n    # iterate through the list\n    for i in range(len(list1)):\n        # if the counter is equal to L, move to the next element\n        if k == L:\n            k = 0\n            new_list.append(list1[i])\n        # if the counter is not equal to L, append the element to the new list\n        else:\n            new_list.append(list1[i])\n            k += 1\n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    for i in range(len(list2)-1, -1, -1):\n        if i == L-1:\n            list2.pop(i)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a new list with the same elements\n    but the k'th element removed.\n    '''\n    # Create a new list to store the elements of the original list but without the k'th element\n    new_list = list1[:k-1] + list1[k:]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # copy the list\n    list2 = list(list1)\n    # create a new list to store the k'th element\n    kth_element = []\n    # initialize the index\n    i = 0\n    # loop through the list\n    for item in list2:\n        if i == L-1:\n            kth_element.append(item)\n            list2.remove(item)\n            i = 0\n        else:\n            i += 1\n    # return the new list\n    return list2 + kth_element"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if k >= len(list1):\n        return []\n    else:\n        list2 = []\n        for i in range(len(list1)):\n            if i!= k - 1:\n                list2.append(list1[i])\n        return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    col_max = 0\n    for i in range(n):\n        if test_list[0][i] > col_max:\n            col_max = test_list[0][i]\n    return col_max"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    This function takes a matrix represented as a list of lists and returns the maximum value of the Nth column.\n    '''\n    # Get the length of the list\n    n = len(test_list)\n    # Initialize a variable to store the maximum value\n    max_val = float('-inf')\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Get the value of the Nth column in the i-th row\n        col_val = test_list[i][N-1]\n        # Update the maximum value if the current value is greater\n        if col_val > max_val:\n            max_val = col_val\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    max_row_length = max([len(row) for row in test_list])\n\n    # Initialize an empty list to store the max values of each column\n    max_values = []\n\n    # Iterate over the columns of the matrix\n    for i in range(max_row_length):\n        # Initialize a counter to keep track of the number of rows containing that value\n        count = 0\n\n        # Iterate over the rows of the matrix\n        for row in test_list:\n            # If the value at the current position is then'th column, increment the counter\n            if row[i] == N:\n                count += 1\n\n        # Calculate the maximum value of then'th column\n        max_value = max(test_list, key=lambda x: x[i])\n\n        # If the maximum value is greater than the current maximum value, update the list of max values\n        if count > 0 and max_value[i] > max_values[-1]:\n            max_values.append(max_value[i])\n\n    # Return the list of maximum values of each column\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for row in test_list:\n        if len(row) > N:\n            if row[N] > max_value:\n                max_value = row[N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the maximum value of then'th column.\n    \"\"\"\n    col_max = []\n    for row in matrix:\n        col_max.append(max(row[N-1], col_max))\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N <= len(row):\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_val = test_list[0][N-1]  # Initialize the max value to be the value of then'th column\n\n    # Loop through the matrix and update the max value if a greater value is found\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # check if the list is a list of lists\n    if not isinstance(test_list, list) or not all(isinstance(row, list) for row in test_list):\n        raise ValueError(\"Input must be a list of lists.\")\n    \n    # check if N is a positive integer\n    if not isinstance(N, int) or N <= 0:\n        raise ValueError(\"N must be a positive integer.\")\n    \n    # check if the number of rows is greater than zero\n    if len(test_list) == 0:\n        raise ValueError(\"The input matrix is empty.\")\n    \n    # check if the number of columns is greater than zero\n    num_cols = len(test_list[0])\n    if num_cols == 0:\n        raise ValueError(\"The input matrix has no columns.\")\n    \n    # check if N is less than or equal to the number of columns\n    if N > num_cols:\n        raise ValueError(\"N must be less than or equal to the number of columns.\")\n    \n    # find the max value of then'th column in each row of the matrix\n    max_vals = [max(row[N-1]) for row in test_list]\n    \n    # return the maximum value of then'th column in the matrix\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize variables for row count and max value of then'th column\n    row_count = len(test_list)\n    max_val = None\n    \n    # Loop through each row of the matrix\n    for row in test_list:\n        # Check if the current row's length is equal to then'th column\n        if len(row) == N:\n            # If it is, compare the current value of then'th column with the max value found so far\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    \n    # Return the max value of then'th column\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        first_element = sublist[0]\n        second_element = sublist[1]\n        result.append([first_element, second_element])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values in the list.\n    '''\n    # initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # loop through each value in the list\n    for value in test_list:\n        # add the value to the cumulative sum\n        cum_sum += value\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cumulative_sum = []\n    \n    # Iterate through each tuple in the list\n    for tuple in test_list:\n        # Iterate through each value in the tuple\n        for value in tuple:\n            # Append the value to the cumulative sum list\n            cumulative_sum.append(value)\n            \n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for tup in test_list:\n        for num in tup:\n            total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # Iterate through the tuple list and add each value to the cumulative sum\n    for val in test_list:\n        cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n\n    # Loop through each value in the list\n    for value in test_list:\n        # Add the value to the cumulative sum\n        cumulative_sum += value\n\n    # Return the cumulative sum\n    return cumulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values in the list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple and add it to the cumulative sum\n        for val in tup:\n            cumulative_sum += val\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_vals = []\n    # Iterate over the tuples in the input tuple\n    for tup in nums:\n        # Calculate the average value for each tuple\n        avg = sum(tup)/len(tup)\n        # Add the average value to the list of average values\n        avg_vals.append(avg)\n    # Return the list of average values\n    return avg_vals"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for num_tuple in nums:\n        # Initialize a variable to store the sum of the numbers in the tuple\n        sum = 0\n\n        # Loop through each number in the tuple\n        for num in num_tuple:\n            # Add the number to the sum\n            sum += num\n\n        # Divide the sum by the length of the tuple to get the average value\n        average = sum / len(num_tuple)\n\n        # Append the average value to the averages list\n        averages.append(average)\n\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    result = []\n    for num in nums:\n        total += sum(num)\n        count += 1\n        avg = total/count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the average values\n    averages = []\n\n    # Loop through each tuple in the list\n    for num in nums:\n        # Calculate the average value for the tuple\n        avg = sum(num) / len(num)\n        # Append the average value to the list\n        averages.append(avg)\n\n    # Return the list of average values\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for x in num:\n            sum += x\n        avg = sum / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        avg = total / len(num_tuple)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = sum(tup)\n        averages.append(total / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n        averages.append(total/len(nums[i]))\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # iterate over the elements of both tuples and perform modulo operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] % test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be equal.\")\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 1\n\n    # Initialize variables for steps and jumps required\n    curr_step = 0\n    jumps_required = 0\n\n    # Iterate through steps\n    while curr_step < steps:\n        if d < 0:\n            # If d is negative, no more steps to reach origin\n            break\n\n        # Move in d direction\n        d -= 1\n        curr_step += 1\n\n        # Increment jumps required\n        jumps_required += 1\n\n    return jumps_required"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes two arguments: steps and d. steps is the number of steps required to reach the point (d, 0) from origin, \n    and d is the distance from origin to reach that point.\n    The function returns the minimum number of jumps required to reach the point (d, 0) from origin.\n    '''\n    # Initialize variables for the current and next position\n    current = (0, 0)\n    next_pos = (d, 0)\n    # Initialize variables for the steps and the minimum jumps required\n    steps_taken = 0\n    min_jumps = 0\n    # Loop until we reach (d, 0) from origin\n    while current[0] <= d:\n        # Calculate the number of steps we have to take to reach the next position\n        steps_taken += abs(next_pos[0] - current[0]) + 1\n        # Check if we have reached (d, 0) from origin or if we have taken more steps than required\n        if current[0] == d and steps_taken > steps:\n            # If we have taken more steps than required, update the minimum jumps required\n            if min_jumps == 0 or steps_taken < min_jumps:\n                min_jumps = steps_taken\n            break\n        # Update the current position to the next position\n        current = next_pos\n        # Calculate the next position\n        if next_pos[0] == d:\n            next_pos = (d, 0)\n        else:\n            next_pos = (next_pos[0] + next_pos[0], next_pos[1] + 1)\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    def can_reach_origin(i, j, steps, d): \n        if i == 0 and j == d: \n            return True \n        elif i < 0 or i >= len(steps) or j < 0 or j >= len(steps[0]) or steps[i][j] > 0: \n            return False \n        else: \n            return can_reach_origin(i-1, j, steps, d) or can_reach_origin(i, j-1, steps, d)\n\n    count = 0\n    for i in range(len(steps)): \n        for j in range(len(steps[0])): \n            if can_reach_origin(i, j, steps, d): \n                count += 1\n                steps[i][j] = 0\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n    steps (int): The number of steps required to reach (d, 0) from origin.\n    d (int): The distance to reach (d, 0) from origin.\n\n    Returns:\n    int: The minimum number of jumps required.\n    \"\"\"\n\n    # Calculate the number of steps required to reach the point (d, 0) from origin\n    steps_to_target = abs(d) * steps\n\n    # Calculate the minimum number of jumps required\n    min_jumps = steps_to_target // 2 + 1\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n    \n    # loop until we reach the point (d, 0)\n    while i <= steps:\n        # if we reach the point (d, 0), increment count and move on to the next point\n        if i == steps and j == 0:\n            count += 1\n            i += 1\n            j += 1\n            continue\n        \n        # move down if we reach the point (d-1, 0)\n        if j == 0:\n            i += 1\n            j += 1\n            continue\n        \n        # move right if we reach the point (d, d)\n        if i == steps and j == d:\n            i += 1\n            j += 1\n            continue\n        \n        # move up if we reach the point (d, d-1)\n        if j == d:\n            i += 1\n            j -= 1\n            continue\n        \n        # move left if we reach the point (d-1, d)\n        if i == steps and j == d-1:\n            i += 1\n            j -= 1\n            continue\n        \n        # move down if we reach the point (d-1, d-1)\n        if j == d-1:\n            i += 1\n            j -= 1\n            continue\n        \n        # move left if we reach the point (d-1, d-2)\n        if i == steps and j == d-2:\n            i += 1\n            j -= 1\n            continue\n        \n        # move right if we reach the point (d, d-2)\n        if i == steps and j == d-2:\n            i += 1\n            j += 1\n            continue\n        \n        # move down if we reach the point (d-1, d-2)\n        if j == d-2:\n            i += 1\n            j -= 1\n            continue\n        \n        # move up if we reach the point (d, d-3)\n        if j == d-3:\n            i += 1\n            j -= 1\n            continue\n        \n        # move right if we reach the point (d, d-3)\n        if i == steps and j == d-3:\n            i += 1\n            j += 1\n            continue\n        \n        # move left if we reach the point (d-1, d-3)\n        if i == steps and j == d-3:\n            i += 1\n            j -= 1\n            continue\n        \n        # move up if we reach the point (d, d-4)\n        if j == d-4:\n            i += 1\n            j -= 1\n            continue\n        \n        # move right if we reach the point (d, d-4)\n        if i == steps and j == d-4:\n            i += 1\n            j += 1\n            continue\n        \n        # move left if we reach the point (d-1, d-4)\n        if i == steps and j == d-4:\n            i += 1\n            j -= 1\n            continue\n        \n        # move down if we reach the point (d-1, d-5)\n        if j == d-5:\n            i += 1\n            j -= 1\n            continue\n        \n        # move up if we reach the point (d, d-6)\n        if j == d-6:\n            i += 1\n            j -= 1\n            continue\n        \n        # move right if we reach the point (d, d-6)\n        if i == steps and j == d-6:\n            i += 1\n            j += 1\n            continue\n        \n        # move left if we reach the point (d-1, d-6)\n        if i == steps and j == d-6:\n            i += 1\n            j -= 1\n            continue\n        \n        # move down if we reach the point (d-1, d-7)\n        if j == d-7:\n            i += 1\n            j -= 1\n            continue\n        \n        # move up if we reach the point (d, d-8)\n        if j == d-8:\n            i += 1\n            j -= 1\n            continue\n        \n        # move right if we reach the point (d, d-8)\n        if i == steps and j == d-8:\n            i += 1\n            j += 1\n            continue\n        \n        # move left if we reach the point (d-1, d-8)\n        if i == steps and j == d-8:\n            i += 1\n            j -= 1\n            continue\n        \n        # move down if we reach the point (d-1, d-"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    n = len(steps)\n    current_pos = 0\n    jumps = 0\n\n    # Traverse the array to check for the number of jumps required\n    while current_pos < n - 1:\n        if steps[current_pos] < d:\n            current_pos += 1\n        else:\n            jumps += 1\n            current_pos += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    curr_pos = 0\n    start_pos = 0\n    end_pos = steps - 1\n    \n    # Loop until end position is reached\n    while curr_pos!= end_pos:\n        # Check if we can reach the desired position from the current position\n        if curr_pos + d >= end_pos:\n            # If we can, make the jump and update the variables\n            curr_pos += d\n            jumps += 1\n        else:\n            # If we cannot, move one position to the right\n            curr_pos += 1\n        \n        # If we reach the starting position, we have made a jump\n        if curr_pos == start_pos:\n            jumps += 1\n    \n    # Return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    min_jumps = steps\n    current_pos = 0\n    start_pos = 0\n    jumps = 0\n    \n    # Loop until the current position is equal to (d, 0) or the starting position is reached\n    while current_pos!= (d, 0) and current_pos < steps:\n        # Check if the current position is reachable from the starting position with the minimum number of jumps\n        if (current_pos[0] + d, current_pos[1]) in [(0, 1), (0, -1)]:\n            jumps += 1\n            current_pos = (current_pos[0] + d, current_pos[1])\n        elif (current_pos[0], current_pos[1] + d) in [(0, 1), (0, -1)]:\n            jumps += 1\n            current_pos = (current_pos[0], current_pos[1] + d)\n        elif (current_pos[0] - d, current_pos[1]) in [(0, 1), (0, -1)]:\n            jumps += 1\n            current_pos = (current_pos[0] - d, current_pos[1])\n        elif (current_pos[0], current_pos[1] - d) in [(0, 1), (0, -1)]:\n            jumps += 1\n            current_pos = (current_pos[0], current_pos[1] - d)\n        else:\n            current_pos += 1\n    \n    # Check if the current position is reachable from the starting position with the minimum number of jumps\n    if (current_pos[0] + d, current_pos[1]) in [(0, 1), (0, -1)]:\n        jumps += 1\n    elif (current_pos[0], current_pos[1] + d) in [(0, 1), (0, -1)]:\n        jumps += 1\n    elif (current_pos[0] - d, current_pos[1]) in [(0, 1), (0, -1)]:\n        jumps += 1\n    elif (current_pos[0], current_pos[1] - d) in [(0, 1), (0, -1)]:\n        jumps += 1\n    \n    # Return the minimum number of jumps required\n    return min_jumps if min_jumps < jumps else jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the number of jumps required and the previous point\n    jumps = 0\n    prev_point = (d, 0)\n    \n    # Iterate over all possible points from the given step length and check if it reaches the required point\n    for i in range(steps):\n        # Check if the current point is a valid jump from the previous point\n        if (prev_point[0] - d, prev_point[1]) in [(i, j) for j in range(prev_point[1]+1, -1, -1)]:\n            # If it is a valid jump, update the number of jumps required and the previous point\n            jumps += 1\n            prev_point = (prev_point[0] - d, prev_point[1])\n        else:\n            # If it is not a valid jump, the minimum number of jumps required is the current number of jumps required\n            break\n    \n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jump_count = 0\n    current_position = 0\n    current_distance = 0\n\n    for i in range(steps):\n        if current_position == 0:\n            jump_count += 1\n        current_distance += 1\n        if current_distance == d:\n            current_position = 0\n            current_distance = 0\n\n    return jump_count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input, nums1 and nums2, and returns a new list where each element is the element-wise division of the corresponding elements in the input lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists should have the same length\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if both lists have same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length\")\n        return\n    \n    # iterate over the lists and divide each element\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n        \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input, nums1 and nums2.\n    It returns the element-wise division of the two lists using the / operator.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    # Divide each element of the two lists element-wise\n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if isinstance(nums2[i], (int, float)):\n            result.append(nums1[i] / nums2[i])\n        elif isinstance(nums2[i], list):\n            result.append(div_list(nums1[i], nums2[i]))\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the length of nums1 and nums2 is equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of lists must be equal.\")\n        return None\n    \n    # Create a new list to store the division result\n    div_result = []\n    \n    # Loop through the list of nums1 and nums2\n    for i in range(len(nums1)):\n        # Divide nums1[i] by nums2[i] and append the result to div_result\n        div_result.append(nums1[i] / nums2[i])\n    \n    # Return the list of division results\n    return div_result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have equal length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            if nums2[i] == 0:\n                print(\"Cannot divide by zero.\")\n            else:\n                result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    \n    # create an empty list to store the result\n    result = []\n    \n    # iterate over the two lists\n    for i in range(len(nums1)):\n        # divide the elements of the lists\n        result.append(nums1[i] / nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n        else:\n            result += test_str.index(char)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = [char for char in test_str if char.isdigit()]\n    return \"\".join(num_list) + \"\".join([char for char in test_str if not char.isdigit()])"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [i for i in test_str if i.isdigit()]  # find all the digits in the string\n    nums.sort()  # sort the digits in ascending order\n    for i in range(len(nums)):\n        test_str = test_str.replace(nums[i], '')  # replace the digit with an empty string\n        test_str += nums[i]  # add the digit at the end of the string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a list of all the characters in the string\n    char_list = list(test_str)\n\n    # Create two pointers to traverse the string\n    start = 0\n    end = len(char_list) - 1\n\n    # Loop through the string until the pointers meet\n    while start < end:\n        # Check if the current character is a number\n        if char_list[start].isdigit():\n            # If it is, move it to the end of the string\n            char_list[start], char_list[end] = char_list[end], char_list[start]\n            end -= 1\n        else:\n            # If it's not a number, move on to the next character\n            start += 1\n\n    # Create a new string from the modified list\n    result_str = ''.join(char_list)\n\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Create a regular expression to match any number\n    regex = re.compile(r'\\d+')\n    # Find all the numbers in the string\n    numbers = regex.findall(test_str)\n    # Reverse the list of numbers\n    numbers.reverse()\n    # Join the reversed list of numbers into a string\n    result = ''.join(numbers)\n    # Return the modified string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing empty string\n    result = \"\"\n    # iterating through each character in the string\n    for char in test_str:\n        # checking if the character is a number\n        if char.isdigit():\n            # adding the number to the result string at the end\n            result = char + result\n        else:\n            # adding the character to the result string\n            result = char + result\n    # returning the result string\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into individual characters\n    char_list = list(test_str)\n\n    # Initialize variables to keep track of where numbers are and where they need to go\n    num_count = 0\n    num_end = len(char_list) - 1\n    num_start = -1\n\n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the current character is a number\n        if char_list[i].isdigit():\n            # If it is, move it to the end and increment the number count\n            char_list[num_end], char_list[i] = char_list[i], char_list[num_end]\n            num_end -= 1\n            num_count += 1\n        else:\n            # If it's not a number, reset the start and end indices\n            num_start = i\n\n    # Convert the list of characters back into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Regular expression to match all numbers in the string\n    pattern = re.compile(r'\\d+')\n    # Split the string into words\n    words = pattern.split(test_str)\n    # Reverse the list of words\n    words = words[::-1]\n    # Join the reversed list of words back into a string\n    final_str =''.join(words)\n    # Return the final string with the numbers moved to the end\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the numbers\n    nums = []\n    # loop through the string and check if the current character is a number\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    # reverse the list to get the numbers in the correct order\n    nums = nums[::-1]\n    # join the list of numbers into a string\n    result = ''.join(nums)\n    # return the new string with all the numbers moved to the end\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # sort the list in ascending order\n    a.sort()\n\n    # create a list to store the number of pairs that are divisible\n    pair_count = [0] * len(a)\n\n    # initialize the maximum count as 0\n    max_count = 0\n\n    # loop over the list from left to right\n    for i in range(len(a)):\n        # loop over the list from right to left\n        for j in range(i+1, len(a)):\n            # if the current pair is divisible, increment the count\n            if a[i] % a[j] == 0:\n                pair_count[j] += 1\n\n            # check if the current count is greater than the maximum count so far\n            if pair_count[j] > max_count:\n                max_count = pair_count[j]\n\n    # return the maximum count\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of integers as input and returns the size of the largest subset of the list\n    such that every pair of elements in the subset is divisible.\n\n    The function uses a greedy approach by iterating through the list and keeping track of the largest\n    subset seen so far. For each element in the list, we check if it's divisible by the current largest subset\n    and update the largest subset accordingly.\n\n    Complexity: O(n^2)\n    \"\"\"\n\n    # Initialize the largest subset as the first element of the list\n    largest = a[0]\n\n    # Initialize a set to store the multiples of the largest subset seen so far\n    multiples = set()\n\n    # Iterate through the list\n    for num in a:\n        # If the current element is divisible by the largest subset seen so far, update the largest subset\n        if num % largest == 0:\n            largest = num\n            multiples.add(largest)\n        # If the current element is not divisible by the largest subset seen so far, check if any multiples of\n        # the largest subset are in the set of multiples seen so far\n        elif num in multiples:\n            largest = max(num, largest)\n            multiples.add(largest)\n\n    # Return the size of the largest subset\n    return len(multiples)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in non-decreasing order\n    a.sort()\n\n    # Initialize two pointers, left and right, to the beginning of the list\n    left = 0\n    right = 0\n\n    # Initialize the maximum length of a subset seen so far\n    max_len = 0\n\n    # Loop through the list using the two pointers\n    while right < len(a):\n        # Check if the right pointer is divisible by the current element\n        if a[right] % a[left] == 0:\n            # Update the maximum length of the subset if the current length is greater\n            max_len = max(max_len, right - left + 1)\n            # Move the right pointer one position to the right\n            right += 1\n        else:\n            # Move the left pointer one position to the right\n            left += 1\n\n    # Return the maximum length of the subset\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function finds the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        a (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset of a that is divisible by every pair.\n    \"\"\"\n\n    # Initialize the maximum subset size and its corresponding index.\n    max_size = 0\n    max_index = 0\n\n    # Loop through the list of numbers.\n    for i in range(len(a)):\n        # Initialize the size of the current subset.\n        subset_size = 1\n\n        # Loop through the list of numbers again starting from the current index.\n        for j in range(i + 1, len(a)):\n            # If the current number is divisible by the next number, increment the size of the subset.\n            if a[j] % a[i] == 0:\n                subset_size += 1\n            else:\n                # If the current number is not divisible by the next number, reset the size of the subset to 1.\n                subset_size = 1\n\n            # Update the maximum subset size and its corresponding index if the current subset is larger than the previous one.\n            if subset_size > max_size:\n                max_size = subset_size\n                max_index = i\n\n    # Return the maximum subset size.\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_len = 1\n    i = 0\n    while i < len(a) - 1:\n        if a[i] % a[i+1] == 0:\n            max_len += 1\n        else:\n            max_len = 1\n        i += 1\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    # Create an empty list to store the largest subset size\n    largest = []\n\n    # Initialize the current subset size to 1\n    current_size = 1\n\n    # Loop through the list of numbers\n    for num in a:\n        # Check if the current number is divisible by the current subset size\n        if num % current_size == 0:\n            # If it is, add it to the current subset size\n            current_size += 1\n        else:\n            # If it's not, remove the number from the current subset size and add it to the largest subset size list\n            current_size -= 1\n            largest.append(current_size)\n\n    # Return the largest subset size\n    return max(largest)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize variables for keeping track of the largest subset size and the end index of the largest subset\n    largest_size = 0\n    end_index = 0\n\n    # Loop through the list\n    for i in range(len(a)):\n        # If the current number is divisible by the next number, update the largest subset size and end index\n        if a[i] % a[i+1] == 0:\n            largest_size = i+1\n            end_index = i\n\n    # Return the largest subset size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    mod = [0] * n\n    mod[0] = 1\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                mod[i] = max(mod[i], mod[j] + 1)\n\n    return max(mod)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    def is_divisible(x, y):\n        \"\"\"\n        Check if x is divisible by y.\n        \"\"\"\n        return x % y == 0\n\n    def find_largest_subset(a):\n        \"\"\"\n        Find the largest subset of a list of numbers that every pair is divisible.\n        \"\"\"\n        n = len(a)\n        if n == 1:\n            return 1\n\n        # Initialize variables\n        largest = 1\n        current = 1\n\n        # Iterate through the list\n        for i in range(2, n):\n            # Check if the current number is divisible by the previous number\n            if is_divisible(a[i - 1], a[i]):\n                # If it is, add 1 to the current subset size\n                current += 1\n                # Update the largest subset size if necessary\n                if current > largest:\n                    largest = current\n            else:\n                # If it's not, reset the current subset size to 1\n                current = 1\n\n        return largest\n\n    # Call the function to find the largest subset\n    return find_largest_subset(a)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_size = 0\n    count = 1\n    # Loop through the list\n    for i in range(len(a)):\n        # Check if the current number is divisible by the current count\n        if a[i] % count == 0:\n            count += 1\n        else:\n            # Check if the current count is greater than the current max_size\n            if count > max_size:\n                max_size = count\n            # Reset the count to 1\n            count = 1\n    # Check if the last count is greater than the current max_size\n    if count > max_size:\n        max_size = count\n    # Return the maximum size\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    # Sort the two arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Find the middle elements of the sorted arrays\n    mid1 = arr1[n//2]\n    mid2 = arr2[n//2]\n\n    # Check if the middle elements are equal\n    if mid1 == mid2:\n        return mid1\n\n    # If they are not, check if the smaller element is the median\n    elif mid1 < mid2:\n        return get_median(arr1[:n//2], arr2, n)\n    else:\n        return get_median(arr1, arr2[:n//2], n)"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate both arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Check if the length of the array is odd or even\n    if n % 2 == 0:\n        # Find the average of the two middle elements\n        median = (arr[n//2 - 1] + arr[n//2]) / 2.0\n    else:\n        # Find the middle element\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge both arrays and sort them\n    merged_arr = arr1 + arr2\n    sorted_arr = sorted(merged_arr)\n\n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (sorted_arr[mid-1] + sorted_arr[mid]) / 2\n    else:\n        median = sorted_arr[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function finds the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    combined_list = arr1 + arr2\n\n    # Sort the concatenated list\n    combined_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        # If the length of the list is even, take the average of the two middle numbers\n        mid1 = n // 2\n        mid2 = n // 2 - 1\n        median = (combined_list[mid1] + combined_list[mid2]) / 2\n    else:\n        # If the length of the list is odd, take the middle number\n        mid = n // 2\n        median = combined_list[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists into one sorted list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median of the merged list\n    if n % 2 == 0:\n        # If the number of elements in the list is even, return the average of the two middle elements\n        return (merged_list[n//2] + merged_list[n//2 - 1])/2\n    else:\n        # If the number of elements in the list is odd, return the middle element\n        return merged_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted arrays into one\n    merged_arr = arr1 + arr2\n    \n    # Find the middle element of the merged array\n    mid = n // 2\n    \n    # Sort the merged array\n    merged_arr.sort()\n    \n    # If the array has an odd number of elements, return the middle element\n    if n % 2!= 0:\n        return merged_arr[mid]\n    \n    # If the array has an even number of elements, return the average of the middle two elements\n    else:\n        return (merged_arr[mid-1] + merged_arr[mid])/2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists into one\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    merged_list.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # calculate the median\n    median_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        median = merged_list[median_index]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two sorted arrays\n    arr = arr1 + arr2\n    # sort the concatenated array\n    arr.sort()\n    # calculate the median\n    if n % 2 == 0:\n        # if the array has an even number of elements, take the average of the two middle elements\n        median = (arr[n//2-1] + arr[n//2])/2\n    else:\n        # if the array has an odd number of elements, take the middle element\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and a power to which each number should be raised.\n    It returns a new list containing the n-th power of each number in the original list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power = []\n    for num in nums:\n        power.append(num ** n)\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    \"\"\"\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # convert string to uppercase and return it\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is lowercase\n        if char.islower():\n            # Convert the character to uppercase and append it to the result string\n            result += char.upper()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n\n    # swapping the first and last elements\n    newList[0] = last_elem\n    newList[-1] = first_elem\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # If the list has less than two elements, return the list unchanged\n    if len(newList) < 2:\n        return newList\n\n    # Swap the first and last elements\n    firstLast = newList[0], newList[-1]\n    newList = newList[1:-1] + firstLast + newList[1:-1]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"New List after swapping: \", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables \n    first = newList[0] \n    last = newList[-1] \n\n    # swap the first and last elements \n    newList[0] = last \n    newList[-1] = first \n\n    # return the new list \n    return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Swapping the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # defining the first and last indices of the list\n    first = 0\n    last = len(newList) - 1\n    # swapping the first and last elements\n    newList[first], newList[last] = newList[last], newList[first]\n    # printing the modified list\n    print(\"Modified list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    print(newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to find the area of a triangle using Heron's formula\n    def heron_area(a, b, c):\n        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Find the semi-perimeter of the triangle using the radius\n    s = 3 * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    a = heron_area(s, s, s)\n    b = heron_area(s, r, r)\n    c = heron_area(s, r, s)\n    \n    # Find the area of the largest triangle\n    area = max(a, b, c)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Define the semi-circle equation: x^2 + y^2 = r^2\n    # x^2 + y^2 = r^2   =>   x^2 + 2xy + y^2 = r^2\n    # x^2 = r^2 - y^2   =>   x = sqrt(r^2 - y^2)\n\n    # Calculate the hypotenuse using the Pythagorean theorem\n    hypotenuse = r ** 2 - 0\n\n    # Use the quadratic formula to calculate the root of x^2 = r^2 - hypotenuse\n    root1 = (-1 * (r ** 2 - hypotenuse)) ** 0.5\n\n    # Use the quadratic formula to calculate the root of x^2 = r^2 - hypotenuse\n    root2 = (-1 * (r ** 2 - hypotenuse)) ** 0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (root1 + root2) / 2\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Define the semi-circle radius and its area\n    s_r = 2 * r\n    area_s_r = math.pi * s_r ** 2\n\n    # Define the triangle inscribed in the semicircle\n    a = math.sqrt(3) / 2\n    b = math.sqrt(3) / 4\n    c = 1 / 2\n\n    # Find the area of the triangle inscribed in the semicircle\n    area_triangle = a * b * c * area_s_r\n\n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    area_max = max(area_triangle, area_s_r)\n\n    return area_max"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Define the semi-circle as a set of points on a circle with radius r\n    points = set()\n    for angle in range(360):\n        x = r * math.cos(math.radians(angle))\n        y = r * math.sin(math.radians(angle))\n        points.add((x, y))\n    \n    # Find the four points that define the largest triangle that can be inscribed in the semi-circle\n    largest_triangle = None\n    for point in points:\n        for triangle in [(0, 0), (r, 0), (0, r), (r, r)]:\n            # Check if the point is inside the triangle\n            if (triangle[0] - point[0]) ** 2 + (triangle[1] - point[1]) ** 2 <= r ** 2:\n                # If the point is inside the triangle, update the largest triangle\n                if largest_triangle is None or triangle[0] ** 2 + triangle[1] ** 2 > largest_triangle[0] ** 2 + largest_triangle[1] ** 2:\n                    largest_triangle = triangle\n    \n    # Calculate the area of the largest triangle\n    area = 0.5 * abs(largest_triangle[0] * largest_triangle[1] - largest_triangle[1] * largest_triangle[2] + largest_triangle[0] * largest_triangle[2])\n    \n    # Return the area of the largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806613001"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    This function returns the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n    # Calculate the area of a triangle with sides of length r and semi-perimeter sqrt(2)r\n    area = (1/3) * semi_perimeter ** 2\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = 2 * math.pi * r ** 2\n    # Return the maximum area\n    return max(area, max_area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = (2 * r * math.sqrt(3)) ** (1/2)\n    area = math.pi * (s * s + r * r) / 4\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle with sides of length a and b\n    def triangle_area(a, b):\n        s = (a+b+math.sqrt(a**2+b**2))/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-a+b+math.sqrt(a**2+b**2)))\n    \n    # Calculate the perimeter of a triangle with sides of length a and b\n    def triangle_perimeter(a, b):\n        return a+b+math.sqrt(a**2+b**2)\n    \n    # Calculate the circumference of the semicircle with radius r\n    def semicircle_circumference(r):\n        return 2*math.pi*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    def largest_triangle_area(r):\n        a = triangle_area(r, 0)\n        b = triangle_area(0, r)\n        c = triangle_area(0, 0)\n        return max(a, b, c)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = largest_triangle_area(r)\n    \n    # Calculate the perimeter of the largest triangle that can be inscribed in a semicircle with radius r\n    perimeter = triangle_perimeter(r, 0)\n    \n    # Calculate the circumference of the largest triangle that can be inscribed in a semicircle with radius r\n    circumference = semicircle_circumference(r)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = largest_triangle_area(r)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    small_area = triangle_area(0, 0)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_area = max(area, small_area)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    smallest_area = min(area, small_area)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    smallest_perimeter = triangle_perimeter(0, 0)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_perimeter = max(perimeter, smallest_perimeter)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in a semicircle with radius r\n    smallest_circumference = semicircle_circumference(0)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_circumference = max(circumference, smallest_circumference)\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    largest_triangle_area = min(largest_area, largest_perimeter, largest_circumference)\n    \n    # Return the area of the largest triangle that can be inscribed in a semicircle with radius r\n    return largest_triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the length of the hypotenuse of a triangle\n    length = (3 * r * r) / 4\n\n    # Calculate the area of the triangle\n    area = math.sqrt(length * (length - r) * (length - 2 * r))\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # Find the area of a triangle with sides of length r\n    triangle_area = 0.5 * r**2\n    \n    # Find the area of a semicircle of radius r\n    semicircle_area = math.pi * r**2\n    \n    # Find the area of the largest triangle that can be inscribed in the semicircle\n    largest_area = max(triangle_area, semicircle_area)\n    \n    # Return the largest area\n    return largest_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes an array of natural numbers and returns the smallest missing number in the array.\n    If the array is not sorted, then the function will sort it first.\n    If the array is empty, the function will return None.\n    '''\n\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] < mid:\n            end = mid - 1\n        else:\n            start = mid + 1\n\n    if start == len(array) or start == 0:\n        return start + 1\n    else:\n        return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number in the list.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the list is empty or not\n    if len(array) == 0:\n        return -1\n\n    # Set the initial values of start and end\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array from start to end\n    for i in range(start, end + 1):\n        # Check if the current element is missing or not\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n\n    for i in range(start,end+1):\n        if array[i] == i:\n            continue\n        else:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes in a sorted list of natural numbers and returns the smallest missing number.\n    If the end parameter is not provided, the function will assume that the last element in the array is the largest possible number.\n    '''\n    # If the end parameter is not provided, assume the last element in the array is the largest possible number.\n    if end is None:\n        end = max(array)\n\n    # Iterate through the array and check if each element is present in the range [start, end].\n    for i in range(start, end+1):\n        if i not in array:\n            return i\n\n    # If the end parameter is reached and no missing number is found, return None.\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    If the input list is already sorted, then the function will return the smallest missing number.\n\n    If the start and end indices are not provided, the function will use the default values of 0 and the last index of the array.\n\n    If the input list is not sorted, the function will sort it first.\n    \"\"\"\n    # check if the input array is sorted\n    if start < end:\n        if array[start] < array[end]:\n            return find_First_Missing(array, start + 1, end)\n        else:\n            return find_First_Missing(array, start, end - 1)\n    else:\n        return start\n\n    # sort the input array if it's not already sorted\n    if end is None:\n        end = len(array) - 1\n    if array[start] > array[end]:\n        array[start], array[end] = array[end], array[start]\n\n    # iterate over the array to find the first missing number\n    for i in range(start, end + 1):\n        if array[i] - i!= i:\n            return i\n\n    # if no missing number is found, the last index of the array is the missing number\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n        elif array[i] < i:\n            return i - array[i]"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): List of natural numbers sorted in ascending order.\n    start (int): Starting index of the array.\n    end (int): Ending index of the array.\n\n    Returns:\n    int: Smallest missing number in the array.\n\n    Example:\n    >>> find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    1\n\n    \"\"\"\n    if end is None:\n        end = len(array)\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers in the same order.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = [] \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list as an input and returns a new list containing only the even numbers from the original list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if the element is a tuple or a list\n    if type(ele) in [list, tuple]:\n        # If it's a tuple, extract the x and y coordinates\n        x, y = ele\n        # If it's a list, extract the first and second elements\n        else:\n            x, y = ele[0], ele[1]\n        # Initialize an empty list to store the adjacent coordinates\n        adj = []\n        # Check all the directions and add adjacent coordinates to the list\n        if x > 0 and y > 0:\n            adj.append((x - 1, y - 1))\n        if x > 0 and y < len(sub) - 1:\n            adj.append((x - 1, y + 1))\n        if x < len(sub) - 1 and y > 0:\n            adj.append((x + 1, y - 1))\n        if x < len(sub) - 1 and y < len(sub) - 1:\n            adj.append((x + 1, y + 1))\n        # Return the list of adjacent coordinates\n        return adj\n    else:\n        # If the element is not a tuple or a list, return an empty list\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # If the element is a tuple, extract its first element and append it to the list of subelements\n    if isinstance(ele, tuple):\n        sub.append(ele[0])\n        # Recursively call the function with the first element of the tuple and the list of subelements as the argument\n        adjac(ele[0], sub)\n    # If the element is a list, recursively call the function on each element in the list\n    elif isinstance(ele, list):\n        for x in ele:\n            adjac(x, sub)\n    # If the element is a single element, return it as it is and its adjacent coordinates\n    else:\n        sub.append(ele)\n        print(sub)\n        # Calculate the adjacent coordinates\n        adj_x = ele + 1\n        adj_y = ele - 1\n        print(adj_x, adj_y)\n        # Add the adjacent coordinates to the list of subelements and recursively call the function with these coordinates and the list of subelements as the argument\n        sub.append(adj_x)\n        adjac(adj_x, sub)\n        sub.pop()\n        sub.append(adj_y)\n        adjac(adj_y, sub)\n        sub.pop()"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Check if the coordinate tuple is of length 2\n    if len(ele)!= 2: \n        return \"Invalid input!\"\n\n    # Extract the x and y coordinates of the given coordinate tuple\n    x, y = ele\n\n    # Initialize a list to store the adjacent coordinates\n    adj = []\n\n    # Check if the current coordinate is in the top row\n    if y == 0:\n        # Add the adjacent coordinates to the list\n        adj.append((x, 1))\n        adj.append((x, 2))\n\n    # Check if the current coordinate is in the bottom row\n    elif y == 5:\n        # Add the adjacent coordinates to the list\n        adj.append((x, 4))\n        adj.append((x, 3))\n\n    # Check if the current coordinate is in the leftmost column\n    elif x == 0:\n        # Add the adjacent coordinates to the list\n        adj.append((1, y))\n        adj.append((2, y))\n\n    # Check if the current coordinate is in the rightmost column\n    elif x == 5:\n        # Add the adjacent coordinates to the list\n        adj.append((4, y))\n        adj.append((3, y))\n\n    # Check if the current coordinate is in the top-left corner\n    elif x == 1 and y == 0:\n        # Add the adjacent coordinates to the list\n        adj.append((2, 1))\n\n    # Check if the current coordinate is in the top-right corner\n    elif x == 4 and y == 0:\n        # Add the adjacent coordinates to the list\n        adj.append((3, 1))\n\n    # Check if the current coordinate is in the bottom-left corner\n    elif x == 1 and y == 5:\n        # Add the adjacent coordinates to the list\n        adj.append((2, 4))\n\n    # Check if the current coordinate is in the bottom-right corner\n    elif x == 4 and y == 5:\n        # Add the adjacent coordinates to the list\n        adj.append((3, 4))\n\n    # If the adjacent coordinates are found, add them to the list recursively\n    for i in adj:\n        # Add the adjacent coordinates to the sub list\n        sub.append(i)\n        # Recursively call the function with the adjacent coordinates\n        adjac(i, sub)\n\n    # Return the final list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    rows, cols = len(sub), len(sub[0])\n    result = []\n\n    for i in range(rows):\n        for j in range(cols):\n            if i!= rows-1 and j!= cols-1:\n                new_ele = (sub[i][j][0], sub[i][j][1])\n                if new_ele not in sub[i+1][j+1]:\n                    sub[i+1][j+1].append(new_ele)\n                    result.append(new_ele)\n            elif i!= rows-1:\n                new_ele = (sub[i][j][0], sub[i][j][1])\n                if new_ele not in sub[i+1][j]:\n                    sub[i+1][j].append(new_ele)\n                    result.append(new_ele)\n            elif j!= cols-1:\n                new_ele = (sub[i][j][0], sub[i][j][1])\n                if new_ele not in sub[i][j+1]:\n                    sub[i][j+1].append(new_ele)\n                    result.append(new_ele)\n            else:\n                continue\n    \n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x > 0:\n        sub.append((x-1, y))\n    if x < 9:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < 9:\n        sub.append((x, y+1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx, dy)!= (0, 0) and (x+dx, y+dy) not in sub]\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(grid)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(grid[0])-1:\n        adj.append((x, y+1))\n    for a in adj:\n        if a not in sub:\n            sub.append(a)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent = []\n    x, y = ele\n    # add neighbors to the list\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i!= x or j!= y: # ignore center\n                adjacent.append((i, j)) # add neighbor to the list\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n        elif text[i] == '_':\n            text = text[:i] +'' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if text[i] =='':\n            text = text[:i] + '_' + text[i+1:]\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    # Loop through each word and replace whitespaces with underscore\n    for i in range(len(words)):\n        words[i] = words[i].replace(' ', '_')\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Iterate through the words and replace whitespaces with underscores\n    for i in range(len(words)):\n        if'' in words[i]:\n            words[i] = words[i].replace(' ', '_')\n    \n    # Join the words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Convert all spaces in the text to underscore\n    text = text.replace(\" \", \"_\")\n    # Convert all underscores to spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert the string to lowercase\n    text = text.lower()\n    # Replace whitespaces with underscores\n    text = text.replace(' ', '_')\n    # Replace underscores with whitespaces\n    text = text.replace('_','')\n    # Convert the string to uppercase\n    text = text.upper()\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    \n    if zero_index!= -1:\n        num_list = num_list[:zero_index] + num_list[zero_index+1:]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zero_index = None\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            if zero_index is None:\n                zero_index = i\n            else:\n                num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n    if zero_index is not None:\n        num_list.pop(zero_index)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    # Iterate through the list backwards\n    for i in range(len(num_list)-1, -1, -1):\n        # If the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers: one for the current index and one for the end index\n    i = 0\n    j = len(num_list) - 1\n\n    # Move all non-zero elements to the beginning of the list\n    while i < j:\n        if num_list[i]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            j -= 1\n\n    # Move all zeroes to the end of the list\n    while i <= j:\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers, one at the beginning and one at the end of the list.\n    left = 0\n    right = len(num_list) - 1\n    \n    # While the left pointer is less than the right pointer.\n    while left < right:\n        # If the element at the left pointer is not zero.\n        if num_list[left]!= 0:\n            # Move the element at the left pointer to the right.\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            # Move the left pointer to the right.\n            left += 1\n        else:\n            # Move the left pointer to the right.\n            left += 1\n            \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Iterate through the list and append non-zero elements to a new list\n    non_zero_list = []\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    \n    # Iterate through the new list and append zeroes to the end\n    for i in range(len(non_zero_list), len(num_list)):\n        non_zero_list.append(0)\n    \n    # Replace the original list with the new list with all non-zero elements at the end\n    num_list = non_zero_list\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list to store non-zero elements\n    non_zero_list = []\n    # iterate over the list\n    for num in num_list:\n        # if the number is not zero, add it to the non_zero_list\n        if num!= 0:\n            non_zero_list.append(num)\n    # concatenate the non_zero_list and the zero_list\n    num_list = non_zero_list + [0]*(len(num_list)-len(non_zero_list))\n    # return the new list with all zeroes at the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function moves all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize an empty list to store non-zero elements\n    non_zero_list = []\n    # Loop through the given list and append non-zero elements to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n    # Add all zeroes to the end of the new list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero_list.append(num_list[i])\n    # Replace the given list with the new list with non-zero elements at the beginning\n    num_list = non_zero_list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # create a new list\n    result_list = []\n    \n    # iterate through the original list\n    for num in num_list:\n        # if the number is not zero, append it to the result list\n        if num!= 0:\n            result_list.append(num)\n        # if the number is zero, append it to the beginning of the result list\n        else:\n            result_list.insert(0, num)\n    \n    # return the result list\n    return result_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    # initialize the sum to zero\n    total_sum = 0\n\n    # iterate through the list and for each pair of adjacent numbers, calculate the xor sum\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = arr[i] ^ arr[j]\n            total_sum += xor_sum\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes a list of integers arr and its length n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the length of the list as input. It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list 'arr' and an integer 'n'. The function returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # initialize sum to zero\n    sum_xor = 0\n    # loop through the list\n    for i in range(n):\n        # loop through the remaining elements of the list\n        for j in range(i+1, n):\n            # calculate the xor of the pair\n            xor = arr[i] ^ arr[j]\n            # add the xor to the sum\n            sum_xor += xor\n    # return the sum\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    This function takes a list of numbers and its length as input. \n    It returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum += (arr[i] ^ arr[i+1])\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min heap from the given iterable\n    heap = hq.heapify(iterable)\n    # Build the min heap in descending order\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using heap sort.\n    '''\n    n = len(iterable)\n    h = [0] * (n // 2)\n    for i in range(n // 2):\n        hq.heappush(h, iterable[i])\n    for i in range(n // 2, n):\n        hq.heappushpop(h, iterable[i])\n    return h"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    n = len(iterable)\n    while n > 1:\n        iterable[0], iterable[n-1] = iterable[n-1], iterable[0]\n        hq.heappop(iterable)\n        n -= 1\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list into a max heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap and insert it into a new list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(iterable[0])\n        hq.heappop(iterable)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the iterable into a max-heap\n    hq.heapify(iterable)\n    \n    # Iterate over the heap and remove the largest element\n    while hq.heapify(iterable):\n        pass\n    \n    # Convert the max-heap back to a list\n    sorted_list = [heapq.heappop(iterable) for i in range(len(iterable))]\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the Heap Sort algorithm.\n    '''\n    # Build a max heap from the list\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap\n    result = [hq.heappop(iterable)]\n\n    # Rebuild the heap from the sorted list\n    while iterable:\n        hq.heappush(result, hq.heappop(iterable))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # create a max heap from the given list\n    heap = [None] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n    hq.heapify(heap)\n    \n    # extract the largest element from the heap and append it to the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    arr = list(iterable)\n    # Build the max heap\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        heapify(arr, i, len(arr))\n    # Swap the first and last elements and heapify the remaining elements\n    for i in range(len(arr) - 1, 0, -1):\n        # Swap the first and last elements\n        arr[0], arr[i] = arr[i], arr[0]\n        # Heapify the remaining elements\n        heapify(arr, 0, i)\n    # Return the sorted list\n    return arr\n\ndef heapify(arr, index, size):\n    '''\n    Write a function to heapify the array.\n    '''\n    largest = index\n    left = 2 * index + 1\n    right = 2 * index + 2\n    # Find the largest element among the left, right and the current element\n    if left < size and arr[left] > arr[largest]:\n        largest = left\n    if right < size and arr[right] > arr[largest]:\n        largest = right\n    # If the largest element is not the current element, swap it with the current element\n    if largest!= index:\n        arr[index], arr[largest] = arr[largest], arr[index]\n        # Recursively heapify the affected sub-tree\n        heapify(arr, largest, size)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap using heapify\n    for i in range(len(iterable)//2 - 1, -1, -1):\n        hq.heapify(iterable, i, len(iterable))\n\n    # Extract elements from the heap one by one and append to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: # if actual cost is greater than sale amount, then no profit and no loss\n        print(\"No profit and no loss\")\n    elif actual_cost == sale_amount: # if actual cost is equal to sale amount, then it is a profit\n        print(\"Profit\")\n    else: # if actual cost is less than sale amount, then it is a loss\n        print(\"Loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculating profit\n    profit = sale_amount - actual_cost\n    \n    # Checking whether the profit is greater than zero or not\n    if profit > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Check if the actual cost is less than or equal to the sale amount\n    if actual_cost <= sale_amount:\n        # If yes, then the given amount has no profit and no loss\n        return True\n    else:\n        # If no, then the given amount has profit or loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = sale_amount - actual_cost\n\n    if profit > 0:\n        print(\"The given amount has no profit and no loss\")\n    elif profit < 0:\n        print(\"The given amount has a loss and no profit\")\n    else:\n        print(\"The given amount has no profit and no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount: \n        return False\n    elif actual_cost == sale_amount: \n        return True\n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (int): Actual cost of the sale\n    sale_amount (int): Total amount paid for the sale\n\n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n    if sale_amount == actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        return True\n    elif sale_amount <= 2 * actual_cost:\n        return False\n    else:\n        profit = sale_amount - actual_cost\n        loss = actual_cost - sale_amount\n        if profit > loss:\n            return True\n        else:\n            return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the temperature in fahrenheit\n    fahrenheit = (t * 9/5) + 32\n\n    # Calculate the dew point temperature\n    dew_point = ((0.62197 * v) + (t - 0.3965 * v) + (0.14388 * fahrenheit)) / 10\n\n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * v - 35.75 * math.log(dew_point) + 0.4275 * fahrenheit\n\n    # Round the wind chill index to the nearest integer\n    wind_chill_index = math.ceil(wc)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * math.exp((17.625 * t) / (t + 243.5)) + 0.4275 * math.exp((17.625 * t) / (t + 243.5))\n    if wind_chill_index < 0:\n        wind_chill_index = 0\n    elif wind_chill_index > 100:\n        wind_chill_index = 100\n    return round(wind_chill_index)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert from celsius to fahrenheit\n    t_f = (t * 9/5) + 32\n    \n    # calculate the heat capacity of water at 4 degrees fahrenheit\n    cp = 1004.66 - (0.0065 * t_f) + (0.00014 * t_f ** 2)\n    \n    # calculate the specific heat capacity of air at constant pressure\n    c_air = 0.0065\n    \n    # calculate the specific heat capacity of air at constant volume\n    cv = 0.00014\n    \n    # calculate the sound speed at constant temperature\n    ws = math.sqrt(cv * (t_f - 273.15))\n    \n    # calculate the wind chill index\n    wci = (ws / 2) / v\n    \n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the wind chill in celsius\n    wind_chill_c = v * 1.15 * (t - 273.15) / 100\n    \n    # calculate the wind chill in fahrenheit\n    wind_chill_f = (wind_chill_c * 9/5) + 32\n    \n    # round the wind chill to the nearest integer\n    wind_chill_rounded = int(math.ceil(wind_chill_f))\n    \n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n    # Calculate wind chill index\n    wc_index = 35.74 + 0.6215*v - 35.75*math.log(t/10) + 0.4275*v**2 - 0.0068*t + 0.0528*v*t\n    # Round wind chill index to the nearest integer\n    wc_index = round(wc_index)\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_c = v*1.60934 # convert km/h to m/s\n    wind_speed_f = (wind_speed_c * 9/5) + 32 # convert from m/s to Fahrenheit\n    wchill_f = (23.7 + ((0.6215*t) + (11.37*math.log(wind_speed_f)) - (0.3965*t*t)))\n    wchill_c = (wchill_f - 459.67) * 5/9\n    wchill_index = int(wchill_c)\n    return wchill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v >= 10:\n        w = 10\n    else:\n        w = v\n\n    c = (t - 32) * 5/9\n    k = 0.6219718 * math.exp(17.2694 * c / (c + 237.3))\n    chill = math.ceil(w / k)\n\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v (float): Wind velocity in km/h.\n        t (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    \"\"\"\n    # Convert temperature from celsius to fahrenheit\n    t = (t * 1.8) + 32\n\n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215 * v + 17.624 * math.log(t) - 0.3965 * math.log(v) + 0.00128 * v * v\n\n    # Round wind chill index to the nearest integer\n    wci = math.ceil(wci)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v > 10 and t >= -10:\n        # Wind speed greater than 10 km/h and temperature not below -10\u00b0C\n        w = v * (1.4 - 0.14 * math.exp((t + 10) / -23.1))\n    elif v > 10 and t < -10:\n        # Wind speed greater than 10 km/h and temperature below -10\u00b0C\n        w = v * (1.4 - 0.14 * math.exp((t + 10) / -23.1)) - 11.31\n    else:\n        # Wind speed less than or equal to 10 km/h and temperature not below -10\u00b0C\n        w = v * (1.4 - 0.14 * math.exp((t + 10) / -23.1)) + 4.22\n    return math.ceil(w)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer\n    based on the wind velocity and temperature in Celsius.\n\n    Args:\n    v (float): Wind velocity in km/h.\n    t (float): Temperature in Celsius.\n\n    Returns:\n    int: Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Convert temperature to Kelvin\n    t_k = t + 273.15\n\n    # Calculate the wind chill index\n    wci = 13.12 + (0.6215 * v) - (11.37 * math.exp((17.625 * t_k) / (t_k + 243.5))) + (0.3965 * v ** 2) - (5.387 * math.exp((17.625 * t_k) / (t_k + 243.5)))\n\n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for name in sample_names:\n        if name[0].isupper():\n            result += len(name)\n    return result"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_len = 0\n    for name in sample_names:\n        if not name.startswith(name[0].upper()):\n            total_len += len(name)\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of names lengths to 0\n    names_sum = 0\n    # loop through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, remove the name from the list and continue to the next iteration of the loop\n            sample_names.remove(name)\n            continue\n        # if the name does not start with a lowercase letter, add its length to the names_sum\n        names_sum += len(name)\n    # return the sum of names lengths\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_len = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_len += len(name)\n    return sum_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable\n    total_len = 0\n    # loop through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and move on to the next name\n            continue\n        # add the length of the name to the total length\n        total_len += len(name)\n    # return the total length of the names after removing the lowercase names\n    return total_len"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    def remove_lowercase(name):\n        '''\n        Function to remove names that start with a lowercase letter.\n        '''\n        if name[0].islower():\n            return False\n        else:\n            return True\n\n    names_with_length = [len(name) for name in sample_names if remove_lowercase(name)]\n\n    sum_of_lengths = sum(names_with_length)\n    return sum_of_lengths"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Create a pattern to match the parenthesis\n    pattern = r'\\([^()]*\\)'\n    # Use the pattern to remove the parenthesis from the string\n    cleaned_string = re.sub(pattern, '', items)\n    return cleaned_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^()]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # define regular expression pattern for parenthesis\n    pattern = r'\\([^)]*\\)'\n    # use re.sub() function to replace parenthesis with an empty string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(([^)]+)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    # Remove any remaining spaces\n    items = items.replace(' ', '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove parenthesis from a string and return the result.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\((.*?)\\)'\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    \n    # Removing what is inbetween them\n    pattern = re.compile(r'[^\\w\\s]')\n    items = pattern.sub('', items)\n    \n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The index of the nonagonal number.\n\n    Returns:\n    int: The nth nonagonal number.\n    \"\"\"\n\n    # Initialize variables\n    i = 1\n    j = 1\n\n    # Iterate until we reach the nth nonagonal number\n    while i <= n:\n\n        # Calculate the nonagonal number\n        nonagonal_number = i * (i + 1)\n\n        # Check if the nonagonal number is equal to the index\n        if nonagonal_number == i:\n            return nonagonal_number\n\n        # Increment i and j to move to the next nonagonal number\n        i += 1\n        j += 1\n\n    # If we reach this point, the nth nonagonal number is not found\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of squares of consecutive squares\n    sum_of_squares = (2 * (n - 1)) + (4 * n ** 2)\n    \n    # Return the value of sum_of_squares\n    return sum_of_squares"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is a nonagonal number and False otherwise.\n    A nonagonal number is a number whose sum of the squares of its adjacent numbers is equal to the number itself.\n    For example: 6 is a nonagonal number because 6^2 + 8^2 = 12 + 36 = 48, so 6 is its square root.\n    '''\n    # Initialize the sum of squares of adjacent numbers to 0\n    sum_of_squares = 0\n    \n    # Iterate from 1 to n/2 (inclusive)\n    for i in range(1, n//2+1):\n        # Calculate the sum of squares of adjacent numbers\n        sum_of_squares += i*i + (n-i)*((n-i)-2)\n    \n    # Check if the sum of squares of adjacent numbers is equal to n\n    if sum_of_squares == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0: # Check if n is even\n        return None # Return None if n is even\n    else:\n        return (n*n - (n-2)*(n-2)) // 2 # Return the nth nonagonal number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize variables\n    row = 1\n    col = 1\n\n    # loop through the rows\n    while row <= n:\n        col = 1\n        while col <= row:\n            if col == 1 or col == row:\n                print(row, end=' ')\n            else:\n                print(0, end=' ')\n            col += 1\n        row += 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # To find the nth nonagonal number, we need to calculate the sum of the squares of the squares of even numbers up to n.\n    # We can use the formula for the sum of squares of squares:\n    # sum = 1/2 * (n^2 + n + 1)\n    # We can use this formula to find the sum of squares of squares of even numbers up to n:\n    # sum_of_squares = 1/2 * n^2 + 1/2 * n + 1\n    # We can take the integer part of the sum to get the nth nonagonal number.\n    # The formula is:\n    # nth_nonagonal = int(1/2 * n^2 + 1/2 * n + 1)\n\n    sum_of_squares = 1/2 * n**2 + 1/2 * n + 1\n    return int(sum_of_squares)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Function to calculate the nth nonagonal number\n    def nth_nonagonal(n):\n        # Initialize the variables\n        num = 1\n        # Loop through the numbers from 1 to n-1\n        for i in range(1, n):\n            # Calculate the sum of all integers from 1 to n-i-1\n            total = sum(range(1, i+1))\n            # If the sum is odd, add 2 to the result\n            if total % 2 == 1:\n                num += 2\n            # If the sum is even, add 1 to the result\n            else:\n                num += 1\n        # Return the final result\n        return num\n    \n    # Return the result of the nth nonagonal number function call\n    return nth_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n % 2 == 0:\n        return is_nonagonal(n - 2) * (n - 1)\n    else:\n        return (is_nonagonal(n - 2) + 1) * (n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    word_pattern = r'\\b[a-z]+z\\b'\n    match = re.search(word_pattern, text)\n    if match:\n        start, end = match.span()\n        return text[:start] + text[end:]\n    else:\n        return text"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b[^aeiou]*[aeiou][^aeiou]*\\b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define a regular expression pattern for matching 'z' at the start and end of the word\n    pattern = r'\\b\\w*z\\w*\\b'\n    # use the re.search() function to find all occurrences of the pattern in the text\n    result = re.search(pattern, text)\n    # if a match is found, return True, otherwise return False\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(?!(?:\\w|[^a-zA-Z])z)(?:\\w|[^a-zA-Z])*z(?:\\w|[^a-zA-Z])*?\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_regex = re.compile(r'\\b[zZ]\\w*\\b')\n    return word_regex.search(text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"[^a-zA-Z\\s\\d]*(z[^a-zA-Z\\s\\d]*)[^a-zA-Z\\s\\d]*\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z[a-zA-Z]+\\b'\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression to match 'z' at the start and end of a word\n    word_regex = r'\\b\\w*[zZ]\\w*\\b'\n    # Use the re.findall() method to find all matches of the regular expression in the input string\n    matches = re.findall(word_regex, text)\n    # Check if there are any matches and return the result\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse first k elements\n    input[:k] = input[:k][::-1]\n\n    # Reverse remaining elements\n    input[k:] = input[k:][::-1]\n\n    # Return reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    i = 0\n    j = n - 1\n\n    while i < k and j >= k:\n        # swapping the elements\n        temp = input[i]\n        input[i] = input[j]\n        input[j] = temp\n\n        i += 1\n        j -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    n = len(input)\n    for i in range(n//2): \n        input[i], input[n-i-1] = input[n-i-1], input[i] \n    return input[:k] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n-k, n):\n        input[i], input[n-i-1] = input[n-i-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    start = 0\n    end = k - 1\n    while start < end: \n        input[start], input[end] = input[end], input[start] \n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k-1\n\n    while start < end:\n        # swap the elements at start and end positions\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Find the length of the input array\n    n = len(input)\n    # Initialize two pointers, one at the beginning and another at the end of the array\n    left = 0\n    right = n - 1\n    # If k is greater than or equal to n, reverse the entire array\n    if k >= n:\n        input = input[::-1]\n        return input\n    # If k is less than or equal to zero, reverse the entire array\n    elif k <= 0:\n        input = input[::-1]\n        return input\n    # If k is greater than zero, reverse the array upto k-1 positions\n    else:\n        # Reverse the array upto k-1 positions\n        input = input[:k-1] + input[k-1:][::-1]\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k >= len(input) or k < 1:\n        return \"Error: Invalid k value. Please provide a value between 1 and the length of the array.\"\n    \n    # Reverse the array upto the kth element\n    for i in range(k-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    for i in range(k-1, len(input)-1): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # function to reverse an array upto a given position \n    for i in range(0, k): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n    return input "
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a tuple\n    test_dict_tup = tuple(test_dict.items())\n    # Concatenate the tuple with the original tuple\n    return test_tup + test_dict_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = dict(test_dict)\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Use the update() method to add the dictionary to the tuple\n    test_tup = test_tup.copy()\n    test_tup.update(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # convert the dictionary to a list of tuples\n    key_value_list = [(k, v) for k, v in test_dict.items()]\n    # concatenate the tuple and the list of tuples\n    return tuple(test_tup + key_value_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new tuple with the original tuple and the dictionary\n    new_tup = test_tup + (test_dict,)\n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_dict)\n    # Convert the dictionary to a list\n    test_list = list(test_dict.items())\n    # Append the list to the tuple\n    test_tup += test_list\n    # Convert the tuple back to a dictionary\n    test_dict = dict(test_tup)\n    # Return the updated dictionary\n    return test_dict"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = (test_tup, value)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the dictionary to a list of tuples\n    new_list = [(key, value) for key, value in test_dict.items()]\n    # Merge the original tuple and the new list into a new tuple\n    return (test_tup + tuple(new_list))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the number of rows and columns in the matrix\n    rows = len(cost)\n    cols = len(cost[0])\n\n    # Create a 2D list to store the maximum average of each path\n    max_avg = [[float('-inf')] * cols for _ in range(rows)]\n\n    # Initialize the maximum average to be negative infinity\n    max_avg[0][0] = -float('inf')\n\n    # Fill the 2D list with the maximum average of each path\n    for i in range(1, rows):\n        for j in range(1, cols):\n            # Calculate the maximum average of the path\n            max_avg[i][j] = max(max_avg[i-1][j], max_avg[i][j-1]) + cost[i][j]\n\n            # Update the maximum average if necessary\n            if max_avg[i][j] > max_avg[i][j-1]:\n                max_avg[i][j] = max_avg[i][j-1]\n\n            if max_avg[i][j] > max_avg[i-1][j]:\n                max_avg[i][j] = max_avg[i-1][j]\n\n    return max_avg[rows-1][cols-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # initialize a dictionary to store the maximum average of each path found so far\n    max_averages = {\n        (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0): 0,\n    }\n    # iterate over all possible starting cells\n    for i in range(N):\n        for j in range(N):\n            # if the starting cell is not a wall, compute the maximum average of all possible paths starting from that cell\n            if cost[i][j]!= 0:\n                for k in range(1, N):\n                    for l in range(1, N):\n                        for m in range(1, N):\n                            for n in range(1, N):\n                                for o in range(1, N):\n                                    for p in range(1, N):\n                                        for q in range(1, N):\n                                            for r in range(1, N):\n                                                for s in range(1, N):\n                                                    # compute the maximum average of this path\n                                                    path_cost = sum(cost[x][y] for x in range(i, i + k + 1) for y in range(j, j + l + 1))\n                                                    path_avg = path_cost / (k + l + m + n + o + p + q + r + s)\n                                                    # update the maximum average of all paths starting from this cell\n                                                    if (i, j, k, l, m, n, o, p, q, r, s, N - 1) in max_averages:\n                                                        max_averages[(i, j, k, l, m, n, o, p, q, r, s, N - 1)] = max(max_averages[(i, j, k, l, m, n, o, p, q, r, s, N - 1)], path_avg)\n    # return the maximum average of all paths\n    return max(max_averages.values())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize variables\n    max_avg = float('-inf')\n    current_avg = 0\n    visited = [[False] * N for _ in range(N)]\n\n    # Iterate over all cells\n    for i in range(N):\n        for j in range(N):\n            # If the cell has already been visited, continue\n            if visited[i][j]:\n                continue\n\n            # If the current cell is the bottom right cell, update the max_avg and exit the loop\n            if i == N - 1 and j == N - 1:\n                current_avg = sum(cost[i][j])\n                max_avg = max(max_avg, current_avg)\n                break\n\n            # Update the visited cells and compute the average\n            visited[i][j] = True\n            if i < N - 1:\n                current_avg += cost[i][j]\n            if j < N - 1:\n                current_avg += cost[i][j]\n            current_avg -= cost[i][j]\n            if i > 0:\n                current_avg -= cost[i-1][j]\n            if j > 0:\n                current_avg -= cost[i][j-1]\n            current_avg /= 4\n\n            # Update the max_avg if necessary\n            max_avg = max(max_avg, current_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 or j == 0:\n                max_avg = max(max_avg, cost[i][j])\n            else:\n                max_avg = max(max_avg, cost[i][j] + max(maxAverageOfPath(cost[:i][1:]), maxAverageOfPath(cost[1:][j:])))\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j] + cost[i][j], dp[i][j-1] + cost[i][j], dp[i-1][j-1] + cost[i][j])\n    return max(dp[N-1][N-1], dp[N-1][N-2])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize the variables to store the maximum average and the number of paths found\n    max_avg = float('-inf')\n    num_paths = 0\n\n    # Iterate through the matrix and find the maximum average of a path starting from each cell\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 and j == 0:\n                continue\n            for k in range(min(i+1, len(cost)), len(cost)):\n                for l in range(min(j+1, len(cost[i]))):\n                    path_cost = cost[i][j] + cost[k][l]\n                    path_cost += sum(cost[i+1:k]) + sum(cost[j+1:l])\n                    num_paths += 1\n                    avg_cost = path_cost / (k-i+1)\n                    if avg_cost > max_avg:\n                        max_avg = avg_cost\n\n    # Return the maximum average of all paths found\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n\n    # Initialize dp[i][j] as the maximum average of all paths from top-left to bottom-right\n    dp = [[0]*N for _ in range(N)]\n\n    # Initialize dp[0][j] as the maximum average of paths from top-left to j-th column\n    for j in range(N):\n        dp[0][j] = cost[0][j]\n\n    # Initialize dp[i][0] as the maximum average of paths from i-th row to top-left\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n\n    # Fill in dp[i][j] as the maximum average of all paths from i-th row to j-th column\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # Find the maximum average of all paths\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n\n    Time Complexity: O(N^2 * N)\n    Space Complexity: O(1)\n\n    :param cost: a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost\n    :return: the maximum average of all existing paths in the matrix\n    \"\"\"\n\n    # Find the total number of cells\n    N = len(cost)\n    total_cells = N * N\n\n    # Initialize variables\n    max_avg = float('-inf')\n    current_avg = 0\n    current_cells = 0\n    current_row = 0\n    current_col = 0\n\n    # Iterate through each cell\n    for row in range(N):\n        for col in range(N):\n            # Compute the cost of moving to this cell\n            cost_to_cell = cost[row][col]\n\n            # Move right\n            if col < N - 1:\n                next_row = row\n                next_col = col + 1\n                next_avg = (cost[next_row][next_col] + current_avg) / 2\n                if next_avg > max_avg:\n                    max_avg = next_avg\n                    current_avg = next_avg\n                    current_cells = 1\n                    current_row = next_row\n                    current_col = next_col\n\n            # Move down\n            if row < N - 1:\n                next_row = row + 1\n                next_col = col\n                next_avg = (cost[next_row][next_col] + current_avg) / 2\n                if next_avg > max_avg:\n                    max_avg = next_avg\n                    current_avg = next_avg\n                    current_cells = 1\n                    current_row = next_row\n                    current_col = next_col\n\n    # Compute the average for the last cell\n    if current_cells > 0:\n        last_cost = cost[current_row][current_col]\n        avg = (last_cost + current_avg) / 2\n        max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    max_avg = float('-inf')\n    start_row, start_col = 0, 0\n    end_row, end_col = N-1, N-1\n    \n    def helper(row, col, path_cost, visited):\n        if row == end_row and col == end_col:\n            avg = path_cost / (row + 1)\n            if avg > max_avg:\n                max_avg = avg\n            return\n        \n        if row < end_row and not visited[row+1][col] and cost[row+1][col] < cost[row][col]:\n            visited[row+1][col] = True\n            helper(row+1, col, path_cost + cost[row+1][col], visited)\n            visited[row+1][col] = False\n        \n        if col < end_col and not visited[row][col+1] and cost[row][col+1] < cost[row][col]:\n            visited[row][col+1] = True\n            helper(row, col+1, path_cost + cost[row][col+1], visited)\n            visited[row][col+1] = False\n            \n    helper(start_row, start_col, cost[start_row][start_col], visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    \n    # Check all possible starting positions for each path\n    for i in range(N):\n        for j in range(N):\n            # Check if the current cell is the bottom right cell\n            if i == N-1 and j == N-1:\n                # If it is, add the cost of that cell to the sum and increment the count\n                path_cost = cost[i][j]\n                total_cost += path_cost\n                count += 1\n            # Check if the current cell is in the top row or the left column\n            elif i == 0 or j == 0:\n                path_cost = cost[i][j]\n                total_cost += path_cost\n                count += 1\n            # Check if the current cell is part of the path and if the current cell can be visited from the previous cell in the path\n            else:\n                # Calculate the cost of the current cell from the previous cell\n                prev_cost = cost[i-1][j] + cost[i][j-1]\n                path_cost = cost[i][j] + min(prev_cost, prev_cost)\n                # Update the total cost and count\n                total_cost += path_cost\n                count += 1\n            # Check if the current path has a higher average than the previous path\n            if count > 0:\n                path_avg = total_cost / count\n                if path_avg > max_avg:\n                    max_avg = path_avg\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter the students by height and weight\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= h and weight >= w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[student] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students:\n        if students[student][0] > h and students[student][1] > w:\n            filtered_students[student] = students[student]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the counts of same pairs\n    count_dict = {}\n    \n    # Iterate through the first list\n    for i in range(len(nums1)):\n        # If the current element in the first list is not already in the count dictionary, add it with a count of 1\n        if nums1[i] not in count_dict:\n            count_dict[nums1[i]] = 1\n        # If the current element in the first list is already in the count dictionary, increment its count by 1\n        else:\n            count_dict[nums1[i]] += 1\n    \n    # Iterate through the second list\n    for i in range(len(nums2)):\n        # If the current element in the second list is not already in the count dictionary, add it with a count of 1\n        if nums2[i] not in count_dict:\n            count_dict[nums2[i]] = 1\n        # If the current element in the second list is already in the count dictionary, increment its count by 1\n        else:\n            count_dict[nums2[i]] += 1\n    \n    # Initialize the count of same pairs to 0\n    count_same = 0\n    \n    # Iterate through the count dictionary and check if the count for each element is equal to 1\n    for key in count_dict:\n        if count_dict[key] == 1:\n            # If the count for the current element is equal to 1, increment the count of same pairs by 1\n            count_same += 1\n    \n    return count_same"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists must be of equal length\"\n    counts = {}\n    for i in range(len(nums1)):\n        if nums1[i] in counts:\n            counts[nums1[i]] += 1\n        else:\n            counts[nums1[i]] = 1\n    for i in range(len(nums2)):\n        if nums2[i] in counts:\n            counts[nums2[i]] += 1\n        else:\n            counts[nums2[i]] = 1\n    count = 0\n    for i in counts:\n        if counts[i] > 1:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the counts of each number in each list\n    count_dict = {}\n    for i in range(len(nums1)):\n        count_dict[nums1[i]] = count_dict.get(nums1[i], 0) + 1\n        count_dict[nums2[i]] = count_dict.get(nums2[i], 0) + 1\n\n    # Find the indices of numbers with the same count in both lists\n    same_indices = []\n    for num, count in count_dict.items():\n        if count == 2:\n            same_indices.append(nums1.index(num))\n            same_indices.append(nums2.index(num))\n\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    This function will count the number of indices in the two lists where \n    the corresponding values are equal.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and calculate the sum of its digits\n    digits_sum = sum([int(digit) for digit in str(base)])\n    # Calculate the sum of the digits raised to the power\n    result = digits_sum ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit ** power\n        power //= 10\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    # initialize the sum to zero\n    total = 0\n    # loop over the digits of the base\n    while base > 0:\n        # extract the last digit of the base\n        digit = base % 10\n        # add it to the total\n        total += digit\n        # divide the base by 10 to remove the last digit\n        base //= 10\n    # calculate the sum of digits raised to the power\n    result = 0\n    for i in range(power):\n        result += total ** i\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable to 0\n    sum_digits = 0\n    # Iterate through the digits of the base and add their values to the sum variable\n    for digit in base_str:\n        sum_digits += int(digit)\n    # Calculate the sum of the digits raised to the specified power\n    power_sum = sum_digits ** power\n    # Return the result\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power+1):\n        digit = base % 10\n        sum += digit\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    while power > 0:\n        total_sum += base % 10\n        power //= 10\n        base //= 10\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum variable to zero\n    sum_digits = 0\n    \n    # Loop through each digit in the base string and add it to the sum variable\n    for digit in base_str:\n        sum_digits += int(digit)\n    \n    # Calculate the sum of digits to the power of the power variable\n    power_sum = sum_digits ** power\n    \n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total_sum = 0\n    base_str = str(base)\n\n    for digit in base_str:\n        total_sum += int(digit) ** power\n\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n\n    # Use regex to extract all the quotations in the string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Extract the values between quotations and return them\n    return [match[1] for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match the opening and closing quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, text)\n\n    # If a match is found, extract the quotation marks and return the extracted value\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to extract values between quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # pattern to match quotation marks\n    matches = re.findall(pattern, text)  # find all occurrences of the pattern in the text\n    result = []\n    for match in matches:\n        result.append(match[1])  # extract the contents of the quotation marks\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.+?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use a regex pattern to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # find all the matches between the pattern and the string\n    matches = re.findall(pattern, text1)\n    # return a list of the matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to match quotation marks and capture their values\n    pattern = r'(?<=\")(.*?)(\")'\n    matches = re.findall(pattern, text1)\n    \n    # Return a list of extracted values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function will extract the values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = re.compile(r'\"([^\"]*)\"')\n    return pattern.findall(text)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], \n                  test_tup[1] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[3])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize empty list to store the result\n    result = []\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # multiply the i-th and (i+1)-th elements of the tuple and append to the result list\n        result.append(test_tup[i] * test_tup[i+1])\n    # append the last element of the tuple to the result list\n    result.append(test_tup[-1])\n    # return the result list as the output\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple(t_1 * t_2 for t_1, t_2 in zip(test_tup, test_tup[1:]))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t = len(test_tup)\n    return tuple([test_tup[i] * test_tup[i+1] for i in range(t-1)])\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n\n    # Calculate the length of the input tuple\n    N = len(test_tup)\n\n    # Initialize an empty tuple to hold the output\n    output_tup = ()\n\n    # Loop through the input tuple\n    for i in range(N):\n        # Calculate the product of the current element and the next element\n        prod = test_tup[i] * test_tup[i+1]\n\n        # Append the product to the output tuple\n        output_tup += (prod,)\n\n    # Return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    N = len(test_tup) - 1 # subtract one to get the number of elements in the tuple\n    \n    new_tup = ()\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],) # add the product of the current and next elements to the new tuple\n    \n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # create an empty list to hold the result\n    result = []\n    # iterate over the first list and add each element to the result list\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Check if the length of both lists are equal\n    if len(lst1) == len(lst2):\n        # Initialize an empty list to store the sum of the two lists\n        result = []\n        # Loop through both lists and add the corresponding elements\n        for i in range(len(lst1)):\n            result.append(lst1[i] + lst2[i])\n        # Return the result list\n        return result\n    else:\n        # If the length of both lists are not equal, return an error message\n        return \"The length of both lists must be equal.\""
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # create a new list to store the sum of elements in the two input lists\n    result_list = []\n    # iterate through each element of the two input lists\n    for i in range(len(lst1)):\n        # append the sum of the current element of the first list and the current element of the second list to the result list\n        result_list.append(lst1[i]+lst2[i])\n    return result_list"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = set(nums)\n    return list(unique_nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.extend(list(group))\n        else:\n            result.append(key)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Use a generator expression to group consecutive duplicates and combine them into a list\n    grouped_nums = [list(g) for k, g in groupby(sorted(nums)) if len(list(g)) > 1]\n\n    # Combine all the lists into a single list\n    result = []\n    for group in grouped_nums:\n        if len(group) == 1:\n            result.append(group[0])\n        else:\n            result.append(group[0])\n            for num in group[1:]:\n                result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = {}\n    result = []\n\n    for num in nums:\n        if num not in seen:\n            seen[num] = True\n            result.append(num)\n        else:\n            seen[num] = False\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator object from the input list\n    g = groupby(nums)\n    # iterate over each group and check if the group contains consecutive duplicates\n    for key, group in g:\n        if len(list(group)) > 1:\n            # if it does, yield the group and reset the generator\n            yield from group\n            g = groupby(nums)\n        else:\n            # if it doesn't, advance the generator\n            next(g)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # group consecutive duplicates\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by consecutive elements\n    groups = groupby(nums)\n    # Remove consecutive duplicates of groups\n    result = []\n    for group in groups:\n        if not any(len(list(group)) > 1 for group in groups):\n            result += list(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums_list = list(nums)\n    grouped_nums = groupby(nums_list)\n\n    consecutive_duplicates = [k for k, g in grouped_nums if len(list(g)) > 1]\n\n    return consecutive_duplicates"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Calculate the base area of the cone\n    base_area = math.pi*(r**2)\n    \n    # Calculate the lateral surface area\n    lateral_area = (math.pi/3)*r*h\n    \n    # Return the lateral surface area\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2 * math.pi * r * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area of the cone using the formula A = pi*r^2*h\n    A = math.pi * r**2 * h\n    return A"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi*r**2*h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the base area\n    base_area = math.pi * r**2\n    \n    # Calculate the lateral surface area\n    lateral_area = 2 * math.pi * r * h\n    \n    # Calculate the total surface area\n    total_area = base_area + lateral_area\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi * r**2) / 3  # Base surface area\n    t = (2 * math.pi * r * h) / 3  # Top surface area\n    return s + t"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * (r**2 + h**2)\n    B = math.sqrt(A)\n    C = 2 * r * h\n    return (A - B**2) / C"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*r*h)+(2*math.pi*r**2)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function takes two parameters, r and h, which represent the radius and height of the cone respectively.\n    The function calculates and returns the lateral surface area of the cone using the formula:\n    lateral surface area = (1/3) * pi * r^2 * h\n    '''\n    lateral_surface_area = (1/3) * math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s+|\\.,|\\.|,', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.lower()\n    text = re.sub(r'\\s+','', text)\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace(':', ',')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s]', '', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = re.compile(r'\\s+|,|\\.')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Replace all remaining special characters with a colon\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(' ', ':', text)\n    text = re.sub(',', ':', text)\n    text = re.sub('.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'[.,;:]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[.,!?]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces with colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace commas with colon\n    text = re.sub(r',+', ':', text)\n    # Replace dots with colon\n    text = re.sub(r'\\.+', ':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # x not found in A"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first element in the array greater than or equal to x\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    # If x is not present in the array, return -1\n    if i == len(A):\n        return -1\n    # Find the index of the first occurrence of x in the remaining part of the array\n    j = i\n    while j < len(A) and A[j] == x:\n        j += 1\n    # If x is not present in the remaining part of the array, return -1\n    if j == len(A):\n        return -1\n    # Return the index of the first occurrence of x in the remaining part of the array\n    return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # binary search\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # Perform binary search on the array to find the first occurrence of x\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n\n    # Iterate over the sorted array to find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n\n    while i < n and A[i] < x:\n        i += 1\n\n    if i == n or A[i]!= x:\n        return -1\n\n    j = i + 1\n    while j < n and A[j] == x:\n        j += 1\n\n    return j"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    products = []\n\n    # calculate products of all sublists\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            products.append(1)\n            for k in range(i):\n                products[j] *= arr[j+k]\n\n    # calculate sum of products of all sublists\n    result = 0\n    for prod in products:\n        result += prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # calculate the product of all elements in the array\n    product = 1\n    for i in arr:\n        product *= i\n\n    # calculate the sum of products of all possible sublists\n    sum_product = product\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            sub_arr = arr[i:j]\n            prod_sub_arr = 1\n            for k in sub_arr:\n                prod_sub_arr *= k\n            sum_product -= prod_sub_arr\n\n    return sum_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    res = []\n    left = 0\n    right = 0\n\n    while right < n:\n        if arr[right] == 0:\n            right += 1\n            continue\n        if left == right:\n            left += 1\n            res.append(arr[left])\n            right += 1\n            continue\n\n        curr_sum = arr[left] * arr[right]\n        prod = 1\n        left_sum = 0\n        right_sum = 0\n\n        while left <= right:\n            prod *= arr[left]\n            left_sum += arr[left]\n            right_sum += arr[right]\n            if left_sum == right_sum:\n                break\n            left += 1\n            right -= 1\n\n        if right_sum!= 0:\n            res.append(curr_sum + prod)\n        right += 1\n\n    return sum(res)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n\n    # initializing variables\n    sum_of_subarray_products = 0\n    subarray_products = [1] * n\n\n    for i in range(n):\n        # updating subarray_products for all prefixes of arr[0:i+1]\n        for j in range(i+1):\n            subarray_products[j] = (subarray_products[j] * arr[j]) % mod\n\n        # updating sum_of_subarray_products\n        sum_of_subarray_products = (sum_of_subarray_products + subarray_products[0]) % mod\n\n    return sum_of_subarray_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Calculate the product of all elements in the list\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    # Initialize the sum of products of sublists as 0\n    subarray_sum = 0\n    # Calculate the sum of products of sublists from 1 to n\n    for i in range(n):\n        subarray_sum += prod\n    # Initialize the sum of products of all sublists as 0\n    all_subarray_sum = 0\n    # Calculate the sum of products of all sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            all_subarray_sum += arr[i]*arr[j]\n    # Return the sum of products of all sublists\n    return all_subarray_sum - subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    if not arr:\n        return 0\n    n = len(arr)\n    # Initialize variables to store products of sublists\n    prod_sublist = [1] * (n + 1)\n    prod_sublist[1] = 1\n    # Calculate products of sublists for different lengths of sublists\n    for i in range(2, n + 1):\n        temp_prod = 1\n        for j in range(i):\n            temp_prod *= arr[j]\n        prod_sublist[i] = temp_prod\n    # Find sum of products of sublists\n    sum_of_products = sum(prod_sublist)\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, n + 1):\n        dp[i] = (dp[i-1] + arr[i-1] * arr[i]) * arr[i]\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n    \n    # Calculate the prefix sum of arr and store it in dp[1..n]\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1]\n    \n    # Initialize the result array with 1\n    result = [1] * (n + 1)\n    \n    # Calculate the sum of products of all possible sublists\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            result[j] += dp[j] * dp[i - 1]\n    \n    # Initialize the result array with 1\n    for i in range(1, n + 1):\n        result[i] *= result[i - 1]\n    \n    # Return the sum of products of all possible sublists\n    return sum(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    arr.sort()  # sort the array to make it easier to find the sublists\n\n    # calculate the product of all elements of the array\n    product_of_array = 1\n    for i in range(n):\n        product_of_array *= arr[i]\n\n    # initialize the sum of products of sublists\n    sublist_product_sum = 0\n\n    # loop through all possible starting positions of sublists\n    for i in range(n):\n        # calculate the product of the sublist from the current position to the end of the array\n        sublist_product = 1\n        for j in range(i, n):\n            sublist_product *= arr[j]\n\n        # add the product of the sublist to the sum of products of sublists\n        sublist_product_sum += sublist_product\n\n    return sublist_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Define a function to generate all possible sublists of a list\n    def generate_sublists(lst):\n        sublists = []\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                sublists.append(lst[i:j])\n        return sublists\n\n    # Generate all possible sublists of the given list\n    sublists = generate_sublists(arr)\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate over all possible sublists\n    for sublist in sublists:\n        # Calculate the product of the sublist\n        product = 1\n        for num in sublist:\n            product *= num\n\n        # Add the product to the sum variable\n        sum += product\n\n    # Return the sum of all products\n    return sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    i = 0\n    bit = 0\n    # loop through each bit of the number\n    while n > 0:\n        # set the bit variable to the least significant bit\n        bit = n & 1\n        # toggle the bit variable\n        if bit == 0:\n            bit = 1\n        else:\n            bit = 0\n        # set the bit of the number to the toggled value\n        n = n ^ bit << i\n        # shift the bit variable to the right by 1 position\n        i += 1\n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # mask for first and last bits\n    mask1 = 0b1111111111111111111111111111110000000000000000000000000000000000\n    mask2 = 0b000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111\n\n    # extract the first and last bits\n    first_bit = (n & mask1) >> 1\n    last_bit = n & mask2\n\n    # toggle the middle bits\n    middle_bits = (n ^ first_bit ^ last_bit) & mask2\n\n    # concatenate the first and last bits with the middle bits\n    result = first_bit | middle_bits | last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result\n    result = 0\n    # Get the binary representation of the input number\n    binary_representation = bin(n)[2:]\n    # Get the length of the binary representation\n    length = len(binary_representation)\n    # Iterate over the bits of the binary representation\n    for i in range(length):\n        # Get the current bit value\n        current_bit = binary_representation[i]\n        # If the current bit is 0, toggle it to 1\n        if current_bit == '0':\n            result |= 1 << i\n        # If the current bit is 1, toggle it to 0\n        else:\n            result &= ~(1 << i)\n    # Convert the binary representation of the result back to decimal and return\n    return int(result, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << len(bin(n)[2:]))\n\n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit | last_bit)\n\n    # Combine the first and last bits with the middle bits\n    result = first_bit << len(bin(n)[2:]) | middle_bits | last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # To store the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (1 << (n.bit_length() - 1))\n\n    # To toggle the middle bits\n    middle_bits = n ^ ((first_bit << 1) | (last_bit << 1))\n\n    return middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\n    Input:\n        n: An integer number\n\n    Output:\n        The modified number\n\n    Algorithm:\n        1. Get the number of bits of the given number\n        2. If the number of bits is odd, then the first and the last bits are not toggled.\n        3. If the number of bits is even, then the first and the last bits are toggled.\n        4. For each bit in the middle, if the bit is 0, then toggle it to 1. Otherwise, toggle it to 0.\n        5. Return the modified number.\n\n    Time Complexity:\n        O(log(n))\n\n    Space Complexity:\n        O(1)\n    '''\n\n    n_bits = 0\n    while n!= 0:\n        n_bits += 1\n        n &= (n - 1) # clears the least significant bit set in n, where n is a binary number\n\n    if n_bits % 2 == 1:\n        # the number of bits is odd\n        return n\n    else:\n        # the number of bits is even\n        middle_bit = n_bits // 2\n        mask = (1 << (middle_bit + 1)) - 1 # bit mask of the middle bit and the rightmost set bit\n        return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function toggles the middle bits of a number except for the first and last bits.\n    \"\"\"\n    # Initialize the first and last bits to 1\n    first_bit = (n & 0x01) == 1\n    last_bit = (n & 0x80) == 0x80\n\n    # Toggle the middle bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n\n    # Combine the middle bits with the first and last bits\n    result = (first_bit << 7) | middle_bits | (last_bit << 6)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 15\n\n    # Toggle the middle bits of the number\n    middle_bits = (n ^ first_bit ^ last_bit) & 1\n\n    # Combine the first and last bits and middle bits to get the final answer\n    return first_bit | middle_bits | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Calculate the length of the binary representation of n\n    length = len(bin(n)[2:])\n\n    # Set the first and last bits to 0\n    n &= ~(1 << length - 1)\n\n    # Shift all the bits except the first and the last to the left\n    n <<= 1\n\n    # Toggle the middle bits\n    for i in range(length - 4):\n        n ^= (n & 1) << i\n\n    # Shift the bits back to the right\n    n >>= 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Find the index of the first and last bits\n    index1 = n.bit_length()-1\n    index2 = n.bit_length()-2\n\n    # Toggle the bits of the number except the first and the last bits\n    n = n & ~(0x3 << (index1+1))\n    n = n & ~(0x3 << (index2+1))\n    n = n | (n & 0x1 << index1)\n    n = n | (n & 0x1 << index2)\n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return index + 1\n        else:\n            return index\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    elif i == 0:\n        return 0\n    else:\n        return i - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the built-in bisect_left function to find the index where the value should be inserted.\n    index = bisect.bisect_left(a, x)\n    # Check if the value is already present in the list. If it is, then the left insertion point is simply the index.\n    if index < len(a) and a[index] == x:\n        return index\n    # If the value is not present in the list, then find the index where it should be inserted.\n    else:\n        # Use binary search to find the index where the value should be inserted.\n        left = 0\n        right = len(a)\n        while left < right:\n            mid = (left + right) // 2\n            if a[mid] < x:\n                left = mid + 1\n            else:\n                right = mid\n        # Return the index where the value should be inserted.\n        return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    elif index!= 0 and a[index - 1] == x:\n        return index - 1\n    else:\n        return None"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    \n    # Return the left insertion point\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the left insertion point using binary search\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # Return the left insertion point\n    return low"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    # Use binary search to find the insertion point for x\n    index = bisect.bisect_left(a, x)\n    # If x is already in the list, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, return the left insertion point\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return left_insertion(a[index:], x)\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n    a: sorted list of integers\n    x: an integer value to be inserted\n\n    Returns:\n    index: integer, index of the left insertion point\n    \"\"\"\n    # Use bisect.bisect_left to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    a = list(set(a))\n    # Create a list of tuples containing the index and value of each element in the sorted list\n    index_list = [(i, a[i]) for i in range(len(a))]\n    # Use bisect module to find the left insertion point\n    left_index = bisect.bisect_left([t[1] for t in index_list], x)\n    # Return the left index\n    return left_index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return bool(re.match(regex, string))"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        print(\"The given string is starting with a vowel.\")\n    else:\n        print(\"The given string is not starting with a vowel.\")"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n\nstring = \"Hello, World!\"\nprint(check_str(string)) # Output: True\n\nstring = \"123\"\nprint(check_str(string)) # Output: False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    This function takes a string as input and returns True if the string starts with a vowel, otherwise False.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    # Use regex to match the string\n    match = re.match(regex, string)\n\n    # Check if the match is not None\n    if match is not None:\n        # If the string starts with a vowel, return True\n        if match.group(0)[0].lower() in ['a', 'e', 'i', 'o', 'u']:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n-1)) / (1-((1/(n-1))**n))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return (1 / (n - 1)) + geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1/n) * (geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Taking the first digit of the triangular number as the first digit of the smallest triangular number\n    smallest_triangular_number = int(math.pow(10, n-1))\n    \n    # Looping through all digits of the smallest triangular number\n    for i in range(1, n+1):\n        # Taking the next triangular number digit as the next triangular number digit\n        next_triangular_number = smallest_triangular_number + i\n        \n        # Updating the smallest triangular number if the current digit is smaller than the smallest triangular number\n        if int(next_triangular_number/10**i)!= smallest_triangular_number:\n            smallest_triangular_number = next_triangular_number\n    \n    # Returning the index of the smallest triangular number\n    return n+1-smallest_triangular_number"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    if n == 0:\n        return 0\n    \n    # Find the largest number with n digits\n    largest = math.factorial(10**n-1) / math.factorial(10**n-2)\n    index = 2\n    while largest > math.factorial(index-1):\n        index += 1\n    \n    # Calculate the smallest triangular number with n digits\n    smallest = math.factorial(index-1) / math.factorial(n)\n    return index-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    count = 1\n    result = 0\n    while result < n:\n        result = result + count * (count + 1)\n        count += 1\n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # initialize count to 0\n    count = 0 \n    # initialize smallest_triangular to math.inf\n    smallest_triangular = float('inf') \n\n    # loop through each digit\n    for i in range(n): \n        # calculate the maximum number with i digits that is a triangular number\n        max_triangular = (10**(i+1)) - 1 \n        # loop through each number from 1 to max_triangular\n        for j in range(1, max_triangular + 1): \n            # calculate the triangular number\n            triangular = i*j \n            # if the triangular number is smaller than smallest_triangular, update smallest_triangular and count\n            if triangular < smallest_triangular: \n                smallest_triangular = triangular \n                count = j \n                # print(triangular) \n\n    # return the index of smallest_triangular\n    return count "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = 10**(n-1)\n    return math.floor(triangular_num/2)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    triangular_numbers = []\n    triangular_numbers.append(1)\n    while len(str(triangular_numbers[-1])) < n:\n        triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2])\n    \n    smallest_triangular_number = min(triangular_numbers)\n    index = triangular_numbers.index(smallest_triangular_number)\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        smallest_triangular = math.ceil(n**2 / 2)\n        return smallest_triangular - (smallest_triangular**2 - smallest_triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # smallest triangular number with n digits\n    smallest_triangular = int(math.pow(10, n))\n    # initialize a list of indices for smallest triangular numbers with n digits\n    index_list = [0] * smallest_triangular\n    index_list[0] = 0\n    for i in range(1, smallest_triangular):\n        index_list[i] = -1\n    # find the indices of smallest triangular numbers with n digits in the list\n    for i in range(1, smallest_triangular):\n        if index_list[i] == -1:\n            j = i\n            while j * j <= smallest_triangular and index_list[j * j] == -1:\n                index_list[j * j] = i\n                j += 1\n    # find the index of smallest triangular number with n digits in the list\n    for i in range(smallest_triangular - 1, 0, -1):\n        if index_list[i]!= -1:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    '''\n    count = 0 \n    triangular = 0 \n    \n    while True: \n        triangular += 1 \n        count += 1 \n        num_digits = len(str(triangular)) \n        if num_digits == n: \n            break \n            \n    return count - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_triangular(n):\n    \"\"\"\n    Check if a given number is triangular.\n    \"\"\"\n    for i in range(int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef smallest_triangular_with_n_digits(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the smallest triangular number to be 10^n-1\n    min_triangular = 10**n - 1\n    \n    # Iterate until we find the index of the smallest triangular number with n digits\n    for i in range(1, min_triangular):\n        if is_triangular(i):\n            min_triangular = i\n            break\n    \n    return min_triangular"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create a dictionary to store the key-value pairs\n    dict_obj = {}\n    \n    # loop through the tuple and add the adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        dict_obj[test_tup[i]] = test_tup[i+1]\n        \n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Traverse the tuple and add the pairs to the dictionary\n    for i in range(len(test_tup) - 1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Check if the input tuple is empty\n    if len(test_tup) == 0:\n        return None\n    \n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Iterate over the tuple and add adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        # Add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    # Return the dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return {i: j for i, j in zip(test_tup, test_tup[1:])}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return None\n    else:\n        return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Using zip function to create pairs of adjacent elements\n    pairs = list(zip(test_tup, test_tup[1:]))\n    # Using dict comprehension to convert pairs to dictionary\n    return {key:value for key, value in pairs}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and checks whether all the characters in the string are same or not.\n    \n    :param s: The string to check\n    :return: True if all the characters are same, False otherwise\n    \"\"\"\n    if len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and checks whether all the characters in the string are same or not.\n    '''\n    # take first character of the string and store in variable 'first_char'\n    first_char = s[0]\n    # loop through each character of the string\n    for i in range(1, len(s)):\n        # check if the current character is same as the first character\n        if s[i]!= first_char:\n            return False\n    # if we get through the loop without returning False, all characters are same\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initializing variables\n    count = 0\n    char = s[0]\n    # loop to iterate through the string\n    for i in range(1, len(s)):\n        # checking if the current character is the same as the previous character\n        if s[i] == char:\n            count += 1\n        else:\n            # if the current character is not the same as the previous character, reset the count to 0\n            count = 0\n            char = s[i]\n    # if the loop has gone through the whole string, it means all the characters are the same\n    return count == len(s)"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 1:\n        for i in range(1, len(s)):\n            if s[0]!= s[i]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Check if the length of the string is zero or not\n    if len(s) == 0:\n        return True\n\n    # Get the first character of the string\n    first_char = s[0]\n\n    # Loop through the remaining characters of the string\n    for char in s[1:]:\n        # Check if the current character is same as the first character\n        if char!= first_char:\n            # If the characters are not same, return False\n            return False\n\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter\n    s = (side * (1 + math.sqrt(5)) / 2)**(1/2)\n\n    # Calculate the area using Heron's formula\n    area = (5 * side**2) / (10 * s)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the area using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) / 2\n    area = math.sqrt(s * (s - side) * (s - side - side) * (s - side - side - side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/3) * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n\n    s = 1/3 * side**2\n    area = math.sqrt(s*(s-side)*(s-side*math.sqrt(3))*(s-side*math.sqrt(3)))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the tetrahedron\n    sp = (side + side + side + math.sqrt(3)*side) / 2\n\n    # calculate the area of the tetrahedron\n    area = 0.5 * sp * (sp - side) * (sp - side) * (sp - side)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron based on its side length.\n    \n    :param side: the length of each side of the tetrahedron\n    :type side: float\n    \n    :returns: the area of the tetrahedron\n    :rtype: float\n    \"\"\"\n    # Calculate the semi-perimeter and its square root\n    s = (side * (side + math.sqrt(3))) / 4\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - side) * (s - side - math.sqrt(3)) * (s - side + math.sqrt(3)))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #calculate the area of the tetrahedron using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/6) * s * (s - side) * (s - side) * (s - side)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side**2\n    area = math.sqrt(s*(1-s))\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes two arguments: lst (list of elements) and m (integer).\n    It returns the rotated list by m items to the right direction.\n    \"\"\"\n    if m == 0:\n        return lst\n    elif m < 0:\n        m = len(lst) + m\n    \n    n = len(lst)\n    m = m % n\n    return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and an integer m as input and returns the rotated list.\n    The function rotates the list by m items to the right direction.\n    \"\"\"\n    n = len(lst)\n    # If m is greater than the length of the list, do not rotate it.\n    if m > n:\n        return lst\n    # Store the last m items of the list in a temporary variable.\n    temp = lst[-m:]\n    # Remove the last m items from the list.\n    lst = lst[:-m]\n    # Append the last m items to the end of the list.\n    lst.extend(temp)\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and an integer m as input. The function rotates the list by m items to the right direction.\n    \"\"\"\n    n = len(lst)\n    # if m is greater than n, return the original list\n    if m > n:\n        return lst\n    # if m is zero, return the original list\n    elif m == 0:\n        return lst\n    # if m is greater than zero, perform the rotation\n    else:\n        # create a new list to store the rotated elements\n        rotated_lst = []\n        # iterate through the original list\n        for i in range(n - m, n):\n            # append the last m elements to the rotated list\n            rotated_lst.extend(lst[i - m:i])\n            # append the first m elements to the end of the rotated list\n            rotated_lst.append(lst[i])\n        # return the rotated list\n        return rotated_lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n\n    # Check if the rotation count is less than or equal to zero\n    if m <= 0:\n        return list\n    \n    # Check if the rotation count is greater than the length of the list\n    elif m > n:\n        # If the rotation count is greater than the length of the list,\n        # rotate it to the right until the count becomes less than or equal to zero\n        while m > n:\n            m -= n\n        return rotate_right(list, m)\n    \n    # Rotate the list to the right by m items\n    for i in range(n-m):\n        temp = list[i]\n        list[i] = list[i+m]\n        list[i+m] = temp\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If m is greater than or equal to n, no rotation is required\n    if m >= n:\n        return list\n    \n    # If m is 0, return the original list\n    if m == 0:\n        return list\n    \n    # Otherwise, perform the rotation\n    for i in range(m, n):\n        list[i-m] = list[i]\n    \n    # Fill the remaining elements of the list with None\n    for i in range(n-m):\n        list[n-m+i] = None\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    k = m % n\n    if k == 0:\n        return list\n    else:\n        return list[-k:] + list[:-k]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize variables\n    n = len(list)\n    temp = []\n    \n    # copy the last n-m items to temp list\n    for i in range(n-m):\n        temp.append(list[i])\n    \n    # copy the remaining items to the beginning of the list\n    for i in range(m):\n        list[i] = list[i+n-m]\n    \n    # copy the temp list to the remaining items of the list\n    for i in range(n-m, n):\n        list[i] = temp[i-n+m]\n    \n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # If the rotation is greater than the number of elements in the list, reverse the entire list\n    if m > n:\n        list.reverse()\n        m = n - m\n    \n    # If the rotation is less than or equal to 0, return the original list\n    if m <= 0:\n        return list\n    \n    # Reverse the first m elements of the list\n    list[:m].reverse()\n    \n    # Reverse the remaining elements of the list\n    list[m:].reverse()\n    \n    # Reverse the entire list\n    list.reverse()\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n\n    Args:\n    list: list to be rotated\n    m: number of items to rotate\n\n    Returns:\n    rotated list\n    \"\"\"\n    n = len(list)\n    m %= n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_exists = False\n    for elem in test_tup:\n        if elem is None:\n            none_exists = True\n            break\n    return none_exists"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(x is None for x in test_tup)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(digit) % x == 0 for digit in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(d) for d in str(endnum)]  # Convert the endnum to a list of digits\n    filtered_nums = [num for num in range(startnum, endnum + 1) if all(digit % num == 0 for digit in digits)]  # Filter the numbers based on the condition\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda x: all(int(d) % x == 0 for d in str(x))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # Find the digits of the given numbers\n    digits = [int(digit) for digit in str(startnum) + str(endnum)]\n\n    # Create a lambda function that checks if a number is divisible by every digit in the range\n    is_divisible = lambda x: all(digit in str(x) for digit in digits)\n\n    # Use the lambda function to filter the given range and find the divisible numbers\n    divisible_numbers = list(filter(is_divisible, range(startnum, endnum + 1)))\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    # define a lambda function to check if a number is divisible by a digit\n    divisible_by_digit = lambda x: all(digit in str(x) for digit in str(x))\n\n    # iterate through the range of numbers\n    for num in range(startnum, endnum+1):\n        # check if the number is divisible by every digit\n        if divisible_by_digit(num):\n            # print the number if it meets the condition\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = set(str(endnum))\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # Define a function to check if a number is divisible by a digit\n    def is_divisible_by_digit(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if digit == 0 or digit not in range(10):\n                return False\n        return True\n\n    # Define a filter function that checks if a number is divisible by all its digits\n    filter_func = lambda x: all(map(lambda y: x % y == 0, range(1, 10)))\n\n    # Filter the range of numbers that pass the filter function\n    divisible_nums = filter(filter_func, range(startnum, endnum + 1))\n\n    # Return the divisible numbers\n    return list(divisible_nums)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(d) for d in str(startnum)]\n    for num in range(startnum, endnum+1):\n        if all(num % d == 0 for d in digits):\n            yield num"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle should be less than or equal to 360 degrees.\")\n        return None\n    \n    area = math.pi*r**2*a/360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r**2 * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    else:\n        # calculate the area of the sector\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        area = r * r * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is within range\n    if a > 360:\n        return None\n    \n    # Find area using formula\n    area = (math.pi*(r**2)) * (a/360)\n    \n    # Return area\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n, m, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p+1) for i in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i==0 or j==0 or k==0:\n                    dp[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i][j-1][k], dp[i-1][j][k], dp[i-1][j-1][k-1])\n    \n    # construct the LCS\n    i, j, k = n, m, p\n    lcs = []\n    while i>0 and j>0 and k>0:\n        if X[i-1] == Y[j-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i][j-1][k]:\n            i -= 1\n        elif dp[i-1][j][k] == dp[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n            \n    # reverse the LCS\n    lcs.reverse()\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Step 1: Initialize a 2D array to store lengths of longest common suffixes of three strings\n    n, m, p = len(X), len(Y), len(Z)\n    lcs_array = [[0] * (p + 1) for i in range(n + 1)]\n\n    # Step 2: Fill the 2D array using dynamic programming\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, p + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs_array[i][j][k] = 1 + lcs_array[i-1][j-1][k-1]\n                elif X[i-1] == Y[j-1]:\n                    lcs_array[i][j][k] = lcs_array[i-1][j-1][k]\n                elif X[i-1] == Z[k-1]:\n                    lcs_array[i][j][k] = lcs_array[i-1][j][k-1]\n                else:\n                    lcs_array[i][j][k] = lcs_array[i][j-1][k]\n\n    # Step 3: Backtrack from the 2D array to find the actual longest common subsequence\n    i, j, k = n, m, p\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\n    Function will take three string sequences as input and return the longest common subsequence as a string.\n\n    Time Complexity: O(nm), where n is the length of the longest string sequence, and m is the length of the shortest string sequence.\n\n    Space Complexity: O(nm), as we are storing the longest common subsequence in a matrix of size n x m.\n    '''\n\n    # find the length of the longest string sequence\n    n = max(len(X), len(Y), len(Z))\n\n    # create a matrix to store the longest common subsequences\n    dp = [[0] * (n+1) for i in range(3)]\n\n    # fill the matrix using dynamic programming\n    for i in range(3):\n        for j in range(n+1):\n            if i == 0 and j == 0:\n                dp[i][j] = 0\n            elif i == 0:\n                dp[i][j] = dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # extract the longest common subsequence and return it as a string\n    result = []\n    i = 2\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[j-1]:\n            result.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n = len(X) \n    m = len(Y) \n    p = [[0] * (m+1) for i in range(n+1)] \n\n    # Build LCS table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n\n    # Return the length of LCS \n    return p[n][m] \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    # Dictionary to store the lengths of subsequences \n    # ending at each position in X, Y and Z \n    len_dict = {} \n\n    # Initialize length of LCS as 0 at first \n    len_LCS = 0 \n\n    # Iterate through all the positions in X, Y and Z \n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n\n                # If current position is last \n                if i == len(X) and j == len(Y) and k == len(Z): \n                    len_LCS = 1\n\n                # If current position is last in any of the strings \n                elif i == len(X) or j == len(Y) or k == len(Z): \n                    len_LCS = 0\n\n                # If current character matches, then LCS will continue \n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    len_LCS = len_LCS + len_dict[(i-1), (j-1), (k-1)]\n\n                # If character does not match, then find LCS with previous \n                # characters and append length of current character to LCS \n                else: \n                    len_LCS = max(len_LCS, len_dict[(i-1), (j-1), (k-1)] + 1) \n\n                # Store the length of the LCS for the current position \n                len_dict[(i, j, k)] = len_LCS \n\n    # Return the length of LCS \n    return len_LCS \n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize a 2D array to store the length of longest common subsequence for three strings\n    lcs_matrix = [[0 for j in range(len(Y) + 1)] for i in range(len(X) + 1)]\n\n    # Fill the 2D array with the lengths of longest common subsequences for substrings of X[0:i], Y[0:j], and Z[0:k]\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    lcs_matrix[i][j] = lcs_matrix[i-1][j-1] + 1\n                else:\n                    lcs_matrix[i][j] = max(lcs_matrix[i-1][j], lcs_matrix[i][j-1], lcs_matrix[i-1][j-1])\n\n    # Return the length of the longest common subsequence for X, Y, and Z\n    return lcs_matrix[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Create a 3D dynamic programming table to store the length of LCS of all prefixes of X, Y and Z\n    # where the last element of each sequence is the same as the corresponding element in the previous sequence.\n    # Initialize the last element of each sequence as 1 for the base case of the LCS of an empty sequence.\n    # The table is filled in bottom-up manner.\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[[0] * (p + 1) for j in range(m + 1)] for i in range(n + 1)]\n\n    # Fill in the table bottom-up\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[j - 1] == Y[i - 1]:\n                dp[i][j][p] = dp[i - 1][j - 1][p - 1] + 1\n            else:\n                dp[i][j][p] = max(dp[i - 1][j][p], dp[i][j - 1][p], dp[i - 1][j - 1][p - 1])\n\n    # Convert the table to a list of lists of integers to store the lengths of LCS of all prefixes of X, Y and Z\n    # where the last element of each sequence is the same as the corresponding element in the previous sequence.\n    # The list of lists is filled in reverse order to store the LCS in the correct order.\n    lcs = []\n    for p in range(p, -1, -1):\n        lcs.append([dp[n][m][p], dp[n - 1][m][p], dp[n][m - 1][p]])\n\n    # Return the LCS as a list of integers\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Create a table to store lengths of LCS of three strings\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Fill table L in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # To find the length of LCS, use L[m][n][o]\n    return L[m][n][o]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a 3D table to store lengths of LCS of all three sequences\n    # Initialize first row and column to 0\n    table = [[0] * (len(Y) + 1) for _ in range(len(X) + 1)]\n\n    # Fill the table in bottom up fashion\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return the length of the LCS\n    return table[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Taking input strings from user\n    X = input(\"Enter first string: \").strip()\n    Y = input(\"Enter second string: \").strip()\n    Z = input(\"Enter third string: \").strip()\n\n    # Initialize matrices of length of strings and values\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Initialize matrices with 0\n    table = [[0 for j in range(o + 1)] for i in range(m + 1)]\n\n    # Fill the matrices using dynamic programming\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(o + 1):\n                if i == 0 or j == 0 or k == 0:\n                    table[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    table[i][j][k] = table[i - 1][j - 1][k - 1] + 1\n                else:\n                    table[i][j][k] = max(table[i - 1][j][k], table[i][j - 1][k], table[i][j][k - 1])\n\n    # Traverse the table to find the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = Z[k - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i - 1][j][k] == table[i - 1][j][k - 1]:\n            i -= 1\n        elif table[i][j - 1][k] == table[i - 1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Print the longest common subsequence\n    print(\"Longest common subsequence is:\", lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all the words in the given string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    \n    # Join the capitalized words with spaces\n    new_str =''.join(words)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # Loop through the list of words and insert spaces between them\n    for i in range(len(words)):\n        # If the current word is the first one, add a space before it\n        if i == 0:\n            words[i] ='' + words[i]\n        # If the current word is the last one in the list, don't add a space after it\n        elif i == len(words)-1:\n            words[i] = words[i]\n        # If the current word is neither the first nor the last, add a space before and after it\n        else:\n            words[i] ='' + words[i] +''\n    # Join the list of words with no spaces between them\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # create a pattern to match capital letters\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    # split the string into words\n    words = str1.split()\n    # iterate over the words and replace the capital letters with spaces\n    for i in range(len(words)):\n        if pattern.match(words[i]):\n            words[i] ='' + words[i]\n    # join the words with spaces\n    final_str =''.join(words)\n    return final_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with a space\n    str1 = re.sub('[^a-zA-Z0-9]+','', str1)\n    # Split the string into words\n    words = str1.split()\n    # Iterate through the words and capitalize the first letter of each word\n    capitalized_words = []\n    for word in words:\n        capitalized_word = word.capitalize()\n        capitalized_words.append(capitalized_word)\n    # Join the capitalized words with spaces\n    result =''.join(capitalized_words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the list of words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    \n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces and capitalize the first letter of each word\n    new_words = [words[i][0].upper() +'' + words[i][1:] for i in range(len(words))]\n    # Convert the list of words to a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expressions\n    words = re.findall(r'\\b[a-zA-Z][a-zA-Z\\']*\\b', str1)\n\n    # Join the words with spaces between them\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words with spaces\n    new_str =''.join(words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Using regular expression to find all capital words\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    # Converting words to space separated string\n    output =''.join(words)\n    return output"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all the strings in the list into float values\n    nums_float = [float(num_str) for num_str in nums_str]\n    # Sort the list in ascending order\n    nums_float.sort()\n    # Convert the sorted list back into strings\n    nums_str_sorted = [str(num_float) for num_float in nums_float]\n    # Return the sorted list\n    return nums_str_sorted"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(int(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): A list of strings of numbers.\n\n    Returns:\n        list: The sorted list of strings of numbers.\n    '''\n\n    # Convert all strings to float values\n    nums = [float(num) for num in nums_str]\n\n    # Sort the float values using the built-in `sorted` function\n    sorted_nums = sorted(nums)\n\n    # Convert the sorted float values back to strings and return the result\n    return ['%g' % num for num in sorted_nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    num_list = [int(num_str) for num_str in nums_str]\n    num_list.sort()\n    sorted_nums_str = [str(num) for num in num_list]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: (int(x), x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Convert all the strings to numeric values and then sort them numerically\n    nums = [float(x) for x in nums_str]\n    nums.sort()\n    # Convert the sorted list back to strings\n    result = [str(x) for x in nums]\n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to numeric values\n    nums = [float(num_str) for num_str in nums_str]\n    # Sort the list numerically\n    nums.sort()\n    # Convert back to string and return the sorted list\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert all strings to floats\n    nums = [float(num_str) for num_str in nums_str]\n\n    # Sort the floats using the sort() method\n    nums.sort()\n\n    # Convert the sorted floats back to strings and join them into a single string\n    sorted_str = \" \".join([str(num) for num in nums])\n\n    return sorted_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all the numeric strings to numbers\n    nums = [float(num) for num in nums_str if num.isdigit()]\n\n    # Sort the numeric strings in a numerical order\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [''.join(str(num)) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_list = []\n    for num_str in nums_str:\n        nums_list.append(float(num_str))\n    nums_list.sort()\n    for i in range(len(nums_list)):\n        nums_str[i] = str(nums_list[i])\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # append the tuple to the list\n    test_list.append(test_tup)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    if i == 0:\n        return True\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n\n    Args:\n        arr: array of integers\n        i: current index of the array\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise\n    \"\"\"\n    # Base case\n    if i < 0:\n        return True\n    \n    # If the current element is greater than or equal to its parent, it's a min heap\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        # Recursively check the left and right sub-arrays\n        return check_min_heap_helper(arr, i-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0:\n        parent_idx = (i - 1) // 2\n        if arr[i] < arr[parent_idx]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr) // 2:\n        return True\n    \n    left = 2 * i + 1\n    right = 2 * i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    \n    if right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_min_heap(arr):\n    return is_min_heap_rec(arr, 0)\n\ndef check_min_heap_helper(arr, i):\n    if i >= len(arr) or arr[i] >= arr[i//2]:\n        return False\n    return True\n\ndef is_min_heap_rec(arr, i):\n    if i >= len(arr) // 2:\n        return check_min_heap_helper(arr, i)\n    return check_min_heap_helper(arr, i) and is_min_heap_rec(arr, 2 * i + 1) and is_min_heap_rec(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # base case\n    if i == 0:\n        return True\n\n    # check if left child is smaller than parent\n    if arr[i] < arr[i//2]:\n        return False\n\n    # check if right child is smaller than parent\n    if i + 1 < len(arr) and arr[i] < arr[i+1]:\n        return False\n\n    # recursively call the function for left and right children\n    return check_min_heap_helper(arr, i//2) and check_min_heap_helper(arr, i+1)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # return True for empty array\n    if not arr:\n        return True\n\n    # call the helper function for the first element\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[2*i+1]:\n        return False\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) % 2!= 0:\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_min_heap(arr):\n    '''\n    Check if a given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i//2]:\n            return False\n    return True\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    if i == n//2:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i*2) and check_min_heap_helper(arr, i*2+1)\n\narr = [6, 2, 1, 5, 3, 8, 0, 9, 7]\nif is_min_heap(arr):\n    print(\"The given array represents a min heap.\")\nelse:\n    print(\"The given array does not represent a min heap.\")"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_min_heap(arr):\n    '''\n    Function to check if the given array represents min heap or not.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n    return True\n\n\ndef main():\n    arr = [5, 3, 8, 2, 9, 1, 4, 6, 7]\n    if is_min_heap(arr):\n        print(\"Min Heap\")\n    else:\n        print(\"Not a Min Heap\")\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] >= arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 1\n    for i in range(2, n + 1):\n        jacobsthal = (4 * jacobsthal - 1) // i\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) + 1\n    else:\n        return jacobsthal_num((n-1)//2) + jacobsthal_num((n-1)//2) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2*jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**(n-1) - 1) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # Find the (n-2)th Jacobsthal number\n        num_2 = jacobsthal_num(n-2)\n        # Return the (n-2)th Jacobsthal number plus 2\n        return num_2 + 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n - 1) * jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 1\n    b = 1\n    j = 0\n    while j < n:\n        j += 1\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth Jacobsthal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_num_list = [1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n        if n <= len(jacobsthal_num_list):\n            return jacobsthal_num_list[n-1]\n        else:\n            return jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1, 1]\n    for i in range(2, n):\n        jacobsthal_numbers.append(jacobsthal_numbers[i-1] + jacobsthal_numbers[i-2] + jacobsthal_numbers[i-3])\n    return jacobsthal_numbers[n-1]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Initialize minimum k with first element of the list\n    min_k_val = test_list[0]\n\n    # Loop through the remaining elements of the list\n    for i in range(1, len(test_list)):\n\n        # If the current element is less than minimum k, update minimum k\n        if test_list[i] < min_k_val:\n            min_k_val = test_list[i]\n\n        # If the current element is greater than or equal to minimum k, check if it is the smallest of the k smallest elements\n        if i >= K:\n            if test_list[i] < min_k_val:\n                min_k_val = test_list[i]\n\n    return min_k_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    min_records = []\n    for i in range(K):\n        min_val = float('inf')\n        for j in range(len(test_list)):\n            if test_list[j][0] < min_val:\n                min_val = test_list[j][0]\n        min_records.append((min_val, i))\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(float('inf'))\n    for tup in test_list:\n        for i in range(K):\n            if tup[i] < min_list[i]:\n                min_list[i] = tup[i]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and an integer K as input and returns the minimum K records from the list of tuples.\n    '''\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to store the minimum K records and the counter of the number of records seen so far\n    min_records = []\n    count = 0\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(test_list)):\n        # If the counter is less than K, add the current tuple to the min_records list and increment the counter\n        if count < K:\n            min_records.append(test_list[i])\n            count += 1\n        # If the counter is greater than or equal to K, remove the first tuple from the min_records list and decrement the counter\n        else:\n            min_records.pop(0)\n            count -= 1\n\n    # Return the minimum K records from the list of tuples\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)-K+1):\n        min_list.append(min(test_list[i:i+K]))\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list by the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize minimum k count to the first K records\n    min_count = 0\n\n    # Iterate through the sorted list\n    for i in range(K):\n        # If we have found a record with a minimum value, increment min_count\n        if test_list[i][1] == test_list[min_count][1]:\n            min_count += 1\n        else:\n            break\n\n    return min_count\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    records = []\n    for i in range(len(test_list)):\n        records.append(test_list[i][0])\n    records.sort()\n    count = 0\n    for i in range(len(records)):\n        if count == K:\n            break\n        if records[i] not in test_list[i][1]:\n            continue\n        count += 1\n    return test_list[i]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the test list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # Initialize the minimum k to infinity\n    min_k_val = float('inf')\n\n    # Initialize the minimum k count to zero\n    min_k_count = 0\n\n    # Iterate through the sorted test list\n    for i in range(len(test_list)):\n        # If we have found minimum k records so far, break the loop\n        if min_k_count == K:\n            break\n\n        # If the current element has the minimum value, increment the count\n        if i < K:\n            min_k_count += 1\n\n        # Update the minimum k value if necessary\n        if test_list[i][1] < min_k_val:\n            min_k_val = test_list[i][1]\n\n    return min_k_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize variables to store the minimum k records and their indices\n    min_k_records = []\n    min_k_indices = []\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Check if the current tuple is a tuple of length k\n        if len(test_list[i]) == K:\n            # If it is, check if it is the minimum k record so far\n            if len(min_k_records) < K:\n                min_k_records.append(test_list[i])\n                min_k_indices.append(i)\n            # If it is not, loop through the min_k_records and find the smallest tuple\n            else:\n                for j in range(len(min_k_records)):\n                    if len(min_k_records[j]) < len(test_list[i]):\n                        min_k_records[j] = test_list[i]\n                        min_k_indices[j] = i\n                        break\n    \n    # Create a dictionary to store the minimum k records\n    min_k_dict = {}\n    for i in range(len(min_k_records)):\n        min_k_dict[min_k_indices[i]] = min_k_records[i]\n    \n    # Return the minimum k records as a dictionary\n    return min_k_dict"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples as input and returns the minimum K records from the list.\n    \n    Args:\n    test_list: list of tuples\n    K: integer\n    \n    Returns:\n    The minimum K records from the list.\n    '''\n\n    # Sort the list in ascending order of the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a variable to keep track of the minimum K records\n    min_records = []\n\n    # Traverse the sorted list\n    for i in range(K):\n        # If the current tuple has a smaller first element, add it to the minimum K records\n        if i < len(test_list):\n            min_records.append(test_list[i])\n        # If the current tuple has a larger first element than the last added minimum record, update the minimum K records\n        elif len(min_records) > 0 and test_list[-1][0] < min_records[-1][0]:\n            min_records = [test_list[-1]]\n\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n\n    common_list = []\n\n    # Loop through each element in l1 and l2\n    for i in range(len(l1)):\n        # Check if element is in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            common_list.append(l1[i])\n\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l2:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the indices and the corresponding elements of the lists\n    indices = {}\n    for i in range(len(l1)):\n        indices[i] = l1[i], l2[i], l3[i]\n    \n    # Create an empty list to store the common elements\n    common = []\n    \n    # Loop through the indices dictionary\n    for i in indices:\n        # Check if the element at the current index is common in all three lists\n        if all(indices[j][i] == indices[i][j] for j in indices if j!= i):\n            # If it is, add it to the common list\n            common.append(indices[i])\n    \n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a dictionary to store the index of each element in each list\n    index_dict = {}\n    for i in range(len(l1)):\n        if l1[i] not in index_dict:\n            index_dict[l1[i]] = [i]\n        else:\n            index_dict[l1[i]].append(i)\n    for i in range(len(l2)):\n        if l2[i] not in index_dict:\n            index_dict[l2[i]] = [i]\n        else:\n            index_dict[l2[i]].append(i)\n    for i in range(len(l3)):\n        if l3[i] not in index_dict:\n            index_dict[l3[i]] = [i]\n        else:\n            index_dict[l3[i]].append(i)\n\n    # Find the common elements in the dictionaries and return a list of their indices\n    common_indices = []\n    for key in index_dict:\n        if len(index_dict[key]) == len(l1) and len(index_dict[key]) == len(l2) and len(index_dict[key]) == len(l3):\n            common_indices.append(index_dict[key])\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            if l1[i] not in common:\n                common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize empty lists to store common elements\n    common_elements = []\n    # loop through the indices of the first list\n    for i in range(len(l1)):\n        # check if the element at this index is in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            # add the common element to the list\n            common_elements.append(l1[i])\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create a list to store the common elements\n    common = []\n    # iterate through the first list\n    for i in range(len(l1)):\n        # if the element at the current index is in the second list and also in the third list\n        if l1[i] in l2 and l1[i] in l3:\n            # add the element to the list of common elements\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: x)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None  # no second smallest if there is only one number\n\n    numbers.sort()  # sort the list in ascending order\n    return numbers[-2]  # return the second smallest number"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b+')\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?=.*a)(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        print('String matches pattern')\n    else:\n        print('String does not match pattern')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b|)+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    pattern = r'ab*'\n    match = re.search(pattern, text)\n    \n    if match:\n        print(f\"Match found at position: {match.start()}\")\n        print(f\"Match length: {match.end() - match.start()}\")\n        print(\"Match text: \", text[match.start():match.end()])\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    reverse_pairs = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[i]!= test_list[j]:\n                reverse_pairs += 1\n\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # To store the count of reverse pairs\n    count = 0\n    # To store the number of characters in the string\n    n = len(test_list[0])\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n        # If the string is not of length 1, then check for reverse pairs\n        if n!= 1:\n            # Initialize two pointers for each string\n            j = 0\n            k = n-1\n            # Loop through each character of the string and compare it with the characters of the next string\n            while j < k:\n                # Check if the characters are equal\n                if test_list[i][j] == test_list[i][k]:\n                    # Increment the count of reverse pairs\n                    count += k-j\n                    # Move the pointers towards each other\n                    j += 1\n                    k -= 1\n                elif test_list[i][j] < test_list[i][k]:\n                    # Move the pointer towards the right\n                    j += 1\n                else:\n                    # Move the pointer towards the left\n                    k -= 1\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the count of reverse pairs\n    count = {}\n    \n    # Iterate through the list of strings\n    for string in test_list:\n        # Reverse the string and check if it exists in the dictionary\n        reverse_string = string[::-1]\n        if reverse_string in count:\n            # If it does, increment the count of reverse pairs\n            count[reverse_string] += 1\n        else:\n            # Otherwise, add the string to the dictionary with a count of 1\n            count[string] = 1\n    \n    # Initialize the count of pairs to 0\n    pairs_count = 0\n    \n    # Iterate through the dictionary to count the pairs\n    for value in count.values():\n        # If the count is odd, increment the count of pairs\n        if value % 2 == 1:\n            pairs_count += 1\n    \n    # Return the count of pairs\n    return pairs_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # If the two strings are in reverse order, add a pair to the count\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n\n    def is_reverse(s):\n        \"\"\"\n        Helper function to check if a string is a reverse of itself.\n        \"\"\"\n        return s == s[::-1]\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if is_reverse(test_list[i]) and is_reverse(test_list[j]):\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist = tuple(sublist)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    list2 = set(list1)\n\n    # Initialize an empty dictionary\n    d = {}\n\n    # Iterate over each list in the set\n    for l in list2:\n        # Convert the list to a tuple and add it to the dictionary\n        d[tuple(l)] = list1.count(l)\n\n    return d"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    unique_list = set()\n    for i in list1:\n        for j in i:\n            unique_list.add(tuple(j))\n    return {i: list1.count(i) for i in unique_list}"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the count of sublists\n    sublist_count = {}\n    # Iterate over each element of the list\n    for item in list1:\n        # If the item is a list, convert it to a tuple and check if it is in the dictionary\n        if isinstance(item, list):\n            tuple_item = tuple(item)\n            if tuple_item in sublist_count:\n                sublist_count[tuple_item] += 1\n            else:\n                sublist_count[tuple_item] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        temp = tuple(list1[i])\n        if temp in count:\n            count[temp] += 1\n        else:\n            count[temp] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function counts lists within a list. The function returns a dictionary\n    where every list is converted to a tuple and the value of such tuple is the\n    number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublists[(lst[i:j])] = sublists.get((lst[i:j]), 0) + 1\n\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n\n    # Iterate through each list in the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple to count the occurrences\n        tuple_sublist = tuple(sublist)\n        # Check if the tuple sublist is already in the dictionary\n        if tuple_sublist in unique_sublists_dict:\n            # If it is, increment its count by 1\n            unique_sublists_dict[tuple_sublist] += 1\n        else:\n            # If it's not, add it to the dictionary with a count of 1\n            unique_sublists_dict[tuple_sublist] = 1\n\n    # Return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    This function takes a list lst and returns a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_tuples = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in unique_tuples:\n            unique_tuples[sublist_tuple] += 1\n        else:\n            unique_tuples[sublist_tuple] = 1\n    return unique_tuples"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the given string to a float\n        num = float(num)\n        \n        # Check whether the float has two decimal places\n        if num.is_integer() or (num % 1) == 0.0:\n            # Check whether the float is a valid decimal number\n            if 0 <= num <= 99:\n                return True\n            else:\n                # The float is not a valid decimal number\n                return False\n        else:\n            # The float has more than two decimal places\n            return False\n    except ValueError:\n        # The given string cannot be converted to a float\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    decimal_part = num.split('.')[1]\n    if len(decimal_part) > 2:\n        return False\n    for digit in decimal_part:\n        if not digit.isdigit() or int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')\n    if '.' in num:\n        num = num.split('.')\n    else:\n        return False\n    if len(num) > 2 or len(num[0]) > 2 or len(num[1]) > 2:\n        return False\n    try:\n        float(num[0])\n        float(num[1])\n        if '.' not in num[1]:\n            return False\n        precision = len(num[1])\n        if '.' in num[0]:\n            precision = precision - len(num[0].split('.')[-1])\n        if precision > 2:\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        if len(num.split('.')[1]) == 2:\n            return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        num = float(num)\n        if num.is_integer() == False:\n            if int(num) % 1 == 0:\n                if float(num).as_integer_ratio()[0] == 1 and float(num).as_integer_ratio()[1] == 5:\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        num_list = num.split('.')\n        int_part = num_list[0]\n        dec_part = num_list[1]\n    else:\n        num_list = [num]\n        int_part = num_list[0]\n        dec_part = '00'\n    \n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    \n    for char in int_part:\n        if char not in '0123456789':\n            return False\n        \n    for char in dec_part:\n        if char not in '0123456789':\n            return False\n        \n    if len(int_part) > 1:\n        if int_part[0] == '0':\n            return False\n        \n    if len(dec_part) > 1:\n        if dec_part[0] == '0':\n            return False\n        \n    if len(dec_part) > 1 and int(dec_part) > 9:\n        return False\n        \n    if len(int_part) > 1 and int(int_part) > 99:\n        return False\n        \n    if len(dec_part) > 1 and int(dec_part) > 9:\n        return False\n        \n    if len(int_part) > 1 and int(int_part) == 9 and int(dec_part) >= 9:\n        return False\n        \n    if len(dec_part) > 1 and int(dec_part) == 9 and int(int_part) >= 9:\n        return False\n        \n    if len(int_part) > 1 and int(int_part) == 9 and int(dec_part) == 9:\n        return False\n        \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' not in num:\n        return False\n    if '.' in num and num.count('.')!= 1:\n        return False\n    try:\n        decimal_part, integer_part = num.split('.')\n        if len(integer_part) > 10 or len(decimal_part) > 2:\n            return False\n        decimal_part = decimal_part[:2]\n        integer_part = integer_part[:10]\n        float_part = '.' + decimal_part\n        float_part = float(float_part)\n        if float_part == int(float_part):\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        # Check if num is a float and has a precision of 2\n        return '.' in num and '.' not in num.split('.')[-1]\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # check if the string is a float with 2 decimal places\n        float_num = float(num)\n        if num.split('.')[-1] == '00':\n            return True\n        elif float_num - round(float_num, 2)!= 0:\n            return False\n        else:\n            return True\n    except ValueError:\n        # if the string is not a float with 2 decimal places, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    unique_count = 0\n    for num in arr:\n        if num in arr[:unique_count]:\n            return False\n        unique_count += 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Remove duplicates from the list\n    arr = list(set(arr))\n\n    # Check if the list contains only one element\n    if len(arr) == 1:\n        print(\"The list contains only one distinct element\")\n    else:\n        print(\"The list contains multiple distinct elements\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    # Create a set to store the unique elements of the array\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        # If it is, return True\n        return True\n    # If the set is not empty, return False\n    else:\n        # Otherwise, return False\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr)\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Converting list to set to remove duplicate elements\n    unique_nums = set(arr)\n    # Checking if the length of the set is 1 or not\n    if len(unique_nums) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Dictionary to store months with their number of days\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    \n    # Check if the given month number is in the dictionary\n    if monthnum3 in month_days:\n        # Check if the month number contains 30 days\n        if month_days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If the month number is not in the dictionary, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        if monthnum3 in [2, 4, 6, 9, 11]:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                days_in_months[1] = 29\n            else:\n                days_in_months[1] = 28\n        return days_in_months[monthnum3-1]\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0 and monthnum3 % 3 == 0:\n        print(\"The month number contains 30 days.\")\n    else:\n        print(\"The month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # check if the given number is a valid month number\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number\"\n\n    # if the month number is valid, check if it contains 30 days\n    if monthnum3 == 2:\n        return \"February has 29 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days in April, June, September and November\"\n    else:\n        return \"30 days in all other months\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum % 3 == 0:\n        print(monthnum, \"contains 30 days.\")\n    else:\n        print(monthnum, \"contains 31 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Define the number of days in each month\n    days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    # Check if the month number is in the range of 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Please enter a number from 1 to 12.\"\n    # Check if the month number has 30 days or not\n    elif days_in_month[monthnum3-1] == 30:\n        return \"Month has 30 days.\"\n    else:\n        return \"Month does not have 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum <= 12:\n        if monthnum == 2:\n            return True\n        elif monthnum % 2 == 0:\n            return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize the minimum difference to be positive infinity\n    min_diff = float('inf')\n\n    # Iterate through the array and calculate the minimum difference\n    for i in range(n):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store the minimum and maximum values\n    min_diff = float('inf')\n    max_val = float('-inf')\n\n    # Iterate through the array and find the minimum and maximum values\n    for i in range(n):\n        if i > 0:\n            diff = arr[i] - arr[i - 1]\n            if diff < min_diff:\n                min_diff = diff\n        if i < n - 1:\n            diff = arr[i + 1] - arr[i]\n            if diff > max_val:\n                max_val = diff\n\n    # Calculate the minimum difference between any two elements\n    min_diff = abs(max_val - min_diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    The function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    The function uses the bubble sort algorithm to sort the array.\n    '''\n    # Bubble sort algorithm to sort the array in ascending order\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                # swap the elements\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    \n    # Traverse the sorted array and find the minimum difference between any two elements\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Initialize the minimum difference to be infinity\n    min_diff = float('inf')\n    # Iterate over all pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the difference between the two elements\n            diff = arr[j] - arr[i]\n            # Update the minimum difference if it is smaller than the current minimum\n            if diff < min_diff:\n                min_diff = diff\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum element in the array\n    min_element = min(arr)\n\n    # Initialize two variables for the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate over the array and calculate the difference between each element and the minimum element\n    for i in range(n):\n        diff = arr[i] - min_element\n        min_diff = min(diff, min_diff)\n        max_diff = max(diff, max_diff)\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    min_diff = float('inf') \n    for i in range(n): \n        for j in range(i+1,n): \n            diff = arr[j] - arr[i] \n            if diff < min_diff: \n                min_diff = diff \n    return min_diff \n\narr = [1, 5, 3, 7, 2, 8] \nn = len(arr) \nprint(\"Minimum difference:\", find_min_diff(arr,n)) "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n\n    # Sorting the array\n    arr.sort()\n\n    # Calculating the minimum difference\n    min_diff = arr[n] - arr[0]\n\n    # Looping through the array and checking if any element is greater than the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers and a number of integers n as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize variables to keep track of the minimum difference and the indices of the minimum and maximum elements in the array\n    min_diff = float('inf')\n    min_index = 0\n    max_index = 0\n\n    # Loop through the array\n    for i in range(n-1):\n        # Check if the difference between the current element and the next element is less than the minimum difference\n        if abs(arr[i] - arr[i+1]) < min_diff:\n            min_diff = abs(arr[i] - arr[i+1])\n            min_index = i\n            max_index = i+1\n        # If the difference between the current element and the next element is equal to the minimum difference, check if the current element is smaller than the minimum element\n        elif abs(arr[i] - arr[i+1]) == min_diff and arr[i] < arr[min_index]:\n            min_index = i\n            max_index = i+1\n\n    # Return the minimum difference and the indices of the minimum and maximum elements in the array\n    return min_diff, min_index, max_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference and the current difference\n    min_diff = float('inf')\n    curr_diff = arr[1] - arr[0]\n\n    # Iterate through the array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[i-1]\n\n        # If the difference is less than the minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # If the difference is the same as the current difference, update the current difference\n        elif diff == curr_diff:\n            curr_diff = arr[i] - arr[i-1]\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_of_digits += 1\n    return num_of_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num = 0\n    for char in str:\n        if char.isdigit():\n            num += 1\n    return num"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num_digits = 0\n    for i in str:\n        if i.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite(start, end, n):\n        polites = set()\n        for num in range(start, end+1):\n            if is_prime(num):\n                polites.add(num)\n            if len(polites) == n:\n                break\n        return polites\n\n    start, end = 1, 1000000\n    polites = nth_polite(start, end, n)\n    print(polites)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Calculate the nth term of the sequence\n    nth_term = n*(2*math.log(n) + math.log(2*n + 1))\n    \n    # Check if it is a polite number\n    if nth_term >= 2*n + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Function to check if a number is a polite number or not.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    i = 1\n    while i <= n:\n        if is_prime(i) and is_prime(n/i):\n            return True\n        i += 1\n\n    return False\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_polite(n):\n    polite_numbers = []\n    for i in range(2, n+1):\n        sum_of_nums = sum(range(1, i+1))\n        if sum_of_nums < n:\n            polite_numbers.append(i)\n    if polite_numbers:\n        return polite_numbers[0]\n    else:\n        return \"There is no polite number.\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = math.sqrt(n)\n    b = math.ceil(a)\n    if b * b == n:\n        return \"No such number exists\"\n    elif b * b < n:\n        return b * b\n    else:\n        return (b + 1) * (b + 1)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite_numbers = [4, 5, 7, 8, 10, 12, 14, 16, 18, 20]\n    if n in polite_numbers:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_polite(n-1)\n\nprint(is_polite(3)) # Output: False\nprint(is_polite(9)) # Output: True\nprint(is_polite(10)) # Output: False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    phi = (1 + math.sqrt(5)) / 2\n    p = (1 + math.sqrt(5)) / 2\n    return int(math.pow(p, n) * phi ** n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n\n    # Calculate the difference between 1 and n\n    diff = n - 1\n    \n    # Check if the difference is divisible by 4\n    if diff % 4 == 0:\n        # If yes, calculate the nth polite number\n        polite_number = 1 + math.ceil(diff/2)\n    else:\n        # If no, calculate the nth polite number\n        polite_number = 1 + math.ceil(diff/4)\n    \n    return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_polite(n): \n    '''\n    This function takes an integer n and returns the nth polite number. \n    The nth polite number is the least prime number greater than or equal to n. \n    A number is said to be prime if it is only divisible by 1 and itself. \n    A number is said to be not prime if it is divisible by any number other than 1 and itself.\n    '''\n    primes = [] \n    i = 2 \n    while i * i <= n: \n        if n % i: \n            i += 1 \n        else: \n            n //= i \n            primes.append(i) \n    if n > 1: \n        primes.append(n) \n    return primes[0] + primes[1]\n\nn = int(input(\"Enter a number: \")) \nprint(\"The\", n, \"th polite number is\", is_polite(n)) "
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # Initializing variables\n    polite_count = 1\n    current_number = 1\n    next_number = 1\n    \n    # Loop till nth polite number is found\n    while polite_count < n:\n        \n        # Check if next number is polite\n        is_polite = True\n        for i in range(2, math.floor(math.sqrt(current_number))+1):\n            if current_number % i == 0:\n                is_polite = False\n                break\n        \n        # If next number is polite, increment count and update variables\n        if is_polite:\n            polite_count += 1\n            current_number = next_number\n        \n        # Update next number\n        next_number = current_number + 1\n    \n    # Return nth polite number\n    return current_number"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # Initialize empty list to store pairs\n    pairs = []\n    # Iterate through the list and find pairs of consecutive items\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    # Return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function takes in two parameters, a list of numbers and the sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a target sum, and returns the number of pairs of numbers that add up to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between the two lists.\n    \"\"\"\n    # Creating an empty list to store the difference\n    diff_list = []\n    # Looping through the list1\n    for i in li1:\n        # If the element is not in the list2, adding it to the diff_list\n        if i not in li2:\n            diff_list.append(i)\n    # Returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Initialize an empty list to store the difference\n    diff_list = []\n\n    # Iterate over each item in the first list\n    for item in li1:\n        # If the item is not in the second list, add it to the difference list\n        if item not in li2:\n            diff_list.append(item)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for num in li1:\n        if num not in li2:\n            diff_list.append(num)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list containing all the elements in li1 that are not also in li2.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # create an empty list to store the difference\n    diff_list = []\n\n    # iterate through the first list\n    for i in range(len(li1)):\n        # check if the element is present in the second list\n        if li1[i] not in li2:\n            # if not, add it to the difference list\n            diff_list.append(li1[i])\n\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements of the first list that are not present in the second list.\n    '''\n    # creating an empty set to store the elements of list2\n    set2 = set(li2)\n    # creating an empty set to store the elements of list1\n    set1 = set(li1)\n    # subtracting set2 from set1 to get the elements of list1 that are not present in list2\n    diff = set1 - set2\n    # returning the list of elements that are not present in list2\n    return list(diff)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_power = 0\n    for i in range(n):\n        sum_of_fourth_power += 4**i\n    return sum_of_fourth_power\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1:\n        raise ValueError(\"n should be a positive integer\")\n\n    def sum_of_fourth_powers(start, end):\n        return sum([i**4 for i in range(start, end+1, 2)])\n\n    return sum_of_fourth_powers(1, n)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count = 0\n    odd_num = 1\n    sum_odd_pow = 0\n\n    while count < n:\n        if odd_num % 2!= 0:\n            sum_odd_pow += (odd_num ** 4)\n            count += 1\n        odd_num += 2\n\n    return sum_odd_pow\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_nums = [x for x in range(1, n+1, 2)]\n    return sum([x**4 for x in odd_nums])"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(n):\n            sum += (i+1)**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = []\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if stack[-1] in ['(', '{', '[']:\n                if char == ')' and stack[-1]!= '(':\n                    return False\n                elif char == '}' and stack[-1]!= '{':\n                    return False\n                elif char == ']' and stack[-1]!= '[':\n                    return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) == 0:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1]!= '(':\n                return False\n            if char == '}' and stack[-1]!= '{':\n                return False\n            if char == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char in ['(', '{']:\n                if last_char!= char:\n                    return False\n            elif char in [')', '}']:\n                if last_char == '(':\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ')' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ('(', '{', '['):\n            stack.append(char)\n        elif char in (')', '}', ']'):\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_parentheses = {'(', '{', '['}\n    close_parentheses = {')', '}', ']'}\n    \n    for char in exp:\n        if char in open_parentheses:\n            stack.append(char)\n        elif char in close_parentheses:\n            if not stack:\n                return False\n            if close_parentheses[char] == stack.pop():\n                continue\n            else:\n                return False\n    \n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new string\n    new_str = ''\n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the new string\n            new_str += word +''\n    # Remove the last space from the new string\n    new_str = new_str[:-1]\n    # Return the new string\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the words with k length\n    k_length_words = []\n    \n    # Iterate over the words and check if each word has k length\n    for word in words:\n        if len(word) == K:\n            k_length_words.append(word)\n            \n    # Join the words in the k_length_words list into a string\n    result_str =''.join(k_length_words)\n    \n    # Return the resulting string\n    return result_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    \n    # remove words with k length from the list\n    words = [word for word in words if len(word)!= K]\n    \n    # join the list back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        # Get the position of the match in the string\n        pos = match.start()\n        # Get the length of the match\n        length = match.end() - match.start()\n        # Get the substring of the match\n        substring = text[pos:length]\n        # Return the substring and its position\n        return substring, pos\n    else:\n        # Return None if there is no match\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        start = match.start()\n        end = match.end()\n        print(f\"Match {matchNum}: \\\"{text[start:end]}\\\" found at position {start}\")\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function will find the occurrence and position of the substrings within a string using regular expressions.\n    If there is no match, it will return None.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(\"Substring '{}' found at position {} with length {}\".format(match.group(), match.start(), len(match.group())))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Match: {match}\")\n            print(f\"Position: {text.find(match)}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if all(num % 2!= 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            if (nums[i] - 1) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Loop through the list and check if the odd index is odd\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    # If no odd index was found with odd numbers, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if any(nums[i] % 2 == 0 for j in range(1, i, 2)):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    for i in range(0, n, 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # iterate through the list\n    for i in range(len(nums)):\n        # if the index is odd, check if the number at the index is odd\n        if i % 2 == 1:\n            if nums[i] % 2!= 0:\n                return False\n\n    # if we make it through the loop without finding any odd numbers, return True\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    prev_char = None\n    for char in test_str:\n        if char in vowels and (prev_char is None or char == prev_char.lower()):\n            count += 1\n        prev_char = char\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Create a dictionary to store vowels and their counts\n    vowels = {'a':0, 'e':0, 'i':0, 'o':0, 'u':0}\n\n    # Iterate over the characters in the string\n    for char in test_str:\n        # Check if the character is a vowel\n        if char in vowels:\n            # If it is a vowel, check if it is adjacent to a vowel\n            if char in vowels and test_str.count(char, 1) > 0:\n                # If it is, increment the count\n                vowels[char] += 1\n\n    # Return the dictionary of vowel counts\n    return vowels"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = 'aeiouAEIOU'\n    count = 0\n\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1 and test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and (i == 0 or test_str[i-1] not in vowels) and (i == len(test_str)-1 or test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    # Initialize the sum variable to 0\n    sum_non_repeated = 0\n    \n    # Loop through each element in the list\n    for element in arr:\n        # If the element is already in the dictionary, increment its count by 1\n        if element in count_dict:\n            count_dict[element] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[element] = 1\n            \n    # Loop through each element in the list again and add its count to the sum variable\n    for element in arr:\n        if element in count_dict:\n            sum_non_repeated += count_dict[element]\n            \n    # Return the sum of non-repeated elements in the list\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create an empty dictionary to store unique elements and their indices\n    unique_dict = {}\n\n    # Iterate over the list and add each element to the dictionary\n    for i, num in enumerate(arr):\n        if num not in unique_dict:\n            unique_dict[num] = i\n\n    # Initialize the sum variable to zero\n    sum_unique = 0\n\n    # Iterate over the unique elements and their indices in the dictionary\n    for num, index in unique_dict.items():\n        # Calculate the sum of the non-repeated elements\n        sum_unique += num\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a dictionary to store the elements and their indices\n    indices = {}\n    for i, num in enumerate(arr):\n        if num not in indices:\n            indices[num] = i\n    \n    # calculate the sum of non-repeated elements\n    non_repeated_sum = 0\n    for num, _ in indices.items():\n        non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Create a set of elements in the list\n    set_of_elements = set(arr)\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Iterate through the set and add the elements to the sum\n    for element in set_of_elements:\n        non_repeated_sum += element\n\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    seen = set()  # create an empty set to store the elements we have seen so far\n    for num in arr:\n        if num not in seen:  # if we have not seen this element before\n            seen.add(num)  # add it to the set\n    return sum(seen)  # return the sum of all the elements in the set"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)  # Convert the list to a set to remove duplicates\n    return sum(unique_elements)  # Return the sum of the unique elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # creating a set of elements to check for non-repeated elements\n    set_elements = set(arr)\n    # checking if there are any non-repeated elements\n    if len(set_elements) == len(arr):\n        # creating a dictionary to store the count of each element\n        count_elements = {}\n        # iterating through the list to count the number of each element\n        for element in arr:\n            if element in count_elements:\n                count_elements[element] += 1\n            else:\n                count_elements[element] = 1\n        # finding the sum of non-repeated elements by summing up their counts in the dictionary\n        non_repeated_sum = sum(count_elements.values())\n        return non_repeated_sum\n    else:\n        # if there are no non-repeated elements, return None\n        return None"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    seen = set()\n    total = 0\n    for num in arr:\n        if num not in seen:\n            total += num\n            seen.add(num)\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    # sum of non-repeated elements\n    sum_non_repeated = sum(unique_set)\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = set(arr)\n    sum_non_repeated = sum(unique_elements)\n    return sum_non_repeated"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item in groupby(list1):\n        sublist = list(item)\n        if len(sublist) > 1:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key in list1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Group the list elements based on their indices\n    grouped_list = groupby(enumerate(list1), lambda x: x[0] - x[1])\n\n    # Iterate over the grouped list and pack consecutive duplicates into sublists\n    packed_list = []\n    for key, group in grouped_list:\n        if key == 0:\n            # The first group is treated separately\n            packed_list.append(list(group))\n        else:\n            # Append the current group to the packed list if it's not the first group\n            if any(list1[i] == list1[i+1] for i in range(len(list1)-1)):\n                packed_list[-1].extend(list(group))\n            else:\n                packed_list.append(list(group))\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        yield list(group)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(lst)\n    result = []\n    for key, group in groups:\n        result.append(list(group))\n        if key!= lst[-1]:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for i, x in enumerate(list1):\n        if i == len(list1) - 1 or list1[i+1]!= x:\n            pack.append(list(x))\n    return pack"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [' '.join(list(group)) for _, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        if sublist not in sublist_counts:\n            sublist_counts[sublist] = 1\n        else:\n            sublist_counts[sublist] += 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the unique sublists and their counts\n    unique_sublists_dict = {}\n    \n    # loop through each list in the main list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if tuple(sorted(sublist)) in unique_sublists_dict:\n            # if it's already in the dictionary, increment its count\n            unique_sublists_dict[tuple(sorted(sublist))][1] += 1\n        else:\n            # if it's not in the dictionary, add it with a count of 1\n            unique_sublists_dict[tuple(sorted(sublist))] = [sublist, 1]\n    \n    # return the dictionary of unique sublists and their counts\n    return unique_sublists_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Iterate over the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple already exists in the dictionary, increment its value\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the sublist occurrences\n    sublist_count = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a list if it's not already\n        if not isinstance(element, list):\n            element = [element]\n        # Turn the list into a tuple so that duplicates can be counted\n        sublist = tuple(element)\n        # Increment the count for the tuple\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    # Return the dictionary of sublist occurrences\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == list:\n            for subitem in item:\n                if subitem in sublists:\n                    sublists[subitem] += 1\n                else:\n                    sublists[subitem] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, convert it to a tuple and check if it's already in the dictionary\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in counts:\n                # if it is, increment the count for that tuple\n                counts[tuple_element] += 1\n            else:\n                # if it's not, add it to the dictionary with a count of 1\n                counts[tuple_element] = 1\n    \n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    counts = {}\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Check if the sublist is already a tuple\n        if isinstance(sublist, tuple):\n            # If it is, check if it exists in the dictionary\n            if sublist in counts:\n                # If it does, increment its count\n                counts[sublist] += 1\n            else:\n                # If it doesn't, add it to the dictionary with a count of 1\n                counts[sublist] = 1\n        # If the sublist is not already a tuple, convert it to a tuple and add it to the dictionary with a count of 1\n        else:\n            counts[tuple(sublist)] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the unique sublists\n    unique_sublists = {}\n    \n    # loop through each element in the list\n    for item in list1:\n        # check if the item is a list\n        if isinstance(item, list):\n            # turn the list into a tuple\n            sublist = tuple(item)\n            # check if the tuple is already in the dictionary\n            if sublist in unique_sublists:\n                # increment the count of the sublist in the dictionary\n                unique_sublists[sublist] += 1\n            else:\n                # add the sublist to the dictionary with a count of 1\n                unique_sublists[sublist] = 1\n                \n    # return the dictionary of unique sublists\n    return unique_sublists"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Check if the input list is not empty\n    if not test_list:\n        return []\n    \n    # Sort the list of tuples in non-decreasing order of first element\n    test_list.sort(key=lambda x: x[0])\n    \n    # Find the combinations of sums with tuples in the sorted list\n    combinations_sum = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for combo in combinations(test_list[i:j+1], len(test_list)-i-1):\n                # Check if the sum of the combination is equal to the sum of the first element of the tuple\n                if sum(combo) == test_list[i][0]:\n                    combinations_sum.append(combo)\n    \n    return combinations_sum"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the tuple list in non-decreasing order\n    test_list.sort(key=lambda x: sum(x))\n\n    # Initialize the combinations list\n    combinations_list = []\n\n    # Iterate over all possible combinations of sums\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            # Check if the combination contains any tuple\n            if any(x in test_list[i] for x in test_list[j]):\n                # Add the combination to the list if it contains a tuple\n                combinations_list.append(tuple(sorted(test_list[i] + test_list[j])))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Define a function to calculate the sum of a given tuple\n    def tuple_sum(t):\n        return sum(t)\n\n    # Define a function to find all combinations of sums with tuples in the given tuple list\n    def find_combinations_of_sums(lst):\n        # Sort the list of tuples in ascending order of their sum\n        sorted_lst = sorted(lst, key=lambda x: tuple_sum(x))\n\n        # Initialize an empty list to store the combinations\n        result = []\n\n        # Loop through each combination of three\n        for i in range(len(sorted_lst) - 2):\n            # Get the first three elements in the combination\n            a, b, c = sorted_lst[i]\n\n            # Check if the sum of the combination is greater than or equal to the target sum\n            if tuple_sum((a, b, c)) < target_sum:\n                # If the sum is not greater than the target sum, loop through the remaining elements\n                for j in range(i + 1, len(sorted_lst) - 1):\n                    # Get the second and third elements in the combination\n                    d, e = sorted_lst[j]\n\n                    # Check if the sum of the combination is greater than or equal to the target sum\n                    if tuple_sum((a, b, c, d, e)) < target_sum:\n                        # If the sum is not greater than the target sum, loop through the remaining elements\n                        for k in range(j + 1, len(sorted_lst) - 0):\n                            # Get the third and fourth elements in the combination\n                            f, g = sorted_lst[k]\n\n                            # Check if the sum of the combination is greater than or equal to the target sum\n                            if tuple_sum((a, b, c, d, e, f, g)) >= target_sum:\n                                # If the sum is greater than or equal to the target sum, append the combination to the result list\n                                result.append((a, b, c, d, e, f, g))\n\n        return result\n\n    # Define the target sum\n    target_sum = 10\n\n    # Call the function to find the combinations of sums with tuples in the given tuple list\n    combinations_of_sums = find_combinations_of_sums(test_list)\n\n    # Print the combinations of sums with tuples in the given tuple list\n    print(\"Combinations of sums with tuples in the given tuple list:\")\n    for combination in combinations_of_sums:\n        print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and finds the combinations of sums with tuples in the list.\n    '''\n    # initialize empty list to store the combinations\n    combinations_list = []\n    \n    # sort the given list of tuples in ascending order\n    test_list.sort()\n    \n    # find the length of the tuples in the list\n    length = len(test_list[0])\n    \n    # find all the possible combinations of tuples with length equal to length\n    for i in range(length+1):\n        comb = combinations(test_list, i)\n        \n        # iterate through each combination and check if it has all the sum equal to the target sum\n        for tup in comb:\n            if sum(tup) == 0:\n                combinations_list.append(tup)\n    \n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a set to store the unique tuples from the list\n    unique_tuples = set(test_list)\n    # Find the sum of all the tuples in the set\n    total_sum = sum(unique_tuples)\n    # Find all possible pairs of tuples in the set\n    all_pairs = combinations(unique_tuples, 2)\n    # Initialize a set to store the combinations of sums with tuples in the given list\n    combinations_set = set()\n    # Iterate over all pairs of tuples in the set\n    for pair in all_pairs:\n        # Calculate the sum of the two tuples in the pair\n        sum_of_pair = sum(pair)\n        # Check if the sum is equal to the total sum and if the combination of the pair is not already in the set\n        if sum_of_pair == total_sum and pair not in combinations_set:\n            # Add the combination of the pair to the set of combinations\n            combinations_set.add(tuple(pair))\n    # Return the set of combinations of sums with tuples in the given list\n    return combinations_set"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n\n    # To find the combinations of sums, we need to use the combination function from itertools module.\n    # Here, we pass the list of tuples and the length of the combinations we want to find.\n    # The length of the combination depends on the length of the tuples in the list.\n    # The function will return all possible combinations of sums.\n    combinations_list = list(combinations(test_list, len(test_list)))\n\n    # Now we need to check if the combination of sums is a valid sum.\n    # A valid sum is a tuple where the sum of its elements is equal to the total sum.\n    valid_combinations = []\n    for combination in combinations_list:\n        sum_of_elements = sum(combination)\n        if sum_of_elements == sum(test_list):\n            valid_combinations.append(combination)\n\n    # Finally, we return the valid combinations of sums.\n    return valid_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                comb.append((test_list[i], test_list[j], test_list[k]))\n    return comb"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Iterate over all the tuples in the list\n    for i in range(len(test_list)):\n        # Iterate over all the other tuples in the list\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the current pair of tuples\n            current_sum = test_list[i][0] + test_list[j][1]\n            # If the current sum is present in the list, add it to the result list\n            if current_sum in test_list[i] + test_list[j]:\n                print(test_list[i], test_list[j], current_sum)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a list of tuples containing the sum and the tuple\n    sums = [(sum(x), x) for x in test_list]\n    # sort the list of tuples in ascending order of the sum\n    sums.sort(key=lambda x: x[0])\n    # create a list to store the combinations\n    comb_list = []\n    # loop through all possible pairs of elements in the list\n    for i in range(len(sums)):\n        for j in range(i+1, len(sums)):\n            # check if the current combination adds up to the target sum\n            if sums[i][0] + sums[j][0] == target_sum:\n                # add the combination to the list\n                comb_list.append((sums[i][1], sums[j][1]))\n    # return the list of combinations\n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns all possible combinations of sums with tuples in the list.\n\n    For example, given the list [(1, 2), (3, 4), (5, 6)], the function should return the following combinations:\n\n    [(1, 3), (1, 4), (1, 6), (2, 3), (2, 4), (2, 6), (3, 4), (3, 6), (4, 6)]\n    '''\n\n    # Create a set of all possible tuples in the list\n    all_tuples = set(tuple(sorted(tup)) for tup in test_list)\n\n    # Find all possible pairs of tuples in the set\n    pairs = combinations(all_tuples, 2)\n\n    # Convert the pairs into a list of tuples and remove duplicates\n    combinations_list = list(pairs)\n    unique_combinations = list(set(combinations_list))\n\n    return unique_combinations"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function will count the number of divisors of a given number n\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    divisors.append(n)\n    count_divisors_even = True\n    count_divisors_odd = True\n    for i in divisors:\n        if i % 2 == 0:\n            count_divisors_even = False\n        else:\n            count_divisors_odd = False\n    return count_divisors_even and count_divisors_odd"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors is even or odd.\n    '''\n    divisors = [] \n    i = 1\n    while i*i <= n: \n        if n % i: \n            i += 1 \n        else: \n            n //= i \n            divisors.append(i) \n    if n > 1: \n        divisors.append(n) \n    divisors.sort() \n    return len(divisors) % 2 == 0 "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if the count of divisors is even, else False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n        if count > 10:\n            return False\n    return count == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0]\n    count = len(divisors)\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n % 2 == 0:\n        count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n        if count == 0 and i!= n/i:\n            count += 1\n    if count == 0:\n        count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    divisor = 1\n    while divisor <= n: \n        if n % divisor == 0: \n            count += 1\n        divisor += 1\n    if count % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of all odd length subarrays.\n\n    Example:\n    odd_length_sum([1, 2, 3, 4, 5, 6]) # Output: 5\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\n    # Initialize a variable to store the sum of odd length subarrays\n    sum_odd_length_subarrays = 0\n\n    # Loop through the list of integers\n    for i in range(len(arr)):\n        # Loop through the list of integers starting from index i+1\n        for j in range(i+1, len(arr)+1):\n            # Check if the length of the subarray is odd\n            if (j-i+1) % 2 == 1:\n                # Add the sum of the subarray to the sum_odd_length_subarrays variable\n                sum_odd_length_subarrays += sum(arr[i:j])\n\n    # Return the sum of odd length subarrays\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n    # Initialize sum of even length subarrays to zero\n    sum_even = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # If the length of the current subarray is odd, add the sum of previous subarrays to sum_odd\n        if i % 2 == 1:\n            sum_odd += sum_even\n\n        # If the length of the current subarray is even, add the current element to sum_even\n        else:\n            sum_even += arr[i]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    result = 0\n    \n    # loop through all subarrays\n    for i in range(1, n-1):\n        # loop through all odd length subarrays\n        for j in range(i+1, n, 2):\n            # add the current odd length subarray to the result\n            result += sum(arr[j:j+2])\n            \n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    # initializing the sum variable to 0\n    sum = 0\n    # iterating over the array\n    for i in range(len(arr)):\n        # iterating over odd index positions of the array\n        for j in range(i+1, len(arr), 2):\n            # appending the sum of the odd length subarray to the sum variable\n            sum += arr[j]\n    # returning the sum of all odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_of_subarrays = 0\n    current_sum = 0\n\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2 == 1:\n            current_sum = arr[i]\n        else:\n            current_sum += arr[i]\n\n        if i >= 2 and arr[i] % 2 == 1:\n            if i - 2 >= 0 and arr[i - 1] % 2 == 1:\n                current_sum -= arr[i - 2]\n            if i - 4 >= 0 and arr[i - 3] % 2 == 1:\n                current_sum -= arr[i - 4]\n            if i - 6 >= 0 and arr[i - 5] % 2 == 1:\n                current_sum -= arr[i - 6]\n\n        if i >= 4 and arr[i] % 2 == 1:\n            if i - 2 >= 0 and arr[i - 1] % 2 == 1:\n                current_sum -= arr[i - 2]\n            if i - 4 >= 0 and arr[i - 3] % 2 == 1:\n                current_sum -= arr[i - 4]\n            if i - 6 >= 0 and arr[i - 5] % 2 == 1:\n                current_sum -= arr[i - 6]\n            if i - 8 >= 0 and arr[i - 7] % 2 == 1:\n                current_sum -= arr[i - 8]\n\n        sum_of_subarrays += current_sum\n\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n    \n    for i in range(n):\n        if i == 0 or arr[i] % 2!= 0:\n            sum += arr[i]\n        elif i > 0 and arr[i] % 2 == 0:\n            sum += arr[i] - arr[i-1]\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    sum_arr = []\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if j-i+1 % 2!= 0:\n                sub_arr = arr[i:j]\n                sum_arr.append(sum(sub_arr))\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            sum_odd = 0\n        for j in range(i, n):\n            if j % 2!= 0:\n                sum_odd += arr[j]\n            if j - i + 1 % 2 == 0:\n                sum_odd %= 1000000007\n                sum_odd += sum_odd\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integers as input and converts them to hsv color model.\n    \n    Args:\n    r (int): Red value between 0 and 255.\n    g (int): Green value between 0 and 255.\n    b (int): Blue value between 0 and 255.\n    \n    Returns:\n    hsv (tuple): Hue, Saturation, and Value in the range of 0 to 360.\n    \"\"\"\n    \n    # Convert RGB to LAB color model\n    lab = rgb_to_lab(r, g, b)\n    \n    # Convert LAB to HSV color model\n    hsv = lab_to_hsv(lab[0], lab[1], lab[2])\n    \n    return hsv\n\n\ndef lab_to_hsv(l, a, b):\n    \"\"\"\n    This function takes three floating point numbers as input and converts them to hsv color model.\n    \n    Args:\n    l (float): Lightness value between 0 and 100.\n    a (float): First color component value between -128 and 127.\n    b (float): Second color component value between -128 and 127.\n    \n    Returns:\n    hsv (tuple): Hue, Saturation, and Value in the range of 0 to 360.\n    \"\"\"\n    \n    # Convert LAB to HSV\n    hsv = []\n    cmax = max(l + a, l + b, l - a, l - b)\n    if cmax == l:\n        hsv.append(0)\n    else:\n        hsv.append(60 * ((l + a - cmax) / (cmax * 2)))\n        if l == cmax:\n            hsv[1] = 0\n        else:\n            hsv[1] = 1\n    \n    if l == 0:\n        hsv.append(0)\n    elif l == cmax:\n        hsv.append(360)\n    else:\n        hsv.append(60 * ((l - cmax) / (cmax * 2)))\n    \n    return tuple(hsv)\n\n\ndef rgb_to_lab(r, g, b):\n    \"\"\"\n    This function takes three integers as input and converts them to lab color model.\n    \n    Args:\n    r (int): Red value between 0 and 255.\n    g (int): Green value between 0 and 255.\n    b (int): Blue value between 0 and 255.\n    \n    Returns:\n    lab (tuple): Lightness, First color component, and Second color component.\n    \"\"\"\n    \n    # Convert RGB to XYZ color model\n    xyz = rgb_to_xyz(r, g, b)\n    \n    # Convert XYZ to LAB color model\n    lab = xyz_to_lab(xyz[0], xyz[1], xyz[2])\n    \n    return lab\n\n\ndef xyz_to_lab(x, y, z):\n    \"\"\"\n    This function takes three floating point numbers as input and converts them to lab color model.\n    \n    Args:\n    x (float): X-coordinate value between 0 and 1.\n    y (float): Y-coordinate value between 0 and 1.\n    z (float): Z-coordinate value between 0 and 1.\n    \n    Returns:\n    lab (tuple): Lightness, First color component, and Second color component.\n    \"\"\"\n    \n    # Convert XYZ to LAB color model\n    lab = []\n    if x == 0:\n        lab.append(0)\n    else:\n        lab.append(116 * (y / x) - 16)\n    \n    if y == 0:\n        lab.append(0)\n    else:\n        lab.append(500 * ((x / y) - (1 / 3)))\n    \n    if z == 0:\n        lab.append(0)\n    else:\n        lab.append(200 * (y / z))\n    \n    return tuple(lab)\n\n\ndef rgb_to_xyz(r, g, b):\n    \"\"\"\n    This function takes three integers as input and converts them to XYZ color model.\n    \n    Args:\n    r (int): Red value between 0 and 255.\n    g (int): Green value between 0 and 255.\n    b (int): Blue value between 0 and 255.\n    \n    Returns:\n    xyz (tuple): X-coordinate, Y-coordinate, and Z-coordinate.\n    \"\"\"\n    \n    # Convert RGB to XYZ color model\n    xyz = []\n    xyz.append(0.4124564 * (r / "
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Calculate the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Calculate the value of the Hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Calculate the value of the Saturation\n    if max_val == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    # Calculate the value of the Value\n    value = max_val\n\n    # Convert the values to the range of 0-1\n    hue = hue / 65535\n    saturation = saturation / 255\n    value = value / 255\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    v = max_rgb\n    delta = max_rgb - min_rgb\n    if delta == 0:\n        h = 0\n    elif max_rgb == r:\n        h = (g - b) / delta\n    elif max_rgb == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = max(0, min(h, 1))\n    if max_rgb == min_rgb:\n        s = 0\n    else:\n        s = delta / max_rgb\n    s = max(0, min(s, 1))\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert RGB to LAB color space\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / delta)\n    elif max_value == g:\n        h = 60 * ((b - r) / delta + 2)\n    else:\n        h = 60 * ((r - g) / delta + 4)\n    if h < 0:\n        h += 360\n    hsv = (h, delta / max_value, max_value)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Args:\n        r (int): Red value of the color.\n        g (int): Green value of the color.\n        b (int): Blue value of the color.\n\n    Returns:\n        tuple: hsv (hue, saturation, value) tuple in the range of [0, 1].\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    h, s, v = 0, 0, max_color\n\n    if max_color == min_color:\n        h, s = 0, 0\n    else:\n        delta = max_color - min_color\n        s = delta / max_color\n\n        if r == max_color:\n            h = (g - b) / delta\n        elif g == max_color:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h /= 6\n\n        if h < 0:\n            h += 1\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        elif cmax == b:\n            h = 4 + (r - g) / delta\n        h = h / 6\n\n        if h < 0:\n            h = h + 1\n\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return h, s, cmax\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, B to float\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Calculate chroma\n    chroma = max_val - min_val\n    # Calculate hue\n    if max_val == min_val:\n        hue = 0\n    elif max_val == r:\n        hue = 60 * (((g - b) / chroma) % 6)\n    elif max_val == g:\n        hue = 60 * (((b - r) / chroma) + 2)\n    else:\n        hue = 60 * (((r - g) / chroma) + 4)\n    hue = round(hue)\n    # Calculate saturation\n    if chroma == 0:\n        saturation = 0\n    elif chroma == max_val:\n        saturation = 0\n    else:\n        saturation = chroma / max_val\n    saturation = round(saturation, 2)\n    # Calculate value\n    value = max_val\n    return hue, saturation, value\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    r = r / 255.0  # Convert to float\n    g = g / 255.0\n    b = b / 255.0\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta_rgb = max_rgb - min_rgb\n\n    if delta_rgb == 0:\n        h = 0\n    elif max_rgb == r:\n        h = 60 * ((g - b) / delta_rgb) % 6\n    elif max_rgb == g:\n        h = 60 * ((b - r) / delta_rgb) + 120\n    else:\n        h = 60 * ((r - g) / delta_rgb) + 240\n\n    if h < 0:\n        h += 360\n\n    if h > 360:\n        h -= 360\n\n    v = max_rgb\n\n    if delta_rgb == 0:\n        s = 0\n    else:\n        s = delta_rgb / (1 - abs(2 * min_rgb - 1))\n\n    hsv_color = (h, s, v)\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    h = 0\n    s = 0\n    \n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n    \n    h = h * 60\n    if h < 0:\n        h = h + 360\n    \n    return h, s, max_val"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0 # convert r, g, b from 0-255 to 0.0-1.0 range\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g-b)/delta) % 6\n    elif cmax == g:\n        h = (b-r)/delta + 2\n    else:\n        h = (r-g)/delta + 4\n\n    h = h/6.0\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta/cmax\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= (even_count * odd_count)\n    \n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= min(even_count, odd_count)\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_prod = 1\n    odd_prod = 1\n    \n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n            even_prod *= i\n        else:\n            odd_count += 1\n            odd_prod *= i\n            \n    return even_prod * odd_prod"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and first odd numbers in a list.\n\n    Parameters:\n        lst (list): The list to analyze.\n\n    Returns:\n        int: The product of the first even and first odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return None\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function will take a list as input and will find the product of the first even and first odd number in the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0 and i == 0:\n            return lst[i] * lst[i+1]\n        elif lst[i] % 2!= 0 and i == 0:\n            return lst[i] * lst[i+1]\n        elif lst[i] % 2 == 0 and i == len(lst)-1:\n            return lst[i] * lst[i-1]\n        elif lst[i] % 2!= 0 and i == len(lst)-1:\n            return lst[i] * lst[i-1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even_product = 1\n    odd_product = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_product *= i\n            count += 1\n        else:\n            odd_product *= i\n    if count == 0:\n        return None\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert the string to list of tuples\n    lst = list(zip(*map(str.split, test_str.split(','))))\n    # convert list of tuples to list of integers\n    int_lst = [int(tup[0]) for tup in lst]\n    # convert list of integers to tuple\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a tuple\n    try:\n        test_tuple = tuple(test_str.split(','))\n        # Convert each element in the tuple to an integer\n        for i in range(len(test_tuple)):\n            test_tuple[i] = int(test_tuple[i])\n        return test_tuple\n    except:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if not isinstance(test_str, tuple):\n        raise TypeError('Input must be a tuple.')\n\n    int_tuple = ()\n    for item in test_str:\n        if isinstance(item, str):\n            try:\n                int_tuple += (int(item),)\n            except ValueError:\n                raise ValueError('All elements in the tuple must be integers.')\n        else:\n            raise TypeError('All elements in the tuple must be strings.')\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize an empty list to hold the integers\n    integers = []\n\n    # Iterate through each word in the list\n    for word in words:\n\n        # Check if the word can be converted to an integer\n        try:\n            # Convert the word to an integer and append it to the list\n            integers.append(int(word))\n        except ValueError:\n            # If the word can't be converted to an integer, return the original string\n            return test_str\n\n    # Return the integer tuple\n    return tuple(integers)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by spaces\n    input_list = test_str.split()\n\n    # Create an empty list to store the integer tuples\n    int_tuples = []\n\n    # Loop through each element of the input list\n    for elem in input_list:\n        # Check if the element is a string that can be converted to an integer\n        try:\n            # Try to convert the element to an integer\n            int_val = int(elem)\n            # If the conversion is successful, add the integer tuple to the list\n            int_tuples.append((int_val,))\n        except ValueError:\n            # If the element cannot be converted to an integer, do nothing\n            pass\n\n    # Return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n    test_str: str, tuple string\n\n    Returns:\n    int_tuple: tuple, integer tuple\n    \"\"\"\n\n    # Split the string by ',' and remove the extra spaces\n    str_list = test_str.split(',')\n    str_list = [s.strip() for s in str_list]\n\n    # Convert each string to integer\n    int_list = [int(s) for s in str_list]\n\n    # Convert the integer list to tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        try:\n            int_val = int(char)\n            result.append(int_val)\n        except ValueError:\n            pass\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual elements\n    elements = test_str.split(',')\n    # Convert each element to an integer and append it to a list\n    result = [int(elem) for elem in elements]\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    test_str = [x.strip() for x in test_str.split(',')]\n\n    # Convert each string in the list to an integer\n    test_list = [int(x) for x in test_str]\n\n    # Convert the list of integers to a tuple\n    test_tuple = tuple(test_list)\n\n    return test_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    result = []\n    for item in test_str:\n        if item.isnumeric():\n            result.append(int(item))\n        else:\n            return None\n    return tuple(result)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return -1\n    elif index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx!= len(a) and a[idx] == x:\n        return idx\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i+1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        return i\n    else:\n        j = i + 1\n        while j < len(a) and a[j] == x:\n            j += 1\n        return j"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx == len(a) or a[idx]!= x:\n        return -1 # x is not in a\n    else:\n        return idx # x is in a\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif a[index] < x:\n        return bisect.bisect_right(a[:index], x)\n    else:\n        return bisect.bisect_left(a[index:], x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx < len(a) and a[idx] == x:\n        return idx\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b){3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'\\b(ab{3})\\b')\n    result = pattern.findall(text)\n    if result:\n        return result[0]\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'(?<=a)\\w{3}(b){3}(a)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*?b{3}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list to a tuple\n    new_tuple = tuple(combined_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_list) + ',' + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given string to a list of characters\n    lst = list(test_str)\n    # Add the first character of the list to the beginning of the list\n    lst.insert(0, lst.pop(0))\n    # Create a new tuple with the converted list\n    return tuple(lst)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = tuple(test_list + [test_str])\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert list to tuple\n    new_list = tuple(test_list)\n    # Split the string into a list\n    new_str = test_str.split()\n    # Combine both lists\n    new_tuple = new_list + new_str\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # Combine the list and tuple to form a new tuple\n    new_tuple = test_tuple + (test_str,)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str + test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and (nums[i] % 2!= 0 or nums[i] % 2!= nums[i+1] % 2):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if all(nums[i:i+2] % 2 == 0 for i in range(i, len(nums), 2)):\n                count += 1\n    return count"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count > 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if any(nums[i:i+2].count(num) % 2!= 0 for num in nums):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                else:\n                    break\n            if even_count == 0:\n                return False\n        else:\n            break\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if len(nums) % 2!= 0:\n        return False\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums) // 2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i], nums[i+1]])) == 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(x % 2 == 0 for x in nums[i:i+2]):\n            return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create an empty list to store the new tuple\n    new_tup = []\n    # iterate through each element in the tuple\n    for element in test_tup:\n        # check if the element is a tuple\n        if isinstance(element, tuple):\n            # if it is, recursively call the function on it\n            new_tup.extend(remove_nested(element))\n        else:\n            # otherwise, add it to the new tuple\n            new_tup.append(element)\n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            nested_tup.extend(item)\n        else:\n            nested_tup.append(item)\n    return tuple(nested_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        flat_list = [element for tup in test_tup for element in tup]\n        return remove_nested(flat_list)\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flattened.extend(item)\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # check if the tuple contains nested tuples\n        if isinstance(test_tup[0], tuple):\n            # call the function recursively on the nested tuples\n            for tup in test_tup:\n                remove_nested(tup)\n        # if the tuple contains only non-nested tuples, remove the tuples\n        else:\n            test_tup = tuple(test_tup)\n    # if the input is not a tuple, return the input\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Check if the input is a tuple\n    if isinstance(test_tup, tuple):\n        # Check if the inner tuple is empty\n        if len(test_tup) == 0:\n            return None\n        # Check if the inner tuple has a single element\n        elif len(test_tup) == 1:\n            return test_tup[0]\n        # Check if the inner tuple has multiple elements\n        else:\n            return tuple(remove_nested(i) for i in test_tup)\n    else:\n        return None"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for i in test_tup:\n        if type(i) is not tuple:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    This function takes a list of lists as input and returns the count of lists.\n    '''\n    count = 0\n    for sublist in input_list:\n        if type(sublist) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_lists(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_lists(input_list):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the left and right pointers to the beginning and end of the array, respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate until the left pointer is less than or equal to the right pointer.\n    while left <= right:\n        # Calculate the middle index of the current range.\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target, return the middle index.\n        if arr[mid] == x:\n            return mid\n\n        # If the middle element is greater than the target, search the left half of the range.\n        elif arr[mid] < x:\n            left = mid + 1\n\n        # If the middle element is less than the target, search the right half of the range.\n        else:\n            right = mid - 1\n\n    # If the target is not found, return -1.\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Find the index of the last occurrence of x in arr\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == x:\n            return i\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Binary search for the last occurrence of x in the array\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1  # leftmost occurrence of x\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1  # rightmost occurrence of x\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element as input and returns the last position of the element in the array.\n    \"\"\"\n    # Initialize variables\n    i = len(arr) - 1\n    last_pos = -1\n    \n    # Loop through the array until the element is found\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    \n    # If the element is found, update the last_pos variable\n    if i >= 0:\n        last_pos = i\n    \n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x and returns the last position of x in the array.\n    '''\n    # find the rightmost element in the array greater than or equal to x\n    right = len(arr) - 1\n    while right >= 0 and arr[right] < x:\n        right -= 1\n    # find the leftmost element in the array less than or equal to x\n    left = 0\n    while left <= right and arr[left] > x:\n        left += 1\n    # return the position of x in the array\n    if left <= right:\n        return right + 1\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while i >= 0:\n        if arr[i] == x:\n            return i\n        i -= 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left >= right:\n        return -1\n    else:\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of that element in the array.\n    \"\"\"\n    i = 0\n    for j in range(len(arr)):\n        if arr[j] == x:\n            return j\n    return None"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    return i if arr[i] == x else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(?P<anything>.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[a-zA-Z]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*\\sb$'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a(?=[^a]b$)')\n    return pattern.search(text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<![a-zA-Z])\\b[aA].*[bB]\\b(?![a-zA-Z])'\n    return re.findall(pattern, text)"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict:\n        total_sum += dict[item]\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for item in dict.values():\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n\n    # loop through the range from 1 to n\n    for i in range(1, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add the number to the total sum\n            total += i\n\n    # return the total sum\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    # loop over the range from l to n\n    for i in range(l, n+1):\n        # check if the number is odd\n        if i % 2!= 0:\n            # add it to the total\n            total += i\n    # return the total\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return None\n    else:\n        return sum_odd(n-1) + n if n % 2!= 0 else sum_odd(n-1)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum = 0\n    \n    # loop through odd numbers within the range l to r\n    for i in range(2, n+1, 2):\n        # add the odd numbers to the sum\n        sum += i\n        \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a Python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(l, r+1):\n        if i % 2 == 1:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which represent the lower and upper limits of the range of odd natural numbers.\n    The function then calculates the sum of all odd natural numbers within the given range using a for loop.\n    \"\"\"\n    sum_of_odds = 0\n    for i in range(l, r+1, 2):\n        sum_of_odds += i\n    return sum_of_odds"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum += l\n        l += 1\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments, l and r, which represent the lower and upper limit of the range of natural numbers to be searched.\n    It then returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    # Initialize a variable to store the sum of odd numbers\n    sum_odd_numbers = 0\n    \n    # Loop through the range of natural numbers between l and r (inclusive)\n    for i in range(l, r+1):\n        # If the number is odd, add it to the sum of odd numbers\n        if i % 2!= 0:\n            sum_odd_numbers += i\n    \n    # Return the sum of odd numbers\n    return sum_odd_numbers"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Finds the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize the sum to 0\n    total = 0\n    \n    # loop through the range l to r (inclusive)\n    for i in range(l, r+1):\n        # check if the number is odd\n        if i % 2 == 1:\n            # add the number to the sum\n            total += i\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0  \n    for i in arr:  \n        total += i  \n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # If d is greater than 31, rotate right by 32-d bits\n    if d > 31:\n        n = n >> (d - 32)\n    # If d is less than or equal to 31, rotate left by d bits\n    else:\n        n = (n << d) | (n >> (32 - d))\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & ((1 << 32) - 1)  # Make sure the number is positive\n    d = d % 32  # Ensure d is less than 32\n    n = n << d | n >> 32 - d  # Perform left rotation\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # rotate the binary representation of n to the left by d bits\n    shift = 32 - d\n    binary = bin(n)[2:].zfill(32)\n    rotated_binary = binary[shift:] + binary[:shift]\n    rotated_n = int(rotated_binary, 2)\n\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d\n    n = n >> (32-d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # convert the input number to binary format\n    bin_str = bin(n)[2:]\n\n    # pad the binary string with zeroes to make it a multiple of 4\n    while len(bin_str) % 4!= 0:\n        bin_str = '0' + bin_str\n\n    # split the binary string into groups of 4\n    groups = [bin_str[i:i+4] for i in range(0, len(bin_str), 4)]\n\n    # reverse each group of 4 bits\n    groups = [group[::-1] for group in groups]\n\n    # join the reversed groups back into a binary string\n    bin_str = ''.join(groups)\n\n    # convert the binary string back to an integer\n    n = int(bin_str, 2)\n\n    # rotate the bits by d bits\n    n = ((n << d) | (n >> (32 - d))) & 0xffffffff\n\n    # return the rotated bits\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the given number to binary\n    binary_num = bin(n)[2:]\n    \n    # calculate the number of bits to shift\n    shift_bits = d % 32\n    \n    # calculate the number of left rotations required\n    rotations = d // 32\n    \n    # if the shift amount is greater than 0\n    if shift_bits > 0:\n        # add 0's to the left of the binary number until the shift amount is reached\n        binary_num = '0' * (shift_bits - len(binary_num)) + binary_num\n    \n    # calculate the new number after rotating left\n    new_num = binary_num[rotations:] + binary_num[:rotations]\n    \n    # convert the new number back to integer\n    new_num = int(new_num, 2)\n    \n    return new_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate a 32-bit integer left by d bits.\n    \"\"\"\n    # Convert the number to a list of 8 bit integers\n    n_list = [int(x) for x in bin(n)[2:]]\n    # Rotate the list d bits to the left\n    rotated_list = n_list[-d:] + n_list[:-d]\n    # Convert the rotated list back to an integer\n    rotated = int(''.join(str(x) for x in rotated_list), 2)\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number.\n    '''\n    # Convert binary string to integer\n    n = int(n, 2)\n    # Calculate the number of bits to rotate\n    rot_bits = d % 32\n    # Calculate the number of times we need to rotate\n    rot_count = d // 32\n    # Calculate the mask to rotate the bits\n    mask = (1 << rot_bits) - 1\n    # Perform the rotation\n    n = (n << rot_bits) | (n >> (32 - rot_bits))\n    # Perform the rotation multiple times\n    for _ in range(rot_count):\n        n = (n << rot_bits) | (n >> (32 - rot_bits))\n    # Return the rotated number as a binary string\n    return bin(n)[2:].zfill(32)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces from the string\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the string using regex\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count\n\nprint(test_three_equal(2,2,2)) # Output: 3"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(max(x,y,z), min(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # loop through the three numbers and count the number of equal numbers\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n//2):\n        if arr[i] < arr[n-i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i-1] > arr[i]:\n            return i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    max_element = max(arr)\n    min_element = min(arr)\n\n    if max_element == min_element:\n        return 0\n\n    left = right = 0\n\n    while right < n:\n        while left < right and arr[left] < arr[right]:\n            left += 1\n        while left < right and arr[right] > arr[left]:\n            right -= 1\n\n        if left < right:\n            return right - left\n\n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Count the number of inversions\n    inv = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            inv += arr[i] > arr[j]\n\n    # Count the number of rotations\n    count = 0\n    for i in range(1, n-1):\n        for j in range(0, n-i-1):\n            if arr[j] < arr[j+i] and arr[j+i] < arr[j+i+1]:\n                count += 1\n\n    return count + inv // 2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the given array\n    arr.sort()\n    # Count the number of inversions\n    inv_count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        # If the elements are not in correct order, then increment the inversion count\n        if arr[i] > arr[j]:\n            inv_count += j - i\n            # Swap the elements at i and j\n            arr[i], arr[j] = arr[j], arr[i]\n            # Find the position where the two elements can be placed in the correct order\n            k = i\n            while k < j and arr[k] <= arr[i]:\n                k += 1\n            # Move the left subarray of the sorted array to the position where the two elements can be placed\n            j -= k - i\n        # If the elements are in correct order, then move the left pointer to the right\n        else:\n            i += 1\n        # If the elements are in correct order, then move the right pointer to the left\n        j -= 1\n    # If the number of inversions is even, then the sorted array is already sorted and we can return 0\n    if inv_count % 2 == 0:\n        return 0\n    # If the number of inversions is odd, then the sorted array needs to be rotated\n    else:\n        return inv_count // 2"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    # find the pivot index using the median of three\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    if len(left) == len(right):\n        pivot = left[len(left)//2]\n    elif len(left) > len(right):\n        pivot = left[len(left)//2 - 1]\n    else:\n        pivot = right[len(right)//2 - 1]\n\n    # count the number of rotations\n    rotations = 0\n    while True:\n        # rotate the array\n        # using the pivot as the pivot point\n        # left[right[i]] = arr[left[i]]\n        # right[left[i]] = arr[right[i]]\n        # arr[left[i]] = pivot\n        # arr[right[i]] = left[i]\n        #\n        # In-place rotations using the pivot as the pivot point\n        # arr[left[i]], arr[right[i]] = arr[right[i]], arr[left[i]]\n        # arr[i], arr[left[i]], arr[right[i]] = arr[left[i]], arr[i], arr[right[i]]\n\n        # In-place rotations using the pivot as the pivot point\n        arr[mid], arr[right[mid-1]] = arr[right[mid-1]], arr[mid]\n        arr[left[mid]], arr[mid] = arr[mid], arr[left[mid]]\n\n        if arr == sorted(arr):\n            return rotations\n        else:\n            rotations += 1\n            pivot = arr[right[mid-1]]\n\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # Finding the largest element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    # Finding the position of the first occurrence of max_val\n    first_occurrence = arr.index(max_val)\n    # Finding the position of the last occurrence of max_val\n    last_occurrence = arr[::-1].index(max_val)\n    # If the last occurrence is greater than the first occurrence, then the array is already sorted\n    if last_occurrence > first_occurrence:\n        return 0\n    else:\n        # Finding the number of rotations required to generate the sorted array\n        rotations = last_occurrence - first_occurrence\n        return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n\n    # check if the array is already sorted or not\n    if is_sorted(arr):\n        return 0\n\n    # check if the array is already sorted in reverse order\n    if is_reverse_sorted(arr):\n        return n\n\n    # find the index of the first element that is not equal to its sorted position\n    i = 0\n    while i < n-1 and arr[i] >= arr[i+1]:\n        i += 1\n\n    # if all elements are equal, return 0\n    if i == n-1:\n        return 0\n\n    # find the number of rotations required to reverse the array\n    reverse_count = n - i\n    arr.reverse()\n\n    # find the index of the first element that is not equal to its sorted position in the reversed array\n    j = 0\n    while j < n-1 and arr[j] >= arr[j+1]:\n        j += 1\n\n    # count the number of rotations required to reverse the array and the rotated array\n    rotate_count = n - i + j\n\n    return min(reverse_count, rotate_count)\n\n\ndef is_sorted(arr):\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n\n\ndef is_reverse_sorted(arr):\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            return False\n    return True"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array from left to right\n    for i in range(n):\n        # Find the smallest element on the right side of the current element\n        j = i + 1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        # If the smallest element on the right side is greater than the current element\n        if j < n and arr[j] > arr[i]:\n            # Count the number of rotations required to generate a sorted array\n            count = 1\n            # Traverse the array from right to left and compare the elements with the smallest element on the right side\n            while i < j:\n                if arr[i] < arr[j]:\n                    count += 1\n                i += 1\n                j -= 1\n            # Return the count of rotations\n            return count\n    # If no rotation is required, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the largest and smallest elements\n    l = max(arr)\n    r = min(arr)\n\n    # Initialize the number of rotations required\n    count = 0\n\n    # While the left and right pointers are not crossed\n    while l <= r:\n        # Calculate the mid point\n        mid = (l + r) // 2\n\n        # Calculate the number of elements in the left subarray\n        left_count = 0\n        for i in range(n):\n            if arr[i] < mid:\n                left_count += 1\n\n        # Calculate the number of elements in the right subarray\n        right_count = 0\n        for i in range(n):\n            if arr[i] > mid:\n                right_count += 1\n\n        # If the number of elements in the left subarray is greater than the number of elements in the right subarray,\n        # then the mid element can be moved towards the right side of the array to generate a sorted array.\n        if left_count > right_count:\n            # Update the left and right pointers\n            l = mid + 1\n            r = r\n        else:\n            # Update the left and right pointers\n            l = l\n            r = mid - 1\n\n            # Increment the count of rotations\n            count += 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # Recursive function to check if a number is a perfect square or not\n    def helper(num, sqroot, flag):\n        if num == 0:\n            return True\n        elif num == 1:\n            return False\n        elif flag:\n            if num > sqroot:\n                return False\n            else:\n                return helper(num-1, sqroot, False)\n        else:\n            if num < sqroot:\n                return False\n            else:\n                return helper(num-1, sqroot, True)\n\n    # Function to calculate the square root of a number\n    def sqrt(x):\n        a, b = 0, x\n        while b-a > 1e-6:\n            c = (a+b)/2\n            if c*c == x:\n                return c\n            elif c*c < x:\n                a = c\n            else:\n                b = c\n        return a\n\n    # Calculate the square root of the given number\n    sqrt_num = sqrt(n)\n\n    # Check if the given number is a perfect square or not\n    if n == sqrt_num*sqrt_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to integer and check if it is greater than 0\n    if n <= 0:\n        return False\n    # Calculate the square root of the given number\n    root = int(n ** 0.5)\n    # Check if the square root of the given number is equal to the given number\n    if root * root == n:\n        return True\n    # If the above condition is not satisfied, check if the square root of the given number is greater than the given number\n    elif root * root > n:\n        return False\n    # If none of the above conditions are satisfied, the given number is not a perfect square\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    if n < 0:\n        return False\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the input number is a perfect square\n    for i in range(int(n**0.5)+1):\n        if i**2 == n:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is a perfect square\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # square root of n\n    x = int(n**0.5)\n    # check if x is an integer\n    if n % x == 0 and x * x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    else:\n        a = 0\n        b = n\n        while a * a < b:\n            c = (a + b) // 2\n            if c * c == b:\n                return True\n            elif c * c > b:\n                b = c\n            else:\n                a = c\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # If n is less than or equal to 0, it is not a perfect square.\n    if n <= 0:\n        return False\n\n    # Initialize a variable to store the square root of n.\n    root = 0\n\n    # Iterate until the square root of n is greater than or equal to 1.\n    while root ** 2 < n:\n        root += 1\n\n    # If the square root of n is still less than or equal to n, then n is a perfect square.\n    return root ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns True if it is a perfect square or False otherwise.\n    A perfect square is a number that is the square of an integer. In other words, it is equal to the square of its square.\n\n    :param n: The positive integer to be checked for perfection.\n    :return: True if the input number is a perfect square, False otherwise.\n    \"\"\"\n    # Calculate the square of the number\n    square_n = n * n\n\n    # Check if the square of the number is equal to the input number\n    if square_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n    \n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list as input and returns True if the product of all the numbers in the list is even, else False.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return \"Product is even\"\n    else:\n        return \"Product is odd\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    product = 1\n    even_product = True\n    for num in arr:\n        product *= num\n        if product % 2!= 0:\n            even_product = False\n    return even_product"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables for the maximum sum and the corresponding sublist\n    max_sum = float('-inf')\n    max_sublist = []\n\n    # Loop through each sublist in the input lists\n    for sublist in lists:\n        # Calculate the sum of the elements in the sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the current maximum sum, update the maximum sum and sublist\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sublist = sublist\n\n    # Return the maximum sum and sublist\n    return max_sum, max_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # create a list of lists to store the maximum sum sublists\n    max_sum_sublists = []\n    # loop through each sublist in the given list\n    for sublist in lists:\n        # initialize the current maximum sum to be the first element of the sublist\n        current_sum = sublist[0]\n        # loop through each element of the sublist starting from the second element\n        for i in range(1, len(sublist)):\n            # add the current element to the current sum and update the current sum\n            current_sum += sublist[i]\n            # if the current sum is greater than the current maximum sum, update the maximum sum\n            if current_sum > current_sum:\n                current_sum = sublist[i]\n        # add the sublist with the maximum sum to the list of maximum sum sublists\n        max_sum_sublists.append(sublist)\n    # return the list of maximum sum sublists\n    return max_sum_sublists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    result = []\n\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = lists[i]\n\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    max_sum = 0\n    max_list = []\n\n    # Iterate through each list in the list of lists\n    for sublist in lists:\n        # Initialize variables\n        current_sum = 0\n\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the element to the current sum\n            current_sum += element\n\n        # Check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            # Update the max sum and the corresponding list\n            max_sum = current_sum\n            max_list = sublist\n\n    # Return the list with the highest sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n    \n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = i\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max_sum to the first element in the first list\n    max_sum = lists[0][0]\n    # Initialize max_list to the first list\n    max_list = lists[0]\n    # Loop through the list of lists\n    for i in range(1, len(lists)):\n        # Loop through each element in the current list\n        for j in range(len(lists[i])):\n            # Calculate the sum of the current element and the max_sum so far\n            current_sum = lists[i][j] + max_sum\n            # If the current sum is greater than max_sum, update max_sum and max_list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i]\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = [lists[i], lists[j]]\n\n    return max_sum_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if end == i:\n                start = i\n                end = i+1\n            else:\n                end = i+1\n        else:\n            if end > start:\n                max_run = max(max_run, end-start)\n            start = i\n            end = i+1\n    if end > start:\n        max_run = max(max_run, end-start)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    i = 0\n    max_run = 0\n    max_start = 0\n    run_start = 0\n    run_len = 0\n    \n    while i < len(test_str):\n        if test_str[i].isupper():\n            run_len += 1\n            if run_len > max_run:\n                max_run = run_len\n                max_start = run_start\n        else:\n            if run_len > 0:\n                if run_len > max_run:\n                    max_run = run_len\n                    max_start = run_start\n                run_len = 0\n            run_start = i + 1\n        i += 1\n    \n    if run_len > max_run:\n        max_run = run_len\n        max_start = run_start\n    \n    return max_run, max_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    start = 0\n    end = 0\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(test_str)):\n        # if the current character is uppercase\n        if test_str[i].isupper():\n            # if the count is greater than the maximum run\n            if count > max_run:\n                # update the maximum run and the start and end indices\n                max_run = count\n                start = i - count + 1\n                end = i\n            # increment the count\n            count += 1\n        else:\n            # if the count is greater than 0, reset it to 0\n            if count > 0:\n                count = 0\n\n    # return the maximum run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_length = 0\n    start_index = 0\n    max_run_length = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i - start_index + 1 > run_length:\n                run_length = i - start_index + 1\n                max_run_length = run_length\n                start_index = i\n            elif i - start_index + 1 == run_length:\n                max_run_length = run_length\n    return max_run_length"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_run = 1\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n        if count > max_run:\n            max_run = count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    current_char = test_str[0]\n    # Iterate over the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the length of the run is greater than the current max run, update max run and reset run length\n            if i - run_length > max_run:\n                max_run = i - run_length\n                run_length = 1\n            # If the current character is lowercase, increment run length\n            else:\n                run_length += 1\n        # If the current character is not uppercase, reset the run length\n        else:\n            run_length = 0\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables to store the current run of uppercase characters and its length\n    current_run = ''\n    current_run_length = 0\n\n    # Iterate over each character in the input string\n    for char in test_str:\n        # If the current character is uppercase and not already in the current run, add it to the current run and update the length\n        if char.isupper() and char not in current_run:\n            current_run += char\n            current_run_length += 1\n        # If the current character is lowercase or if it is the end of the run, check if it is longer than the current longest run\n        elif char.islower() or (char in current_run and current_run_length > max_run_length):\n            # Update the maximum run if it is longer than the current longest run\n            max_run_length = current_run_length\n            # Reset the current run and its length\n            current_run = ''\n            current_run_length = 0\n\n    # If there is a current run and its length is greater than the current longest run, update the maximum run and its length\n    if current_run_length > max_run_length:\n        max_run_length = current_run_length\n\n    # Return the maximum run of uppercase characters and its length\n    return max_run_length, current_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    last_uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n        last_uppercase = char.isupper()\n    \n    if current_run > max_run and last_uppercase:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    uppercase_start = 0\n    max_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n                uppercase_start = i\n        else:\n            uppercase_count = 0\n\n    return test_str[uppercase_start:uppercase_start+max_run]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    # Loop through the list and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # If no odd numbers are found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number found in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n\n    if len(test_tup) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for t in test_tup:\n        if K in t:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if K in i:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # Create a dictionary to store the frequency of each element in the given tuples\n    freq_dict = {}\n    for tup in test_tup:\n        for elem in tup:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    \n    # Check if the frequency of the element in the K-th tuple is greater than or equal to the value of K\n    if freq_dict[K[0]] >= K[1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    # check if all elements in test_tup are greater than or equal to K\n    if all(x >= K for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        if all(x in test_tup for x in range(K)):\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple of integers and an integer K as input and returns True if the tuple contains the K, otherwise False.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"The tuple contains the value of K: {K}\")\n    else:\n        print(f\"The tuple does not contain the value of K: {K}\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Loop through the first tuple and compare each element to the corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    # If all elements in the first tuple are smaller than their corresponding elements in the second tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples have different lengths\"\n\n    # Check if all elements of second tuple are smaller than their corresponding elements in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"False\"\n\n    # If no errors, return True\n    return \"True\""
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Check if each element of the second tuple is smaller than the corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples should have the same length.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]