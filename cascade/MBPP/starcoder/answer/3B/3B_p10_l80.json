[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in shared_elements:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_list.append(test_tup1[i])\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create sets from the given tuples to remove duplicates and sort them\n    set1 = set(sorted(test_tup1))\n    set2 = set(sorted(test_tup2))\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list\n    shared_list = list(intersection)\n\n    # Return the shared elements\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Convert the tuples to sets for faster searching\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of the sets and convert it back to a list\n    shared_elements = list(set1.intersection(set2))\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Get the sets of unique elements from each list\n    unique_elements1 = set(test_tup1)\n    unique_elements2 = set(test_tup2)\n\n    # Find the intersection of the sets\n    shared_elements = unique_elements1.intersection(unique_elements2)\n\n    # Return the shared elements as a list\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Initialize an empty set to store the shared elements\n    shared_set = set()\n    # Iterate through each element in the first tuple\n    for elem1 in test_tup1:\n        # Iterate through each element in the second tuple\n        for elem2 in test_tup2:\n            # If the elements are equal, add them to the shared set\n            if elem1 == elem2:\n                shared_set.add(elem1)\n    # Return the shared set as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Find the intersection of the two lists\n    intersection = [x for x in test_tup1 if x in test_tup2]\n\n    # Sort the intersection list and remove duplicates\n    intersection = sorted(list(set(intersection)))\n\n    return intersection"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    common_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            common_elements.append(elem)\n\n    return common_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is not a prime number, False otherwise.\n    \"\"\"\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    # Check if the number is 2 or 3\n    elif n in [2, 3]:\n        return False\n    # Check if the number is divisible by any odd number between 3 and the square root of the number\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    elif n > 3:\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return True\n            i += 6\n    # If no factors are found, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # check for divisibility by odd numbers up to the square root of the number\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(10)) # True\nprint(is_not_prime(15)) # False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert list to heap and extract the largest n elements\n    heap = nums\n    for i in range(n-1):\n        hq.heappushpop(heap, -heapq.heappop(heap))\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use max-heap to find the n largest integers\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappushpop(max_heap, num)\n    \n    # Convert max-heap to list and reverse the list\n    largest_nums = heapq.nlargest(n, max_heap)\n    largest_nums.reverse()\n    \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers into a min-heap of size n\n    max_heap = hq.nsmallest(n, nums)\n    # Remove and return the largest n elements from the heap\n    return [hq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list of numbers to a min-heap (Max-heap is created by negating the numbers)\n    min_heap = [-num for num in nums]\n    hq.heapify(min_heap)\n    # Find the n largest numbers and return them in a list\n    largest_nums = []\n    while n > 0:\n        largest_nums.append(-hq.heappop(min_heap))\n        n -= 1\n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a min-heap to store the n largest integers\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)  # push negative numbers to heap to sort in descending order\n        if len(heap) > n:\n            hq.heappop(heap)  # remove the smallest number if heap size exceeds n\n    return [num for num in heap if num >= 0]  # return only the positive numbers"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Convert the list of numbers to a min heap using the heapq module\n    min_heap = hq.nsmallest(n, nums)\n    \n    # Remove the smallest element from the heap to get the n largest elements in descending order\n    return sorted(min_heap, reverse=True)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap, num)\n        elif num > heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums) # convert list to a max heap\n    for _ in range(n-1): # remove the largest element until n elements remain\n        hq.heappop(nums)\n    return nums # return the n largest elements in descending order"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        nums.pop()\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    hq.heapify(nums[:n])\n    # Remove the largest element from the heap\n    for i in range(n,len(nums)):\n        if nums[i] > hq.heappop(nums[:n]):\n            hq.heappush(nums[:n],nums[i])\n    # Return the n largest elements\n    return nums[:n]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    if x & (x - 1) == 0:\n        return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the input number to binary\n    binary_x = bin(x)[2:]\n\n    # Check if the binary representation of both numbers are equal\n    if binary_x == binary_x[::-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 1:\n        x = x >> 1\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x == 0:\n        return True\n    if x & (x-1)!= 0:\n        return False\n    return is_Power_Of_Two(x >> 1)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # check if x is a power of 2\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of 2\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Check if the number is a power of 2 or not\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # If the two numbers are same, then they differ at only one bit position\n    if x == x >> 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert both numbers to binary strings\n    x_binary = bin(x)[2:]\n    y_binary = bin(y)[2:]\n    \n    # Find the number of bits that differ at one position\n    diff_count = 0\n    for i in range(len(x_binary)):\n        if x_binary[i]!= y_binary[i]:\n            diff_count += 1\n        if diff_count == 1:\n            return True\n    \n    return False"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words of length 4 or more\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words of at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the pattern to find all matches in the input string\n    matches = re.findall(pattern, text)\n    # Return a list of all found matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Use regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Using regular expression to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Remove all non-alphanumeric characters except underscores and hyphens\n    pattern = r'\\W+'\n    text = re.sub(pattern,'', text)\n\n    # Split the string into words\n    words = text.split()\n\n    # Filter out words which are less than 4 characters long\n    result = [word for word in words if len(word) >= 4]\n\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of words that are at least 4 characters long.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Convert the string to lowercase and split it into a list of words\n    words = text.lower().split()\n\n    # Initialize an empty list to store the words that are at least 4 characters long\n    char_long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is at least 4\n        if len(word) >= 4:\n            # If the word is at least 4 characters long, append it to the list of char_long_words\n            char_long_words.append(word)\n\n    # Return the list of char_long_words\n    return char_long_words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared = []\n    for num in nums:\n        squared.append(num*num)\n    return squared"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Sort the dictionary by the frequency of each character\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n\n    # Iterate over the sorted dictionary\n    for char, count in sorted_freq:\n        # Calculate the number of rotations required to get the same string\n        num_rotations = 0\n        while count > 0:\n            # If there are more rotations required, increase the count and repeat\n            num_rotations += 1\n            count = (count - 1) // 2\n\n        # Update the minimum number of rotations if the current count is smaller\n        if min_rotations == 0 or num_rotations < min_rotations:\n            min_rotations = num_rotations\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # Convert the string to lowercase\n    str = str.lower()\n\n    # Create a list of possible rotations of the string\n    rotations = [s[::-1] for s in str]\n\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Loop through each possible rotation and calculate the number of rotations\n    for rotation in rotations:\n        rot_count = 0\n        for i in range(len(str)):\n            if str[i]!= rotation[i]:\n                rot_count += 1\n            if rot_count > 0:\n                break\n        if rot_count > 0 and rot_count < min_rotations:\n            min_rotations = rot_count\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    # Create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through all possible rotations of the string\n    min_rot = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # Check if the length of the rotated string is equal to the length of the original string\n            if len(str[i:j]) == len(str):\n                # Calculate the frequency of characters in the rotated string\n                rotated_freq = {}\n                for char in str[i:j]:\n                    if char in rotated_freq:\n                        rotated_freq[char] += 1\n                    else:\n                        rotated_freq[char] = 1\n\n                # Check if the frequency of characters in the rotated string is same as that in the original string\n                if rotated_freq == freq:\n                    # Update the minimum number of rotations found\n                    if j-i+1 < min_rot:\n                        min_rot = j-i+1\n    \n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the string is of even length or not\n    if len(str) % 2 == 0:\n        # if even length, check if it is a palindrome or not\n        if str == str[::-1]:\n            # if a palindrome, return 0 rotations\n            return 0\n        # if not, loop through all possible rotations and check if it is a palindrome\n        else:\n            for i in range(len(str)):\n                # rotate the string by 1 character\n                new_str = str[i:] + str[:i]\n                # check if the rotated string is a palindrome\n                if new_str == new_str[::-1]:\n                    # if a palindrome, return the number of rotations\n                    return i + 1\n    # if the string is of odd length, check if it is a palindrome or not\n    else:\n        if str == str[::-1]:\n            # if a palindrome, return 0 rotations\n            return 0\n        # if not, loop through all possible rotations and check if it is a palindrome\n        else:\n            for i in range(len(str)):\n                # rotate the string by 1 character\n                new_str = str[i:] + str[:i]\n                # check if the rotated string is a palindrome\n                if new_str == new_str[::-1]:\n                    # if a palindrome, return the number of rotations\n                    return i + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n    # Loop through all possible rotations of the string\n    for i in range(n):\n        # Initialize a variable to keep track of the rotation count\n        count = 0\n        # Initialize a variable to keep track of the characters in the string\n        chars = \"\"\n        # Loop through all possible rotations of the i-th character\n        for j in range(n):\n            # If the current character is equal to the i-th character, increment the count\n            if str[i] == str[j]:\n                count += 1\n            # Once all characters have been counted, break out of the inner loop\n            if count == n:\n                break\n            # If the count is less than n, append the character to the chars string\n            chars += str[j]\n        # If all characters have been counted, check if the rotated string matches the original string\n        if chars == str:\n            # If it does, increment the minimum rotation count\n            min_rotations += 1\n        # If the rotation count is greater than the current minimum, update the minimum\n        if min_rotations > 0 and count > min_rotations:\n            min_rotations = count\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    n = len(str) \n    rotations = 0 \n    for i in range(n//2): \n        if str[i]!= str[n-i-1]: \n            return rotations \n    return rotations+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            return i+1\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the frequency of characters in the input string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the length of the longest substring that occurs only once\n    max_substring = \"\"\n    for substring in freq:\n        if freq[substring] == 1 and len(substring) > len(max_substring):\n            max_substring = substring\n    \n    # find the number of rotations required to get the same string\n    rotations = 0\n    for i in range(len(str) // 2):\n        if str[i]!= max_substring:\n            rotations += 1\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize the count of rotations to 0\n    count = 0\n    \n    # Initialize the string to be checked as the first string\n    string = str\n    \n    # Loop until the string is the same as the original string\n    while string!= str:\n        \n        # Increment the count of rotations\n        count += 1\n        \n        # Find the index of the first character that has a difference between the original string and the current string\n        index = 0\n        while string[index] == str[index]:\n            index += 1\n        \n        # Reverse the substring from index to the end of the string\n        string = string[index:] + string[:index]\n        \n    # Return the count of rotations\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # sort the dictionary by the count of each character in descending order\n    sorted_char_count = dict(sorted(char_count.items(), key=lambda item: item[1], reverse=True))\n    \n    # create a list of the characters in the string in ascending order\n    sorted_str = sorted(str)\n    \n    # initialize the count of rotations to 0\n    count = 0\n    \n    # loop through the sorted string and count the number of rotations required to get the same string\n    for i in range(len(sorted_str)):\n        if sorted_str[i]!= sorted_char_count[sorted_str[i]]:\n            count += 1\n            if count > 0:\n                break\n    \n    # return the count of rotations required to get the same string\n    return count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch): \n    # split the string into a list of characters\n    lst = list(s) \n    # use a for loop to iterate over the list of characters\n    for i in range(len(lst)): \n        # if the current character matches the given character to be removed\n        if lst[i] == ch: \n            # if it's the first character in the list, remove the last occurrence of it\n            if i == 0: \n                lst.pop() \n            # if it's the last character in the list, remove the first occurrence of it\n            elif i == len(lst)-1: \n                lst.pop(0) \n    # join the list of characters into a string and return it\n    return ''.join(lst) "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if character is present in the string\n    if ch in s:\n        # split the string into two parts\n        parts = s.split(ch)\n        # join the two parts with only one occurrence of the character\n        result = ch.join(parts[0:1]) + ch.join(parts[1:-1]) + ch.join(parts[-1:])\n    else:\n        # if the character is not present in the string, return the original string\n        result = s\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch): \n    '''\n    This function takes a string and a character as input and returns a new string with the \n    first and last occurrence of the character removed.\n    '''\n    if s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    s=s.replace(ch, '')\n    if len(s) > 0:\n        s = s[1:]\n    if len(s) > 0:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) > 0:\n        s = s.replace(ch, '', 1)\n        s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize variables to keep track of first and last occurrences of ch in s\n    first = -1\n    last = -1\n    # Traverse the string s\n    for i in range(len(s)):\n        # If the current character is equal to ch, set the first and last variables to the current index\n        if s[i] == ch:\n            if first == -1:\n                first = i\n            last = i\n    # If there are no occurrences of ch, return the string unchanged\n    if first == -1:\n        return s\n    # Remove the first and last occurrences of ch from the string and return it\n    return s[:first] + s[last+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    chars = list(s)\n    # Initialize two variables to keep track of first and last occurrence of the character\n    first = -1\n    last = -1\n    # Loop through the list of characters\n    for i in range(len(chars)):\n        # If the current character is the given character\n        if chars[i] == ch:\n            # If it is the first occurrence of the character\n            if first == -1:\n                first = i\n            # If it is the last occurrence of the character\n            if last == -1:\n                last = i\n            # If it is not the first or last occurrence, remove it from the string\n            else:\n                del chars[i]\n    # Return the modified string\n    return ''.join(chars)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) < 2:\n        return s\n    elif s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n    \n    # create a copy of the matrix\n    M_sorted = [[row[col] for col in range(cols)] for row in M]\n    \n    # sort each row by the sum of its elements\n    for row in M_sorted:\n        row.sort()\n    \n    # sort the rows by their sums in ascending order\n    M_sorted.sort(key=lambda row: sum(row))\n    \n    # reconstruct the original matrix\n    for row in range(rows):\n        for col in range(cols):\n            M[row][col] = M_sorted[row][col]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a copy of the matrix\n    M_sorted = list(map(list, M))\n\n    # sort each row of the matrix\n    for i in range(len(M)):\n        M_sorted[i].sort()\n\n    # create a new matrix with the sorted rows\n    sorted_matrix = []\n    for row in M_sorted:\n        sorted_matrix.append(row)\n\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        # Initialize the minimum element in the row\n        min_idx = i\n        for j in range(i+1, n):\n            if M[i][j] < M[min_idx][min_idx]:\n                min_idx = j\n        # Swap the minimum element with the current row element\n        M[i], M[min_idx] = M[min_idx], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if M[i][j] < M[i][j-1] + M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] > M[i][i] + M[j][j]:\n                M[i][j], M[j][j] = M[j][j], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the result matrix\n    result = [[0, 0] for _ in range(len(M))]\n\n    # Initialize the row sums\n    row_sums = [sum(row) for row in M]\n\n    # Sort the row sums in ascending order\n    row_sums.sort()\n\n    # Initialize the column sums\n    col_sums = [0] * len(M[0])\n\n    # Iterate over the columns of the matrix\n    for col in range(len(M[0])):\n        # Find the row with the smallest sum greater than or equal to the current column sum\n        row = bisect_left(row_sums, col_sums[col])\n\n        # Update the column sum\n        col_sums[col] = row_sums[row]\n\n        # Copy the row to the result matrix\n        result[row][col] = M[row][col]\n\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the rows based on the sum of each row\n    sorted_rows = sorted(M, key=lambda x: x[row_sums.index(max(row_sums))])\n\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element in the row\n        for j in range(len(M[i])):\n            # calculate the sum of the row\n            row_sum = sum(M[i])\n            # if the element is smaller than the sum of the row, swap it with the element to its left\n            if M[i][j] < row_sum:\n                M[i][j], M[i][j-1] = M[i][j-1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n):\n        M[i].sort(reverse=True)\n    for i in range(n):\n        M[i] = M[i][::-1]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize variables for row sums and row indices\n    row_sums = [sum(row) for row in M]\n    row_indices = [row_sums.index(max(row_sums))]\n\n    # keep swapping rows until no more swaps are needed\n    while row_sums!= sorted(row_sums):\n        # initialize row_sums and row_indices for current iteration\n        current_row_sums = [sum(row) for row in M]\n        current_row_indices = [current_row_sums.index(max(current_row_sums))]\n\n        # swap row with highest sum if necessary\n        if current_row_sums[current_row_indices[0]]!= row_sums[row_indices[0]]:\n            # swap the rows\n            M[row_indices[0]], M[current_row_indices[0]] = M[current_row_indices[0]], M[row_indices[0]]\n\n            # update row sums and row indices\n            row_sums = current_row_sums\n            row_indices = current_row_indices\n\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h # Calculate the volume using the formula V = l * b * h\n    return volume # Return the volume as the output of the function"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n\n    # Calculate the volume of the triangular prism using Heron's formula.\n    a = l\n    c = b\n    s = h\n\n    # Using Heron's formula to find the semi-perimeter.\n    s_sq = s * s\n    area = 0.5 * a * b\n    semi_perimeter = 2 * (a + b + c)\n\n    # Using Heron's formula to find the perimeter.\n    perimeter = 2 * (a + b + c + s)\n\n    # Using Heron's formula to find the area of the base.\n    area_base = 0.5 * a * b\n\n    # Using Heron's formula to find the volume of the triangular prism.\n    volume = area * semi_perimeter * perimeter / area_base\n\n    # Return the volume of the triangular prism.\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes three parameters, l (length of the base), b (width of the base), and h (height of the prism),\n    and returns the volume of the prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    return (l * b * h) / 3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume \n\nprint(find_Volume(1,2,3)) # Output: 6 "
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'^[a-z]+_[a-z]+$')\n    return pattern.match(text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'^[a-z]+_[a-z]+$'\n    match = re.match(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z_]{1,})'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b[a-z])[a-z]+(?=[_])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![\\w_])([a-z_]+)([a-z_]+)(?![\\w_])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"([a-z])(?=[A-Z])|([A-Z])(?=[A-Z][a-z])\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z])_([a-z])'\n    return bool(re.findall(pattern, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n\n    # calculate the perimeter of the square\n    perimeter = 4 * a\n\n    # return the perimeter\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a dictionary to store the frequency of each character in the second string\n    freq = {}\n    for char in string:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list to store the characters from the first string that are not present in the second string\n    result = []\n    for char in range(NO_OF_CHARS):\n        if char not in freq:\n            result.append(chr(char))\n    \n    # Join the list of characters into a string\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    return [char for char in string if char not in char_set]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    string_list = list(string)\n    for i in range(len(string)):\n        if string_list[i] in string_list[:i]:\n            string_list.pop(i)\n            i -= 1\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the input string to a list of characters\n    char_list = list(string)\n    \n    # Initialize an empty list to store the resulting list\n    result_list = []\n    \n    # Iterate through each character in the input string\n    for char in char_list:\n        # Check if the character is present in the second string\n        if char not in string:\n            # If it is not present, add it to the result list\n            result_list.append(char)\n    \n    # Convert the resulting list to a string and return it\n    return ''.join(result_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_chars = list(range(NO_OF_CHARS))\n    result = []\n    for char in string:\n        if char not in list_of_chars:\n            result.append(char)\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256 # 256 is the number of characters in ASCII table\n    first_string = string.lower() # convert string to lowercase for case-insensitive comparison\n    second_string = \"\".join([chr(i) for i in range(NO_OF_CHARS)]) # generate all characters in ASCII table\n    \n    # remove characters from first_string which are present in second_string\n    for char in first_string: \n        if char not in second_string: \n            string = string.replace(char, \"\")\n    \n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string, list_to_remove):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char not in list_to_remove:\n            result += char\n    return result\n\n\nNO_OF_CHARS = 256\ndef remove_chars(string, list_to_remove):\n    \"\"\"\n    This function takes a string and a list of characters to remove and returns the modified string without those characters.\n    \"\"\"\n    return str_to_list(string, list_to_remove)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in second_string:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string, no_of_chars=256):\n    \"\"\"\n    This function takes a string and an optional number of characters as input.\n    It removes all the characters present in the second string from the first string.\n    If no number of characters is provided, it uses the default value 256.\n    \"\"\"\n    removed_chars = set(string.lower())\n    new_string = \"\"\n    for char in string:\n        if char not in removed_chars:\n            new_string += char\n    return new_string[:no_of_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Initialize an empty list to store the remaining characters\n    remaining_chars = []\n\n    # Loop through each character in the input string\n    for char in string: \n        # Check if the character is not in the second string\n        if char not in second_string: \n            # Append the character to the remaining characters list\n            remaining_chars.append(char)\n\n    # Return the remaining characters as a string\n    return ''.join(remaining_chars)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 1:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    hashset = set()\n    for num in arraynums:\n        if num in hashset:\n            return True\n        else:\n            hashset.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the number of occurrences of each element\n    count_dict = {}\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count\n        if num in count_dict:\n            count_dict[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the dictionary to check for duplicates\n    for num in count_dict:\n        if count_dict[num] > 1:\n            return True\n\n    # If no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a dictionary to store the frequency of each element\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element\n    for num in arraynums:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the dictionary and return True if there is any duplicate element\n    for num in arraynums:\n        if freq[num] > 1:\n            return True\n    \n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements in the array\n    unique_set = set(arraynums)\n    \n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    else:\n        for i in range(1, len(arraynums)):\n            if arraynums[i] == arraynums[i-1]:\n                return True\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_nums = set()\n    for num in arraynums:\n        # Check if the element is already in the set\n        if num in unique_nums:\n            # If it is, return True\n            return True\n        # Otherwise, add the element to the set\n        else:\n            unique_nums.add(num)\n    # If we reach this point, there were no duplicate elements in the array\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicates = []\n    for i in range(len(arraynums)):\n        if arraynums[i] in duplicates:\n            return True\n        else:\n            duplicates.append(arraynums[i])\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    if x > 1000000:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0 and x % 15 == 0:\n        print(\"Woodball!\")\n    else:\n        print(\"Not a Woodball.\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1:\n        return \"This number is a woodball!\"\n    elif x % 3 == 0 and x % 5 == 0:\n        return \"This number is a woodball!\"\n    else:\n        return \"This number is not a woodball.\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 7:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x%10 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define a list of prime numbers\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Iterate through the list of primes and check if x is divisible by any of them\n    for prime in primes:\n        if x % prime == 0:\n            return False\n\n    # If we make it through the loop without finding a divisor, x must be a woodball\n    return True"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * rev_num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):    \n    # Reverse the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reversed number is one less than twice its original value\n    if reverse - num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    if rev_num == 2 * num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    reverse = 0\n    temp = num\n\n    # Calculate the reverse of the given number\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp = temp // 10\n\n    # Check if the reverse is one less than twice the original number\n    if reverse + 1 < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num*10 + rem\n        num = num // 10\n    if num!= 0:\n        return False\n    else:\n        return True\n\nprint(rev(1234)) # Output: True\nprint(rev(5678)) # Output: True\nprint(rev(9999)) # Output: False\nprint(rev(10000)) # Output: False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num = num//10\n    if num == reverse-2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (int(str(num)[::-1]) + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    return (num + 1) == 2 * rev(num + 1)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    # Convert number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Calculate the difference between the original number and the reversed number\n    diff = abs(num - rev_num)\n    # Check if the difference is one less than twice the original number's reverse\n    if diff <= 2*num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string to an integer\n    rev_int = int(rev_str)\n    # Check if the reversed number is one less than twice the original number\n    if rev_int < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits (as a string) as input and returns the largest number that can be formed with the digits.\n    '''\n\n    # Convert the list of digits to a list of integers\n    digits = [int(d) for d in arr]\n\n    # Sort the list of integers in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted list of integers back to a string\n    max_num_str = ''.join([str(d) for d in digits])\n\n    # Return the largest number as an integer\n    return int(max_num_str)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    # Initialize maximum number to be 0\n    max_num = 0\n    # Iterate through each digit in the array\n    for digit in arr:\n        # Convert digit to integer\n        digit = int(digit)\n        # Check if the digit is less than or equal to the current maximum number\n        if digit <= max_num:\n            # If digit is less than or equal to the current maximum number, add it to the maximum number\n            max_num += digit\n        else:\n            # If digit is greater than the current maximum number, start a new maximum number with the digit\n            max_num = digit\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for digit in arr:\n        max_num = max(max_num, int(digit))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for num in arr:\n        max_num += num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #sorting the array in descending order\n    arr.sort(reverse=True)\n\n    #initializing the maximum number\n    max_num = 0\n\n    #initializing the length of the array\n    n = len(arr)\n\n    #iterating over the array\n    for i in range(n) : \n\n        #calculating the product of the current digit and the maximum number formed so far\n        current_digit = arr[i]\n        current_product = max_num * current_digit\n\n        #updating the maximum number if the current product is greater than the previous maximum number\n        if current_product > max_num : \n            max_num = current_product\n\n    #returning the maximum number\n    return max_num "
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    arr.sort(reverse=True)\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n        if count > 9:\n            count = 0\n    return count\n\narr = [int(x) for x in input(\"Enter the list of digits separated by space: \").split()]\nprint(\"The maximum number that can be formed with the given list of digits is:\", find_Max_Num(arr))"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    def find_Max_Num_Helper(arr, n, i, dp):\n        if n == 0:\n            return 0\n        if i == len(arr):\n            return 0\n        if dp[n][i]!= -1:\n            return dp[n][i]\n\n        dp[n][i] = max(arr[i] + find_Max_Num_Helper(arr, n - 1, i + 1, dp),\n                        find_Max_Num_Helper(arr, n, i + 1, dp))\n        return dp[n][i]\n\n    dp = [[-1] * len(arr) for _ in range(len(arr) + 1)]\n    return find_Max_Num_Helper(arr, len(arr), 0, dp)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed with those digits.\n    \"\"\"\n    # Initialize max_num to the first digit in the list\n    max_num = arr[0]\n    \n    # Loop through the remaining digits in the list\n    for digit in arr[1:]:\n        # Check if digit can be formed with max_num\n        if max_num % digit == 0:\n            # If it can be formed, update max_num\n            max_num = max_num // digit\n        else:\n            # If it can't be formed, try a different value\n            for i in range(2, digit):\n                if max_num % i == 0:\n                    # If it can be formed, update max_num\n                    max_num = max_num // i\n                    break\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Initialize variables to store the largest number formed with digits in arr\n    max_num = 0\n    current_num = 0\n    \n    # Iterate through the array of digits and add them to the current_num variable\n    for num in arr:\n        current_num += num\n        \n        # If the current_num becomes greater than max_num, update max_num\n        if current_num > max_num:\n            max_num = current_num\n    \n    # Return the final max_num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0:\n        return True\n    elif x<=0 and y<=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    This function takes two integers as input and returns True if they have opposite signs, else False.\n    '''\n    if x*y < 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if the signs of x and y are different\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both numbers have the same sign\n    if (x >= 0 and y >= 0) or (x <= 0 and y <= 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have opposite signs.\"\n    elif x < 0 and y > 0:\n        return \"The first number has an opposite sign than the second number.\"\n    else:\n        return \"The second number has an opposite sign than the first number.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        print(\"The two integers have opposite signs.\")\n    elif x < 0 and y < 0:\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers have the same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if (x*y) < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x * y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if x and y have same sign\n    if (x < 0 and y < 0) or (x > 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return \"Please enter a positive integer greater than or equal to 1.\"\n    else:\n        octagonal_num = 0\n        for i in range(1, n+1):\n            octagonal_num += i**2\n        return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    count = 1\n    octagonal = 0\n    \n    while count <= n:\n        octagonal = is_octagonal(count)\n        count += 1\n        \n    return octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        return 8 * (n ** 2) + 6 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n * (n - 1))\n\nn = int(input(\"Enter a positive integer: \"))\n\nif is_octagonal(n) == \"Please enter a positive integer\":\n    print(\"Please enter a positive integer\")\nelse:\n    print(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize variables\n    octagonal = 1\n    prev_octagonal = 0\n    \n    # Loop until nth octagonal number is found\n    while octagonal <= n:\n        # If the current octagonal number is greater than the previous octagonal number\n        if octagonal > prev_octagonal:\n            # Calculate the next octagonal number\n            octagonal = prev_octagonal + prev_octagonal + prev_octagonal + prev_octagonal + 1\n        # Update the previous octagonal number\n        prev_octagonal = octagonal\n        \n        # Increment the loop counter\n        octagonal += 1\n        \n    # Return the nth octagonal number\n    return octagonal - 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = 0\n    for i in range(1, n+1): \n        oct += (i**2 + 1) // 2\n    return oct\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n):\n        print(a)\n        a += 8\n        b -= 2\n        a += b\n    print(a)\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_count = 0\n    for i in range(1, n + 1):\n        octagonal_count += i\n    return octagonal_count\n\ndef nth_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return is_octagonal(n - 1) + nth_octagonal(n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    a = 1\n    b = 8\n    while n > 0:\n        print(a, end=\" \")\n        n -= 1\n        a, b = b, a + b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    else:\n        return is_octagonal(n-1) + is_octagonal(n-2) + is_octagonal(n-3) + is_octagonal(n-4) + is_octagonal(n-5)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            digits = sum(int(digit) for digit in s[i:j+1])\n            count[digits] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                count[len(s[i:j+1])] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    dp = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(int(c) for c in s[i:j]) == j-i:\n                count += 1\n                dp[s[i:j]] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings[substring] += 1\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    counts = defaultdict(int)\n\n    # Iterate over all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Calculate the sum of digits of the substring\n            sum_digits = sum(int(digit) for digit in s[i:j])\n            # Check if the sum of digits is equal to the length of the substring\n            if sum_digits == j-i:\n                counts[sum_digits] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return counts[sum(int(digit) for digit in s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate through each substring of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring\n            substring = s[i:j]\n\n            # Calculate the sum of digits in the substring\n            digits_sum = sum(int(digit) for digit in substring)\n\n            # If the sum of digits is equal to the length of the substring, increment the count\n            if digits_sum == len(substring):\n                count[substring] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count = 0\n    dp = defaultdict(int)\n    dp[0] = 1\n    \n    for i in range(length):\n        if s[i].isdigit():\n            digit_sum = int(s[i])\n            for j in range(i, length):\n                if j == i + 1:\n                    dp[j] += 1\n                elif s[j].isdigit():\n                    digit_sum += int(s[j])\n                    if digit_sum == length:\n                        count += dp[i]\n                    digit_sum -= int(s[j])\n                else:\n                    break\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in s:\n        digit_count[int(i)] += 1\n\n    count = 0\n    for i in range(10):\n        count += digit_count[i] * digit_count[i]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[sum(map(int, s[i:]))] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # initialize a dictionary to store the count of substrings with digits as the sum of digits\n    count_dict = defaultdict(int)\n\n    # iterate over each character in the string\n    for i in range(len(s)):\n        # check if the sum of digits is equal to the length of the substring\n        if sum(int(digit) for digit in s[i:]) == i:\n            # increment the count of substrings with the given length\n            count_dict[i] += 1\n\n    # return the count of substrings with the given length\n    return sum(count_dict.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize a variable to store the smallest number\n    smallest = xs[0]\n    \n    # iterate through the list and compare each number to the current smallest number\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        raise ValueError(\"List must not be empty\")\n    elif len(xs) == 1:\n        return xs[0]\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # iterate over the list and find the smallest number\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in the list.\n    '''\n    # Initialize the smallest number to the first element of the list\n    smallest = xs[0]\n\n    # Loop through the remaining elements of the list\n    for x in xs[1:]:\n        # If the current element is smaller than the current smallest number, update the smallest number\n        if x < smallest:\n            smallest = x\n\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    # initialize smallest to the first element of the list\n    smallest = xs[0]\n\n    # iterate over the rest of the list\n    for x in xs[1:]:\n        # if current element is smaller than smallest so far, update smallest\n        if x < smallest:\n            smallest = x\n\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize the maximum difference as the first difference between the first two elements\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n    \n    # Iterate over the sorted list of tuples\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current and previous elements\n        diff = abs(test_list[i][0] - test_list[i-1][0])\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples based on their first element\n    sorted_list = sorted(test_list)\n\n    # Initialize the maximum difference as zero\n    max_diff = 0\n\n    # Loop through the sorted list of tuples\n    for i in range(len(sorted_list)-1):\n        # Calculate the difference between the current element and the next element in the list\n        diff = sorted_list[i+1][0] - sorted_list[i][0]\n\n        # Update the maximum difference if the current difference is greater than the current maximum difference\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        diff = test_list[i + 1][0] - test_list[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    test_list (list of tuples): A list of tuples containing integers.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Example:\n    test_list = [(1, 2), (3, 4), (5, 6), (7, 8)]\n    max_diff = max_difference(test_list)\n    print(max_diff) # Output: 6\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables for maximum difference and current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Iterate through each tuple in the list\n    for i in range(len(test_list)-1):\n        # Find the difference between the i-th and (i+1)-th tuples\n        diff = test_list[i][1] - test_list[i+1][1]\n        # Update the current difference if the difference is greater than it\n        if diff > curr_diff:\n            curr_diff = diff\n        # Update the maximum difference if the current difference is greater than the maximum\n        if curr_diff > max_diff:\n            max_diff = curr_diff\n\n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize two variables to store the maximum difference and the indices of the current pair\n    max_diff = 0\n    pair_indices = None\n\n    # Loop through the sorted list of tuples\n    for i in range(len(test_list)):\n        # Check if the difference between the current pair and the next pair is greater than the current maximum difference\n        if test_list[i][1] - test_list[i+1][1] > max_diff:\n            # Update the maximum difference and the indices of the current pair\n            max_diff = test_list[i][1] - test_list[i+1][1]\n            pair_indices = [i, i+1]\n\n    # Check if there are any available pairs\n    if pair_indices is None:\n        return None\n\n    # Return the maximum difference and the indices of the current pair\n    return max_diff, pair_indices"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    test_list.sort()\n    n = len(test_list)\n    max_diff = test_list[n-1] - test_list[0]\n    for i in range(1, n-1):\n        diff = test_list[i+1] - test_list[i]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize variables to keep track of minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n    # Loop through the list of tuples and calculate the difference between each pair\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum difference between available pairs\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the max_diff and the current_diff as None\n    max_diff = None\n    current_diff = None\n\n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        # For each tuple, get the second element and compare it with the current_diff\n        if test_list[i][1] > current_diff:\n            # If the second element is greater than the current_diff, update the current_diff\n            current_diff = test_list[i][1] - test_list[i][0]\n        elif test_list[i][1] < current_diff:\n            # If the second element is less than the current_diff, update the max_diff if necessary\n            if current_diff is not None and max_diff is None or current_diff > max_diff:\n                max_diff = current_diff\n            # Reset the current_diff\n            current_diff = None\n\n    # If the current_diff is not None, update the max_diff if necessary\n    if current_diff is not None and max_diff is None or current_diff > max_diff:\n        max_diff = current_diff\n\n    # Return the max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples in ascending order based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Print the sorted list of tuples\n    print(subjectmarks)"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flattened_list.extend(recursive_list_sum(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a nested list.\n        '''\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n        return result\n\n    flat_list = flatten_list(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten_list(item)\n        else:\n            print(data_list, end=' ')\n    \n    flatten_list(data_list)\n    total = 0\n    for item in data_list:\n        if isinstance(item, int):\n            total += item\n        elif isinstance(item, list):\n            total += recursive_list_sum(item)\n    \n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        raise TypeError(\"Input must be a list.\")\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    if not data_list:\n        return 0\n\n    first_item = data_list.pop(0)\n\n    # If first item is a list, recursively call the function\n    if isinstance(first_item, list):\n        return recursive_list_sum(first_item) + recursive_list_sum(data_list)\n    # If first item is not a list, simply add it and the sum of the rest of the list\n    else:\n        return first_item + recursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    \n    flat_list = []\n    for item in data_list:\n        if isinstance(item, list):\n            flat_list += recursive_list_sum(item)\n        else:\n            flat_list.append(item)\n    \n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(data_list):\n        '''\n        Helper function to flatten a list recursively.\n        '''\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten_list(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten_and_sum(lst):\n        '''\n        Helper function to flatten a list and sum all of its elements.\n        '''\n        if not lst:\n            return 0\n        if isinstance(lst[0], list):\n            return flatten_and_sum(lst[0]) + flatten_and_sum(lst[1:])\n        else:\n            return lst[0] + flatten_and_sum(lst[1:])\n    \n    return flatten_and_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    result = 0\n    for item in data_list:\n        if type(item) == list:\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n\n    Args:\n        lst (list): The list to count the positive numbers from.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    A function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in lst:\n        if num > 0:\n            pos_count += 1\n    return pos_count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes in a list and counts the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in it.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    This function will find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize the number of ways to partition to 1\n    ways = 1\n    # loop through the number of Bell numbers\n    for i in range(n):\n        # loop through the number of partitions\n        for j in range(i+1,n+1):\n            # if the number of partitions is equal to the number of Bell numbers, increment the number of ways to partition\n            if j == n:\n                ways += 1\n    # return the number of ways to partition\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Check if n is a positive integer\n    if n <= 0 or not n.is_integer():\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize variables for number of ways to partition\n    ways = 0\n    count = 0\n\n    # Iterate through all possible partitions of the set of Bell numbers\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            count += 1\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    ways = count * (n + 1) // 2\n\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n*bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition the set to 1\n    ways = 1\n    \n    # Check if the input is valid\n    if n < 0 or n > 100:\n        return 0\n    \n    # Initialize the sum of Bell numbers to n\n    bell_sum = n\n    \n    # Check if the input is 1\n    if bell_sum == 1:\n        return 1\n    \n    # Loop through all possible ways to partition the set\n    for i in range(1, bell_sum + 1):\n        \n        # If the number is equal to i, add 1 to the number of ways to partition the set\n        if i == bell_sum:\n            ways += 1\n        \n        # If the number is less than i, add the number of ways to partition the set minus 1 to the number of ways to partition the set\n        elif i < bell_sum:\n            ways += bell_number(bell_sum - i)\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2 * bell_number(n-1) + bell_number(n-2)) % 1000000007"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize variables\n    count = 0\n\n    # Iterate through all possible ways to partition n into two parts\n    for i in range(n+1):\n        j = n-i\n        # Check if the difference between i and j is a Bell number\n        if j > 0 and is_bell_number(j):\n            count += 1\n\n    # Return the count\n    return count\n\ndef is_bell_number(n):\n    '''\n    Check if a number is a Bell number.\n    '''\n    # Check if n is less than 0\n    if n < 0:\n        return False\n\n    # Check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n\n    # Check if n is divisible by 12\n    if n % 12 == 0:\n        return True\n\n    # Check if n is divisible by 13\n    if n % 13 == 0:\n        return True\n\n    # Check if n is divisible by 14\n    if n % 14 == 0:\n        return True\n\n    # Check if n is divisible by 15\n    if n % 15 == 0:\n        return True\n\n    # If n is not divisible by any of the above factors, it is not a Bell number\n    return False"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize two variables to keep track of the number of ways to partition the set\n    ways = 0\n    ways_n = 1\n    # Check if n is greater than 0\n    if n > 0:\n        # Iterate from 1 to n-1\n        for i in range(1, n+1):\n            # Check if i is a prime number or not\n            if i > 1:\n                # If i is not a prime number, multiply the number of ways to partition the set with the number of ways to partition the set excluding i\n                ways += ways_n * (n-i)\n            # Update the number of ways to partition the set excluding i\n            ways_n = ways_n * (i-1)\n    # Return the final value of ways\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and checks whether it is monotonic or not.\n    A monotonic array is a sequence in which each element is either increasing or decreasing.\n    '''\n\n    # Check if the array has less than 2 elements\n    if len(A) < 2:\n        return True\n\n    # If the array has only one element, it is a monotonic array\n    if len(A) == 2:\n        return A[0] <= A[1]\n\n    # Check if the first element is less than or equal to the second element\n    if A[0] <= A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return is_Monotonic(A[1:])\n"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n\n    if A[0] < A[1]:\n        for i in range(1, n-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    elif A[0] > A[1]:\n        for i in range(1, n-1):\n            if A[i] < A[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty \n    if len(A) == 0: \n        return True \n\n    # Check if the array has only one element \n    if len(A) == 1: \n        return True \n\n    # Initialize the variable to check if all elements in the array are increasing or decreasing \n    is_increasing = True \n\n    # Iterate through the array \n    for i in range(len(A)-1): \n        # If the element is increasing, set the variable to False \n        if A[i] > A[i+1]: \n            is_increasing = False \n            break \n    \n    # Return the result \n    return is_increasing"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A of integers as input and returns True if it is monotonic or False otherwise.\n    If the array is monotonic, then it will have a strictly increasing or decreasing sequence of elements.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n\n    # Initialize two variables to keep track of the current minimum and maximum values of the array\n    min_val = A[0]\n    max_val = A[0]\n\n    # Loop through the array and update the minimum and maximum values accordingly\n    for i in range(1, len(A)):\n        if A[i] < min_val: \n            min_val = A[i]\n        elif A[i] > max_val: \n            max_val = A[i]\n\n    # Check if the minimum and maximum values are equal\n    if min_val == max_val: \n        return True\n\n    # Check if the array is monotonic by comparing the adjacent elements\n    for i in range(1, len(A)-1):\n        if A[i] > A[i-1] and A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i-1] and A[i] < A[i+1]:\n            return False\n\n    # If we reach this point, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    elif A[0] >= A[-1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # If the array has only one element, it is always monotonic\n    if len(A) == 1:\n        return True\n    # Check if the array is monotonic in terms of increasing or decreasing elements\n    if (A[0] <= A[1]) == (A[-1] >= A[-2]):\n        return True\n    # If the array is not monotonic, check if it is monotonic in terms of decreasing elements\n    elif (A[0] >= A[1]) == (A[-1] <= A[-2]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array A is monotonic or not.\n    A is an array of integers.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if s[0] in l:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if l[0] in s:\n        return is_sublist(l[1:], s)\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, False otherwise.\n    '''\n    # initialize a variable to count the length of the first tuple\n    first_tuple_len = len(Input[0])\n    # loop through the list of tuples\n    for tup in Input:\n        # check if the length of each tuple is equal to the first tuple's length\n        if len(tup)!= first_tuple_len:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    def is_equal_length(t):\n        return len(t) == len(set(t))\n\n    return all(is_equal_length(t) for t in Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all the tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in Input]\n    if all(len(t) == lengths[0] for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    if not isinstance(Input, list):\n        raise TypeError(\"Input must be a list\")\n    if len(set([len(t) for t in Input]))!= 1:\n        raise ValueError(\"All tuples must have equal length\")\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    if len(Input[0])!= len(Input[1]):\n        return False\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have the same length,\n    else it returns False.\n    '''\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the length of the first tuple is equal to the length of the rest of the tuples\n    for i in range(1, len(Input)):\n        if len(Input[0])!= len(Input[i]):\n            return False\n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    i = 0\n    n = len(nums)\n    while swapped:\n        swapped = False\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n                swapped = True\n        i += 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize the maximum iteration and swap variables\n    max_iter = len(nums)\n    swapped = True\n\n    # while there are swaps to make and the maximum iteration hasn't been reached\n    while swapped and max_iter > 1:\n\n        # set the swapped variable to False and initialize the count variable\n        swapped = False\n        count = 0\n\n        # loop through the list\n        for i in range(len(nums) - 1):\n\n            # if the current element is greater than the next element\n            if nums[i] > nums[i + 1]:\n\n                # swap the elements\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n                # set the swapped variable to True and increment the count variable\n                swapped = True\n                count += 1\n\n                # if the maximum iteration hasn't been reached\n                if count == max_iter - 1:\n\n                    # decrement the maximum iteration and exit the loop\n                    max_iter -= 1\n                    break\n\n        # if the maximum iteration hasn't been reached\n        if count == max_iter - 1:\n\n            # decrement the maximum iteration and exit the loop\n            max_iter -= 1\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        gap = int(gap/1.3) + 1\n        for i in range(gap, n):\n            if nums[i] < nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        A sorted list of integers.\n    '''\n\n    n = len(nums)\n    max_iter = 100\n    gap = n\n    swapped = True\n    i = 0\n\n    while swapped and i < max_iter:\n        swapped = False\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n        gap = int(gap / 1.3)\n        i += 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize the gap and swapping variables\n    gap = len(nums)\n    swapping = True\n\n    # main loop\n    while swapping:\n        swapping = False\n\n        # inner loop to move the gap closer to the end\n        for i in range(len(nums) - gap):\n            # if the elements are not in the correct order, swap them\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapping = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \n    Args:\n    nums (list): A list of integers to be sorted.\n    \n    Returns:\n    A list of integers sorted in ascending order.\n    '''\n    \n    n = len(nums)\n    gap = n\n    \n    while gap > 1 or nums[0]!= nums[n-1]:\n        if gap > 1:\n            gap = int(gap/1.3)\n        else:\n            gap = 1\n        \n        i = 0\n        while i < n-gap:\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n            i += 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    # Initialize variables\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    # Iterate while swapped is True\n    while swapped:\n        # Reset swapped variable\n        swapped = False\n        \n        # Iterate through the list using a gap of size `gap`\n        for i in range(gap):\n            # If the element is greater than the next element, swap them\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        \n        # Decrement the gap by a factor of 1.3\n        gap = int(gap/1.3)\n        \n        # If the gap is less than 1, set it to 1\n        if gap < 1:\n            gap = 1\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j] < nums[j - gap]:\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n        gap //= 1\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input number is even\n    if n % 2 == 0:\n        return False\n\n    # calculate the square root of the input number\n    sqrt_n = int(n ** 0.5)\n\n    # check if the square root of the input number is even\n    if sqrt_n % 2 == 0:\n        return False\n\n    # calculate the difference between the square root of the input number and its square\n    diff_sqrt_n = sqrt_n ** 2 - n\n\n    # check if the difference between the square root of the input number and its square is even\n    if diff_sqrt_n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the number is greater than 1\n    if n <= 1:\n        return False\n    \n    # Initialize two variables to store the first and second squares\n    i = 1\n    j = n\n    \n    # Loop until the first square is greater than the second square\n    while i*i < n:\n        j -= i\n        i += 1\n    \n    # Check if the difference between the first square and the second square is equal to the given number\n    if i*i == n:\n        return True\n    \n    # If the loop completes without returning True, the number cannot be represented as the difference of two squares\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n/2)+1):\n        j = n-2*i**2\n        if j**2 == i**2 and j**2 == n**2:\n            print(f'{n} can be represented as the difference of two squares: {i} and {n-2*i**2}')\n            return True\n    print(f'{n} cannot be represented as the difference of two squares')\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of n\n    root = int(n**0.5)\n    # Check whether n and its square are the same number\n    if root*root == n:\n        return True\n    else:\n        # If not, check whether n is the difference of two squares\n        for i in range(1, root):\n            if i*i + root*root == n:\n                return True\n            elif i*i + root*root < n:\n                break\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert the given number to a list of digits\n    num = [int(x) for x in str(n)]\n\n    # check for the number of digits in the list\n    if len(num) % 2!= 0:\n        # if the number of digits is odd, the difference cannot be represented as the difference of two squares\n        return False\n\n    # calculate the square of the first half of the number\n    square_1 = sum(x*x for x in num[:len(num)//2])\n\n    # calculate the square of the second half of the number\n    square_2 = sum(x*x for x in num[len(num)//2:])\n\n    # check if the difference of the squares is equal to the original number\n    return square_1 + square_2 == n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # find the square of the number \n    num_square = n ** (len(str(n)))\n\n    # check whether num_square is equal to the difference of two squares\n    diff_square = (num_square - n) ** 2\n\n    if diff_square == num_square:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # We convert the input number to a string so that we can check for its length.\n    n = str(n)\n\n    # If the length of the input number is less than 4, it cannot be represented as the difference of two squares.\n    if len(n) < 4:\n        return False\n\n    # We calculate the difference of squares by finding the square of the digits, and then adding up all the digits.\n    diff_squares = int(sum(int(digit) ** 2 for digit in n[1:]))\n\n    # We check if the difference of squares is equal to the input number.\n    if int(n) - diff_squares == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    # Calculate the square of the number\n    num = n*n\n    # Calculate the difference of the squares\n    diff = num - n\n    # Check if the difference is a square\n    if diff*diff == num:\n        print(str(n) + \" can be represented as the difference of two squares.\")\n    else:\n        print(str(n) + \" cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Take the square root of the number\n    square = int(n ** 0.5)\n\n    # Check if the square is a perfect square or not\n    if square * square == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if n is odd or even\n    if n % 2 == 0:\n        # n is even, check if it is divisible by 4\n        if n % 4 == 0:\n            # n is divisible by 4, return True\n            return True\n        else:\n            # n is not divisible by 4, return False\n            return False\n    else:\n        # n is odd, check if it is divisible by 6\n        if n % 6 == 0:\n            # n is divisible by 6, return True\n            return True\n        else:\n            # n is not divisible by 6, return False\n            return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Check whether the colors in the given list follow the sequence given in the patterns list.\n    A pattern is a list of integers that represents a color sequence.\n    \"\"\"\n    current_pattern = []\n    for color in colors:\n        if current_pattern:\n            if color == patterns[current_pattern[-1]][-1]:\n                current_pattern.append(color)\n            else:\n                current_pattern.pop()\n                if current_pattern:\n                    if color == patterns[current_pattern[-1]][-1]:\n                        current_pattern.append(color)\n                    else:\n                        return False\n        else:\n            current_pattern.append(color)\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a dictionary to store the count of each color in the given patterns array\n    pattern_colors = {}\n    for pattern in patterns:\n        for color in pattern:\n            if color not in pattern_colors:\n                pattern_colors[color] = 0\n            pattern_colors[color] += 1\n\n    # compare the given colors to the colors in the patterns array\n    for color in colors:\n        if color not in pattern_colors or pattern_colors[color] == 0:\n            return False\n        pattern_colors[color] -= 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return \"Error: Colors and patterns array should have the same length.\"\n\n    def find_pattern(color):\n        for pattern in patterns:\n            if pattern[0] == color:\n                return pattern[1]\n\n    # Initialize the color counter to 0\n    color_count = 0\n    for color in colors:\n        # Check if the color is present in the patterns array\n        pattern = find_pattern(color)\n        if pattern == None:\n            return \"Error: Invalid color in colors array.\"\n        # Check if the pattern is correct\n        if not (pattern == \"R\" or pattern == \"G\" or pattern == \"B\"):\n            return \"Error: Invalid pattern in patterns array.\"\n        # Increment the color counter\n        if pattern == \"R\":\n            color_count += 1\n        elif pattern == \"G\":\n            color_count += 2\n        else:\n            color_count += 3\n\n    # Check if the color count is equal to the length of the patterns array\n    if color_count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a list of unique colors\n    unique_colors = list(set(colors))\n    \n    # Check if all the colors are in the patterns\n    if len(unique_colors)!= len(patterns):\n        return False\n    \n    # Initialize a list to keep track of the order of the colors in each pattern\n    order = []\n    \n    # Loop through the patterns array\n    for pattern in patterns:\n        # Create a list of unique colors in the pattern\n        pattern_colors = list(set(pattern))\n        \n        # If the number of unique colors in the pattern is not equal to the number of unique colors in the unique colors list, return False\n        if len(pattern_colors)!= len(unique_colors):\n            return False\n        \n        # If the order of the colors in the pattern is not already in the order list, add it to the order list\n        if pattern_colors not in order:\n            order.append(pattern_colors)\n    \n    # Check if the order list has all the unique patterns\n    if len(order)!= len(patterns):\n        return False\n    \n    # If all the conditions are met, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    # Check if the colors are in the patterns\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # Check if the patterns are in the correct order\n    for i in range(len(patterns)):\n        if patterns[i]!= i:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # check if the length of patterns array is equal to the length of colors array\n    if len(patterns)!= len(colors):\n        return False\n\n    # loop through the patterns array\n    for i in range(len(patterns)):\n        # check if the current pattern is equal to the next color in the colors array\n        if patterns[i]!= colors[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Check if the length of colors is equal to the length of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate through the patterns and colors arrays\n    for i in range(len(patterns)):\n        # Check if the current pattern is equal to the next color in the colors array\n        if patterns[i]!= colors[i+1]:\n            return False\n\n    # If all the patterns match, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = 0\n    for i, color in enumerate(colors):\n        if color in patterns[sequence]:\n            sequence += 1\n        if sequence == len(patterns):\n            return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Get the length of the colors list\n    n = len(colors)\n    # Loop through all possible patterns\n    for i in range(2**n):\n        # Convert the integer to binary\n        bin_i = bin(i)[2:].zfill(n)\n        # Check if each color in the binary corresponds to the expected pattern\n        for j in range(n):\n            if bin_i[j] == '1' and patterns[j] == colors[j]:\n                continue\n            else:\n                return False\n    # If all colors were checked, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-1):\n        if colors[i] == colors[i+1] and (colors[i] in patterns[i] or colors[i+1] in patterns[i+1]):\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        count = 0\n        for num in t:\n            if num % K == 0:\n                count += 1\n            if count == len(t):\n                result.append(t)\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    # create an empty dictionary to store the count of elements for each tuple in the list\n    count_dict = {}\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # get the elements of the tuple\n        elements = tup\n\n        # check if all elements in the tuple are divisible by k\n        if all(x % K == 0 for x in elements):\n            # if all elements are divisible, add the tuple to the count dictionary\n            if tuple(elements) in count_dict:\n                count_dict[tuple(elements)] += 1\n            else:\n                count_dict[tuple(elements)] = 1\n\n    # create an empty list to store the final list of tuples\n    result_list = []\n\n    # iterate through the count dictionary and add all tuples with count greater than or equal to K to the result list\n    for tup, count in count_dict.items():\n        if count >= K:\n            result_list.append(tup)\n\n    return result_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                tuples.append((test_list[i], test_list[j]))\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    # filter the list of tuples to only those whose elements are divisible by K\n    result = list(filter(lambda x: all(i % K == 0 for i in x), test_list))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Create an empty list to store the result\n    result = []\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If all elements of the tuple are divisible by k, add it to the result list\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer k as inputs. It then returns a list of tuples which have all elements divisible by k from the input list.\n\n    Parameters:\n    test_list (list): A list of tuples\n    K (int): An integer\n\n    Returns:\n    list: A list of tuples which have all elements divisible by k from the input list.\n    \"\"\"\n\n    result = []\n\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                count += 1\n                break\n        if count == len(tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as an input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is divisible by 11, and False otherwise.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer n as input and returns True if it is divisible by 11, False otherwise.\n    '''\n\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is even.\")\n        else:\n            print(word, \"is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    return \"All the words have even length.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Check if the length of the word is odd or even\n    if len(s) % 2 == 0:\n        # If the length of the word is even, print \"Even length\"\n        print(\"Even length\")\n    else:\n        # If the length of the word is odd, print \"Odd length\"\n        print(\"Odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string s as input and returns True if the length of the word in s is odd, else False.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} is odd\")\n        else:\n            print(f\"{word} is even\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            print(word, \"is odd.\")\n        else:\n            print(word, \"is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word, \"has an even length\")\n        else:\n            print(word, \"has an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word\")\n        else:\n            print(word, \"is an odd length word\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Finding nth tetrahedral number\n    def find_tetrahedral(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 3\n        else:\n            return 4 * (n - 1) + find_tetrahedral(n - 1)\n\n    return find_tetrahedral(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4*n*(n-1) + (2*n-1)*(n-1)*(n-2) + n*(n-1)*(n-2)*(n-3)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return (8 * n - 1) // 3"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # Initialize the sum of the first n Fibonacci numbers \n    fib_sum = 0\n    fib_1 = 0\n    fib_2 = 1\n\n    # Iterate through the Fibonacci series and calculate the sum \n    for i in range(n): \n        fib_sum += fib_2\n        fib_temp = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = fib_temp\n\n    return fib_sum\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 5\n    elif n == 2:\n        return 10\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 20\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 48\n    b = 64\n    c = 36\n    d = 6\n    num = 1\n    for i in range(n-1):\n        num = (a * num + b) * num + c * num + d\n        a += 4\n        b += 4\n        c += 2\n        d -= 1\n    return num\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def binomial(n, k):\n        '''\n        Calculate the binomial coefficient using recursion.\n        '''\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    def tetrahedral_coefficient(n):\n        '''\n        Calculate the nth tetrahedral coefficient using recursion.\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 1 + tetrahedral_coefficient(n//2)\n        else:\n            return -1*binomial(3*n, 2) + tetrahedral_coefficient((3*n-1)//2)\n\n    def tetrahedral_value(n):\n        '''\n        Calculate the nth tetrahedral value using recursion.\n        '''\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 4\n        else:\n            return tetrahedral_value(n-1) + tetrahedral_coefficient(n-1)\n\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        return tetrahedral_value(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        raise ValueError(\"The number must be a non-negative integer.\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 3 * (n ** 2) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 4\n    elif n == 3:\n        return 10\n\n    # Recursive case\n    else:\n        return 2*tetrahedral_number(n-1) - tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize variables\n    num = 0\n    max_num = 2000000000 # maximum value that can be calculated\n    \n    # Check if n is within range\n    if n < 0 or n > max_num:\n        print(\"Please enter a valid value of n\")\n        return\n    \n    # Calculate the nth tetrahedral number\n    for i in range(1, n+1):\n        num = (i * (2*i - 1)) / 6\n    \n    # Print the nth tetrahedral number\n    print(\"The\", n, \"tetrahedral number is\", num)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere with a given radius.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    \n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes the radius of a sphere and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n\nprint(volume_sphere(1))"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3) * pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r ** 3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # converting the string into a list of characters\n    str_list = list(strr)\n\n    # initializing the variable for the sum of ASCII values\n    sum_ascii = 0\n\n    # iterating over each character of the list and adding its ASCII value to the sum\n    for char in str_list:\n        sum_ascii += ord(char)\n\n    # converting the ASCII value to a character by taking its modulo 26\n    char = chr(((sum_ascii % 26) + 65))\n\n    # returning the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char = 0\n    for i in strr:\n        char += ord(i)\n    return chr((char % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through each character of the string\n    for char in strr:\n        # convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # add the ASCII value to the sum modulo 26\n        sum = (sum + ascii_value) % 26\n        \n    # convert the sum modulo 26 to its character equivalent\n    char = chr(sum)\n    \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n\n    return chr((char_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr((ascii_val % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return ascii_val % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize a variable to store the sum of ASCII values of all characters in the string\n    sum_ascii = 0\n\n    # loop through each character in the string and add its ASCII value to the sum_ascii variable\n    for char in strr:\n        sum_ascii += ord(char)\n\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ASCII_value = 0\n    for i in range(len(strr)):\n        ASCII_value += ord(strr[i])\n    \n    return chr((ASCII_value % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(strr)\n\n    # Initialize the sum variable to 0\n    sum_ascii = 0\n\n    # Loop through each character of the list\n    for i in range(len(char_list)):\n        # Add the ASCII value of each character to the sum\n        sum_ascii += ord(char_list[i])\n\n    # Convert the sum to a character\n    char = chr((sum_ascii % 26) + ord('a'))\n\n    # Return the character\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 1, 2, 1]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [0, 1, 0, 1]\n    for i in range(4, n):\n        seq.append(seq[i-1] ^ seq[i-2])\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    while len(sequence) < n:\n        sequence.append(4 * i - 1)\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    a = 0\n    b = 1\n    for i in range(n):\n        c = (a + b) % 2\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] + sequence[i-1])\n        else:\n            sequence.append(2*sequence[i-1] - sequence[i-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 0\n    while i < n:\n        print(i, end=\" \")\n        if i % 2 == 0:\n            i += 4\n        else:\n            i += 2"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[i//2])\n        else:\n            sequence.append(3*sequence[i//2] - sequence[i//2] - 1)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(2, n+1):\n        sequence.append(sum(sequence[-1:]))\n    return sequence[n]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    \n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*(r**2)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    print(\"The surface area of the sphere is:\", area)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Convert the radius from meters to centimeters\n    r_cm = r * 100\n    \n    # Find the surface area of a sphere using the formula:\n    # A = 4 * pi * r^2\n    # We can simplify this expression to:\n    # A = 4 * pi * r_cm^2\n    \n    surface_area = 4 * math.pi * r_cm**2\n    \n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the variables\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n\n    # Loop through the numbers until n is reached\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number\n        centered_hexagonal = (a*b) // (c*d)\n        # Update the variables\n        a = b\n        b = c\n        c = d\n        d = centered_hexagonal\n\n        # Print the centered hexagonal number\n        print(centered_hexagonal)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # center hexagonal number formula: n^2 + 18*n - 21\n    hex_num = (n**2 + 18*n - 21) / 6\n    return int(hex_num)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (5 * n * n - 3 * n + 1) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    centered_hexagonal = (n * (3 * n - 1)) / 2\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Calculate the difference between the desired number and the first centered hexagonal number\n    diff = n - centered_hexagonal_number(1)\n\n    # Calculate the number of steps to reach the desired number\n    steps = diff // 6\n\n    # Calculate the number of hexagons to move in each step\n    hexagons_in_step = diff % 6\n\n    # Calculate the final hexagon number by adding the number of hexagons to move in each step to the starting hexagon number\n    final_hexagon = centered_hexagonal_number(1) + steps * hexagons_in_step\n\n    return final_hexagon\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 8\n    elif n == 2:\n        return 24\n    elif n == 3:\n        return 36\n    elif n == 4:\n        return 40\n    elif n == 5:\n        return 48\n    elif n == 6:\n        return 56\n    elif n == 7:\n        return 60\n    elif n == 8:\n        return 68\n    elif n == 9:\n        return 72\n    elif n == 10:\n        return 76\n    elif n == 11:\n        return 80\n    elif n == 12:\n        return 84\n    elif n == 13:\n        return 88\n    elif n == 14:\n        return 92\n    elif n == 15:\n        return 96\n    elif n == 16:\n        return 100\n    elif n == 17:\n        return 104\n    elif n == 18:\n        return 108\n    elif n == 19:\n        return 112\n    elif n == 20:\n        return 116\n    elif n == 21:\n        return 120\n    elif n == 22:\n        return 124\n    elif n == 23:\n        return 128\n    elif n == 24:\n        return 132\n    elif n == 25:\n        return 136\n    elif n == 26:\n        return 140\n    elif n == 27:\n        return 144\n    elif n == 28:\n        return 148\n    elif n == 29:\n        return 152\n    elif n == 30:\n        return 156\n    elif n == 31:\n        return 160\n    elif n == 32:\n        return 164\n    elif n == 33:\n        return 168\n    elif n == 34:\n        return 172\n    elif n == 35:\n        return 176\n    elif n == 36:\n        return 180\n    elif n == 37:\n        return 184\n    elif n == 38:\n        return 188\n    elif n == 39:\n        return 192\n    elif n == 40:\n        return 196\n    elif n == 41:\n        return 200\n    elif n == 42:\n        return 204\n    elif n == 43:\n        return 208\n    elif n == 44:\n        return 212\n    elif n == 45:\n        return 216\n    elif n == 46:\n        return 220\n    elif n == 47:\n        return 224\n    elif n == 48:\n        return 228\n    elif n == 49:\n        return 232\n    elif n == 50:\n        return 236\n    elif n == 51:\n        return 240\n    elif n == 52:\n        return 244\n    elif n == 53:\n        return 248\n    elif n == 54:\n        return 252\n    elif n == 55:\n        return 256\n    elif n == 56:\n        return 260\n    elif n == 57:\n        return 264\n    elif n == 58:\n        return 268\n    elif n == 59:\n        return 272\n    elif n == 60:\n        return 276\n    elif n == 61:\n        return 280\n    elif n == 62:\n        return 284\n    elif n == 63:\n        return 288\n    elif n == 64:\n        return 292\n    elif n == 65:\n        return 296\n    elif n == 66:\n        return 300\n    elif n == 67:\n        return 304\n    elif n == 68:\n        return 308\n    elif n == 69:\n        return 312\n    elif n == 70:\n        return 316\n    elif n == 71:\n        return"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = centered_hexagonal_number(n-1)\n        prev = centered_hexagonal_number(n-2)\n        curr = prev_prev + prev\n        return curr"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_digit(n):\n        \"\"\"\n        Calculate the nth centered hexagonal digit.\n        \"\"\"\n        if n <= 1:\n            return 1\n        else:\n            return centered_hexagonal_digit(n-1) + centered_hexagonal_digit(n-2)\n\n    def centered_hexagonal_digit_sum(n):\n        \"\"\"\n        Calculate the sum of centered hexagonal digits up to nth centered hexagonal number.\n        \"\"\"\n        sum_of_digits = 0\n        for i in range(1, n+1):\n            sum_of_digits += centered_hexagonal_digit(i)\n        return sum_of_digits\n\n    centered_hex_num = centered_hexagonal_digit_sum(2*n-1)\n    return centered_hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # First, we calculate the number of rows and columns in the centered hexagonal array.\n    # We assume that the number of rows is even.\n    rows = n * (n + 1) // 2\n    columns = 2 * n - 1\n\n    # Then, we initialize the centered hexagonal array with 0.\n    centered_array = [[0] * columns for i in range(rows)]\n\n    # We initialize the top-left and bottom-right corners of the centered hexagonal array.\n    # We assume that the number of elements in the array is odd.\n    top_left = (rows - 1) // 2\n    bottom_right = rows - 1\n\n    # We fill the array in a clockwise spiral pattern.\n    # We start by filling the top-left corner.\n    row = top_left\n    column = column_start = 0\n    direction = 1\n    count = 1\n\n    # We go through the rows and columns in the spiral pattern.\n    while row >= 0 and column < columns:\n        # If we're at the top row or the right column, we move in the opposite direction.\n        if row == 0 or column == columns - 1:\n            direction = -direction\n\n        # We fill the current row with centered hexagonal numbers.\n        for i in range(count):\n            centered_array[row][column] = count\n            count += direction\n\n        # We move to the next row and update the column.\n        row += direction\n        column += 1\n\n        # We move to the next column and update the row.\n        column += direction\n        row += 1\n\n        # We update the column_start and count for the next iteration.\n        column_start = column + 1\n        count = 1 + 2 * direction\n\n    # We return the centered hexagonal array.\n    return centered_array"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the first centered hexagonal number\n    first_hex = 1\n    \n    # Calculate the difference between the nth centered hexagonal number and the first centered hexagonal number\n    difference = n * (6 * n - 1)\n    \n    # Calculate the second centered hexagonal number\n    second_hex = first_hex + difference\n    \n    return second_hex"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1: dictionary\n    - dict2: dictionary\n    - dict3: dictionary\n\n    Returns:\n    - merged_dict: dictionary containing the merged contents of dict1, dict2, and dict3\n    '''\n\n    # Combine the three dictionaries using the dictionary update method\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries and merges them into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged dictionary\n    merged_dict = {}\n    \n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Check if the key exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists in the merged dictionary, check if the value is a list or a dictionary\n            if isinstance(merged_dict[key], list):\n                # If the value is a list, append the value of the second dictionary to it\n                merged_dict[key].append(dict2[key])\n            elif isinstance(merged_dict[key], dict):\n                # If the value is a dictionary, merge the two dictionaries recursively\n                merged_dict[key] = merge_dictionaries_three(merged_dict[key], dict2[key])\n        else:\n            # If the key does not exist in the merged dictionary, just append the value of the second dictionary to it\n            merged_dict[key] = dict2[key]\n    \n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Check if the key exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists in the merged dictionary, check if the value is a list or a dictionary\n            if isinstance(merged_dict[key], list):\n                # If the value is a list, append the value of the third dictionary to it\n                merged_dict[key].append(dict3[key])\n            elif isinstance(merged_dict[key], dict):\n                # If the value is a dictionary, merge the two dictionaries recursively\n                merged_dict[key] = merge_dictionaries_three(merged_dict[key], dict3[key])\n        else:\n            # If the key does not exist in the merged dictionary, just append the value of the third dictionary to it\n            merged_dict[key] = dict3[key]\n    \n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Check if the key exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists in the merged dictionary, check if the value is a list or a dictionary\n            if isinstance(merged_dict[key], list):\n                # If the value is a list, append the value of the third dictionary to it\n                merged_dict[key].append(dict3[key])\n            elif isinstance(merged_dict[key], dict):\n                # If the value is a dictionary, merge the two dictionaries recursively\n                merged_dict[key] = merge_dictionaries_three(merged_dict[key], dict3[key])\n        else:\n            # If the key does not exist in the merged dictionary, just append the value of the third dictionary to it\n            merged_dict[key] = dict3[key]\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged = {}\n    for key in dict1.keys():\n        merged[key] = dict1[key]\n    for key in dict2.keys():\n        merged[key] = dict2[key]\n    for key in dict3.keys():\n        merged[key] = dict3[key]\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    :param dict1: A dictionary.\n    :param dict2: A dictionary.\n    :param dict3: A dictionary.\n    :return: A merged dictionary.\n    \"\"\"\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n\n    for key in dict3:\n        if key not in merged_dict and key not in dict2:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes in three dictionaries and returns a merged dictionary with the values from all three dictionaries.\n    The function takes the following three parameters:\n    - dict1 (dict): The first dictionary to be merged.\n    - dict2 (dict): The second dictionary to be merged.\n    - dict3 (dict): The third dictionary to be merged.\n    \"\"\"\n    # Merge the two dictionaries by adding the values from dict1 and dict2\n    merged_dict = {**dict1, **dict2}\n    \n    # Merge the three dictionaries by adding the values from dict3\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Create an empty dictionary\n    merged_dict = {}\n    # Iterate through the three dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in lst:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = list(map(int, input(\"Enter a list of numbers separated by spaces: \").split()))\n    num_list.sort()\n    smallest_diff = abs(num_list[0] - N)\n    closest_num = num_list[0]\n\n    for num in num_list[1:]:\n        diff = abs(num - N)\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_num = num\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    left = 1\n    right = N\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if mid == N:\n            left = mid + 1\n        elif mid > N:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return left"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = N\n    for i in range(1, N):\n        if abs(i - N) < abs(smallest - N):\n            smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_num = N\n    diff = float('inf')\n    curr_num = N\n    next_num = N\n    \n    # iterate through the numbers until the difference between the current number and the next smallest number is less than or equal to 1\n    while diff <= 1:\n        # check if the next smallest number is smaller than the current number\n        if next_num < curr_num:\n            diff = curr_num - next_num\n            min_num = curr_num\n        else:\n            diff = next_num - curr_num\n            min_num = next_num\n        \n        # move to the next number\n        curr_num = next_num\n        next_num += 1\n        \n    # return the minimum number\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N and returns the closest smaller number than N.\n    '''\n    # Initialize the variables\n    min_num = float('inf')\n    closest_num = N\n    # Loop through the numbers from 1 to N\n    for i in range(1, N+1):\n        # Calculate the absolute difference between the current number and N\n        diff = abs(i - N)\n        # Check if the current number is closer than the previous minimum\n        if diff < min_num:\n            # Update the minimum and closest numbers\n            min_num = diff\n            closest_num = i\n    # Return the closest smaller number than N\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    count = 0\n    min_diff = float('inf')\n    closest = None\n    for i in range(1, N+1):\n        if i % 2!= 0:\n            j = 3*i + 1\n            if j > N:\n                j -= N\n            diff = abs(j - N)\n            if diff < min_diff:\n                min_diff = diff\n                closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    smallest = n\n    largest = n\n    while smallest >= 1:\n        if n - smallest == smallest:\n            return smallest\n        smallest -= 1\n    while largest <= N:\n        if largest - n == n:\n            return largest\n        largest += 1\n    return \"No such number exists\""
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while True:\n        n -= 1\n        if n % 2 == 0:\n            return n\n        n -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for i in range(N):\n        if i == 0:\n            min_num = N\n        elif abs(i-N) < abs(i-min_num):\n            min_num = i\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize the minimum difference and the closest smaller number\n    diff = float('inf')\n    closest_smaller = None\n\n    # loop through all numbers less than N\n    for i in range(N):\n        # calculate the difference between the current number and N\n        curr_diff = abs(N - i)\n\n        # check if this difference is less than the current minimum\n        if curr_diff < diff:\n            # update the minimum difference and the closest smaller number\n            diff = curr_diff\n            closest_smaller = i\n\n    # return the closest smaller number\n    return closest_smaller"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # create an empty list to store lengths of words\n    lengths = []\n    # loop through the list of words\n    for word in list1:\n        # split the word into a list of characters\n        char_list = list(word)\n        # find the length of the longest character in the word\n        longest_length = max(len(char_list), key=len)\n        # append the length to the lengths list\n        lengths.append(longest_length)\n    # find the length of the longest word in the list\n    max_length = max(lengths)\n    # return the maximum length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    longest = \"\"\n    max_length = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # check if the current word is longer than the previous longest word\n        if len(word) > len(longest):\n            # update the longest word and its length\n            longest = word\n            max_length = len(word)\n    \n    # return the length of the longest word\n    return max_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # Initialize a list to store the indices of the substrings in the list\n    indices = []\n    # Iterate through the list of string values\n    for i in range(len(str1)):\n        # Check if the substring is present as a substring in the current string value\n        if sub_str in str1[i:]:\n            # If it is, add its index to the list of indices\n            indices.append(i)\n    # If the list of indices is not empty, return True\n    if indices:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str_list, sub_str):\n    '''\n    This function takes a list of strings and a substring as input. It returns a boolean indicating\n    whether the given substring is present as a substring in the list of strings.\n    '''\n    for str_val in str_list:\n        if sub_str in str_val:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for s in str1:\n            if sub_str in s:\n                return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    This function will check whether a given number is undulating or not. \n\n    If a number is even and divisible by 6, it is undulating.\n    Otherwise, it is not undulating.\n    '''\n    \n    if n % 2 == 0 and n % 6 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # We can define a function to check if a number is even or odd\n    def is_even(num):\n        return num % 2 == 0\n\n    # Initialize a counter to keep track of the number of even numbers in the number\n    count = 0\n\n    # Loop through each digit of the number and check if it is even\n    for digit in str(n):\n        if is_even(int(digit)):\n            count += 1\n\n    # If there are an odd number of even digits, then the number is undulating\n    if count % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_undulating(n - 1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 100:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 2:\n        return \"Number is not undulating\"\n    else:\n        if n % 2 == 0:\n            return \"Number is evenly divisible by 2\"\n        else:\n            return \"Number is not evenly divisible by 2\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 2: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return is_undulating(n // 2)\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # check if n is divisible by 5\n    if n % 5 == 0:\n        return True\n    \n    # check if n is divisible by 7\n    if n % 7 == 0:\n        return True\n    \n    # check if n is divisible by 11\n    if n % 11 == 0:\n        return True\n    \n    # check if n is divisible by 13\n    if n % 13 == 0:\n        return True\n    \n    # check if n is divisible by 17\n    if n % 17 == 0:\n        return True\n    \n    # if none of the above conditions are satisfied, then n is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n\n    Args:\n        n (int): The number to check for undulatingness.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Initialize variables to store the sum of the first n natural numbers and their squares\n    sum_natural = 0\n    sum_squares_natural = 0\n    \n    # Compute the sum of the first n natural numbers and their squares\n    for i in range(1, n+1):\n        sum_natural += i\n        sum_squares_natural += i*i\n    \n    # Check if the sum of the squares is greater than the sum of the natural numbers\n    return sum_squares_natural > sum_natural"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the\n    smallest second value.\n    \"\"\"\n    # Use the itemgetter function from the operator module to get the second value of each tuple\n    test_list = sorted(test_list, key=itemgetter(1))\n    # Get the index of the first tuple with the smallest second value\n    index = test_list[0][0]\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0 # index of the smallest tuple value\n    min_value = float('inf') # value of the smallest tuple value\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    index_list = []\n    for index, value in enumerate(test_list):\n        index_list.append((value[0], index))\n    index_list.sort(key=itemgetter(0))\n    return index_list[0][1]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # initialize min length to infinity\n    min_len = float('inf')\n\n    # loop through each list in the list of lists\n    for sub_lst in lst:\n        # check if length of current list is less than min_len\n        if len(sub_lst) < min_len:\n            # update min_len if current list has shorter length\n            min_len = len(sub_lst)\n\n    # return min_len\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = float('inf')  # initial value for minimum length\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    \n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    \n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = None\n    for sublist in lst:\n        if not min_length or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    \n    # Initialize minimum length to infinity\n    min_length = float('inf')\n    \n    # Iterate through each sub-list in the list\n    for sub_lst in lst:\n        # Calculate the length of the current sub-list\n        curr_length = len(sub_lst)\n        # If the length of the current sub-list is less than the minimum, update minimum\n        if curr_length < min_length:\n            min_length = curr_length\n    \n    # Return the minimum length found\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 1000  # initialize a very large number\n    for i in range(len(lst)):\n        if len(lst[i]) < length:\n            length = len(lst[i])\n    return length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            div += 2 if i == n // i else 1\n    return div + 1 if n > 1 else 0"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # If n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return len(divisors)"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for elem in list1:\n        # if the element is not in the dictionary, add it with a frequency of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # if the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[elem] += 1\n    \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    frequency = {}\n\n    # flatten the list\n    flat_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flat_list.extend(element)\n        else:\n            flat_list.append(element)\n\n    # iterate through the flattened list and count the frequency of each element\n    for element in flat_list:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # create an empty dictionary to store frequency of each element\n    freq = {}\n    # loop through each element in the list1\n    for item in list1:\n        # if the item is not a list, add it to the dictionary as a key with value 1\n        if not isinstance(item, list):\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n        # if the item is a list, recursively call the function with the item as a new list argument and add the returned dictionary to the current dictionary\n        else:\n            # flatten the item to a single list and call the function with the flattened item as a new list argument\n            flattened_item = [i for sublist in item for i in sublist]\n            new_freq = frequency_lists(flattened_item)\n            # update the current dictionary with the flattened item's frequency dictionary\n            for key in new_freq:\n                if key in freq:\n                    freq[key] += new_freq[key]\n                else:\n                    freq[key] = new_freq[key]\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Use set to remove duplicates from flattened list\n    list_flattened = list(set([item for sublist in list1 for item in sublist]))\n    \n    # Use dict to store frequency of each element in list_flattened\n    frequency_dict = {}\n    for item in list_flattened:\n        frequency_dict[item] = list1.count(item)\n    \n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for elem in sublist:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # loop through the list of lists and add each element to the frequency dictionary\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n\n    # return the final dictionary containing the frequency of each element in the flattened list of lists\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = sum(numbers) * 1.0 / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return sum(numbers) / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    # divide the product by the length of the list\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Convert decimal to binary string\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    # Remove leading zeros and reverse string\n    binary = binary.lstrip('0')\n    binary = binary[::-1]\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary string without leading zeros\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal number to binary string\n    binary = bin(n)[2:]\n    # Remove any leading zeros\n    binary = binary.lstrip('0')\n    # Reverse the binary string to get the binary equivalent of the decimal number\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary\n    binary = bin(n)[2:]\n\n    # Pad binary string with leading zeros\n    while len(binary) < 8:\n        binary = '0' + binary\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        binary = decimal_to_binary(n//2)\n        return binary + str(n % 2)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n):\n    # Base case: if the number is 0, return an empty string\n    if n == 0:\n        return \"\"\n\n    # Recursive case: convert the number to binary recursively\n    binary = decimal_to_binary(n // 2)\n\n    # Append the remainder to the binary string\n    binary += str(n % 2)\n\n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef is_palindrome_product(num1, num2):\n    '''\n    Helper function to check if a product of two numbers is a palindrome.\n    '''\n    product = num1 * num2\n    return is_palindrome(product)\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Find the smallest number greater than the input number that is also a palindrome\n    for i in range(num+1, 1000000, 1):\n        if is_palindrome(i):\n            return i\n\n    # If no palindrome was found, return -1\n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    palindrome = str(num)\n    for i in range(len(palindrome)):\n        if palindrome[i] == palindrome[-i - 1]:\n            palindrome = palindrome[:i] + palindrome[i+1:]\n            break\n    else:\n        palindrome += \"0\"\n    return int(palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Check if the input is a positive integer\n    if type(num)!= int or num < 1:\n        sys.exit(\"Input must be a positive integer.\")\n\n    # Convert the input to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Calculate the next smallest palindrome\n    next_num = int(num_str) + 1\n\n    # Check if the next smallest palindrome is within the range of the input\n    if next_num < num:\n        next_num = next_num + 1\n\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the given integer is a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    else:\n        # If not a palindrome, find the next smallest palindrome\n        while num % 10 == 0:\n            num //= 10\n        num += 1\n        while num % 10 == 0:\n            num //= 10\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize a variable to store the smallest palindrome number\n    smallest = 0\n    \n    # Loop through all numbers from 999 to 100 and check if each number is a palindrome\n    for i in range(100, 0, -1):\n        num_str = str(i)\n        reverse_num_str = num_str[::-1]\n        \n        if num_str == reverse_num_str:\n            smallest = i\n            break\n            \n    # Add 1 to the smallest palindrome number to get the next smallest palindrome number\n    return smallest + 1\n    \n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Reverse the number and convert it to a string\n    num_str = str(num)[::-1]\n    # Check if the string is palindrome\n    if num_str == num_str[::-1]:\n        # Find the next smallest palindrome\n        for i in range(10**len(num_str), -1, -1):\n            # If the number is palindrome and greater than the current palindrome, return it\n            if str(i)[::-1] == num_str:\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer\n    '''\n    if is_palindrome(num):\n        # if the number is already a palindrome, return the next smallest integer\n        next_num = num + 1\n        if is_palindrome(next_num):\n            return next_num\n        else:\n            return num # if the next smallest palindrome does not exist, return the current number\n    \n    # check if the number has a unique factorization into palindromes\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0 and is_palindrome(num // i):\n            return i * num // i * num // i\n    \n    # otherwise, return the smallest palindrome greater than the number\n    for i in range(num + 1, 10**6 + 1):\n        if is_palindrome(i):\n            return i\n    \n    # if all palindromes have been checked and none have been found, return the number itself\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    while not is_palindrome(num):\n        num += 1\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    i = num\n    while True:\n        next_num = i + 1\n        if is_palindrome(next_num):\n            return next_num\n        i += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the given number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Iterate through the digits of the number and check if each digit is a palindrome\n    for i in range(len(num_str)):\n        # Check if the digit is a palindrome\n        if num_str[i] == str(num_str[i]):\n            # If the digit is not a palindrome, check if its next smallest palindrome is a palindrome\n            next_num_str = str(int(num_str[:i])+1)[::-1]\n            if next_num_str == num_str[:i]:\n                # If it is a palindrome, return the next smallest palindrome\n                return int(next_num_str)+1\n    # If no palindrome is found, return the input number + 1\n    return num+1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        i = 0\n        while i < len(arr) and k > 1:\n            i += 1\n            k -= 1\n        return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = [x for i, x in enumerate(arr) if i >= k-1]\n        right = [x for i, x in enumerate(arr) if i < k-1]\n        if len(left) == 1:\n            return left[0]\n        else:\n            return kth_element(left, 1) + kth_element(right, len(left)+1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_half = arr[:k-1]\n        right_half = arr[k-1:]\n        return kth_element(left_half, len(left_half))"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left = 1\n    right = n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid-1] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr)\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if array is empty or k is out of range\n    if not arr or k > len(arr):\n        return None\n    # Initialize two pointers to the first and last elements of the array\n    i = 0\n    j = len(arr) - 1\n    # Loop through the array until i equals k-1\n    while i < k - 1:\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n        elif arr[i] < arr[j]:\n            j -= 1\n        else:\n            j -= 1\n            i += 1\n    # Return the element at index k-1\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Example:\n    >>> snake_to_camel(\"hello_world\")\n    'helloWorld'\n    \"\"\"\n    # Split the word into words separated by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n\n    # Join the capitalized words together with underscores\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all the words to lower case\n    words = [word.lower()]\n    # Split the string into words\n    words.extend(word.split('_')[1:])\n    # Capitalize the first letter of each word\n    for i in range(len(words)):\n        words[i] = words[i][0].upper() + words[i][1:]\n    # Join the words into a camel case string\n    camel_case = '_'.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Splitting the string based on underscore\n    words = word.split('_')\n    # Converting the first character to uppercase\n    words[0] = words[0].capitalize()\n    # Joining the words with underscore\n    camel_case = '_'.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    words = word.split(\"_\")\n    for i in range(len(words)):\n        camel_case += words[i].capitalize()\n        if i < len(words) - 1:\n            camel_case += \"_\"\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_word = ''\n    for i in range(len(words)):\n        if i == 0:\n            camel_word += words[i].lower()\n        else:\n            camel_word += words[i].capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_char = word[0].lower()\n    return first_char + word[1:]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif word[i].isupper():\n            camel_case += '_' + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert all words to lowercase\n    word = word.lower()\n    # Split the string into words\n    words = word.split('_')\n    # Convert the first word to uppercase and the rest to lowercase\n    camel_case_word = words[0] + ''.join(word.title().split('_')[1:])\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # Check if n and m are positive integers\n    if not (isinstance(n, int) and isinstance(m, int)):\n        raise TypeError(\"n and m must be positive integers\")\n\n    # Check if n and m are less than or equal to 1000\n    if n <= 0 or m <= 0 or n > 1000 or m > 1000:\n        raise ValueError(\"n and m must be less than or equal to 1000\")\n\n    # Initialize variables\n    max_n = 0\n    max_a = 0\n\n    # Loop through all possible values of n\n    for i in range(1, 1001):\n\n        # Calculate the value of a(n, m)\n        a = (i * n) + (m * i)\n\n        # Check if a(n, m) is greater than max_a so far\n        if a > max_a:\n            max_a = a\n            max_n = i\n\n    # Return the maximum value of a(n, m)\n    return max_a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function finds the Eulerian number a(n, m).\n    '''\n    # Define a function to generate the Eulerian sequence\n    def euler_seq():\n        # Initialize variables to keep track of current state\n        curr_state = 0\n        # Initialize counter for current position\n        pos = 0\n        # Generate the sequence\n        while True:\n            # Calculate the next state and position\n            next_state = (pos + 1) % 2\n            next_pos = (pos + n) % m\n            # If the next state is the current state, return the current position\n            if next_state == curr_state:\n                return pos\n            # Otherwise, update the variables and continue\n            curr_state = next_state\n            pos = next_pos\n\n    # Find the length of the sequence\n    length = euler_seq()\n    # Calculate the Eulerian number\n    euler_num = (n * m) // 2\n    # Calculate the smallest multiple that is greater than or equal to the Eulerian number\n    return (euler_num + length - 1) // length * length"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = 1\n    b = 2\n    c = 0\n    \n    # Calculate the number of terms in the sequence\n    terms = n + 1\n    \n    # Loop through each term\n    for i in range(1, terms):\n        # Calculate the next number in the sequence\n        a, b, c = b, c, a + b + c\n        \n    # Return the final value of the sequence\n    return c"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m).\n    '''\n    # initialize the Eulerian number to 1\n    a = 1\n    \n    # initialize the maximum value of a to 1\n    max_a = 1\n    \n    # loop through the range of n and m\n    for i in range(n):\n        # loop through the range of m\n        for j in range(m):\n            # calculate the next value of a\n            a = a * (i+1) // (j+1)\n            # update the maximum value of a if necessary\n            max_a = max(max_a, a)\n            \n    # return the maximum value of a\n    return max_a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    if n > m:\n        n, m = m, n\n    \n    a = 0\n    for i in range(1, n+1):\n        a += i*(m - i + 1)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using the formula:\n    a(n, m) = (n + m) * (n + m + 1) // 2\n    \n    Args:\n    n (int): The number of ways to choose m items from n items.\n    m (int): The number of items to choose from n items.\n    \n    Returns:\n    int: The Eulerian number a(n, m).\n    \"\"\"\n    return (n + m) * (n + m + 1) // 2"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize variables\n    a = [0] * (n+1)\n    \n    # Calculate the Eulerian numbers using a matrix\n    for i in range(1, n+1):\n        a[i] = 1 + ((n+1)//2 - i)*(m+1)\n    \n    # Return the last element of the list\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1 and m == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        # Calculate a(n-1, m) and a(n, m-1)\n        a11 = eulerian_num(n-1, m)\n        a1m = eulerian_num(n, m-1)\n        \n        # Return the maximum of a(n-1, m) and a(n, m-1)\n        return max(a11, a1m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 1:\n        return m\n    \n    # recursive case\n    return eulerian_num(n-1, m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "Let's write the Python script to find the Eulerian number of a given graph."
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n\ninput_list = [['apple', 'banana', 'cherry'], ['dog', 'cat', 'fish'], ['bird', 'fish', 'dog']]\nsort_sublists(input_list)\nprint(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            if i == True:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += i\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if type(element) == bool:\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n\n    # Append the list to the tuple\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup) # convert tuple to list\n    test_tup.extend(test_list) # extend the list to the tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n    # Append the lists to the tuples\n    test_list = test_list + test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list of lists to hold the three input lists\n    lists = [num1, num2, num3]\n\n    # use heapq to merge the three lists into a single sorted list\n    heapq.heapify(lists[0])\n    heapq.merge(*lists)\n\n    # convert the heap into a list and return it\n    return [heapq.heappop(x) for x in lists]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Create a list to store the merged sorted list\n    merged_list = []\n    \n    # Merge the three lists using heapq.merge()\n    heapq.merge(heapq.merge(heapq.merge([], num1), num2), num3)\n    \n    # Iterate over the merged list and append each element to the new list\n    while merged_list:\n        merged_list.append(heapq.heappop(merged_list))\n    \n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap of the merged list\n    min_heap = []\n    for i in merged_list:\n        heapq.heappush(min_heap, i)\n    \n    # Create a new list to store the sorted merged list\n    sorted_list = []\n    \n    # Pop the smallest element from the heap and add it to the sorted list\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smallest lists\n    merged_list = heapq.merge(num1, num2)\n    # Merge the result with the third list\n    return heapq.merge(merged_list, num3)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the two lists\n    merged_list = num1 + num2\n    # merge the merged list with the third list\n    merged_list = merged_list + num3\n    # remove duplicates from the merged list\n    merged_list = list(set(merged_list))\n    # sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    sorted_list = []\n    for num in num1:\n        heapq.heappush(sorted_list, num)\n    for num in num2:\n        heapq.heappush(sorted_list, num)\n    for num in num3:\n        heapq.heappush(sorted_list, num)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three lists into a single sorted list\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    # Sort the combined list\n    sorted_list = sorted(merged_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Merge the two smallest numbers\n    if num1[0] <= num2[0]:\n        if num1[0] <= num3[0]:\n            merged = [num1[0]] + num1[1:]\n        else:\n            merged = [num1[0]] + num2[1:]\n    else:\n        if num2[0] <= num3[0]:\n            merged = [num2[0]] + num2[1:]\n        else:\n            merged = [num3[0]] + num3[1:]\n    # Merge the remaining numbers\n    if len(num1) > 1:\n        merged += merge_sorted_list(num1[1:], num2, num3)\n    elif len(num2) > 1:\n        merged += merge_sorted_list(num1, num2[1:], num3)\n    elif len(num3) > 1:\n        merged += merge_sorted_list(num1, num2, num3[1:])\n    # Return the merged list\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    # return the merged list\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes in a binary string s and an integer n, where s is the binary string to be rotated and n is the number of times it needs to be rotated.\n    It rotates the binary string n number of times and then counts the number of odd numbers in it.\n    '''\n\n    # Convert the binary string into a list of characters\n    s_list = list(s)\n\n    # Perform n rotations of the string\n    for i in range(n):\n        # Reverse the order of the characters in the string\n        s_list = s_list[::-1]\n\n    # Count the number of odd numbers in the rotated string\n    count = 0\n    for i in s_list:\n        if int(i) % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    binary = list(s)\n    for i in range(n):\n        temp = binary[-1]\n        binary.pop()\n        binary.insert(0,temp)\n    odd_count = 0\n    for i in binary:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    index = 0\n\n    # Loop through each character in the string\n    for char in s:\n\n        # If the character is odd, increment the count and set the index to the next position in the string\n        if char % 2 == 1:\n            count += 1\n            index = (index + 1) % len(s)\n\n        # If the count is greater than the given number of rotations, exit the loop\n        if count > n:\n            break\n\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n):\n    s = s[::-1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            break\n    count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    odd_count = 0\n    for i in range(n):\n        s = s[::-1]\n        odd_count += s.count('1')\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    # Check if the length of the binary string is less than 2\n    if len(s) < 2:\n        return 0\n\n    # Initialize a counter for the number of odd values\n    count = 0\n\n    # Loop through the binary string s n times\n    for _ in range(n):\n        # Convert the binary string to a list\n        binary_list = [int(digit) for digit in s]\n\n        # Reverse the list\n        binary_list.reverse()\n\n        # Convert the reversed list back to a string\n        s = ''.join(map(str, binary_list))\n\n        # Check if the length of the binary string is less than 2\n        if len(s) < 2:\n            return 0\n\n        # Initialize a counter for the number of odd values\n        count = 0\n\n        # Loop through the binary string s again\n        for digit in s:\n            # Check if the digit is odd\n            if int(digit) % 2!= 0:\n                count += 1\n\n        # Return the count of odd values\n        return count\n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    s_binary = bin(int(s))[2:]\n    rotated_binary = s_binary[n:] + s_binary[:n]\n    return sum([int(i) for i in rotated_binary if int(i)%2!=0])"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert binary string to list of digits\n    binary_list = [int(digit) for digit in s]\n    # Rotate the binary list by n places\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # Count the number of odd digits in the rotated list\n    odd_count = sum(1 for digit in rotated_list if digit % 2!= 0)\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # convert the binary string to a list of binary digits\n    binary_list = [int(digit) for digit in s]\n\n    # initialize the count of odd numbers\n    count = 0\n\n    # rotate the binary string the given number of times\n    for i in range(n):\n        binary_list.append(binary_list.pop(0))\n\n    # loop through the rotated binary string and count odd numbers\n    for digit in binary_list:\n        if digit % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = bin(int(s))[2:] # convert integer to binary string and remove the \"0b\" prefix\n    rotated_binary_string = binary_string * n\n    count = 0\n    for i in range(len(rotated_binary_string)):\n        if int(rotated_binary_string[i]) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create a set for each nested list to store common elements\n    common_set1 = set()\n    common_set2 = set()\n    common_set3 = set()\n    for i in nestedlist:\n        common_set1 = common_set1.union(set(i))\n        common_set2 = common_set2.union(set(i[1]))\n        common_set3 = common_set3.union(set(i[2]))\n    \n    # create a set for each list to store common elements\n    common_set1 = common_set1.union(set(nestedlist[0]))\n    common_set2 = common_set2.union(set(nestedlist[1]))\n    common_set3 = common_set3.union(set(nestedlist[2]))\n    \n    # find the intersection of common sets\n    common_set1 = common_set1.intersection(common_set2)\n    common_set2 = common_set2.intersection(common_set3)\n    common_set1 = common_set1.intersection(common_set3)\n    \n    # create a list to store common elements\n    common_list = list(common_set1)\n    \n    return common_list\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for sublist in nestedlist:\n        for elem in sublist:\n            if elem not in common:\n                common.append(elem)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty set to store common elements\n    common = set()\n    # iterate through the nested lists\n    for lst in nestedlist:\n        # iterate through the elements in the list\n        for element in lst:\n            # add the element to the set if it's already there\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n    # return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for lst in nestedlist:\n        for elem in lst:\n            if elem not in common_elements and elem not in lst and elem not in common_elements:\n                common_elements.append(elem)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                if nestedlist[j] not in common_elements:\n                    common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set for the common elements\n    common_elements = set()\n\n    # Loop through each element in the nested list\n    for element in nestedlist:\n\n        # If the element is a list, call the function recursively\n        if isinstance(element, list):\n            common_elements.update(common_in_nested_lists(element))\n        else:\n            # Otherwise, add it to the set of common elements\n            common_elements.add(element)\n\n    # Return the common elements set\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty dictionary to store common elements\n    common_dict = {}\n\n    # Loop through all nested lists and add the elements to the dictionary\n    for sublist in nestedlist:\n        for item in sublist:\n            if item in common_dict:\n                common_dict[item] += 1\n            else:\n                common_dict[item] = 1\n\n    # Initialize an empty list to store common elements\n    common_list = []\n\n    # Loop through the dictionary and add common elements to the list\n    for key, value in common_dict.items():\n        if value > 1:\n            common_list.append(key)\n\n    # Return the list of common elements\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n\n    # create a set to store unique elements in the first list\n    unique_set = set(nestedlist[0])\n\n    # loop through the nested list and check if the element is in the set\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in unique_set:\n                print(element, end=' ')"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            common.append(j)\n    return list(set(common))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize an empty list to store the common elements\n    common_elements = []\n    # loop through each element in the nested list\n    for element in nestedlist:\n        # loop through each element in the nested list again\n        for inner_element in nestedlist:\n            # check if the current element is in the inner list\n            if element in inner_element:\n                # check if the current inner element is not already in the common_elements list\n                if inner_element not in common_elements:\n                    # if not, add it to the common_elements list\n                    common_elements.append(inner_element)\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in range(len(list1)):\n            if len(list1[i]) > 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # iterate through the list of dictionaries\n    for dic in list1:\n        # iterate through the keys of each dictionary\n        for key in dic:\n            # if the value of the key is not empty, return False\n            if dic[key]:\n                return False\n    # if all keys have been checked and no empty values were found, return True\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple): A tuple of positive integers.\n\n    Returns:\n        int: A single integer converted from the input tuple.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = (result << 1) + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = (result << 1) | num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list\n    nums_list = list(nums)\n    # initialize the result variable to 0\n    result = 0\n    # loop through the list and add each element to the result\n    for num in nums_list:\n        result += num\n    # return the result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_num = 0\n    for num in nums:\n        int_num = int_num * 10 + num\n    return int_num"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    \n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate through the list and add each element to the result\n    for num in nums_list:\n        result += num\n        \n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums = list(nums)\n    # Initialize the integer value to 0\n    result = 0\n    # Iterate through each number in the list\n    for num in nums:\n        # Add each number to the result\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the test_list\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element can be converted to a float, convert it and replace it in the sublist\n            if isinstance(element, str):\n                try:\n                    sublist[sublist.index(element)] = float(element)\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    # Helper function to check if an element is convertible to float\n    def is_convertible(element):\n        try:\n            float(element)\n            return True\n        except ValueError:\n            return False\n    \n    # Helper function to convert all convertible elements in a list to float\n    def convert_elements(lst):\n        new_lst = []\n        for element in lst:\n            if is_convertible(element):\n                new_lst.append(float(element))\n            else:\n                new_lst.append(element)\n        return new_lst\n    \n    # Convert the list to a list of lists if necessary\n    if not isinstance(test_list, list):\n        test_list = [test_list]\n    \n    # Recursively convert all elements in the list\n    for i, sub_list in enumerate(test_list):\n        if isinstance(sub_list, list):\n            test_list[i] = convert_elements(sub_list)\n    \n    # Convert all elements in the list to float\n    for i, element in enumerate(test_list):\n        if is_convertible(element):\n            test_list[i] = float(element)\n    \n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                if isinstance(element, (int, float)):\n                    result.append(float(element))\n                elif isinstance(element, str):\n                    result.append(float(element.replace(',', '.')))\n            except ValueError:\n                result.append(element)\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) == str:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to keep track of elements and their counts\n    counts = {}\n    \n    # loop through the array and count the occurrences of each element\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n            \n    # loop through the array again and find the element that appears only once\n    for num in arr:\n        if counts[num] == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    # Create an array to store the frequency of each element\n    freq = [0] * n\n\n    # Traverse the array and count the frequency of each element\n    for i in range(n):\n        freq[arr[i]] += 1\n\n    # Traverse the array again and check if the frequency of the element is 1\n    for i in range(n):\n        if freq[i] == 1:\n            return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the element that appears only once in the array\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    # If all elements are different, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize two pointers, one at the start of the array and the other at the end\n    i = 0\n    j = len(arr) - 1\n\n    # Iterate through the array while both pointers are within the bounds of the array\n    while i < j:\n        # Calculate the average of the two pointers\n        avg = (arr[i] + arr[j]) / 2\n\n        # If the average is equal to the target element, both pointers are at the same index\n        if arr[i] == avg and arr[j] == avg:\n            return avg\n\n        # If the average is greater than the target element, move the left pointer to the right\n        elif arr[i] > avg:\n            i += 1\n\n        # If the average is less than the target element, move the right pointer to the left\n        else:\n            j -= 1\n\n    # If the target element was not found in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two pointers, one for the start of the array and one for the end\n    start = 0\n    end = len(arr) - 1\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Traverse the array from both ends simultaneously\n    while start <= end:\n        # If the element at the current position is not already in the dictionary, add it with a count of 1\n        if arr[start] not in count_dict:\n            count_dict[arr[start]] = 1\n        # If the element at the current position is already in the dictionary, increment its count by 1\n        else:\n            count_dict[arr[start]] += 1\n\n        # If the element at the current position appears only once, return it\n        if count_dict[arr[start]] == 1:\n            return arr[start]\n\n        # If the element at the current position appears more than once, increment the start pointer\n        else:\n            start += 1\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array where all elements are unique.\n\n    Returns:\n    int: The element that appears only once in the array, or -1 if the array has no such element.\n    \"\"\"\n    count = {}\n    for num in arr:\n        if num in count:\n            del count[num]\n        else:\n            count[num] = True\n\n    for num in arr:\n        if count[num] == 1:\n            return num\n\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in arr:\n        if count[i] == 1:\n            return i\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] == arr[i+1]:\n                return arr[i]\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == unique_element:\n            print(\"The element that appears only once is\", arr[i])\n            return None\n        else:\n            unique_element = arr[i]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n):\n            product = list1[i][0]*list1[j][0]\n            for k in range(j+1, n):\n                if abs(product) > abs(list1[k][0]):\n                    product = list1[k][0]\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            max_product = max(max_product, abs(list1[i][0]*list1[j][1]-list1[j][0]*list1[i][1]))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = -1\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Calculate the absolute value of each element in the list\n    abs_list = [abs(x) for x in list1]\n\n    # Calculate the maximum product between adjacent pairs of numbers in the list\n    max_product = max(abs_list[0] * abs_list[1], abs_list[1] * abs_list[2], abs_list[2] * abs_list[3], key=abs)\n\n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0]) * abs(list1[i][1] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(num, limit):\n    for i in range(2, limit):\n        if num % i == 0:\n            return False\n    return True\n\ndef amicable_numbers_sum(limit):\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i, limit):\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_amicable(num):\n    '''\n    Check if a given number is amicable or not.\n    '''\n    # Get all the factors of the given number\n    factors = set()\n    for i in range(1, int(num**0.5) + 1):\n        if num % i == 0:\n            factors.add(i)\n            factors.add(num // i)\n\n    # Check if the given number is amicable\n    return 4 in factors\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        # Check if num is divisible by any number between 1 and sqrt(num)\n        for i in range(1, int(num**0.5)+1):\n            if num%i == 0:\n                break\n        else:\n            # If num is not divisible by any number between 1 and sqrt(num), it is an amicable number\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_proper_divisors(num):\n            amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_proper_divisors(num):\n    '''\n    Write a function to find the sum of all proper divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Iterate through all numbers from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable by iterating through all the numbers up to the square root of the number\n        for divisor in range(1, int(num**0.5) + 1):\n            if num % divisor == 0:\n                # If the number is divisible by a divisor, it is not amicable\n                break\n        else:\n            # If the loop completes without finding any divisor, then the number is amicable\n            sum += num\n\n    # Return the sum of all amicable numbers\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable or not.\n    \"\"\"\n    def sum_of_squares(n):\n        \"\"\"\n        Calculate the sum of squares of all integers from 1 to n.\n        \"\"\"\n        return sum(i**2 for i in range(1, n+1))\n\n    def square_of_sum(n):\n        \"\"\"\n        Calculate the square of the sum of all integers from 1 to n.\n        \"\"\"\n        return (sum(range(1, n+1))**2)\n\n    return square_of_sum(num) == sum_of_squares(num)\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = [num for num in range(1, limit+1) if is_amicable(num)]\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_divisible_by(num, divisor):\n    return num % divisor == 0\n\ndef sum_of_amicable_numbers(limit):\n    # sum of two squares of the divisors\n    sum_of_squares = sum([a**2 + b**2 for a in range(2, limit) for b in range(2, limit)])\n    # list of all pairs of divisors that sum up to the square sum\n    pairs = [(a, b) for a in range(2, limit) for b in range(2, limit) if is_divisible_by(a**2 + b**2, sum_of_squares)]\n    # sum of the divisors in each pair\n    sum_of_divisors = sum([a + b for a, b in pairs])\n    # sum of the pairs themselves\n    sum_of_pairs = sum([a + b for a, b in pairs])\n    # the sum of all amicable numbers\n    sum_of_amicable = sum_of_divisors + sum_of_pairs\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    sum_of_squares = sum([x**2 for x in range(1, int(num**0.5)+1)])\n    return sum_of_squares == num**2\n\nlimit = int(input(\"Enter a limit: \"))\nprint(\"The sum of amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to keep track of amicable numbers and their sum\n    amicable_numbers = set()\n    sum_amicable_numbers = 0\n    \n    # Loop through numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable\n        if num in amicable_numbers:\n            continue\n        # Check if the number is divisible by any number from 1 to the square root of the number\n        elif any(num % i == 0 and i!= num for i in range(1, int(num**0.5)+1)):\n            # Add the number to the set of amicable numbers\n            amicable_numbers.add(num)\n            # Add the sum of the number and its two amicable factors to the sum of amicable numbers\n            sum_amicable_numbers += num + num * sum(i for i in range(1, num) if num % i == 0 and i!= num)\n    \n    return sum_amicable_numbers"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the complex number's modulus and argument\n    modulus = cmath.sqrt(a*a + b*b)\n    argument = cmath.phase(a+b*1j)\n\n    # Return the angle in degrees\n    return round(argument.real*180/cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a + bj * 1j  # conjugate of a\n    angle = cmath.phase(c)  # use cmath library to get angle\n    return round(angle, 3)  # round angle to 3 decimal places\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a + b)\n    angle = cmath.degrees(angle)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_rad = cmath.phase(a*b)\n    angle_deg = angle_rad * 180 / cmath.pi\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers as input and returns the angle of the complex number.\n    The angle of a complex number is given by:\n\n    \u03b8 = arctan(b/a)\n\n    This function uses the cmath module to perform the calculation.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the modulus and argument of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n    argument = cmath.phase(a+b*1j)\n    \n    # convert the argument to degrees and return it as a float\n    return argument.real*180/cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Find the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n\n    # Find the phase angle of the complex number\n    phase_angle = cmath.phase(complex(a,b))\n\n    # Convert the phase angle to degrees\n    phase_angle = cmath.degrees(phase_angle)\n\n    # Return the angle in degrees\n    return phase_angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    # initialize counters for 0s and 1s\n    zero_count = 0\n    one_count = 0\n    # loop through the string\n    for char in string:\n        # if the character is 0, increment the zero counter\n        if char == '0':\n            zero_count += 1\n        # if the character is 1, increment the one counter\n        else:\n            one_count += 1\n    # initialize maximum length and maximum difference\n    max_length = 0\n    max_diff = 0\n    # loop through all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            # calculate the length of the substring\n            substring_length = j - i + 1\n            # calculate the difference between the zero and one counts in the substring\n            substring_diff = one_count - zero_count\n            # update the maximum length and maximum difference if the substring is longer than the current maximum\n            if substring_length > max_length:\n                max_length = substring_length\n                max_diff = substring_diff\n    # return the maximum difference found\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    # Initialize a dictionary to store the count of 0s and 1s in each substring\n    count_dict = {}\n\n    # Initialize a variable to store the length of the longest substring\n    max_length = 0\n\n    # Loop through each substring of the string\n    for i in range(len(string)):\n        # Initialize a variable to store the count of 0s and 1s in the current substring\n        substring_count = {'0': 0, '1': 0}\n\n        # Loop through each character in the current substring\n        for j in range(i, len(string)):\n            substring_count[string[j]] += 1\n\n            # Check if the count of 0s and 1s in the current substring has a new maximum\n            if substring_count['0'] > count_dict.get('0', 0) + substring_count['1']:\n                count_dict['0'] = substring_count['0']\n                count_dict['1'] = substring_count['1']\n            elif substring_count['1'] > count_dict.get('0', 0) + substring_count['1']:\n                count_dict['1'] = substring_count['1']\n\n            # Check if the length of the current substring is longer than the current maximum\n            if j - i + 1 > max_length:\n                max_length = j - i + 1\n\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if i == n-1:\n            if count > 0:\n                max_diff = max(max_diff, count)\n        else:\n            if string[i+1] == '1':\n                count += 1\n            else:\n                count = 0\n            max_diff = max(max_diff, count)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    max_diff = 0\n    \n    for i in range(1, n+1):\n        for j in range(i):\n            if string[j] == '0' and string[i] == '1':\n                dp[i][j] = dp[i-1][j-1] + 1\n                if dp[i][j] > max_diff:\n                    max_diff = dp[i][j]\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    diff = 0\n    count_zero = 0\n    count_one = 0\n    for char in string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n        diff = max(diff, abs(count_zero - count_one))\n    return diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    # initialize variables for length and count of 0s and 1s\n    length = 0\n    count_0s = 0\n    count_1s = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # if the character is 0, increment the count of 0s\n        if char == '0':\n            count_0s += 1\n        # if the character is 1, increment the count of 1s\n        elif char == '1':\n            count_1s += 1\n        # if the count of 0s is greater than the count of 1s, update the length\n        if count_0s > count_1s:\n            length = max(length, count_0s - count_1s)\n    \n    # return the length\n    return length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Count the number of 0s and 1s in the string\n    num_0s = 0\n    num_1s = 0\n    for char in string:\n        if char == '0':\n            num_0s += 1\n        else:\n            num_1s += 1\n    \n    # Find the maximum difference between the number of 0s and number of 1s\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring.count('0') == substring.count('1'):\n                continue\n            num_0s_in_substring = substring.count('0')\n            num_1s_in_substring = substring.count('1')\n            diff = abs(num_0s_in_substring - num_1s_in_substring)\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count_0 += 1\n        # If the character is a 1, increment the count of 1s and calculate the difference\n        else:\n            count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # initialize variables for count of 0s and 1s\n    count_zero = 0\n    count_one = 0\n    \n    # iterate through the string\n    for char in string:\n        # if the character is a 0, increment count of 0s\n        if char == '0':\n            count_zero += 1\n        # if the character is a 1, increment count of 1s\n        else:\n            count_one += 1\n        \n        # calculate the maximum difference between count of 0s and 1s\n        max_diff = max(count_zero - count_one, 0)\n        \n        # if max_diff is greater than the current maximum difference, update maximum difference\n        if max_diff > max_length:\n            max_length = max_diff\n    \n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    max_diff = 0\n    for i in range(n):\n        for j in range(i, n):\n            if string[i] == '0' and string[j] == '0':\n                dp[i][j] = dp[i+1][j-1] + 1\n                if dp[i][j] > max_diff:\n                    max_diff = dp[i][j]\n            elif string[i] == '1' and string[j] == '1':\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        Returns the set of common divisors of a given number.\n        \"\"\"\n        divisors = set()\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                if i!= num // i:\n                    divisors.add(num // i)\n        return divisors\n\n    a_divisors = common_divisors(a)\n    b_divisors = common_divisors(b)\n    return sum(a_divisors.intersection(b_divisors))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    This function takes in two numbers and returns the sum of their common divisors.\n    \"\"\"\n    common_divisors = []\n    for i in range(1, num1+1):\n        if (num1 % i == 0) and (num2 % i == 0):\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding common divisors using the Euclidean algorithm\n    i = a\n    while(i > 1):\n        if(a%i == 0 and b%i == 0):\n            if(i > b):\n                a = b\n                b = i\n            else:\n                b = b%i\n                a = a//i\n        else:\n            i -= 1\n\n    # Calculating the sum of common divisors\n    sum_c = a + b\n\n    return sum_c\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Find the GCD of two numbers\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Find the sum of common divisors of two numbers\n    def sum_common_divisors(a, b):\n        divisors = set()\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.add(i)\n        return sum(divisors)\n\n    # Calculate the sum of common divisors of a and b\n    gcd_ab = gcd(a, b)\n    ab_sum = sum_common_divisors(a, b)\n\n    return gcd_ab, ab_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisor(num):\n        \"\"\"\n        Write a python function to find the common divisor of a given number.\n        \"\"\"\n        if num == 1:\n            return 1\n        for i in range(2, num):\n            if num % i == 0:\n                return i\n\n    def sum_divisors(num):\n        \"\"\"\n        Write a python function to find the sum of divisors of a given number.\n        \"\"\"\n        sum_div = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                sum_div += i\n        return sum_div\n\n    div_a = common_divisor(a)\n    div_b = common_divisor(b)\n    common_divisor_sum = sum_divisors(div_a) + sum_divisors(div_b) - 2 * div_a * div_b\n\n    return common_divisor_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the gcd of a and b\n    gcd = a // gcd(a, b)\n\n    # Initialize variables\n    sum_common_divisors = 0\n\n    # Iterate over all numbers between 1 and min(a, b)\n    for i in range(1, min(a, b)+1):\n        # Check if i is a common divisor of both a and b\n        if i % gcd == 0 and i % b == 0:\n            sum_common_divisors += i\n\n    return sum_common_divisors\n\ndef gcd(a, b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    # Finding all the divisors of a and b\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    # Finding the sum of common divisors\n    sum_divisors = 0\n    for i in range(len(divisors)):\n        sum_divisors += divisors[i]\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if both numbers are positive integers\n    if not (isinstance(a, int) and isinstance(b, int) and a > 0 and b > 0):\n        raise ValueError(\"Both numbers must be positive integers.\")\n\n    # Find the maximum number between the two input numbers\n    max_num = max(a, b)\n\n    # Initialize the sum of common divisors to zero\n    sum_common = 0\n\n    # Iterate over all integers between 1 and the maximum number\n    for num in range(1, max_num + 1):\n        # Check if the input numbers have a common divisor\n        if a % num == 0 and b % num == 0:\n            sum_common += num\n\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        y = y >> 1\n        x = x << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Multiply two integers.\n\n    Parameters:\n    x (int): The first integer to multiply.\n    y (int): The second integer to multiply.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    '''\n    This function takes a list of words and a threshold (n) as input and returns a list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in a list that are longer than n characters.\n\n    Args:\n    - n (int): The length of words that are considered long.\n    - words (list of str): A list of words.\n\n    Returns:\n    - list of str: The list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    \n    result = [] # create an empty list to store the longer words\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            result.append(word) # if yes, append it to the result list\n            \n    return result # return the result list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Convert the string to lowercase\n    str = str.lower()\n    # Split the string into words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    # Loop through the words and add any longer words to the list\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if the matrix contains all unique elements\n    for row in my_matrix:\n        if len(row)!= len(set(row)):\n            return False\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] + my_matrix[j][i] == sum(range(1, len(my_matrix)+1))**2:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check that the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check that all the rows and columns have the same values\n    for i in range(len(my_matrix)):\n        row = my_matrix[i]\n        col = [row[j] for j in range(len(row))]\n        if row!= col:\n            return False\n    \n    # check that the values in the main diagonal are the same as the diagonal of the transposed matrix\n    diag1 = [row[i] for i in range(len(row))]\n    diag2 = [row[j] for j in range(len(row))]\n    if diag1!= diag2:\n        return False\n    \n    # check that the values in the secondary diagonal are the same as the diagonal of the transposed matrix\n    for i in range(len(row)):\n        if row[i]!= row[len(row)-i-1]:\n            return False\n    \n    # all tests passed, so the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            # Check if the current element is equal to the sum of the previous rows\n            if my_matrix[i][j]!= (i + j + my_matrix[i][j-1] + my_matrix[i-1][j]):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if len(set(row_sums))!= 1:\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    if len(set(col_sums))!= 1:\n        return False\n    \n    # Check if all diagonals have the same sum\n    diag1_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag2_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if diag1_sum!= diag2_sum:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check if the matrix has the same number of rows and columns\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(len(my_matrix)):\n        if my_matrix[i]!= my_matrix[i][::-1]:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix) - 2):\n        for j in range(len(my_matrix) - 2):\n            if my_matrix[i][j] + my_matrix[i][j + 1] + my_matrix[i][j + 2]!= 15 or \\\n               my_matrix[i + 1][j] + my_matrix[i + 1][j + 1] + my_matrix[i + 1][j + 2]!= 15 or \\\n               my_matrix[i + 2][j] + my_matrix[i + 2][j + 1] + my_matrix[i + 2][j + 2]!= 15:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        for j in range(n):\n            magic_sum += my_matrix[i][j]\n    if magic_sum == 0:\n        return \"The matrix is not a magic square.\"\n    elif magic_sum == 10 * n * n:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is neither a magic square nor a straight diagonal.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    row_sum = [0] * 9\n    col_sum = [0] * 9\n    diag_sum_1 = 0\n    diag_sum_2 = 0\n    \n    # Calculate row sums\n    for i in range(len(my_matrix)):\n        row_sum[i] = sum(my_matrix[i])\n    \n    # Calculate column sums\n    for j in range(len(my_matrix[0])):\n        col_sum[j] = sum([my_matrix[i][j] for i in range(len(my_matrix))])\n    \n    # Calculate diagonal sums (top-left and bottom-right)\n    diag_sum_1 = sum(my_matrix[0])\n    diag_sum_2 = sum([my_matrix[i][8-i] for i in range(len(my_matrix))])\n    \n    # Check if row and column sums are equal to 25\n    if row_sum == [25] * 9 and col_sum == [25] * 9:\n        return True\n    elif diag_sum_1 == diag_sum_2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix has the same dimensions as a magic square\n    if len(my_matrix)!= len(my_matrix[0]) or len(my_matrix)!= len(my_matrix[1]) or len(my_matrix)!= len(my_matrix[2]) or len(my_matrix)!= len(my_matrix[3]) or len(my_matrix)!= len(my_matrix[4]) or len(my_matrix)!= len(my_matrix[5]) or len(my_matrix)!= len(my_matrix[6]) or len(my_matrix)!= len(my_matrix[7]) or len(my_matrix)!= len(my_matrix[8]):\n        return False\n    \n    # Check for the magic square pattern in each row\n    for i in range(9):\n        if not (sum(my_matrix[i]) == i*9 and sum(my_matrix[i][::-1]) == i*9 and sum(my_matrix[i][::-1][:5]) == i*9 and sum(my_matrix[i][::-1][5:]) == i*9):\n            return False\n    \n    # Check for the magic square pattern in each column\n    for i in range(9):\n        col = []\n        for j in range(9):\n            col.append(my_matrix[j][i])\n        if not (sum(col) == i*9 and sum(col[::-1]) == i*9 and sum(col[::-1][:5]) == i*9 and sum(col[::-1][5:]) == i*9):\n            return False\n    \n    # Check for the magic square pattern in the main diagonal\n    if not (sum(my_matrix[i][i] for i in range(9)) == 25 and sum(my_matrix[i][i] for i in range(9)) == 25 and sum(my_matrix[i][i] for i in range(9)) == 25):\n        return False\n    \n    # Check for the magic square pattern in the secondary diagonal\n    if not (sum(my_matrix[i][8-i] for i in range(9)) == 25 and sum(my_matrix[i][8-i] for i in range(9)) == 25 and sum(my_matrix[i][8-i] for i in range(9)) == 25):\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n    \n    # Check for the sum of the diagonal\n    if sum(my_matrix[i][i] for i in range(3))!= 15:\n        return False\n    \n    # Check for the sum of the other two diagonals\n    diagonal1 = [my_matrix[i][i] for i in range(3)]\n    diagonal2 = [my_matrix[i][2-i] for i in range(3)]\n    if sum(diagonal1)!= 15 or sum(diagonal2)!= 15:\n        return False\n    \n    # Check for the rows and columns for the other numbers\n    for i in range(3):\n        for j in range(3):\n            if my_matrix[i][j] == 0:\n                for k in range(1,10):\n                    if k not in my_matrix[i] and k not in my_matrix[j]:\n                        my_matrix[i][j] = k\n                        if magic_square_test(my_matrix):\n                            return True\n                        my_matrix[i][j] = 0\n                return False\n    \n    # If the function gets here, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of any row is equal to the sum of any column\n    if row_sums == col_sums:\n        return True\n    else:\n        return False"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = 0\n    max_freq = 0\n    for num, count in freq.items():\n        if count > max_freq:\n            max_num = num\n            max_freq = count\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_num = None\n    max_freq = 0\n    \n    for num in nums:\n        freq[num] += 1\n        \n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_num = num\n    \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the highest count\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Initialize a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of numbers and update the frequency count\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_num = max(freq, key=freq.get)\n\n    # Return the item with the maximum frequency count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers and returns the item with maximum frequency.\n    If there are multiple items with the maximum frequency, the function returns the first occurrence of each item.\n    '''\n    freq = defaultdict(int)  # defaultdict is used to count frequency of each item\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        freq[num] += 1  # increment frequency count for each item in the list\n        \n        if freq[num] > max_count:  # if current frequency count is greater than max count, update max count and max item\n            max_count = freq[num]\n            max_item = num\n            \n        elif freq[num] == max_count and num < max_item:  # if current frequency count is equal to max count and current item is smaller than max item, update max item\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate over the list and increment the frequency count for each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency count\n    max_count = 0\n    max_item = None\n    for item, count in freq_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a defaultdict to store the frequency of each item\n    freq = defaultdict(int)\n\n    # Iterate through the list of items\n    for item in nums:\n        # Increment the frequency of the item in the freq defaultdict\n        freq[item] += 1\n\n    # Initialize the maximum frequency\n    max_freq = 0\n\n    # Iterate through the freq defaultdict and update the max_freq if necessary\n    for freq_item in freq.values():\n        if freq_item > max_freq:\n            max_freq = freq_item\n\n    # Find the item with the maximum frequency\n    max_item = None\n    for item, freq_item in freq.items():\n        if freq_item == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_vowels += char\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = str1.lower()\n    str1_list = list(str1)\n    str1_reverse = str1_list[::-1]\n    str1_vowels_reverse = []\n    for char in str1_reverse:\n        if char in vowels:\n            if str1_reverse.index(char) % 2!= 0:\n                str1_vowels_reverse.append(char)\n    return ''.join(str1_vowels_reverse)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char in vowels:\n            if char.isupper():\n                result += char.lower()\n            else:\n                result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str = str1[i] + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in str1:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            if i == 0:\n                reversed_str += str1[i]\n            elif str1[i] == str1[i-1]:\n                reversed_str += str1[i]\n            else:\n                reversed_str = reversed_str[:-1] + str1[i]\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    result = \"\"\n    for char in str1:\n        if char.lower() in vowels_set:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_vowels = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_vowels = char + reversed_vowels\n    return reversed_vowels"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # Convert each element of the tuple to a string using the `str()` function\n    string_tup = [str(x) for x in tup1]\n    # Join the strings together with a comma and return the result\n    return \", \".join(string_tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the built-in str() function.\n    string_rep = str(tup1)\n    return string_rep"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the `str` function\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for num in nums:\n        if num < 0:\n            count += 1\n    return count"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the sum of all negative numbers in the list.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negativenumbers = 0\n    \n    for num in nums:\n        if num < 0:\n            sum_of_negativenumbers += num\n    \n    return sum_of_negativenumbers"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_number = 0\n    for i in range(1, n+1):\n        hexagonal_number += i * (2*i - 1)\n    return hexagonal_number"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    return 6 * hexagonal_num(n-1) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2 * n - 1) ** 2 // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a, b = 1, 1\n    for _ in range(n):\n        print(a, end=\" \")\n        a, b = b, 2*a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n) + (6 * n)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0: \n        return None\n    \n    # Finding the length of a hexagon\n    hexagon_side = (3 * n) ** 0.5\n    # Calculating the hexagon number\n    hex_num = (n * hexagon_side) ** 2\n    \n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0:\n        hex_num = (n // 2) ** 2 + n\n    else:\n        hex_num = (n // 2) ** 2 + n - 1\n    \n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n    ratio = zeros[0] / ones[0]\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Create a new array to store the non-zero values\n    non_zeros = array('i')\n    # Loop through the input array\n    for num in nums:\n        # If the number is non-zero, add it to the new array\n        if num!= 0:\n            non_zeros.append(num)\n    # Calculate the number of non-zeroes and the number of zeroes\n    non_zero_count = len(non_zeros)\n    zero_count = len(nums) - non_zero_count\n    # Return the ratio of zeroes to non-zeroes as a float\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums))\n    non_zeros = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[0] += 1\n        else:\n            non_zeros[0] += 1\n    return zeros[0] / non_zeros[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zero = len([num for num in nums if num == 0])\n    num_non_zero = len(nums) - num_zero\n    zero_ratio = num_zero / num_non_zero\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    if zero_count == 0:\n        return 0\n    else:\n        return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array of integers to a list to count non-zero elements\n    nums_list = list(nums)\n    non_zero_count = len([x for x in nums_list if x!= 0])\n    \n    # Count the number of zeroes in the list\n    zero_count = len([x for x in nums_list if x == 0])\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zero_count / non_zero_count\n    \n    # Return the ratio\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n\n    total_zeros = len(zeros)\n    total_non_zeros = len(non_zeros)\n\n    if total_non_zeros == 0:\n        return 0\n    else:\n        return (total_zeros/total_non_zeros)*100"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    ones = array('i', [0] * len(nums))\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num) + 1] += 1\n        else:\n            ones[ones.index(num) + 1] += 1\n    \n    non_zero_count = len(nums) - zeros[-1] - ones[-1]\n    \n    zero_count = zeros[-1] + ones[-1] - non_zero_count\n    \n    ratio = zero_count / non_zero_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    zero_ratio = 0 if non_zero_count == 0 else (zero_count/non_zero_count)\n    \n    return zero_ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    temp = n\n    \n    while temp > 1:\n        if temp % 2 == 0:\n            count += 1\n            temp //= 2\n        else:\n            temp -= 1\n    \n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_Sum_Of_Powers_Of_Two(n//i) or is_Sum_Of_Powers_Of_Two(i):\n                    return True\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        i = 0\n        while n > 0:\n            if n & 1:\n                if i == 0:\n                    return False\n                else:\n                    n -= 2**i\n            else:\n                i += 1\n                n >>= 1\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n & (n - 1) == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n    while power_of_two > 0:\n        if power_of_two & 1 == 1:\n            if n - power_of_two >= 0:\n                return True\n        power_of_two >>= 1\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    This function takes an integer n as input and returns True if the number can be represented as sum of non-zero powers of 2 or False otherwise.\n    \"\"\"\n    # Helper function to find the number of bits required to represent the number\n    def count_bits(n):\n        count = 0\n        while n > 0:\n            count += 1\n            n &= (n - 1)\n        return count\n\n    # Helper function to check whether the given number can be represented as sum of non-zero powers of 2 or not\n    def check_powers_of_two(n):\n        count = 0\n        while n > 0:\n            if n & 1 == 1:\n                return False\n            count += 1\n            n >>= 1\n        return True\n\n    # Find the number of bits required to represent n\n    bits = count_bits(n)\n\n    # Check whether the number can be represented as sum of non-zero powers of 2\n    if bits % 2 == 0:\n        return False\n    else:\n        # Check whether the given number can be represented as sum of non-zero powers of 2 or not\n        if check_powers_of_two(n):\n            return True\n        else:\n            return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    # Check if the number is a power of 2\n    while n % 2 == 0:\n        n //= 2\n    if n == 1:\n        return True\n    # Check if the number can be represented as sum of non-zero powers of 2\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    if n == 0: # base case\n        return True\n\n    # check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n\n    # check if n can be represented as sum of non-zero powers of 2\n    i = 1\n    while i <= n//2:\n        if i & (i-1) == 0:\n            return False\n        i <<= 1\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Count the number of bits in the binary representation of the given number\n    count = 0\n    while n > 0:\n        count += 1\n        n >>= 1\n    \n    # Check if the number of bits is odd or even\n    if count % 2 == 0:\n        return False\n    \n    # Calculate the sum of powers of 2\n    power_of_two = 1\n    total_sum = 0\n    while power_of_two <= n:\n        if n % power_of_two == 0:\n            total_sum += power_of_two\n        power_of_two <<= 1\n    \n    # Check if the total sum is equal to the given number\n    return total_sum == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the given number is even or not\n    if n % 2 == 0:\n        return False\n\n    # Calculate the sum of powers of 2 from 1 to sqrt(n)\n    sum_of_powers_of_2 = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % (2*i) == 0:\n            sum_of_powers_of_2 += (2*i)\n\n    return sum_of_powers_of_2 == n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r # pi*radius\n    print(\"The circumference of the circle is\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    print(\"The circumference of a circle of radius\", r, \"is\", circumference)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, int):\n                flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    if not test_list:\n        return set()\n    elif isinstance(test_list[0], list):\n        return extract_singly(test_list[0]) | extract_singly(test_list[1:])\n    else:\n        return {test_list[0]} | extract_singly(test_list[1:])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        return [item for sublist in lst for item in flatten(sublist) if item not in flatten(sublist)]\n    \n    flattened_list = flatten(test_list)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            result.append(subitem)\n    return set(result)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables to keep track of the largest and smallest indices\n    largest = 0\n    smallest = len(nums) - 1\n\n    # Perform bubble sort on the list\n    for i in range(len(nums)):\n        # If the current index is larger than the largest index, update largest\n        if nums[i] > nums[largest]:\n            largest = i\n        # If the current index is smaller than the smallest index, update smallest\n        elif nums[i] < nums[smallest]:\n            smallest = i\n\n        # If the largest and smallest indices have crossed, swap the elements\n        if largest < smallest:\n            nums[largest], nums[smallest] = nums[smallest], nums[largest]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize the maximum and minimum values of the list\n    max_value = max(nums)\n    min_value = min(nums)\n\n    # Sort the list in descending order\n    sorted_nums = sorted(nums, reverse=True)\n\n    # Initialize the number of pancakes to be made\n    pancake_count = len(nums) - 1\n\n    # Initialize the stack of pancakes to be made\n    stack = []\n\n    # Iterate through the sorted list of elements\n    for i in range(len(sorted_nums)):\n\n        # If the element at the current index is greater than the maximum value,\n        # make a pancake and increment the pancake count\n        if sorted_nums[i] > max_value:\n            pancake_count -= 1\n            stack.append(sorted_nums[i])\n\n        # If the element at the current index is less than the minimum value,\n        # remove the last pancake and decrement the pancake count\n        elif sorted_nums[i] < min_value:\n            pancake_count += 1\n            stack.pop()\n\n    # Make the pancakes in the correct order\n    while pancake_count > 0:\n        pancake_count -= 1\n        stack.pop()\n\n    # Return the sorted list of elements\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the largest element in the first i elements of the list\n        max_idx = 0\n        for j in range(1, i+1):\n            if nums[max_idx] < nums[j]:\n                max_idx = j\n        \n        # swap the largest element with the i-th element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    # Find the length of the list\n    n = len(nums)\n\n    # Create a list of indices for swapping elements\n    indices = list(range(n))\n\n    # Iterate through each iteration of the pancake sort\n    for i in range(n-1, 0, -1):\n        # Choose a random index between 0 and i\n        j = random.randint(0, i)\n\n        # Swap the elements at indices i and j\n        nums[i], nums[j] = nums[j], nums[i]\n\n        # Store the index of the maximum element in the pancake at i\n        max_index = i\n\n        # Iterate through the remaining indices from i to n-1\n        for k in range(i):\n            # If the element at index k is larger than the maximum element, update max_index\n            if nums[k] > nums[max_index]:\n                max_index = k\n\n        # Swap the elements at indices i and max_index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # Move the pancake up by one index\n        for k in range(i, max_index, -1):\n            nums[k], nums[k-1] = nums[k-1], nums[k]\n\n        # Set the index of the maximum element in the pancake to be the index of the element at index i\n        indices[max_index] = i\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Create a list of numbers from 1 to n\n    for i in range(len(nums) - 1, -1, -1):\n        nums.append(i + 1)\n\n    # Loop through the sorted list of numbers\n    for i in range(len(nums)):\n        # Compare the current number with the next number\n        if nums[i] > nums[i + 1]:\n            # Swap the two numbers\n            nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n    # Return the sorted list of numbers\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Create a list of pancake indexes\n    pancake = [i for i in range(n)]\n\n    # Traverse the list of pancakes in reverse order\n    for i in range(n-1, 0, -1):\n\n        # Find the index of the smallest element in the current pancake\n        j = 0\n        smallest = nums[pancake[i-1]]\n        for k in range(i):\n            if nums[pancake[k]] < smallest:\n                smallest = nums[pancake[k]]\n                j = k\n\n        # Swap the smallest element with the last element of the pancake\n        nums[pancake[i-1]], nums[pancake[j]] = nums[pancake[j]], nums[pancake[i-1]]\n\n        # Reverse the pancake from the current index to the last index\n        pancake[i-1], pancake[j] = pancake[j], pancake[i-1]\n\n        # Print the sorted list\n        print(\"Sorted list:\", nums)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n, 0, -1):\n        # Find the index of the largest element\n        max_idx = 0\n        for j in range(1, i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the largest element with the element at index i\n        nums[i-1], nums[max_idx] = nums[max_idx], nums[i-1]\n        \n        # Reverse the elements from i to n\n        for j in range(i, n):\n            nums[j], nums[j-i+1] = nums[j-i+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    for i in range(len(nums)):\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Traverse the list from 0 to n-1\n    for start in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = start\n        for end in range(start+1, n):\n            if nums[end] > nums[max_idx]:\n                max_idx = end\n        # Swap the maximum element with the first element\n        nums[start], nums[max_idx] = nums[max_idx], nums[start]\n        # Reverse the remaining part of the list\n        for end in range(start+1, n):\n            nums[end], nums[start] = nums[start], nums[end]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Pancake Sort algorithm.\n\n    This algorithm is an efficient sorting algorithm that sorts a list of\n    n elements by repeatedly swapping adjacent elements if they are in the\n    wrong order. The algorithm starts by sorting the first element in the\n    list, then sorting the second element, and so on, until the entire\n    list is sorted. The time complexity of this algorithm is O(n^2),\n    where n is the number of elements in the list.\n\n    Args:\n        nums: A list of integers to be sorted.\n\n    Returns:\n        A list of integers that is sorted in ascending order.\n    \"\"\"\n\n    # Initialize the maximum swaps variable and the start index variable.\n    max_swaps = 0\n    start = 0\n\n    # Loop through the list and find the maximum swaps required to sort the list.\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            max_swaps += 1\n            # Swap the elements if the maximum swaps have not been exceeded.\n            if max_swaps!= i:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n\n    # Return the sorted list.\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for item in Input: \n        if type(item) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initialize max difference variable to zero\n    max_diff = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Find the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n            \n            # Update the max difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return None\n    else:\n        x = (-b + (n//a))//b\n        y = (-b - (n//a))//b\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            x = -n // b\n            y = 0\n    elif b == 0:\n        y = -n // a\n        x = 0\n    else:\n        d = b ** 2 - 4 * a * n\n        if d < 0:\n            return None\n        x1 = (-b + d ** 0.5) // (2 * a)\n        x2 = (-b - d ** 0.5) // (2 * a)\n        y1 = a * x1 + b\n        y2 = a * x2 + b\n        if x1 == x2:\n            return None\n        return (x1, y1) if x1 < x2 else (x2, y2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Using math module for square root calculation\n    import math\n    \n    # Finding discriminant\n    discriminant = b**2 - 4*a*n\n    \n    # If discriminant is negative, then no real roots exist\n    if discriminant < 0:\n        return None\n    \n    # If discriminant is zero, then only one real root exists\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return (x,)\n    \n    # If discriminant is positive, then two real roots exist\n    else:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the input values are valid\n    if a == 0 or b == 0:\n        return None\n    \n    # Check if the equation is solvable\n    if b == 1:\n        return (n // a, 0)\n    \n    # Use Euclid's algorithm to find the solution\n    x1 = 0\n    y1 = 1\n    x2 = 1\n    y2 = 0\n    \n    while True:\n        x3 = x1 - (n // a) * x2\n        y3 = y1 - (n // a) * y2\n        x1 = x2\n        y1 = y2\n        x2 = x3\n        y2 = y3\n        \n        if x3 * x3 + y3 * y3 == n:\n            return (x1, y1)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if the equation is a quadratic equation\n    if a * b!= 0:\n        # If it's not a quadratic equation, return None\n        return None\n    \n    # Compute the discriminant\n    discriminant = b**2 - 4 * a * n\n    \n    # Check if the discriminant is less than 0\n    if discriminant < 0:\n        # If it's less than 0, return None\n        return None\n    \n    # Compute the two real roots of the equation\n    root1 = (-b + discriminant**0.5) / (2 * a)\n    root2 = (-b - discriminant**0.5) / (2 * a)\n    \n    # Check if the roots are real numbers\n    if root1.is_real and root2.is_real:\n        # If they are, return them as a tuple\n        return (int(root1), int(root2))\n    else:\n        # If not, return None\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y variables\n    x = 0\n    y = 0\n\n    # Loop through possible values of x and y\n    for i in range(1, n+1):\n        if a*i + b*n == n:\n            x = i\n            break\n\n    # If no solution exists, return None\n    if x == 0:\n        return None\n\n    # Loop through possible values of y\n    for j in range(1, n+1):\n        if a*n + b*j == n:\n            y = j\n            break\n\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    This function takes three arguments, a, b, and n. \n    It first checks if a and b are both positive and n is a multiple of both a and b.\n    If both conditions are satisfied, it computes the values of x and y that satisfy the given equation,\n    and returns a tuple of (x, y). If no solution exists, the function returns None.\n    '''\n    \n    if a <= 0 or b <= 0 or n % (a*b)!= 0:\n        return None\n\n    x = int(round((b**2 - 4*a*n) / (2*a)))\n    y = int(round((b**2 - 4*a*n) / (2*a)))\n\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n//a, n//b-1):\n        if x*a + x*b == n:\n            return (x, x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # create a dictionary to store the solutions\n    solutions = {}\n\n    # iterate over all values of x between -b and b\n    for x in range(-b, b+1):\n        # iterate over all values of y between -b and b\n        for y in range(-b, b+1):\n            # check if the current solution satisfies the given condition\n            if a*x + b*y == n:\n                # if yes, add it to the dictionary\n                solutions[(x, y)] = True\n\n    # check if there is at least one solution\n    if len(solutions) > 0:\n        # if there are, return the first solution\n        return next(iter(solutions))\n    else:\n        # if there are not, return None\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    return (int(x1), int(x2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert the lists to sets to remove duplicates\n    list1 = set(list1)\n    list2 = set(list2)\n\n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is present in the second list\n        if element in list2:\n            # If it is, remove it from the list\n            list1.remove(element)\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Convert the two lists into sets to remove duplicates and then back into lists\n    list1 = list(set(list1) - set(list2))\n    list2 = list(set(list2) - set(list1))\n    # Return the two lists with the elements removed\n    return list1, list2\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with all the elements from list1 that are not present in list2.\n    \"\"\"\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a set to store the elements present in list2\n    set2 = set(list2)\n    # loop through each element in list1\n    for item in list1:\n        # check if the element is present in set2\n        if item in set2:\n            # if it is, remove it from list1\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # create a set of elements in list2\n    set2 = set(list2)\n    # create a new list without elements present in list1 and list2\n    new_list = [x for x in list1 if x not in set2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    series = []\n    x = 1\n    while n - x >= 0:\n        series.append(n - 2*x)\n        x += 1\n    return sum(series)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += (n - 2 * i)\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # Calculate the sum for even values of n\n    if n % 2 == 0:\n        sum_even = (n + 2) // 2 * (n + 2) // 4\n        return sum_even\n\n    # Calculate the sum for odd values of n\n    else:\n        sum_odd = (n + 1) // 2 * (n + 3) // 4\n        return sum_odd"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Check if n is even or odd\n    if n % 2 == 0:\n        # n is even\n        # Calculate the sum of the even series\n        for i in range(n // 2):\n            sum += n - 2*i\n    \n    else:\n        # n is odd\n        # Calculate the sum of the odd series\n        for i in range(n // 2):\n            sum += n - 2*i\n    \n    # Return the sum of the series\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return (n * (n + 1) // 2) - sum([n - 2*i for i in range(n // 2)])"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(i * (n - 2 * i) for i in range(n // 2 + 1))"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += (n - 2*i)\n    return total"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculating the value of pi\n    pi_value = pi\n    # calculating the value of tan(30)\n    tan_30_value = tan(30*pi/180)\n    # calculating the area of the polygon\n    area = s * l * tan_30_value\n    # returning the calculated area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2)*(l**2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(2*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*(s-l)**0.5)*l\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s/l)**2\n    return area * (s/2)**2\n"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the length of one side of the polygon\n    side_length = s / l\n    \n    # Calculate the area of the polygon using Heron's formula\n    area = (s * (s - side_length) * tan(pi / l)) / 3\n    \n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # finding the set of divisors of n\n    divs = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.add(i)\n            if i!= n//i:\n                divs.add(n//i)\n    # calculating the sum of divisors\n    div_sum = sum(divs)\n    # checking if the sum of divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes two integers as input and checks if their sum of their divisors is equal to the input.\n    If they are, it returns True. Otherwise, it returns False.\n    '''\n    # Function to find the sum of divisors of a number\n    def sum_divisors(num):\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n    \n    # Finding the sum of divisors of n1 and n2\n    n1_div_sum = sum_divisors(n)\n    n2_div_sum = sum_divisors(n2)\n    \n    # Checking if the sum of divisors is equal to the input\n    if n1_div_sum == input:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of divisors of n\n    div_sum = sum(set(divisor_sum(i) for i in range(1, n+1)))\n    # Check if the sum of divisors of n and the sum of divisors of n-1 are the same\n    if div_sum == sum(divisor_sum(n-1)):\n        return True\n    else:\n        return False\n\ndef divisor_sum(n):\n    '''\n    Calculate the sum of divisors of n using the following formula:\n    sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    '''\n    return sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_sum(n): \n    '''\n    This function takes an integer n as input and returns True if the sum of the divisors of n is the same as n, else False.\n    '''\n    if n == 1: \n        return False \n    divisors = [] \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisors.append(i) \n            if i!= n // i: \n                divisors.append(n // i) \n    divisors.sort() \n    if divisors[-1]!= n: \n        return False \n    return True "
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Calculate the sum of the divisors of n using the math.factorial function\n    divisor_sum = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n\n    # Check if the divisor sum is equal to n\n    if divisor_sum == n:\n        print(f\"{n} has the same divisor sum as {divisor_sum}.\")\n    else:\n        print(f\"{n} does not have the same divisor sum as {divisor_sum}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Check if n is a prime number \n    if n < 2: \n        return False\n\n    # Calculate the sum of the divisors of n \n    divisor_sum = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisor_sum += i\n            if i!= n // i: \n                divisor_sum += n // i\n\n    # Check if the sum of the divisors of n is equal to n \n    return divisor_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Loop through all the numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a divisor of n\n        if n % i == 0:\n            # Check if the sum of the divisors of n and i are the same or not\n            if i == n//i:\n                return True\n    # If no divisor is found, return False\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_of_divisors(n):\n        \"\"\"\n        Helper function to calculate the sum of the divisors of a number n.\n        \"\"\"\n        divisors = []\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors.append(i)\n                if i!= n//i:\n                    divisors.append(n//i)\n        return sum(divisors)\n\n    div1 = sum_of_divisors(n)\n    div2 = sum_of_divisors(n+1)\n    return div1 == div2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Find the divisors of n using the built-in function\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n\n    # Calculate the sum of the divisors using the built-in function\n    divisor_sum = sum(divisors)\n\n    # Check if the sum of the divisors is the same as n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # function to get all the divisors of a number\n    def get_divisors(num):\n        div_list = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                div_list.append(i)\n        return div_list\n\n    # function to check if the sum of the divisors of two numbers are the same\n    def is_same_divisor(num1, num2):\n        div1 = get_divisors(num1)\n        div2 = get_divisors(num2)\n        if len(div1) == len(div2):\n            div1.sort()\n            div2.sort()\n            for i in range(len(div1)):\n                if div1[i]!= div2[i]:\n                    return False\n            return True\n        else:\n            return False\n\n    # test the function\n    num1 = int(input(\"Enter the first number: \"))\n    num2 = int(input(\"Enter the second number: \"))\n    if is_same_divisor(num1, num2):\n        print(f\"{num1} and {num2} have the same divisors.\")\n    else:\n        print(f\"{num1} and {num2} do not have the same divisors.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        for j in range(len(str1)):\n            if str1[j].lower() == alpha[i].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    \n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # iterate over each character in the string\n    for i in range(len(str1)):\n        \n        # check if the character is in the alphabet\n        if str1[i] in alphabet:\n            \n            # check if the character is at the same position in the string as in the alphabet\n            if str1[i] == alphabet[i]:\n                \n                count += 1\n                \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            pos = english_alphabet.index(char.lower())\n            result += 1\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in alphabet:\n        if char.lower() in str1.lower():\n            count += str1.lower().count(char.lower())\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Define a dictionary to store the count of characters at each position in the alphabet\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # Convert the character to lowercase and check if it's in the dictionary\n        if char.lower() in char_count:\n            \n            # Increment the count of the character at that position in the alphabet\n            char_count[char.lower()] += 1\n            \n        else:\n            \n            # Add the character to the dictionary and set its count to 1\n            char_count[char.lower()] = 1\n            \n    # Initialize a counter to keep track of the number of characters with the same position in the alphabet\n    same_position_count = 0\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # Convert the character to lowercase and check if it's in the dictionary\n        if char.lower() in char_count:\n            \n            # If the character at that position in the alphabet is the same as the current character, increment the counter\n            if char.lower() == str1[char_count[char.lower()]-1].lower():\n                same_position_count += 1\n            \n    # Return the number of characters with the same position in the alphabet\n    return same_position_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the input string to lowercase to ignore case\n    str1 = str1.lower()\n    # Initialize a dictionary to store the character position and its count\n    char_count = {}\n    # Loop through the input string and increment the count of characters at the current position\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # Loop through the dictionary and count the number of characters at the same position in the English alphabet\n    count = 0\n    for char in char_count:\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            count += char_count[char]\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the counts of characters\n    char_count = {}\n\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is a lowercase letter, add 1 to its count in the dictionary\n        if char.islower():\n            char_count[char] = char_count.get(char, 0) + 1\n\n    # Return the dictionary of counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to ignore the case\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n    \n    # Loop through each character in the string\n    for char in str1:\n        \n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] += 1\n    \n    # Return the dictionary containing the count of characters at each position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # Define the alphabet\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    # Initialize the count dictionary\n    count = {}\n    # Loop through the characters in the string\n    for char in str1:\n        # Convert the character to lowercase for case insensitivity\n        char = char.lower()\n        # If the character is in the alphabet and has a position in the string\n        if char in alphabet and char in str1:\n            # If the position has not been counted yet, add it to the count dictionary with a value of 1\n            if char not in count:\n                count[char] = 1\n            # Otherwise, increment the count of the character in the position\n            else:\n                count[char] += 1\n    # Return the count dictionary\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for char in str1:\n        if char.lower() in english_alphabet:\n            if english_alphabet.index(char.lower()) == english_alphabet.index(str1[count].lower()):\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    n = len(A)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] ^ A[j] == 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] % 2 == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    even_pairs = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] % 2 == 0 and A[j] % 2 == 0: \n                if A[i] ^ A[j] == 0: \n                    even_pairs += 1 \n    return even_pairs "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # convert n to power of 2\n    n = n | (n >> 1)  # add 2^0, 2^1, 2^2,... up to 2^30\n    n = n | (n >> 2)  # add 2^0, 2^1, 2^2, 2^3,... up to 2^62\n    n = n | (n >> 4)  # add 2^0, 2^1, 2^2, 2^3, 2^4,... up to 2^126\n    n = n | (n >> 8)  # add 2^0, 2^1, 2^2, 2^3, 2^4, 2^5,... up to 2^254\n    n = n | (n >> 16)  # add 2^0, 2^1, 2^2, 2^3, 2^4, 2^5, 2^6,... up to 2^510\n    n = n | (n >> 32)  # add 2^0, 2^1, 2^2, 2^3, 2^4, 2^5, 2^6, 2^7,... up to 2^1022\n    n += 1  # add 2^0\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the power of 2 to 1\n    power = 1\n    \n    # While power is less than or equal to n, increment the power\n    while power <= n:\n        power <<= 1\n    \n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize a variable to store the result\n    result = 1\n\n    # Loop until the result is greater than or equal to n\n    while result < n:\n        # Increment the result by 2\n        result *= 2\n\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize power of 2 to start with\n    power = 1\n\n    # Keep dividing by 2 until you reach the smallest power of 2 greater than or equal to n\n    while power < n:\n        power *= 2\n\n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize power variable to 1\n    power = 1\n    \n    # Iterate until power is greater than or equal to n\n    while power < n:\n        # Increment power by 2\n        power <<= 1\n    \n    # Return power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    This function finds the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    # Find the next power of 2 by repeatedly doubling the current number until we get a power of 2\n    while n & (n-1)!= 0:\n        n = n << 1\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Find the binary representation of n using the integer to binary conversion function\n    binary = bin(n)[2:]\n\n    # Find the number of leading zeros in binary representation\n    leading_zeros = binary.count('0')\n\n    # Calculate the smallest power of 2 greater than or equal to n using the binary representation and leading zeros\n    smallest_power_of_2 = 2 ** leading_zeros\n\n    return smallest_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n & (n - 1) == 0:\n        return 2 * n\n    else:\n        return 2 * (1 + next_power_of_2(n >> 1))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the largest power of 2 smaller than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    # if the number is already a power of 2, return it\n    if n & (n-1) == 0:\n        return n\n\n    # find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # return the power\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    \n    # iterate over the indices\n    for i in range(m, n+1):\n        # check if the index is within the list bounds\n        if i >= 0 and i < len(lst):\n            # add the value to the sum\n            sum += lst[i]\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    else:\n        # Calculate the sum of numbers within the range\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable to 0\n    sum_var = 0\n    # iterate through the list from index m to n\n    for i in range(m, n+1):\n        # add the value at index i to the sum variable\n        sum_var += list1[i]\n    # return the sum variable\n    return sum_var"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m > n:\n        return \"Error: The first index should be less than the second index.\"\n    else:\n        sum_of_list = 0\n        for i in range(m, n+1):\n            if i in list1:\n                sum_of_list += i\n        return sum_of_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = []\n    for i in range(m, n+1):\n        sum_list.append(list1[i-m])\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i < len(list1):\n            total += list1[i]\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Using the formula for the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a + 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the semi-perimeter\n    s = (5 * a) / 4\n    \n    # calculate the area of the pentagon\n    area = (5 * a**2) / (4 * math.tan(math.pi/5))\n    \n    # calculate the total length of the pentagon\n    total = 5 * area\n    \n    # calculate the perimeter\n    perimeter = 5 * s\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * 5) / 2\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (a**2 + a**2) / 5\n    return round(math.sqrt(s), 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the base of the pentagon\n    base = 5 * a * math.sin(math.pi / 5)\n\n    # calculate the number of equal sides\n    num_equal_sides = int(base / a)\n\n    # calculate the length of each side of the pentagon\n    side_length = a * math.sqrt(3) / 2\n\n    # calculate the perimeter of the pentagon\n    perimeter = 5 * num_equal_sides * side_length\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    This function takes the length of a side of a regular pentagon as input and returns the perimeter of the pentagon.\n    \"\"\"\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    std ='std'\n    for i in s:\n        if i == std:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        start = s.find('std', start)\n        if start == -1:\n            break\n        count += 1\n        start += 3  # jump over'std'\n\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        count += 1\n        s = s.replace('std', '', 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n    return all(x == types[0] for x in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # get the data type of the first element of the tuple\n    for element in test_tuple[1:]: # loop through the remaining elements in the tuple\n        if type(element)!= data_type: # if the current element has a different data type than the first element\n            return False # return False if any element has a different data type\n    return True # return True if all elements have the same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Check if all elements in the given tuple have the same data type.\n\n    Args:\n    - test_tuple (tuple): a tuple containing elements to check\n\n    Returns:\n    - bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    # Define a function to check if all elements have the same data type\n    def check_data_type(lst):\n        # Check if the first element is of a different data type than the rest of the elements\n        if not all(isinstance(x, type(lst[0])) for x in lst[1:]):\n            return False\n        else:\n            return True\n\n    # Get the first element of the tuple and check if it has the same data type as the rest of the elements\n    first_element_data_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if not isinstance(element, first_element_data_type):\n            return False\n\n    # Check if all elements have the same data type\n    return all(isinstance(x, first_element_data_type) for x in test_tuple)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_elem = test_tuple[0]\n    # Check if all elements of the tuple are of the same data type or not\n    for elem in test_tuple:\n        if not isinstance(elem, type(first_elem)):\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    \n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    \n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # initialize a counter and a count of occurrences of x\n    count = 0\n    occurrence = 0\n\n    # iterate through the array\n    for i in range(n):\n        # check if the current element is equal to x\n        if arr[i] == x:\n            # increment the count of occurrences of x\n            occurrence += 1\n\n            # if the occurrence count is equal to half of the length of the array, return True\n            if occurrence == n // 2:\n                return True\n\n    # if the loop completes without finding the element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # Count the number of occurrences of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # If the count is greater than n/2, return True\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize variables\n    count = 0\n    majority = None\n    \n    # Loop through array and count occurrences of element\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            \n        # If count reaches n/2, set majority and break loop\n        if count == n//2:\n            majority = x\n            break\n            \n    # Return True if majority is found, False otherwise\n    return (majority is not None)"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n // 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0: \n        count += n & 1 \n        n = n >> 1 \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0 \n    while n > 0: \n        if n & 1 == 1: \n            count += 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove odd index characters from a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:  # check if the index is even\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i, char in enumerate(string):\n        if i % 2 == 1:\n            new_string += char\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): The input string.\n\n    Returns:\n        str: The resulting string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters with odd index values from a given string.\n    \"\"\"\n    return \"\".join(str[i] for i in range(len(str)) if i % 2!= 0)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert the string to a list\n    lst = list(str)\n    # Use a list comprehension to create a new list containing only the even indices of the original list\n    result = [lst[i] for i in range(len(lst)) if i % 2 == 0]\n    # Convert the new list back to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns a new string with all the characters\n    with odd index values removed.\n\n    :param str: The input string.\n    :return: A new string with all the odd index characters removed.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a \n        else: \n            return c \n    else: \n        if b < c: \n            return b \n        else: \n            return c \n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    \"\"\"\n    This function takes in three numbers as arguments and returns their minimum.\n    \"\"\"\n    return min(a,b,c)\n"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit_array = [int(x) for x in bin(n)[2:]]\n    unset_bits = 0\n    for i in range(l, r+1):\n        if bit_array[i] == 0:\n            unset_bits |= 1 << i\n    return unset_bits == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    elif (n & (1 << l)) == 0 and (n & (1 << r)) == 0:\n        return all_Bits_Set_In_The_Given_Range(n >> 1, l + 1, r)\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a boolean variable'result' to True\n    result = True\n    # loop through all the bits in the range [l,r]\n    for i in range(l, r+1):\n        # check if the ith bit is set to 1\n        if (n & (1 << i))!= 0:\n            # if it's set to 1, the result is False\n            result = False\n            # break out of the loop\n            break\n    # return the result\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r + 1):\n        # Check if all the bits are set to 1 or 0 in the current number\n        if (n & (1 << i))!= (1 << i):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    # Calculate the number of unset bits in the range from l to r\n    for i in range(l, r+1):\n        count += n - 1 - i\n    # Check whether all the bits are unset or not\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Get the binary representation of the given number n\n    binary_n = bin(n)[2:]\n\n    # Check if all bits in the given range are set\n    for i in range(l, r+1):\n        if binary_n[i] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Find the number of bits set in the range [l,r]\n    set_bits = bin(r-l+1).count('1')\n    # Count the number of bits in the given number n\n    num_bits = len(bin(n)[2:])\n    # If the number of set bits is equal to the number of bits in n, then all the bits are set in the range [l,r]\n    return set_bits == num_bits"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize variables for left and right indices\n    left = l\n    right = r\n\n    # Initialize variable to store count of unset bits in the range\n    count = 0\n\n    # Loop while both left and right indices are less than n\n    while left < n and right < n:\n\n        # Check if the difference between the left and right indices is less than 2^31\n        if right - left < (1 << 31):\n\n            # Find the least significant bit set in the range\n            bit = left + (1 << 31)\n\n            # If the least significant bit is not set, increment the count\n            if bit & n!= bit:\n                count += 1\n\n            # Move the right index to the next bit that is set\n            right = bit\n\n        # If the difference between the left and right indices is greater than or equal to 2^31,\n        # then there are no unset bits in the range\n        else:\n            break\n\n    # Return the count of unset bits in the range\n    return count"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Check if the range is valid or not\n    if l > r:\n        print(\"Invalid range\")\n        return\n\n    # Initialize a variable to keep track of the count of unset bits\n    count = 0\n\n    # Iterate through all the bits in the range\n    for i in range(l, r+1):\n\n        # Check if the i-th bit is set or not\n        if n & (1<<i) == 0:\n            count += 1\n\n        # If all the bits are set, return True\n        if count == 0:\n            return True\n\n    # If the loop completes without returning True, all the bits are unset\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments:\n    n: An integer value representing the number of bits.\n    l: An integer value representing the lower bound of the range.\n    r: An integer value representing the upper bound of the range.\n\n    This function returns True if all the bits are set in the given range, and False otherwise.\n    '''\n    if n == 0:  # base case: all bits are set\n        return True\n    elif n == 1:  # base case: all bits are unset\n        return False\n    else:\n        return (all_Bits_Set_In_The_Given_Range(n-1, l, r) and ((r-l+1) >> n) >= 1)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # create two empty lists for negative and positive elements respectively\n    neg_arr = []\n    pos_arr = []\n    # loop through the input array\n    for num in arr:\n        # check if the number is negative\n        if num < 0:\n            # add the number to the negative array\n            neg_arr.append(num)\n        else:\n            # add the number to the positive array\n            pos_arr.append(num)\n    # loop through the negative array and append it to the beginning of the positive array\n    for num in neg_arr:\n        # check if there are enough elements in the positive array to accommodate the number\n        if len(pos_arr) < n:\n            # add the number to the positive array\n            pos_arr.append(num)\n        else:\n            # find the index of the number in the positive array\n            pos_index = pos_arr.index(num)\n            # add the number to the positive array starting from the index where the number is to be inserted\n            pos_arr.insert(pos_index, num)\n            # remove the number from the negative array\n            neg_arr.remove(num)\n    # return the modified positive array\n    return pos_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables for positive and negative indices\n    pos = 0\n    neg = n\n    \n    # Traverse the array from left to right\n    for i in range(n):\n        \n        # If the current element is positive, increment positive index\n        if arr[i] >= 0:\n            pos += 1\n            arr[i], arr[pos] = arr[pos], arr[i]\n        \n        # If the current element is negative, increment negative index\n        else:\n            neg += 1\n            arr[i], arr[neg] = arr[neg], arr[i]\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n\n    def quick_sort(arr, low, high):\n        if low < high:\n            pi = partition(arr, low, high)\n            quick_sort(arr, low, pi - 1)\n            quick_sort(arr, pi + 1, high)\n\n    def find_pivot_index(arr, low, high):\n        pivot_index = (low + high) // 2\n        if arr[pivot_index] < 0:\n            return pivot_index\n        elif arr[low] < 0:\n            return find_pivot_index(arr, low, pivot_index - 1)\n        else:\n            return find_pivot_index(arr, pivot_index + 1, high)\n\n    quick_sort(arr, 0, n - 1)\n    pivot_index = find_pivot_index(arr, 0, n - 1)\n    for i in range(n):\n        if i < pivot_index:\n            arr[i], arr[i + n] = arr[i + n], arr[i]\n        elif i == pivot_index:\n            arr[i], arr[i + n] = arr[i + n], arr[i]\n        else:\n            arr[i], arr[i + n] = arr[i], arr[i + n]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, one for positive elements and one for negative elements\n    pos_ptr = 0\n    neg_ptr = 0\n    # While there are still positive elements left\n    while pos_ptr < n:\n        # If the current element is positive\n        if arr[pos_ptr] > 0:\n            # Move the positive pointer to the next position\n            pos_ptr += 1\n        # If the current element is negative\n        else:\n            # If there are still negative elements left\n            if neg_ptr < n:\n                # If the current element is larger than the next negative element\n                if arr[pos_ptr] > arr[neg_ptr]:\n                    # Swap the current and next negative elements\n                    arr[pos_ptr], arr[neg_ptr] = arr[neg_ptr], arr[pos_ptr]\n                    # Increment the negative pointer\n                    neg_ptr += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    neg.sort()\n    pos.sort()\n    i = 0\n    j = n\n    while i < n and j < len(arr):\n        arr[i] = neg[0] if neg else pos[0]\n        neg.pop(0)\n        pos.pop(0)\n        i += 1\n        j += 1\n    for i in range(n, len(arr)):\n        if i - n < 0 or arr[i - n] >= 0:\n            arr[i] = neg[0] if neg else pos[0]\n            neg.pop(0)\n            pos.pop(0)\n        else:\n            arr[i] = pos[0]\n            pos.pop(0)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = [num for num in arr[:n] if num < 0]\n    pos = [num for num in arr[:n] if num >= 0]\n    neg.extend(pos)\n    return neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize negative and positive elements\n    negative = []\n    positive = []\n    \n    # Loop through the array\n    for element in arr:\n        # Check if the element is negative\n        if element < 0:\n            negative.append(element)\n        else:\n            positive.append(element)\n    \n    # Combine negative and positive elements\n    combined = negative + positive\n    \n    # Re-arrange the combined elements\n    for i in range(n):\n        # If there are no negative elements, add a positive element\n        if len(negative) == 0:\n            combined.append(positive.pop(0))\n        # If there are more negative elements than positive elements, add a negative element\n        elif len(negative) > len(positive):\n            negative.pop(0)\n            combined.append(negative.pop(0))\n        # If there are more positive elements than negative elements, add a positive element\n        else:\n            combined.append(positive.pop(0))\n    \n    # Return the re-arranged array\n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Create two empty lists to hold the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the array and add the elements to the appropriate list\n    for i in range(n):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # Concatenate the negative and positive lists in the correct order\n    arr_rearranged = neg_list + pos_list\n    \n    # Return the re-arranged array\n    return arr_rearranged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    i = 0\n    j = n\n    while i < j:\n        if neg_count > 0:\n            arr[i] = -arr[i]\n            neg_count -= 1\n        else:\n            arr[j] = -arr[j]\n            pos_count -= 1\n            j -= 1\n        \n        i += 1\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = [x for x in arr[:n] if x < 0]\n    pos = [x for x in arr[:n] if x >= 0]\n    arr = neg + pos\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[i-n] = arr[i-n], arr[i]\n        else:\n            arr[i], arr[i-n] = arr[i], arr[i-n]\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    # use replace() method to replace all occurrences of blank spaces with the specified character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join([char if char.isspace() else char for char in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # use replace() method to replace blank spaces with the character\n    str2 = str1.replace(\" \", char)\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a heap of size n and insert the first n elements of the list into the heap\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # remove the smallest element from the heap and insert the next element into the heap\n    for i in range(n,len(list1)):\n        heapq.heappop(heap)\n        heapq.heappush(heap, list1[i])\n    \n    # return the heap as a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Convert list to a set to remove duplicates\n    list1 = set(list1)\n\n    # Sort the list in descending order using a min-heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of the first n elements of the list\n    min_heap = [heapq.heappop(heapq.merge(min_heap, sorted(list1[:n]))[1:]) for i in range(n)]\n    \n    # Return the min heap as the result\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n\n    min_heap = []\n    for _ in range(n):\n        heapq.heappush(min_heap, float('-inf'))\n    \n    # add the first n items to the min heap\n    for item in list1[:n]:\n        heapq.heappush(min_heap, -item)\n        \n    # add the remaining items to the heap\n    for item in list1[n:]:\n        heapq.heappush(min_heap, -item)\n        \n    # extract the n largest items from the heap\n    return [-item for item in heapq.nlargest(n, min_heap)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a max heap of size n\n    max_heap = []\n    for i in range(n):\n        heapq.heappush(max_heap, -list1[i])\n    \n    # extract the largest n items from the heap and append to a new list\n    res = []\n    while len(max_heap) > 0:\n        res.append(-heapq.heappop(max_heap))\n    \n    return res"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in lst:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<n:\n        return list1\n    else:\n        heap = list1[:n]\n        for i in list1[n:]:\n            if i>heap[0]:\n                heapq.heapreplace(heap,i)\n        return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #convert the list to a heap to get the n largest items\n    heap = list1[:n]\n    heapq.heapify(heap)\n    \n    #remove the smallest item from the heap and append it to the result list\n    for item in list1[n:]:\n        if item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,item)\n    \n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    \"\"\"\n    This function takes the radius and height of a cylinder as input and returns the lateral surface area of the cylinder.\n    \"\"\"\n    area = math.pi * r ** 2 * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return (2 * r * h) + (2 * r * h * 3)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)+(2*r*r)+(2*h*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h # 2*pi*r*h is the formula to find the lateral surface area of a cylinder"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * 3.14159 * r * r\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # formula for lateral surface area of a cylinder\n    lateral_surface_area = 2 * (r * h)\n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateralsurfacearea = 2*3.14159*r**2 + 2*3.14159*r*h + 2*3.14159*h**2\n    return lateralsurfacearea"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2*math.pi*r*h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # calculate the volume of the cube using the formula V = (l*l*l)\n    volume = l*l*l\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Iterate over all bits in the number\n    for i in range(32):\n        # If the i-th bit is even, set it to 1\n        if (n >> i) & 1 == 0:\n            n |= 1 << i\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Iterate through each bit of the given number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append a 1 to the result list\n        if int(bit) % 2 == 0:\n            result.append(1)\n        # Otherwise, append a 0 to the result list\n        else:\n            result.append(0)\n    # Convert the result list to an integer and return it\n    return int(''.join(str(bit) for bit in result), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if (n & (1 << i)) > 0:\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize a variable to store the sum of even bits\n    even_sum = 0\n\n    # iterate over the bits of the number and check if they are even or not\n    for bit in bin(n)[2:]: \n        # if the bit is even, add it to the sum\n        if bit == \"0\":\n            even_sum += int(bit)\n\n    # return the sum of even bits\n    return even_sum"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result variable\n    result = 0\n    # loop through each bit of the number\n    for i in range(32):\n        # set the bit to 1 if the number is even, otherwise set it to 0\n        if n & (1 << i):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # Loop through each bit of n\n    for i in range(31, -1, -1):\n        # If the current bit is even\n        if (n & (1 << i)):\n            # Append the current bit to the even_bits list\n            even_bits.append(i)\n\n    # Set all the even bits in the even_bits list to 1\n    for i in even_bits:\n        n |= (1 << i)\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to keep track of the number of set bits\n    count = 0\n    \n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]: \n        # If the bit is an even number, set it to 1\n        if int(bit) % 2 == 0: \n            count += 1\n    \n    # Check if there are an odd number of set bits\n    if count % 2 == 1: \n        return n\n    \n    # If there are an even number of set bits, set all the even bits to 1\n    else: \n        # Create a new binary representation of n\n        new_binary = bin(n)[2:]\n        \n        # Loop through each even bit in the binary representation and set it to 1\n        for i in range(0, len(new_binary), 2): \n            new_binary = new_binary[:i] + '1' + new_binary[i+2:]\n        \n        # Convert the binary representation back to an integer and return it\n        return int(new_binary, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store the even bits \n    even_bits = [] \n    # Loop through the bits of the given number \n    for i in range(32): \n        # Check if the i-th bit is even \n        if n & (1 << i): \n            # If it is, add it to the even_bits list \n            even_bits.append(i) \n    # Return the even_bits list as the result \n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n\n    # Initialize a new number with all even bits set to 1\n    result = n ^ (n & -n)\n\n    # Print the result\n    print(result)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the result\n    result = 0\n    # loop through each bit of the number and set the corresponding bit of the result to 1 if it is even\n    for i in range(32):\n        if n & (1 << i) == 0:\n            result |= (1 << i)\n    # return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary\n    result_dict = {}\n    \n    # iterate over the test list\n    for item in test_list:\n        # if the item is not already in the dictionary, add it with a count of 1\n        if item not in result_dict:\n            result_dict[item] = 1\n        # if the item is already in the dictionary, increment its count by 1\n        else:\n            result_dict[item] += 1\n            \n    # return the result dictionary\n    return result_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(item)\n\n    counter = Counter(unique_tuples)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # create an empty dictionary to store the result\n    result = {}\n    # iterate over the keys in the counter object\n    for key in counter.keys():\n        # if the key is not in the result dictionary, add it with a count of 0\n        if key not in result:\n            result[key] = 0\n        # increment the count of the key in the result dictionary\n        result[key] += counter[key]\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        else:\n            count_dict[tup] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    # initialize a counter variable\n    count = 0\n\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each character in the string starting from the current character\n        for j in range(i, len(str)):\n            # add 1 to the counter variable if the substring is not empty\n            if len(str[i:j+1]) > 0:\n                count += 1\n\n    # return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    n = len(str) \n    count = 0 \n  \n    for i in range(n): \n        for j in range(i+1, n+1): \n            count += 1\n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        \n        # If the character is a letter, check if it is a vowel\n        if str[i].lower() in ['a', 'e', 'i', 'o', 'u']:\n            \n            # If the character is a vowel, check if it is the first character in the substring\n            if i == 0 or str[i-1].lower() not in ['a', 'e', 'i', 'o', 'u']:\n                \n                # If it is the first character or it is not a vowel, add 1 to the count variable\n                count += 1\n    \n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    count = 0\n    n = len(string)\n    \n    # Generate all substrings of length 1\n    for i in range(n):\n        count += 1\n        \n    # Generate all substrings of length 2\n    for i in range(n - 1):\n        count += 1\n        count += 2\n        \n    # Generate all substrings of length 3 and above\n    for i in range(n - 2):\n        count += 1\n        count += 2\n        count += 3\n        \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    def is_valid_sequence(seq):\n        '''\n        Helper function that checks if the given sequence is valid.\n        '''\n        for i in range(len(seq) - 1):\n            if seq[i] >= seq[i + 1] * 2 and seq[i] <= m:\n                return True\n        return False\n\n    def count_valid_sequences(n, m):\n        '''\n        Main function that counts the number of valid sequences.\n        '''\n        valid_sequences = 0\n        i = 1\n        seq = [1]\n        while len(seq) < n:\n            if seq[-1] + i > m:\n                i = 1\n            else:\n                i += 1\n            seq.append(i)\n            if is_valid_sequence(seq):\n                valid_sequences += 1\n        return valid_sequences\n\n    return count_valid_sequences(n, m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(2, n+1):\n        total += get_number_of_sequences_of_length(m, n, i)\n    return total\n\ndef get_number_of_sequences_of_length(m, n, k):\n    count = 0\n    for i in range(k):\n        if i >= 2 and (m-i) % 2 == 0:\n            if (m-i) // 2 <= k-i:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Step 1: Generate all possible sequences of length n\n    sequences = []\n    for i in range(1, m+1):\n        for j in range(i, m+1):\n            sequences.append((i, j))\n    \n    # Step 2: Calculate the number of valid sequences\n    total_sequences = 0\n    for sequence in sequences:\n        if sequence[0] >= 2*sequence[1] <= m:\n            total_sequences += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, 2*m, -1):\n        if i >= 2*m:\n            count += 1\n        else:\n            count += m + (i-2*m) // m\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Helper function to check if a number is divisible by two\n    def is_divisible_by_two(num):\n        if num % 2 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by three\n    def is_divisible_by_three(num):\n        if num % 3 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by four\n    def is_divisible_by_four(num):\n        if num % 4 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 5\n    def is_divisible_by_five(num):\n        if num % 5 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 6\n    def is_divisible_by_six(num):\n        if num % 6 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 7\n    def is_divisible_by_seven(num):\n        if num % 7 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 8\n    def is_divisible_by_eight(num):\n        if num % 8 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 9\n    def is_divisible_by_nine(num):\n        if num % 9 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 10\n    def is_divisible_by_ten(num):\n        if num % 10 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 11\n    def is_divisible_by_eleven(num):\n        if num % 11 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 12\n    def is_divisible_by_twelve(num):\n        if num % 12 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 13\n    def is_divisible_by_thirteen(num):\n        if num % 13 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 14\n    def is_divisible_by_fourteen(num):\n        if num % 14 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 15\n    def is_divisible_by_fifteen(num):\n        if num % 15 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 16\n    def is_divisible_by_sixteen(num):\n        if num % 16 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 17\n    def is_divisible_by_seventeen(num):\n        if num % 17 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 18\n    def is_divisible_by_eighteen(num):\n        if num % 18 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 19\n    def is_divisible_by_nineteen(num):\n        if num % 19 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible by 20\n    def is_divisible_by_twenty(num):\n        if num % 20 == 0:\n            return True\n        else:\n            return False\n    \n    # Helper function to check if a number is divisible"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(1, m):\n        for j in range(2, n):\n            if i >= 2 * j <= m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Create a list to store the previous elements\n    prev_elements = [1]*(m+1)\n\n    # Initialize a counter for the number of sequences\n    sequence_count = 0\n\n    # Loop through all possible sequences of length n\n    for i in range(2,m+1): \n        # Calculate the sum of the previous n-1 elements and the last element\n        current_sum = sum(prev_elements[:i-1]) + prev_elements[i-1]\n\n        # Check if the current sum is greater than or equal to 2*n and less than or equal to m\n        if current_sum >= 2*n and current_sum <= m: \n            # Increment the sequence count\n            sequence_count += 1\n\n        # Update the previous elements for the next iteration\n        prev_elements = [x for x in prev_elements if x!= 1]\n        prev_elements.append(current_sum)\n\n    # Return the total number of sequences found\n    return sequence_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n):\n    # initialize the variable to store the total number of sequences\n    total_sequences = 0\n\n    # initialize the list to store the previous elements\n    prev_elems = []\n\n    # loop through the range of n+1 numbers\n    for i in range(n+1):\n        # calculate the current element\n        curr_elem = i * 2 + 1\n\n        # if the current element is less than or equal to m\n        if curr_elem <= m:\n            # if it's not in the list of previous elements\n            if curr_elem not in prev_elems:\n                # add it to the list of previous elements\n                prev_elems.append(curr_elem)\n                # increment the total number of sequences\n                total_sequences += 1\n\n        # if the current element is greater than m\n        elif curr_elem > m:\n            # loop through the list of previous elements and check if any of them is less than or equal to curr_elem-m\n            for prev_elem in prev_elems:\n                if prev_elem <= curr_elem-m:\n                    # if so, increment the total number of sequences\n                    total_sequences += 1\n                    # and break out of the inner loop\n                    break\n\n    # return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def count_sequences(start, length):\n        if length == n:\n            return 1\n        result = 0\n        for i in range(start, m):\n            if i >= 2 * prev_elem and i <= m:\n                result += count_sequences(i, length + 1)\n        return result\n\n    prev_elem = -1\n    return count_sequences(2, 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize variables\n    total_sequences = 0\n    current_sequence = []\n\n    # Iterate from 2 to m\n    for i in range(2,m+1):\n\n        # If the current element is less than or equal to twice the previous element\n        if i <= 2*current_sequence[-1]:\n\n            # Add the current element to the current sequence and update the total sequences\n            current_sequence.append(i)\n            total_sequences += 1\n\n        # If the current element is greater than or equal to twice the previous element\n        elif i > 2*current_sequence[-1]:\n\n            # Check if the current sequence is of length n\n            if len(current_sequence) == n:\n\n                # Add the current sequence to the total number of sequences\n                total_sequences += 1\n\n            # If the current sequence is not of length n, reset the current sequence\n            else:\n                current_sequence = [i]\n\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"The two lists are not of equal length.\")\n        return\n    \n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1,-1,-1):\n        list1[i] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    del list2[-1]\n    return list1, list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1] # use slicing to reverse the list of second list elements and assign it to the last element of first list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    total_char = 0\n    for char in str1:\n        total_char += 1\n    return total_char"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    # Start with the largest possible perfect square less than N\n    square = 1\n    while square**2 < N:\n        square += 1\n    \n    # If the square is still less than N, find the next square greater than N\n    if square**2 > N:\n        square += 1\n        while square**2 <= N:\n            square += 1\n    \n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    y = N * N\n    while y <= 2*x:\n        x = y\n        y = y * y\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Start with the largest perfect square less than N\n    p = int(math.sqrt(N)) * int(math.sqrt(N))\n    # Check if the largest perfect square is greater than N\n    if p > N:\n        p = int(math.sqrt(N)) * int(math.sqrt(N)) - 1\n        # Check if the largest perfect square is greater than N again\n        if p > N:\n            # If it is, set p to the smallest perfect square greater than N\n            p = 2\n            # Find the smallest perfect square greater than N\n            while True:\n                p += 1\n                if int(math.sqrt(p)) * int(math.sqrt(p)) > N:\n                    break\n    # Return the next perfect square greater than N\n    return p"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # Check if the square root is an integer\n    if sqrt_N == int(sqrt_N):\n        # If it is, increase the square root by 1\n        sqrt_N += 1\n    else:\n        # If it's not, increase the square root by 0.5\n        sqrt_N += 0.5\n    # Calculate the square of the square root\n    square_root_sq = sqrt_N * sqrt_N\n    # Return the next perfect square greater than N\n    return square_root_sq"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Use the formula for the next perfect square\n    sqrt_N = math.sqrt(N)\n    next_sqrt_N = sqrt_N + 1\n\n    # Check if the next perfect square is greater than the given number\n    while next_sqrt_N**2 <= N:\n        next_sqrt_N += 1\n\n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef next_Perfect_Square(N):  \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''  \n    # convert the given number to a float  \n    N = float(N)  \n    # check if the given number is positive  \n    if N <= 0:  \n        return \"Number must be positive\"  \n    # initialize the next perfect square to the first perfect square greater than the given number  \n    next_sq = math.ceil(N**0.5) ** 2  \n    # initialize a variable to store the difference between the given number and the next perfect square  \n    diff = next_sq - N  \n    # loop until the difference is less than or equal to 0  \n    while diff > 0:  \n        # increment the next perfect square by 1  \n        next_sq += 1  \n        # calculate the difference between the given number and the next perfect square  \n        diff = next_sq - N  \n    # return the next perfect square  \n    return next_sq  \n  \n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n\n    # Check if the square root is an integer\n    if math.floor(sqrt_N) == sqrt_N:\n        # If it is an integer, find the next perfect square\n        next_sqrt = math.floor(sqrt_N) ** 2\n    else:\n        # If it is not an integer, find the closest integer square root\n        next_sqrt = math.ceil(sqrt_N) ** 2\n\n    # Return the next perfect square\n    return next_sqrt\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # initialize variables for current and next perfect square\n    current_square = N\n    next_square = 0\n\n    # while current square is less than the square root of N\n    while current_square < math.sqrt(N):\n        # add 1 to current square and check if it is greater than N\n        if (current_square + 1) ** 2 > N:\n            # if it is greater, set next square to current square plus 1\n            next_square = current_square + 1\n            # break out of loop since we have found the next perfect square\n            break\n        # increment current square by 1\n        current_square += 1\n\n    # if we have not found the next perfect square, return the current square\n    if next_square == 0:\n        return current_square\n    else:\n        return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    for i in range(sqrt_N, 0, -1):\n        if i * i > N:\n            return i * i\n    return sqrt_N * sqrt_N\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # To check if a number is perfect square or not\n    def is_perfect_square(num):\n        return num == int(math.sqrt(num)) ** 2\n\n    # If the given number is already a perfect square, return the next number\n    if is_perfect_square(N):\n        N += 1\n        while not is_perfect_square(N):\n            N += 1\n        return N\n\n    # Find the square root of N\n    sqrt_N = math.sqrt(N)\n\n    # If the square root is odd, we add 1 to get the square root of N+1\n    if sqrt_N % 1!= 0:\n        sqrt_N += 1\n\n    # Find the next perfect square number greater than sqrt_N\n    next_N = int(sqrt_N ** 2)\n\n    # Check if the next perfect square number is greater than N\n    while next_N > N:\n        next_N += 1\n\n    return next_N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n    \n    # Mark the increasing subsequence\n    is_increasing = [True] * n\n    is_increasing[0] = True\n    \n    # Mark the decreasing subsequence\n    is_decreasing = [True] * n\n    is_decreasing[-1] = True\n    \n    # Traverse through the array and mark the subsequences\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1]:\n            is_increasing[i] = True\n        elif arr[i] < arr[i-1]:\n            is_decreasing[i] = True\n    \n    # Initialize the maximum sum\n    max_sum = float('-inf')\n    \n    # Calculate the maximum sum for each subsequence\n    for i in range(n):\n        for j in range(i+1):\n            if is_increasing[i] and is_decreasing[j]:\n                max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n  # dp[i] represents the maximum sum ending at index i\n\n    # Calculate the maximum sum for increasing subsequences\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = arr[i]\n\n    # Calculate the maximum sum for decreasing subsequences\n    for i in range(n - 2, -1, -1):\n        if arr[i] > arr[i + 1]:\n            dp[i] = max(dp[i], dp[i + 1] + arr[i])\n        else:\n            dp[i] = max(dp[i], arr[i])\n\n    # Find the maximum sum of all subsequences\n    max_sum_of_all = max(dp[0], dp[1])\n    return max_sum_of_all"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif n == 2:\n        if arr[0] < arr[1]:\n            return arr[0] + arr[1]\n        else:\n            return arr[1] + arr[0]\n    else:\n        max_sum_left = max_sum_right = arr[0]\n        for i in range(1, n):\n            max_sum_left = max(max_sum_left + arr[i], arr[i])\n            max_sum_right = max(max_sum_right + arr[i], arr[i])\n        return max(max_sum_left, max_sum_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    If the array is not bitonic, then it returns -1.\n    '''\n    if len(arr) < 3:\n        return -1\n    \n    # Find the maximum sum subarray ending at the i-th element.\n    max_sum_left = [float('-inf')] * len(arr)\n    max_sum_right = [float('-inf')] * len(arr)\n    max_sum_center = float('-inf')\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            # Even index.\n            max_sum_left[i] = max(max_sum_left[i-1] + arr[i], max_sum_center - arr[i])\n        else:\n            # Odd index.\n            max_sum_right[i] = max(max_sum_right[i-1] + arr[i], max_sum_center - arr[i])\n        \n        max_sum_center = max(max_sum_left[i], max_sum_right[i])\n    \n    # If all elements are negative, then the array is not bitonic.\n    if all(x < 0 for x in max_sum_left):\n        return -1\n    \n    # If all elements are positive, then the array is not bitonic.\n    if all(x > 0 for x in max_sum_right):\n        return -1\n    \n    return max(max_sum_left[-1], max_sum_right[-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return sum(arr)\n\n    # Find the indices of the first and last elements in each direction\n    idx_inc = [0]\n    idx_dec = [0]\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            idx_inc.append(i)\n        else:\n            idx_dec.append(i)\n\n    # Compute the maximum sum in each direction\n    max_sum_inc = max_sum_dec = float('-inf')\n    for i in range(n):\n        max_sum_inc = max(max_sum_inc, arr[idx_inc[i]:idx_dec[i]] + arr[idx_inc[i]:])\n        max_sum_dec = max(max_sum_dec, arr[idx_dec[i]:idx_inc[i]] + arr[:idx_dec[i]])\n\n    # Return the maximum sum\n    return max(max_sum_inc, max_sum_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_sum_prev = float('-inf')\n    max_sum_curr = float('-inf')\n    max_sum_temp = float('-inf')\n    \n    for i in range(len(arr)):\n        max_sum_temp = max(arr[i], arr[i] + max_sum_prev)\n        max_sum_prev = max_sum_curr\n        max_sum_curr = max_sum_temp\n    \n    return max_sum_curr"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if arr[1] >= arr[0]:\n        return arr[0] + max_sum(arr[1:])\n    else:\n        return arr[n-1] + max_sum(arr[:n-1])"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if i == 0 or arr[i] < arr[i-1]:\n            left_sum = 0\n        else:\n            left_sum = arr[i-1]\n\n        if i == n-1 or arr[i] > arr[i+1]:\n            right_sum = 0\n        else:\n            right_sum = arr[i+1]\n\n        current_sum = left_sum + right_sum\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty or not\n    if not arr:\n        return 0\n    \n    # Initialize variables for sum and maximum sum\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] < arr[i-1]:\n            # If increasing, add the current element to the sum\n            curr_sum += arr[i]\n        else:\n            # If decreasing, update the maximum sum and reset the current sum\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = arr[i]\n    \n    # Update the maximum sum with the final current sum\n    max_sum = max(max_sum, curr_sum)\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    # Initialize variables to store the max sum and its subsequence\n    max_so_far = float('-inf')\n    curr_sum = 0\n    curr_subseq = []\n\n    # Traverse the array and find the maximum sum of bitonic subsequences\n    for i in range(n):\n        if i > 0 and arr[i] > arr[i-1]:\n            # If the current element is greater than the previous element and\n            # the current element is increasing, add it to the subsequence and update the sum\n            curr_sum += arr[i]\n            curr_subseq.append(arr[i])\n        elif i > 0 and arr[i] < arr[i-1]:\n            # If the current element is less than the previous element and\n            # the current element is decreasing, subtract the previous element from the subsequence and update the sum\n            curr_sum -= arr[i-1]\n            curr_subseq.append(arr[i])\n        else:\n            # If the current element is equal to the previous element, add it to the subsequence and update the sum\n            curr_subseq.append(arr[i])\n            curr_sum += arr[i]\n\n        # If the current sum is greater than the max sum so far, update the max sum and subsequence\n        if curr_sum > max_so_far:\n            max_so_far = curr_sum\n            max_subseq = curr_subseq\n\n    return max_so_far, max_subseq"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize a tolerance level for the iteration\n    tolerance = 1e-12\n    # initialize the iteration count\n    count = 0\n    # initialize the last computed square root\n    last_sqrt = 1.0\n    # compute the square root by successively dividing by the last computed square root\n    while abs(last_sqrt**2 - number) >= tolerance:\n        # update the iteration count\n        count += 1\n        # compute the next square root using the babylonian method\n        next_sqrt = last_sqrt - ((number/last_sqrt)**2 - number/last_sqrt) / (2*(last_sqrt**(3/2)))\n        # update the last computed square root\n        last_sqrt = next_sqrt\n    # return the last computed square root\n    return last_sqrt"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    if number == 0:\n        return 0\n    elif number < 0:\n        return None\n\n    x = number / 2\n    y = number\n\n    while True:\n        old_x = x\n        old_y = y\n        x = (old_x + y) / 2\n        y = number / x\n        if abs(old_x - x) < 1e-10:\n            return x\n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = guess\n\n    while abs(guess*guess - number) > 0.00001:\n        previous_guess = guess\n        guess = (number / guess + guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0 # Initialize x with 1.0\n    epsilon = 0.0001 # Set the precision of the calculation\n\n    while abs(x**2 - number) > epsilon:\n        x = (x + number / x) / 2 # Update x with the new approximation\n\n    return x # Return the final approximation"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n\n    Args:\n        number (float): the number to compute the square root of\n\n    Returns:\n        float: the square root of the input number\n    \"\"\"\n    x_n = number\n    x_n_1 = 0.5 * (number + x_n / number)\n    n = 1\n    while abs(x_n - x_n_1) > 10e-10:\n        x_n = x_n_1\n        x_n_1 = 0.5 * (number + x_n / number)\n        n += 1\n    return x_n"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while True:\n        new_guess = (guess + number/guess) / 2\n        if abs(new_guess - guess) < 0.0001:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while True:\n        if guess * guess == number:\n            return guess\n        elif guess * guess > number:\n            guess -= (number / guess)\n        else:\n            guess += (number / guess)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2.0\n    while True:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2.0\n        if abs(guess - previous_guess) < 1e-12:\n            break\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Estimate the square root using babylonian method\n    low = 0\n    high = number\n    result = (low + high) / 2\n    while abs(result**2 - number) > 0.0001:\n        if result**2 > number:\n            high = result\n        else:\n            low = result\n        result = (low + high) / 2\n\n    # Return the estimated square root\n    return result"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # calculate the initial estimate\n    guess = number / 2\n\n    # calculate the squared error for each iteration\n    error = guess**2 - number\n\n    # iterate until the error is smaller than a tolerance value\n    tolerance = 0.0001\n    while abs(error) >= tolerance:\n        guess = (guess + number / guess) / 2\n        error = guess**2 - number\n\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize first column and diagonal\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the rest of the table\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return dp[n - 1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(s):\n    \"\"\"\n    Returns the length of the longest palindromic subsequence of the given string.\n    \"\"\"\n    n = len(s)\n    if n < 2:\n        return n\n\n    # Create a 2D table to store the lengths of LPS subsequences\n    lps_table = [[0] * n for _ in range(n)]\n\n    # Create the LPS table for all subsequences of length 1\n    for i in range(n):\n        if s[i] == s[i]:\n            lps_table[i][i] = 1\n\n    # Fill the LPS table for all subsequences of length greater than 1\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j]:\n                lps_table[i][j] = 2 + lps_table[i+1][j-1]\n\n    return lps_table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position in s\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize the first row and first column of the table\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill in the rest of the table using dynamic programming\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[i + 1][j])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(string)\n    if n == 0:\n        return 0\n\n    # Create a 2D table to store the lengths of the longest palindromic subsequences ending at each index\n    # Initialize the first row and column with 1\n    table = [[1] * n for _ in range(n)]\n\n    # Fill the table in a bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    n = len(s)\n    # create a table to store lengths of longest palindromic subsequences ending at each position in the string\n    l = [[0] * n for _ in range(n)]\n\n    # base cases\n    for i in range(n):\n        l[i][i] = 1\n\n    # fill the table in bottom-up manner\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j]:\n                l[i][j] = l[j][i-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[j][i])\n\n    # return the length of the longest palindromic subsequence ending at the last position in the string\n    return l[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store lengths of longest palindromic subsequence ending at each index\n    table = [[0 for j in range(n)] for i in range(n)]\n    # Initialize length of longest palindromic subsequence ending at index 0\n    table[0][0] = 1\n    # Fill in the rest of the table\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    # Return the length of the longest palindromic subsequence\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if not str:\n        return 0\n    n = len(str)\n    dp = [0] * n\n    max_len = 1\n    start = 0\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                dp[j] = dp[i] + 2\n                if dp[j] > max_len:\n                    start = i\n                    max_len = dp[j]\n            else:\n                dp[j] = max(dp[j-1], dp[j])\n            if max_len > n//2:\n                break\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # create a 2D table to store the length of palindromic subsequences of the given string\n    table = [[0] * n for _ in range(n)]\n    \n    # base case: if the string has only one character, its palindromic subsequence is of length 1\n    for i in range(n):\n        table[i][i] = 1\n        \n    # fill the table in bottom-up manner\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n    \n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += (2*i - 1)/(2*i)\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1 using the formula:\n    # H(n) = 1/2 * [1 + (1/n)]^n\n    # This formula is used to calculate the harmonic sum of a number of evenly spaced numbers from 1 to n.\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    # Divide the sum by n to get the harmonic sum of n.\n    harmonic_sum /= n\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + 1 / n) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (2*n - 1) / (n + 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    # Initialize the sum of harmonic numbers to zero\n    harmonic_sum = 0\n    # Calculate the harmonic sum of n-1\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n + (1/n-1)*harmonic_sum(n-1))\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 / n) + harmonic_sum(n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n\n    sum = 0.0\n    for i in range(1, n+1):\n        sum += 1.0 / i\n\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Initialize sum and count\n    sum_ = 0\n    count = 1\n    \n    # Calculate the harmonic sum\n    while count < n:\n        sum_ += 1/count\n        count += 1\n    \n    # Return the harmonic sum\n    return sum_"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            if num not in intersection:\n                intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        return intersection_array(array_nums2, array_nums1)\n    result = []\n    for num in array_nums1:\n        if num in array_nums2:\n            result.append(num)\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the numbers and their count in array_nums1 and array_nums2\n    dict_nums1 = {}\n    dict_nums2 = {}\n    for num in array_nums1:\n        if num in dict_nums1:\n            dict_nums1[num] += 1\n        else:\n            dict_nums1[num] = 1\n\n    for num in array_nums2:\n        if num in dict_nums2:\n            dict_nums2[num] += 1\n        else:\n            dict_nums2[num] = 1\n\n    # Find the common numbers in the two dictionaries\n    common_nums = []\n    for num in dict_nums1:\n        if num in dict_nums2 and dict_nums1[num] > 0 and dict_nums2[num] > 0:\n            common_nums.append(num)\n            dict_nums1[num] -= 1\n            dict_nums2[num] -= 1\n\n    # Return the common numbers in the sorted order\n    return sorted(common_nums)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Loop through array1\n    for num1 in array_nums1:\n        # If the element is in array2, add it to the set\n        if num1 in array_nums2:\n            common_set.add(num1)\n\n    # Convert the set to a list and return it\n    return list(common_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Returns the intersection of two arrays.\n    \"\"\"\n    if len(array_nums1) > len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n    i, j = 0, 0\n    result = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            if not result or result[-1]!= array_nums1[i]:\n                result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set of elements in array_nums1\n    set_nums1 = set(array_nums1)\n    # Create a set of elements in array_nums2\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set to store the unique elements of array_nums1\n    set_nums1 = set(array_nums1)\n    \n    # Create an empty set to store the intersection of the two sets\n    intersection = set()\n    \n    # Loop through each element in array_nums2 and add it to the intersection set if it's in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.add(num)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection by converting each array into a set and intersecting them\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    # Convert the set back into a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1 = set(array_nums1)\n    array_nums2 = set(array_nums2)\n    return list(array_nums1.intersection(array_nums2))"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through each element in the list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        list.insert(i, element)\n    # Return the updated list\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(lst, ele):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append(lst[i])\n        result.append(ele)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new empty list to store the modified elements\n    new_list = []\n    # loop through each element in the original list\n    for i in range(len(list)):\n        # insert the element before the current element\n        new_list.insert(0, element)\n        # insert the original element after the inserted element\n        new_list.insert(i+1, list[i])\n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    for i in range(1, len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        magnitude = cmath.sqrt(num.real**2 + num.imag**2)\n        angle = cmath.phase(num)\n        result.append((magnitude, angle))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # Print the polar coordinates\n        print(\"({:.2f}, {:.2f})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num1, num2) for num1, num2 in zip(*numbers.split(','))]\n    polar_coordinates = [cmath.polar(num) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        # Convert the complex number to polar coordinates\n        real = abs(number)\n        imag = cmath.phase(number)\n        polar_coordinates.append((real, imag))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        if isinstance(number, complex):\n            r = abs(number)\n            phi = cmath.phase(number)\n            print(f\"{number} in polar coordinates is {r} + {phi.imag}j\")\n        else:\n            print(f\"{number} is not a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"({real}, {imag})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        # Split the complex number into real and imaginary parts\n        real = num.real\n        imag = num.imag\n        \n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        \n        # Convert the angle from radians to degrees\n        angle = cmath.degrees(angle)\n        \n        # Print the polar coordinates of the complex number\n        print(f\"{real:.2f}+{imag:.2f}j, |{magnitude:.2f}| degrees\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real ** 2 + imag ** 2)\n        angle = cmath.phase(number)\n        polar_number = (modulus, angle)\n        result.append(polar_number)\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    This function takes in a list as an argument and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return []\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)-n+1):\n        combination = tuple(l[i:i+n])\n        result.append(combination)\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition\n    combs = combinations_with_replacement(l, n)\n\n    # Convert the combinations to a list of tuples\n    comb_tuples = [tuple(comb) for comb in combs]\n\n    return comb_tuples"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n\n    combinations = combinations_with_replacement(l, n)\n    # Convert the combinations into a list of tuples\n    result = list(combinations)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(1, len(l) + 1):\n        for combo in combinations_with_replacement(l, i):\n            combinations.append(tuple(combo))\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    '''\n    This function checks if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1[0] < test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] == test_tup2[0]:\n        return test_tup1 if test_tup1[1] > test_tup2[1] else test_tup2\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # unpacking the tuples\n    tup1, tup2 = test_tup1\n    \n    # getting the maximum value of each tuple\n    max_tup1 = max(tup1)\n    max_tup2 = max(tup2)\n    \n    # creating a new tuple with the maximum values\n    max_tup = (max_tup1, max_tup2)\n    \n    # returning the new tuple\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    if max_tup1 > max_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = max(test_tup1[0], test_tup2[0])\n    if max_value == test_tup1[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    for i in range(1, len(max_tup)):\n        max_value = max(max_value, max_tup[i])\n        if max_value == max_tup[i]:\n            max_tup = max_tup[:i]\n            break\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup2 > test_tup1:\n        return test_tup2\n    else:\n        return None"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # If both tuples are equal, return the first tuple\n    if test_tup1 == test_tup2:\n        return test_tup1\n    \n    # If the first tuple is greater, return the first tuple\n    elif test_tup1 > test_tup2:\n        return test_tup1\n    \n    # If the second tuple is greater, return the second tuple\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    max_val = float('-inf')\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            if elem > max_val:\n                max_val = elem\n                max_tuple = tup\n                break\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n\n    # Initialize the maximum values to the first element of each tuple\n    max1 = max(test_tup1[0], test_tup2[0])\n    max2 = max(test_tup1[1], test_tup2[1])\n    max3 = max(test_tup1[2], test_tup2[2])\n\n    # Find the maximum value among the maximum values\n    max_value = max(max1, max2, max3)\n\n    # Return the tuple with the maximum value\n    if max1 == max_value:\n        return test_tup1\n    elif max2 == max_value:\n        return test_tup2\n    else:\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Define the maximum value in each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    \n    # Define the maximum value in the combined tuple\n    max_val = max(max_val1, max_val2)\n    \n    # Return the maximum value in the combined tuple\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Args:\n        test_tup1: A tuple containing any number of elements.\n        test_tup2: A tuple containing any number of elements.\n\n    Returns:\n        A tuple containing the maximum elements from the input tuples.\n    \"\"\"\n    max_tup = (max(test_tup1[0], test_tup2[0]), max(test_tup1[1], test_tup2[1]), max(test_tup1[2], test_tup2[2]))\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a variable to store the nth newman prime number\n    newman_prime = 0\n\n    # Loop through all numbers from 2 to n-1 (excluding n)\n    for i in range(2, n):\n        # Check if i is a newman prime number\n        if is_newman_prime(i):\n            # If it is, add it to the newman_prime variable\n            newman_prime = i\n            break\n\n    return newman_prime\n\n\ndef is_newman_prime(n):\n    '''\n    Check if a number is a newman prime number.\n    '''\n\n    # Check if n is divisible by any number between 2 and sqrt(n)\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            print(i)\n    if n > 1:\n        print(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    i = 2\n    while True:\n        if is_prime(i) and is_prime(i * 2 - 1) and is_prime(i * 2 + 1):\n            if n == 1:\n                return i\n            n -= 1\n        i += 1\n\ndef is_prime(num):\n    \"\"\"\n    Checks if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nif __name__ == \"__main__\":\n    print(newman_prime(10))"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Helper function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Helper function to check if a number is a newman prime\n    def is_newman_prime(num):\n        if num < 11:\n            return False\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize counter variable\n    count = 0\n\n    # Iterate until we find the nth newman prime\n    while count < n:\n        if is_newman_prime(count) and is_prime(count):\n            count += 1\n        else:\n            count += 1\n\n    return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Create a list of integers from 2 to n\n    numbers = list(range(2, n+1))\n\n    # Initialize the prime numbers list with the first two numbers\n    primes = [2, 3]\n\n    # Iterate through the remaining numbers\n    for i in range(5, len(numbers), 2):\n        # Check if the number is a prime number\n        is_prime = True\n        for j in range(0, len(primes)):\n            if primes[j] > numbers[i]:\n                break\n            if numbers[i] % primes[j] == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(numbers[i])\n\n    # Return the nth prime number\n    return primes[n-2]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    else:\n        for i in range(2, n):\n            if all(i % j!= 0 for j in range(2, i)):\n                return i\n        return \"The nth newman\u2013shanks\u2013williams prime number is not found.\""
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    # initialize the count of prime numbers to 0\n    count = 0\n    # set the first newman prime number to 2\n    prime = 2\n    # loop through the desired number of primes\n    while count < n:\n        # check if the current prime number is prime\n        if all(i % prime!= 0 for i in range(2, prime)):\n            count += 1\n        # increment the prime number\n        prime += 1\n    # return the nth newman prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p1 = 2 # start with p_1 = 2\n    for i in range(2, n+1):\n        p2 = p1 + p1-2\n        if p2 > n:\n            break\n        p1 = p2\n    return p1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # First, find the nth newman prime number using trial division\n    def trial_division(n):\n        if n < 2:\n            return []\n        primes = []\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                primes.append(i)\n                if i!= n // i:\n                    primes.append(n // i)\n        return primes\n\n    # Next, find the nth newman prime number using the Sieve of Eratosthenes\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = []\n        sieve = [True] * (n + 1)\n        sieve[0] = sieve[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                primes.append(i)\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return primes\n\n    # Finally, find the nth newman prime number using the Sieve of Atkin\n    def sieve_of_atkin(n):\n        if n < 2:\n            return []\n        primes = []\n        sieve = [True] * (n + 1)\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                primes.append(i)\n                j = i * i\n                while j <= n:\n                    sieve[j] = False\n                    j += i\n        return primes\n\n    # Find the nth newman prime number using trial division\n    nth_prime = trial_division(n)\n\n    # If the nth prime is not found using trial division, find it using the Sieve of Eratosthenes\n    if nth_prime == []:\n        nth_prime = sieve_of_eratosthenes(n)\n\n    # If the nth prime is not found using the Sieve of Eratosthenes, find it using the Sieve of Atkin\n    if nth_prime == []:\n        nth_prime = sieve_of_atkin(n)\n\n    # Return the nth newman prime number\n    return nth_prime[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except ZeroDivisionError:\n            print(f\"Error: {test_tup2[i]} is zero. Cannot divide by {test_tup1[i]}\")\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tupples must have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: division by zero detected!\")\n        else:\n            result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples should be equal\")\n\n    # Perform element-wise division\n    result = [a / b for a, b in zip(test_tup1, test_tup2)]\n\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element in the two tuples and perform the element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Using element-wise division operator\n    result_tup = tuple([x / y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] / test_tup2[i]),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    result = []\n\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort() #sort the list in ascending order\n    mid = len(list1)//2 #calculate the middle index\n    return (list1[:mid], list1[mid:]) #return the two parts of the list"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Calculate the total length of the list\n    total_length = len(list1)\n    \n    # Check if the length of the list is less than L\n    if total_length < L:\n        return None\n    \n    # Calculate the length of the first part of the list\n    first_part_length = L\n    \n    # Create two empty lists to hold the first and second parts of the list\n    first_part = []\n    second_part = []\n    \n    # Loop through the list and add the elements to the appropriate lists\n    for i in range(total_length):\n        if i < first_part_length:\n            first_part.append(list1[i])\n        else:\n            second_part.append(list1[i])\n    \n    # Return the two parts of the list as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    # Calculate the number of elements in the first part\n    n = L * len(lst)\n    \n    # Slice the list into two parts\n    part1 = lst[:n]\n    part2 = lst[n:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    length = len(list1)\n    if length % 2!= 0:\n        raise ValueError(\"The length of the list must be even.\")\n    if L > length:\n        raise ValueError(\"L cannot be greater than the length of the list.\")\n    mid = length // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        return None\n    \n    # First part of the list\n    list1_first_part = list1[:L]\n    \n    # Second part of the list\n    list1_second_part = list1[L:]\n    \n    return (list1_first_part, list1_second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # Find the index where Lth element is present in the list\n    i = L - 1\n    while i < len(lst) and lst[i]!= L:\n        i += 1\n    if i == len(lst):\n        # Lth element not found in list\n        return None\n    # Find the index where Lth element is not present in the list\n    j = i + 1\n    while j < len(lst) and lst[j] == L:\n        j += 1\n    # Split the list into two parts and return the two parts as a tuple\n    return lst[:i], lst[j:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the second part of the list\n    second_part_length = len(list1) - L\n    # Split the list into two parts and return the two parts in a tuple\n    return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # check if L is a positive integer\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n\n    # calculate the length of the first part of the list\n    part1_length = L\n\n    # split the list into two parts\n    part1 = list1[:part1_length]\n    part2 = list1[part1_length:]\n\n    # return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * (h_age / 365)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age_years = 7 * h_age\n    return dog_age_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    days_in_year = 365\n    dog_years = 7 * days_in_year\n    return dog_years - h_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    # Check if step is a positive integer\n    if not isinstance(step, int) or step <= 0:\n        return \"Error: Step must be a positive integer.\"\n    \n    # Initialize an empty list to store the resulting lists\n    result = []\n    \n    # Split the list for every nth element\n    for i in range(0, len(S), step):\n        # Create a copy of the list for this split\n        sublist = S[i:i+step]\n        \n        # Append the sublist to the result list\n        result.append(sublist)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    n_elements = n // step\n    return [S[i:i+n_elements] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    n = step\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize empty list to store the resulting lists\n    result = []\n    \n    # iterate through the input list\n    for i in range(0, len(S), step):\n        # create a new sublist with the elements from the current index to the end of the list\n        sublist = S[i:]\n        # add the sublist to the result list\n        result.append(sublist)\n        \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        return []\n    elif step == 1:\n        return [S]\n    else:\n        S_split = []\n        for i in range(0, len(S), step):\n            S_split.append(S[i:i+step])\n        return S_split"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l*3"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the area of each face of the cube using the formula A = 2*l\n    A1 = 2 * l\n    A2 = 2 * l\n    A3 = 2 * l\n    A4 = 2 * l\n    A5 = 2 * l\n    A6 = 2 * l\n    \n    # Calculate the area of the cube using the formula A = A1 + A2 + A3 + A4 + A5 + A6\n    A = A1 + A2 + A3 + A4 + A5 + A6\n    \n    return A"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the area of the cube using the formula for the surface area of a cube\n    area = 6 * l * l\n    \n    # Return the area of the cube as the lateral surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_num = 1\n\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of i to the sum\n        sum += i**2\n\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_squares = 0\n    for i in range(2, n+1, 2):\n        sum_squares += i*i\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**2\n    return odd_sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*2 + 1\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid Input\"\n\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n\n    # Initialize the star number to 1\n    star_num = 1\n\n    # Loop through each digit in the number\n    for i in range(1, n + 1):\n        # Multiply the current star number by 10\n        star_num *= 10\n\n        # Add the current digit to the star number\n        star_num += i\n\n    # Return the final star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    # Function to find the nth star number\n    # n is an integer greater than or equal to 1\n    # returns a string representing the nth star number\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    else:\n        # Find the nth power of 2\n        nth_power_of_2 = 2**n\n        # Find the decimal value of the nth power of 2\n        decimal_value = nth_power_of_2 / 2.0\n        # Convert the decimal value to a string and return the string\n        return str(decimal_value)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the counter variable\n    counter = 1\n    # initialize the result variable\n    result = \"\"\n    # loop n times\n    for i in range(n):\n        # check if the result variable is empty\n        if result == \"\":\n            # add the first star to the result variable\n            result = \"*\"\n        else:\n            # add another star to the result variable\n            result = result + \"*\"\n    # return the result variable\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to hold the current value of n\n    current_num = n\n    \n    # Initialize a variable to hold the sum of previous values of n\n    running_sum = 0\n    \n    # Loop until current_num reaches 1\n    while current_num > 0:\n        \n        # Add the current value of n to the running_sum\n        running_sum += current_num\n        \n        # Divide current_num by 2 to halve its value\n        current_num = current_num // 2\n    \n    # Return the sum of previous values of n\n    return running_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the stars\n    stars = \"*\"\n    \n    # Initialize the counter\n    counter = 1\n    \n    # Calculate the total number of stars\n    total_stars = n * (2 * n - 1)\n    \n    # Print the first n stars\n    print(stars * n)\n    \n    # Loop through the remaining stars\n    while counter <= total_stars:\n        # Print the current number of stars\n        print(stars * counter)\n        counter += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return '1'\n    else:\n        num = '1'\n        for i in range(1, n+1):\n            num = str(int(num) * 2)\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    # Initialize variables\n    count = 1\n    number = 1\n\n    # Loop for n times\n    while count <= n:\n        # Print the current number\n        print(\"*\" * number)\n\n        # Increment the number\n        number += 1\n\n        # Increment the count\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize variables\n    stars = '*'\n    count = 1\n\n    # Loop until count reaches n\n    while count <= n:\n        print(stars)\n        stars += '*'\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return \"There is no star number 0.\"\n    else:\n        for i in range(1, n+1):\n            print(\"*\" * i)\n        print()\n        print(\"There are\", n, \"star numbers.\")"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        i = 1\n        while i <= n:\n            print(\"*\" * i)\n            i += 1"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    k = ord(k) # convert character to its ascii value\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character k as input and returns its ASCII value.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # Initialize variables to store the sum and index of even numbers\n    sum = 0\n    even_index = 0\n\n    # Loop through the list and check if the element is even and its index is even\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            # Add the even number at even index to the sum\n            sum += arr[i]\n            # Update the even index variable\n            even_index = i\n\n    # Return the sum and index of even numbers\n    return sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum_even += arr[i]\n                count += 1\n    return sum_even, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n    \n    if count > 0:\n        return sum\n    else:\n        return -1"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            count += 1\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    even_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_sum += i**(5)\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(n):\n        result += i**5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i * i * i * i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(2, n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    sum = 0\n    i = 2  # start from 2\n    \n    while i <= n:\n        if i**5 % 2 == 0:  # if i is even and raised to the power of 5 is even\n            sum += i  # add it to the sum\n        i += 1  # move to the next even number\n    \n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    This function takes an integer n and returns the sum of the first n even natural numbers raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_in_list in test_list:\n        rear_list.append(tuple_in_list[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Initialize an empty list to store the rear elements\n    rear_list = []\n    # Loop through each tuple in the input list\n    for tup in test_list:\n        # Append the rear element of the tuple to the rear list\n        rear_list.append(tup[-1])\n    # Return the rear list of tuples\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    return [x[1] for x in test_list[::-1]]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples have different lengths!\")\n        return\n\n    # Check if the tuples have the same elements\n    if test_tup1 == test_tup2:\n        print(\"The tuples have the same elements!\")\n        return\n\n    # Loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            print(test_tup1[i], \"is the same as\", test_tup2[i])\n        else:\n            print(test_tup1[i], \"-\", test_tup2[i], \"=\", test_tup1[i] - test_tup2[i])"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # loop through the tuples and subtract the elements with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    # return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must have the same length.\")\n        return\n    \n    # create a new tuple with the elements of test_tup1\n    new_tup = tuple(test_tup1)\n    \n    # iterate through the new tuple and subtract the elements of test_tup2\n    for i in range(len(test_tup1)):\n        new_tup[i] = new_tup[i] - test_tup2[i]\n    \n    # return the new tuple\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the two tuples must be the same.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            result.append(test_tup1[i])\n    \n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # Loop through the tuples and subtract the elements of the first tuple by the elements of the second tuple with the same index\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n\n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to zero\n    sum_even = 0\n\n    # Loop through the range of values from 0 to n\n    for i in range(n+1):\n\n        # Check if i is even\n        if i % 2 == 0:\n\n            # Calculate the binomial coefficient for i and n-i (i.e., i/(n-i))\n            coeff = math.comb(n, i)\n\n            # Add the even index binomial coefficient to the sum\n            sum_even += coeff\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # define the sum of even index binomial coefficients\n    sum = 0\n\n    # calculate the value of each even index binomial coefficient\n    for i in range(0, n, 2):\n        # calculate the factorial of i\n        fact = math.factorial(i)\n\n        # calculate the value of the binomial coefficient\n        bin_coeff = (fact*(n-i)) // i\n\n        # add the even index binomial coefficient to the sum\n        sum += bin_coeff\n\n    # return the sum of even index binomial coefficients\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        coeff_sum = 0\n        for i in range(2, n+1, 2):\n            coeff_sum += math.comb(n, i)\n        return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n    # initializing variables\n    i = 0\n    even_sum = 0\n    \n    # loop through the even indices\n    while i <= n:\n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # check if the coefficient is even\n        if coeff % 2 == 0:\n            even_sum += coeff\n        \n        # increment the index\n        i += 2\n        \n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum( n): \n\n    # Calculate the even index binomial coefficients for n\n    coeffs = [math.comb(n, i) for i in range(0, 2*n+1, 2)] \n\n    # Sum the even index binomial coefficients\n    sum_coeffs = sum(coeffs) \n\n    return sum_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_index = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_index += math.comb(n, i)\n    return sum_even_index"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    sum_even_coeff = 0\n    i = 0\n    j = 0\n\n    while i <= n:\n        while j <= i:\n            if j % 2 == 0:\n                sum_even_coeff += math.comb(i, j)\n            j += 1\n        i += 1\n        j = i\n\n    return sum_even_coeff"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    total = 0\n    for i in range(n+1):\n        for j in range(i):\n            total += math.comb(n,j)\n    return total"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 2:\n        raise ValueError(\"n should be a positive integer greater than or equal to 2\")\n    \n    # initialize the sum to 0\n    sum = 0\n    \n    # iterate through the even indices of the binomial coefficients\n    for i in range(1, n+1, 2):\n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        \n        # add the even binomial coefficient to the sum\n        sum += coeff\n    \n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = (1/3) * r ** 2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume using the formula V = (1/3) * \u03c0 * r\u00b2 * h\n    V = (1/3) * 3.14159265 * r * r * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (3/5)*pi*(r**2)*(h)\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14159 * (r**2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    area = 2 * 3.14159 * r * r  # Formula for calculating area of a cylinder\n    volume = area * h  # Formula for calculating volume of a cylinder\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h)/3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * 3.14159 * r**2 * h\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    if len(test_tup) < 2:\n        return \"The input tuple must have at least two elements.\"\n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the number of rows in the triangle\n    num_rows = int(n**0.5) + 1\n    # Initialize a variable to keep track of the sum of the rows\n    sum_rows = 1\n    # Initialize the sum of the decagonal numbers\n    decagonal_sum = 1\n    \n    # Loop through each row of the triangle\n    for i in range(1, num_rows):\n        # Calculate the sum of the current row\n        current_sum = sum_rows * (i + 1)\n        # Check if the current number is a decagonal number\n        if current_sum == n:\n            return True\n        # Add the sum of the current row to the sum of the decagonal numbers\n        decagonal_sum += current_sum\n        # Update the sum of the rows for the next iteration\n        sum_rows += 1\n    \n    # If the function has not returned by now, return False\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Please enter a positive integer.\"\n\n    # initialize the sum of decagonal numbers\n    decagonal_sum = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # calculate the decagonal number\n        decagonal_number = i*i*2\n\n        # add the decagonal number to the sum\n        decagonal_sum += decagonal_number\n\n    # check if the sum of decagonal numbers is equal to n\n    if decagonal_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the base and index of the decagonal sequence\n    base = 1\n    index = 1\n    \n    # Loop through the sequence and check if the nth number is present\n    for i in range(1, n+1):\n        if (base + index)**2 == 2*i:\n            return True\n        index += 1\n    \n    # If the number is not found, return False\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_num = 1\n    for i in range(n):\n        decagonal_num += (i+1) * (i+1)\n    return decagonal_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth decagonal number is:\", is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sequence of decagonal numbers up to n\n    decagonal_numbers = [1]\n    for i in range(2, n+1):\n        # Compute the next decagonal number by adding the previous one and the number of previous decagonal numbers\n        decagonal_numbers.append(sum(decagonal_numbers[-(2*i-1):]))\n    # Return the nth decagonal number\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_num_decagonal(n // 2)\n    else:\n        return is_num_decagonal((3 * n * n) // 2) + 1\n\nn = int(input(\"Enter a number: \"))\nprint(is_num_decagonal(n))"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n and returns True if it is a decagonal number and False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of two consecutive cubes of its digits.\n    '''\n    digits = [int(d) for d in str(n)]\n    if n == sum(d**3 for d in digits):\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(n):\n        decagonal += (i**2 + i + 1)\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1:\n        return None\n    else:\n        return 5 * (n - 1) + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Get the first decimal number in the decagonal sequence.\n    decimal_num = 1\n\n    # Calculate the square of the decimal number.\n    square_decimal_num = decimal_num ** 2\n\n    # Keep adding decimal numbers until we reach the nth decimal number.\n    while square_decimal_num <= n:\n        decimal_num += 1\n        square_decimal_num = decimal_num ** 2\n\n    return decimal_num"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, val in enumerate(dlist):\n        if val == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n\n    Parameters:\n    test_list (list): List of elements to be checked if unique.\n\n    Returns:\n    bool: True if all the elements of the list are unique, False otherwise.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # Iterate through each element in the list\n    for element in test_list:\n        # If the element already exists in the dictionary, it is a duplicate\n        if element in freq_dict:\n            return False\n        # Otherwise, add the element to the dictionary with a frequency of 1\n        else:\n            freq_dict[element] = 1\n\n    # If no duplicates are found, all elements are unique\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = list(set(test_list))\n    if len(test_list) == len(unique_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list as input and returns True if all the elements are unique and False otherwise.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the length of the two lists are equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    # Initialize an empty list to store the difference\n    difference = []\n    \n    # Loop through the elements of the two lists\n    for i in range(len(nums1)):\n        # Subtract the elements of the two lists and append the result to the difference list\n        difference.append(nums1[i] - nums2[i])\n    \n    # Return the difference list\n    return difference"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length\")\n    result = [a - b for a, b in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have same length\")\n        return\n    \n    sub_list = []\n    for i in range(len(nums1)):\n        sub_list.append(nums1[i] - nums2[i])\n    \n    return sub_list"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Parameters\n    ----------\n    nums1 : list of numbers\n    nums2 : list of numbers\n\n    Returns\n    -------\n    list of numbers\n        The difference between `nums1` and `nums2`.\n    \"\"\"\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the two lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the integer and update the frequency dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # loop through each digit in the integer and check if the frequency is less than or equal to the digit itself\n    for digit in str(n):\n        if freq[digit] > digit:\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n\n    for digit in freq:\n        if digit > 1:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    # Define a dictionary to store the frequency of each digit in the integer\n    digit_freq = {}\n\n    # Iterate through each digit of the integer and update the dictionary\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate through the dictionary and check whether the frequency of each digit is less than or equal to itself\n    for digit, freq in digit_freq.items():\n        if freq > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to themselves, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n    for digit in str(n):\n        freq = digit_freq[digit]\n        if freq > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Function to check frequency of each digit in the integer\n    def digit_frequency(num):\n        freq = {}\n        for digit in str(num):\n            if digit in freq:\n                freq[digit] += 1\n            else:\n                freq[digit] = 1\n        return freq\n\n    # Function to check frequency of each digit in the integer\n    def check_digit_frequency(freq, digit):\n        if digit in freq and freq[digit] > digit:\n            return False\n        else:\n            return True\n\n    # Find the digit that has the highest frequency\n    freq = digit_frequency(n)\n    highest_freq_digit = max(freq, key=freq.get)\n\n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in str(n):\n        if not check_digit_frequency(freq, digit):\n            return False\n\n    # If all digits have the same frequency, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes in an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate over each digit in the integer\n    for digit in str(n):\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # Increment the frequency of the digit\n            freq[digit] += 1\n        else:\n            # Add the digit to the dictionary with a frequency of 1\n            freq[digit] = 1\n\n    # Iterate over each digit in the integer again\n    for digit in str(n):\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > digit:\n            return False\n\n    # If all digits have a frequency of 1 or less, then return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n        \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # convert the integer to a string and split it into individual digits\n    digits = list(str(n))\n    \n    # initialize variables to keep track of the frequency of each digit in the integer\n    count = [0] * 10 # 0 to 9\n    freq = [0] * 10 # 0 to 9\n    \n    # loop through the digits and update the frequency and count of each digit\n    for d in digits:\n        freq[int(d)] += 1\n    \n    # loop through the digits again and check if the frequency of each digit is greater than or equal to its digit\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num = str(n)\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate over the characters in the string\n    for char in num:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Iterate over the keys in the dictionary and check if the frequency of the digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    # If all the digits have a frequency less than or equal to the digit itself, the function returns True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Create a list of digits and their frequency\n    digit_freq = {}\n    for digit in str(n):\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for digit in str(n):\n        if digit_freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    all_elements_equal = True\n    for item in list:\n        if item!= element:\n            all_elements_equal = False\n            break\n    return all_elements_equal"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(set(list)) == 1 and list[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n\n    # create a list to store the elements from the original list\n    original_list = list[:]\n\n    # loop through the original list and check if each element is equal to the given element\n    for item in original_list:\n        if item!= element:\n            # if an element is found that is not equal to the given element, return False\n            return False\n\n    # if all elements are equal to the given element, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0]!= element:\n        return False\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(lst, elem):\n    \"\"\"\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element,\n    and False otherwise.\n    \"\"\"\n    if len(lst)!= 1:\n        return all(x == elem for x in lst)\n    else:\n        return lst[0] == elem"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(item == element for item in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Check if all elements in a list are equal to a given element.\n\n    Args:\n    list (list): The list to check.\n    element (any): The element to compare against.\n\n    Returns:\n    bool: True if all elements in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(x == element for x in list)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0]!= element:\n        return False\n    return check_element(list[1:], element)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba{1}b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a\\w{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'(?<=a)(?=[bb]{2,3})')\n    return pattern.search(text)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r'ab{2,3}a'\n    result = re.search(pattern, text)\n    \n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r\"(?<=a)(?=(b{2,3}))\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'(?<=a)(?=b{2,3})')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the sum and max_sum variables to negative infinity\n    sum_of_array = max_sum = float('-inf')\n\n    # iterate through the array and add up the elements\n    for i in range(n):\n        sum_of_array += a[i]\n\n    # iterate through the array again and find the maximum sum of a contiguous array\n    for i in range(n - k + 1):\n        current_sum = sum_of_array\n        for j in range(k):\n            current_sum -= a[i + j]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    sum_list = []\n\n    # add first element to list\n    sum_list.append(a[0])\n\n    # iterate over the array\n    for i in range(1, n): \n        # add current element to list\n        sum_list.append(a[i])\n\n        # check if the sum is greater than max_sum\n        temp_sum = sum_list[-1]\n        for j in range(k-1): \n            temp_sum += sum_list[j]\n        if temp_sum > max_sum: \n            max_sum = temp_sum\n\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize the maximum sum and the maximum sum of a contiguous subarray\n    max_sum = float('-inf')\n    max_sum_subarray = 0\n\n    # Repeat the given array k times to obtain a modified array\n    modified_array = [x for x in a for i in range(k)]\n\n    # Calculate the sum of the modified array\n    total_sum = sum(modified_array)\n\n    # Traverse through the modified array and find the maximum sum of a contiguous subarray\n    for i in range(n):\n        current_sum = 0\n        current_sum_subarray = 0\n        for j in range(i, n):\n            current_sum += modified_array[j]\n            current_sum_subarray = max(current_sum_subarray, current_sum)\n\n        max_sum_subarray = max(max_sum_subarray, current_sum_subarray)\n\n    # Return the maximum sum of a contiguous subarray\n    return max_sum_subarray"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # Initialize the maximum sum of the original array\n    max_sum = a[0]\n    \n    # Repeat the given array k times\n    for i in range(k):\n        # Initialize the maximum sum of the repeated array\n        max_sum_repeated = a[0]\n        \n        # Iterate through the original array\n        for j in range(1, n):\n            # Add the current element to the repeated array\n            max_sum_repeated += a[j]\n            \n            # Update the maximum sum if the current sum is greater\n            if max_sum_repeated > max_sum:\n                max_sum = max_sum_repeated\n    \n    # Return the maximum sum of the original array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = []\n    for _ in range(k):\n        mod_arr.extend(a)\n    mod_arr.extend([0]*(n-k*2))\n    mod_arr.sort()\n    max_sum = 0\n    for i in range(k):\n        max_sum += mod_arr[i]\n    max_sum += max(mod_arr[k:n], key=sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # create the modified array\n    modified_array = a * k\n\n    # initialize variables for maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # loop through the modified array\n    for i in range(n):\n        current_sum = max(modified_array[i], current_sum + modified_array[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Append first n elements to end of array\n    a = a[:n] + [x for x in a[n:] for _ in range(k-1)]\n    # Calculate sum of modified array\n    modified_sum = max_sub_array_sum(a)\n    # Find maximum sum of a contiguous array using the same function\n    max_sum = max_sub_array_sum(a)\n    # Return the maximum of the two sums\n    return max(modified_sum, max_sum)\n\ndef max_sub_array_sum(a):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in the given array.\n    '''\n    if len(a) == 0:\n        return 0\n    max_so_far = max_ending_here = a[0]\n    for i in range(1, len(a)):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k > n:\n        return None\n    if k == 1:\n        return max(a)\n    if k == n:\n        return sum(a)\n    max_sum = float('-inf')\n    prev_sum = float('-inf')\n    for i in range(n):\n        curr_sum = max(a[i], prev_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n        prev_sum = curr_sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # initialize the maximum sum and the window sum\n    max_sum = float('-inf')\n    window_sum = 0\n\n    # loop through the array and calculate the window sum\n    for i in range(k):\n        window_sum += a[i]\n        # if the window sum is greater than the current maximum sum, update the maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n        # if the window sum becomes negative, remove the first element of the array\n        elif window_sum < 0:\n            window_sum -= a[i]\n\n    # loop through the remaining elements of the array\n    for i in range(k, n):\n        # calculate the difference between the current window sum and the maximum sum\n        diff = max_sum - window_sum\n        # if the difference is greater than 0, add the difference to the window sum\n        if diff > 0:\n            window_sum += diff\n        # if the window sum becomes negative, remove the first element of the array\n        elif window_sum < 0:\n            window_sum -= a[i-k]\n        # if the window sum becomes greater than the current maximum sum, update the maximum sum\n        if window_sum > max_sum:\n            max_sum = window_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a modified array by repeating the given array k times\n    modified_array = a * k\n\n    # Initialize the maximum subarray sum and the current subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Traverse through the modified array\n    for i in range(len(modified_array)):\n        # Add the current element to the current subarray sum\n        current_sum += modified_array[i]\n\n        # If the current subarray sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n        # If the current subarray sum is greater than the maximum subarray sum, update the maximum subarray sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0  \n    for i in range(2, n+1, 2):  \n        sum += i**2  \n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(2, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize sum of squares to 0\n    sum_squares = 0\n    \n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the number to the sum of squares\n        sum_squares += i**2\n        \n    # return the sum of squares\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(n):\n        # Calculate the square of the i-th even natural number\n        square = i**2\n        # Add the square of the i-th even natural number to the sum\n        sum += square\n\n    # Return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > max(max_length_list):\n            max_length_list = [len(i)]\n        elif len(i) == max(max_length_list):\n            max_length_list.append(len(i))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > max(max_length_list):\n            max_length_list = [len(sublist)]\n        elif len(sublist) == max(max_length_list):\n            max_length_list.append(len(sublist))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > max(max_length_list, default=0):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in list1:\n        if len(i) > len(max_list):\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    # Initialize an empty list to store the maximum length list\n    max_list = []\n    # Iterate through each element in the list\n    for element in list1:\n        # Check if the length of the current element is greater than the length of the max_list\n        if len(element) > len(max_list):\n            # If it is, update the max_list\n            max_list = element\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in list1:\n        if len(i) > len(max_length_list):\n            max_length_list = i\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Using dynamic programming approach\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j <= i and dp[i-j][j-1] == 0:\n                dp[i][j] = 1 + dp[i-j][j]\n                if i > 1:\n                    dp[i][j] += dp[i-1][j]\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize an empty dictionary to store the count of ways\n    ways = {}\n    # Initialize a variable to store the count of paintings\n    count = 0\n    # Initialize the count of colors used so far\n    used_colors = 0\n    \n    # Loop through all possible arrangements of colors\n    for i in range(n + 1):\n        # Check if the current color is allowed\n        if used_colors + 1 <= k:\n            # If it is, increment the count of colors used\n            used_colors += 1\n            # Check if the current color is the last color in the fence\n            if i == n:\n                # If it is, increment the count of paintings\n                count += 1\n            else:\n                # Otherwise, recursively call the function to count the number of ways\n                ways[used_colors] = count_no_of_ways(n, k)\n                # Add the count of ways for the current color to the count of paintings\n                count += ways[used_colors]\n        # If the current color is not allowed, decrement the count of colors used\n        else:\n            used_colors -= 1\n    \n    # Return the count of paintings\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            if ways[j] > 0 and (i - j) <= k:\n                ways[i] += ways[j]\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    ways = [[1 for _ in range(n)] for _ in range(k)]\n\n    for i in range(k):\n        ways[i][i] = 1\n\n    for l in range(2, n+1):\n        for i in range(k):\n            j = i + l - 1\n            if j < k:\n                ways[i][j] = ways[i][j] + ways[i+1][j]\n            else:\n                ways[i][j] = ways[i][j] + ways[i+1][j-1]\n\n    return ways[-1][-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def check_colors(colors, index):\n        if index == len(colors) - 1:\n            return 1\n        if colors[index] == colors[index + 1]:\n            return 0\n        return check_colors(colors, index + 1)\n    \n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if check_colors(list(range(1, k + 1)), j) > 0:\n                count += 1\n                \n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Create a boolean matrix to store whether a given post is painted with each color\n    # Initialize it to True for all posts and colors, since all posts are initially painted\n    fence_painted = [[True] * k for _ in range(n)]\n    \n    # Keep track of the number of ways of painting the fence for the current post and color\n    ways = 0\n    \n    # Iterate over all possible post arrangements, from 0 to n-1\n    for post_index in range(n):\n        # Iterate over all possible color arrangements, from 0 to k-1\n        for color_index in range(k):\n            # If the current post is not painted with the current color, count the number of ways to paint the fence\n            if not fence_painted[post_index][color_index]:\n                # If the current post is the last post, there are 2 ways: paint it with the current color and leave the next post empty\n                if post_index == n-1:\n                    ways += 2\n                else:\n                    # Otherwise, count the number of ways to paint the fence for the next post and the same color\n                    ways += count_no_of_ways(n-1, k)\n                    # If the current post is not the last post, and the next post is not painted with the same color, count the number of ways to paint the fence for the next post and a different color\n                    if not fence_painted[post_index+1][color_index]:\n                        ways += count_no_of_ways(n-1, k)\n    \n    # Return the total number of ways of painting the fence\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize the count to 1 since there is only 1 way to paint the fence with only one post and k colors\n    count = 1\n\n    # Iterate from 2 to n-1\n    for i in range(2, n):\n        # Calculate the number of ways to paint the fence such that at most 2 adjacent posts have the same color\n        ways = 0\n\n        # Iterate from 0 to i-1 to find all pairs of adjacent posts that have the same color\n        for j in range(0, i):\n            # If the adjacent post j has the same color as the post i, then the count can be incremented by 1\n            if j == 0 or fence[j] == fence[j-1]:\n                ways += 1\n\n        # Multiply the current count by the number of ways to paint the fence\n        count *= ways\n\n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize a dictionary to store the count of ways for each number of colors\n    ways = {}\n    \n    # Base case: if there are zero colors or one color, the only way is to paint all the posts with that color\n    if k == 0 or k == 1:\n        ways[0] = 1\n    \n    # Loop through the numbers from 2 to n\n    for i in range(2, n+1):\n        \n        # Initialize a variable to store the count of ways for the current number of colors\n        current_ways = 0\n        \n        # Loop through the numbers from 1 to i-1 (inclusive)\n        for j in range(1, i):\n            \n            # If the colors of adjacent posts are the same, increment the count of ways for the current number of colors\n            if (j-1) % k == 0:\n                current_ways += ways.get((j-1) // k, 0)\n                \n        # Store the count of ways for the current number of colors in the dictionary\n        ways[i] = current_ways\n        \n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(i, colors):\n        if i == 0:\n            return 1\n        if len(colors) == 1:\n            return 0\n        if colors[0] == colors[1]:\n            return 0\n        return count_ways(i-1, colors[1:]) + count_ways(i-2, colors[2:])\n\n    def backtrack(i, colors, ways, ans):\n        if i == 0:\n            if colors[0]!= colors[1]:\n                ans += ways\n            return\n        for color in colors:\n            backtrack(i-1, colors[1:], ways, ans)\n            backtrack(i-2, colors[2:], ways, ans)\n\n    ways = 0\n    colors = list(range(k))\n    backtrack(n, colors, ways, ways)\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    if n < 0 or k < 0:\n        return 0\n    if n == 0 or k == 0:\n        return 1\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    This function takes two integer inputs, n and m, and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Calculate the quotient using integer division\n    quotient = n // m\n\n    # If the remainder is non-zero, add 1 to the quotient\n    if n % m!= 0:\n        quotient += 1\n\n    # Round down the quotient to the nearest integer\n    quotient = int(quotient)\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    This function takes two integers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    \n    # calculate the quotient\n    quotient = n // m\n    \n    # return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # integer division\n    if (n % m) == 0:\n        return quotient\n    else:\n        return quotient + 1"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient using integer division\n    q = n // m\n\n    # round down the quotient to the nearest integer\n    if q * m < n:\n        q -= 1\n\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return \"Error: Division by zero is not allowed.\"\n    else:\n        return (n//m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # calculate the quotient and remove any decimal places\n    q = int(n / m)\n\n    return q"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter\n    s = (w**2 + h**2)**0.5\n    \n    # calculate the area of the triangle\n    area = math.sqrt(s*(w+h))\n    \n    # calculate the third side of the triangle\n    c = s/2\n    \n    return c, area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the second side\n    s = math.sqrt(w**2 + h**2)\n\n    # Calculate the length of the third side\n    t = w/2\n\n    # Return the third side of the right angled triangle\n    return t + s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return math.sqrt(w**2 + h**2)\n    elif w > h:\n        return math.sqrt(w**2 - h**2)\n    else:\n        return math.sqrt(h**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    # calculate the semi-perimeter\n    sp = 2 * w + 2 * h + math.sqrt(w ** 2 + h ** 2)\n    # calculate the third side\n    return math.sqrt(sp ** 2 - s ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2 + h**2)\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - (w/2)**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the length of the third side of a right angled triangle.\n    '''\n    # Find the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # Use trigonometry to find the hypotenuse\n    a = math.sqrt(s * (s - w) * (s - h))\n    # Return the length of the hypotenuse\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    # calculate the square root of the semi-perimeter\n    r = math.sqrt(s)\n    # calculate the third side of the triangle\n    third_side = math.sqrt(w ** 2 + h ** 2 - 2 * w * h)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle using Heron's formula.\n    \n    Parameters:\n    w (float): the length of the adjacent side\n    h (float): the length of the opposite side\n    \n    Returns:\n    float: the third side of the right angled triangle\n    '''\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Calculate the semi-perimeter of the square root of the sum of the squares of the other two sides\n    s_root = math.sqrt(s * (s - w) * (s - h))\n\n    # Calculate the third side of the right angled triangle\n    third_side = s_root + w\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    side = math.sqrt(area)\n    \n    return side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Use the built-in max() function to find the maximum value in the list\n    max_val = max(listval)\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    else:\n        max_num = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_num:\n                max_num = listval[i]\n        return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Error: Input is not a list!\")\n        return None\n    \n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list of values and returns the maximum value in the list.\n    If the list is empty or None, then it will raise a TypeError.\n    \"\"\"\n    if not lst:\n        raise TypeError(\"Input list is empty or None\")\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the maximum value in the list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxval = listval[0]\n        for i in range(1,len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_list.append(i)\n    return sum(divisors_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize the sum of divisors to zero\n    sum_divisors = 0\n    # iterate through the numbers from 1 to the square root of the given number\n    for i in range(1, int(number ** 0.5) + 1):\n        # if the number is divisible by the current number, add it to the sum of divisors\n        if number % i == 0:\n            sum_divisors += i\n    # return the sum of divisors\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    \n    while divisor <= number//2:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    return sum(divisors)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in each half\n    left_inv_count = get_Inv_Count(left)\n    right_inv_count = get_Inv_Count(right)\n\n    # Count inversions between left and right halves\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            count += len(left) - i\n            j += 1\n\n    # Add the count of left inversions\n    count += left_inv_count\n\n    # Add the count of right inversions\n    count += right_inv_count\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    # Sort the array in ascending order\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    # Count the number of inversions\n    count = 0\n    for i in range(1, n):\n        count += n - i\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize variables\n    inv_count = 0\n    n = len(arr)\n\n    # Sort the array using merge sort\n    merge_sort(arr, 0, n-1)\n\n    # Count the number of inversions\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j] and arr[i] > arr[j-1]:\n                inv_count += i-j\n\n    return inv_count\n\ndef merge_sort(arr, low, high):\n    if low < high:\n        mid = (low + high) // 2\n        merge_sort(arr, low, mid)\n        merge_sort(arr, mid+1, high)\n        merge(arr, low, mid, high)\n\ndef merge(arr, low, mid, high):\n    n1 = mid - low + 1\n    n2 = high - mid\n\n    # Create two temporary arrays\n    L = [0] * n1\n    R = [0] * n2\n\n    # Copy data to temporary arrays\n    for i in range(0, n1):\n        L[i] = arr[low+i]\n    for j in range(0, n2):\n        R[j] = arr[mid+1+j]\n\n    # Merge the temporary arrays back into original array\n    i = 0 # index for L[]\n    j = 0 # index for R[]\n    k = low # index for arr[]\n    while i < n1 and j < n2:\n        if L[i] <= R[j]:\n            arr[k] = L[i]\n            i += 1\n        else:\n            arr[k] = R[j]\n            inv_count += n1-i\n            j += 1\n        k += 1\n\n    # Copy remaining elements of L[], if any\n    while i < n1:\n        arr[k] = L[i]\n        i += 1\n        k += 1\n\n    # Copy remaining elements of R[], if any\n    while j < n2:\n        arr[k] = R[j]\n        j += 1\n        k += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n\n        merge_sort(left)\n        merge_sort(right)\n\n        i = j = k = 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                arr[k] = left[i]\n                i += 1\n            else:\n                arr[k] = right[j]\n                j += 1\n            k += 1\n\n        while i < len(left):\n            arr[k] = left[i]\n            i += 1\n            k += 1\n\n        while j < len(right):\n            arr[k] = right[j]\n            j += 1\n            k += 1\n\n\ndef get_Inv_Count(arr):\n    merge_sort(arr)\n    inv_count = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            inv_count += i - 1 - i // 2\n            i += 1\n        else:\n            i += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # If array is empty or has only one element, it has 0 inversions\n    if n == 0 or n == 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively count inversions in the left and right halves\n    left_inv_count = get_Inv_Count(left)\n    right_inv_count = get_Inv_Count(right)\n\n    # Count inversions between the left and right halves\n    left_inv_count += merge_sort(left)\n    right_inv_count += merge_sort(right)\n\n    # Return the total inversions in the array\n    return left_inv_count + right_inv_count\n\n\ndef merge_sort(arr):\n    '''\n    Merge sort algorithm to sort an array in ascending order.\n    '''\n    n = len(arr)\n\n    # Base case: If the array has only one element, it is already sorted\n    if n == 1:\n        return 0\n\n    # Divide the array into two halves\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    # Recursively sort the left and right halves\n    left_inv_count = merge_sort(left)\n    right_inv_count = merge_sort(right)\n\n    # Merge the sorted left and right halves into a single sorted array\n    i = j = k = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            arr[k] = left[i]\n            i += 1\n        else:\n            arr[k] = right[j]\n            left_inv_count += len(right) - j\n            j += 1\n        k += 1\n\n    # Copy any remaining elements from left or right halves to the sorted array\n    while i < len(left):\n        arr[k] = left[i]\n        i += 1\n        k += 1\n\n    while j < len(right):\n        arr[k] = right[j]\n        j += 1\n        k += 1\n\n    return left_inv_count + right_inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        inv_count += n - i - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j-1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr)\n\n    # Helper function to swap two elements in the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to divide the array into two halves and count inversions recursively\n    def count_inv(arr, start, end):\n        if start >= end:\n            return 0\n\n        # Divide the array into two halves\n        mid = (start + end) // 2\n        inv_left = count_inv(arr, start, mid)\n        inv_right = count_inv(arr, mid + 1, end)\n\n        # Count inversions in each half\n        left = mid + 1 if start < mid else end\n        right = mid + 1 if mid < end else start\n        inv_mid = count_inversions(arr, left, right)\n\n        return inv_left + inv_right + inv_mid\n\n    # Helper function to count inversions in a subarray of the array\n    def count_inversions(arr, start, end):\n        inv = 0\n        i = start\n        j = end\n\n        while i < j:\n            # Count inversions in this subarray\n            while i < j and arr[i] <= arr[start]:\n                i += 1\n            while i < j and arr[j] >= arr[start]:\n                j -= 1\n            if i < j:\n                inv += j - i\n                # Swap elements in this subarray\n                swap(arr, i, j)\n\n        return inv\n\n    # Call the helper function to count the inversions in the array\n    return count_inv(arr, 0, n - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Initialize counters for inversions and comparisons\n    inv_count = 0\n    comp_count = 0\n    \n    # Sort the array using merge sort\n    merge_sort(arr, 0, len(arr)-1)\n    \n    # Count inversions using two pointers\n    i = 0\n    j = len(arr)-1\n    while i <= j:\n        comp_count += 1\n        if arr[i] > arr[j]:\n            inv_count += j - i + 1\n            i += 1\n        else:\n            j -= 1\n    \n    # Print the number of comparisons and inversions\n    print(\"Inversions:\", inv_count)\n    print(\"Comparisons:\", comp_count)\n    \ndef merge_sort(arr, left, right):\n    if left < right:\n        # Calculate the middle point\n        mid = (left + right) // 2\n        \n        # Recursively sort the left and right halves\n        merge_sort(arr, left, mid)\n        merge_sort(arr, mid+1, right)\n        \n        # Merge the two sorted halves\n        i = left\n        j = mid+1\n        k = left\n        while i <= mid and j <= right:\n            comp_count += 1\n            if arr[i] <= arr[j]:\n                arr[k] = arr[i]\n                i += 1\n            else:\n                arr[k] = arr[j]\n                j += 1\n            k += 1\n        while i <= mid:\n            arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            arr[k] = arr[j]\n            j += 1\n            k += 1"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and flattens it into a single list.\n    '''\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n    '''\n    max_prices = defaultdict(int)\n    max_total = 0\n    max_count = 0\n    for item, price in stdata:\n        max_prices[item] += price\n        max_total += price\n        max_count += 1\n        if max_prices[item] > max_total:\n            max_total = max_prices[item]\n            max_count = 1\n    return max_total, max_count"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_aggregate = 0\n    \n    for item in stdata:\n        for j in item:\n            max_dict[j] += item[j]\n            \n    for key in max_dict:\n        if max_dict[key] > max_aggregate:\n            max_aggregate = max_dict[key]\n            \n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    counts = defaultdict(int)\n    max_agg = 0\n    for item, price in stdata:\n        counts[item] += 1\n        max_agg = max(max_agg, price*counts[item])\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the sum of each element\n    element_sums = defaultdict(int)\n\n    # iterate through the list of tuples\n    for num, price in stdata:\n        # add the sum of the element to the corresponding key in the dictionary\n        element_sums[num] += price\n\n    # find the maximum aggregate by iterating through the dictionary and finding the maximum value\n    max_aggregate = max(element_sums.values())\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # initialize a dictionary to store the maximum aggregate for each month\n    max_agg = defaultdict(int)\n\n    # iterate through the list of tuples\n    for month, amount in stdata:\n        # update the maximum aggregate for the month if the amount is greater than the current maximum\n        if amount > max_agg[month]:\n            max_agg[month] = amount\n\n    # return the maximum aggregate\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # iterate through the list of transactions and update the max_agg dictionary\n    for trans in stdata:\n        for item in trans:\n            max_agg[item] += trans[item]\n\n    # find the maximum aggregate in the max_agg dictionary\n    max_agg_value = max(max_agg.values())\n\n    # find the maximum item in the max_agg dictionary\n    max_item = max(max_agg, key=max_agg.get)\n\n    # return the maximum aggregate and item\n    return max_agg_value, max_item\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n    max_aggregate = 0\n    \n    # Iterate through the list of tuples\n    for item, quantity in stdata:\n        # Increment the count of the current item in the count_dict\n        count_dict[item] += quantity\n        \n        # If the current item is the new maximum, update the max_aggregate\n        if max_aggregate < count_dict[item]:\n            max_aggregate = count_dict[item]\n    \n    # Return the maximum aggregate found\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each month\n    max_aggr = defaultdict(int)\n    \n    # Iterate through each tuple in the list of tuples\n    for month, amount in stdata:\n        # Update the maximum aggregate for the current month\n        max_aggr[month] = max(max_aggr[month], amount)\n        \n    # Return the maximum aggregate for the last month\n    return max_aggr[max(max_aggr)]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each department\n    max_aggs = defaultdict(int)\n    for item in stdata:\n        dept, price = item\n        max_aggs[dept] = max(max_aggs[dept], price)\n    # Find the maximum value in the defaultdict\n    max_agg = max(max_aggs.values())\n    # Find the department with the maximum aggregate\n    max_dept = None\n    for dept, price in stdata:\n        if price == max_agg:\n            max_dept = dept\n            break\n    # Return the maximum aggregate and department\n    return max_agg, max_dept"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_aggregate(stdata):\n    '''\n    This function takes a list of tuples representing sales data and returns\n    the maximum aggregate amount.\n    '''\n    # Create a defaultdict to store the sale totals for each product\n    sale_totals = defaultdict(int)\n\n    # Iterate over the sales data and add the sale totals to the defaultdict\n    for product, sale in stdata:\n        sale_totals[product] += sale\n\n    # Return the maximum value in the sale totals dictionary\n    return max(sale_totals.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:]\n        if int(num[:n]) + int(num[n:]) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n]) == int(binary[-n:]):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Create a list to store the binary sequences\n    seq_list = []\n    \n    # Initialize the first and last bits of the first sequence\n    first_bits = bin(n)[2:].zfill(n)\n    last_bits = bin(n)[2:].zfill(n)\n    \n    # Check if the sum of first n bits is same as sum of last n bits\n    while first_bits!= last_bits:\n        \n        # Calculate the next binary sequence\n        next_bits = str(int(first_bits, 2) ^ int(last_bits, 2))\n        \n        # Add the binary sequence to the list\n        seq_list.append(next_bits)\n        \n        # Swap the values of first and last bits\n        first_bits, last_bits = last_bits, next_bits\n        \n    # Return the count of binary sequences\n    return len(seq_list)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # initialize count variable\n    count = 0\n\n    # loop through all possible binary strings of length n\n    for i in range(2**n):\n        # convert each binary string to a decimal integer\n        decimal = int(bin(i)[2:], 2)\n\n        # calculate the sum of first n bits\n        first_sum = sum(decimal % 2**(n-1-i) for i in range(n))\n\n        # calculate the sum of last n bits\n        last_sum = sum(decimal % 2**(n-1-i) for i in range(n))\n\n        # check if the sum of first and last bits is the same\n        if first_sum == last_sum:\n            count += 1\n\n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if int(binary[:n]) == int(binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n, 2**2*n+1): \n        if sum(int(digit) for digit in bin(i)[2:]) == sum(int(digit) for digit in bin(i+1)[2:]): \n            count += 1 \n    return count \n\nn = int(input(\"Enter the value of n: \")) \nprint(\"Count of binary sequences of length 2n with same sum of first n bits and last n bits:\", count_binary_seq(n)) "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables for count and current sequence\n    count = 0\n    seq = []\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n): \n        # Check if the sequence is a valid binary sequence\n        if i == 0: \n            continue\n        for j in range(2**n): \n            # Check if the sequence is a valid binary sequence\n            if j == 0: \n                continue\n            # Check if the sum of first n bits is same as sum of last n bits\n            if sum(i[:n]) == sum(j[-n:]): \n                # Append the valid binary sequence to the list of sequences and increment the count\n                seq.append(str(i) + str(j))\n                count += 1\n\n    # Return the count of all valid binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Find the sum of first n bits\n    first_sum = sum([int(digit) for digit in bin(sum(range(2**n-1, -1, -1)))[2:]])\n    \n    # Find the sum of last n bits\n    last_sum = sum([int(digit) for digit in bin(sum(range(2**(2*n)-1, -1, -1)))[2:]])\n    \n    # Count the number of binary sequences\n    count = 0\n    for i in range(2**n):\n        if sum([int(digit) for digit in bin(i)[2:]]) == first_sum and sum([int(digit) for digit in bin(i)[-n:]]) == last_sum:\n            count += 1\n    \n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = i // 2**n\n        last_n_bits = i % 2**n\n        if sum(first_n_bits) == sum(last_n_bits):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Initialize variables\n    count = 0\n    total = 0\n    # Loop through all possible combinations of n bits\n    for i in range(2**n):\n        # Initialize binary string\n        binary = bin(i)[2:].zfill(n)\n        # Check if sum of first n bits is same as sum of last n bits\n        if binary[:n].count('1') == binary[-n:].count('1'):\n            count += 1\n            total += i\n    return count, total"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter\n    depth = 0\n    \n    # Recursively traverse through dictionary\n    for v in d.values():\n        # If value is a dictionary, increment depth counter\n        if isinstance(v, dict):\n            depth += 1\n        # If value is a list, increment depth counter for each element in list\n        elif isinstance(v, list):\n            depth += len(v)\n    # Return final depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            new_depth = dict_depth(v) + 1\n            if new_depth > max_depth:\n                max_depth = new_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = 1 + dict_depth(value)\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key in d:\n        if type(d[key]) is dict:\n            max_depth = max(max_depth, dict_depth(d[key]) + 1)\n        elif type(d[key]) in [list, tuple]:\n            for item in d[key]:\n                if type(item) is dict:\n                    max_depth = max(max_depth, dict_depth(item) + 1)\n                elif type(item) in [list, tuple]:\n                    for nested_item in item:\n                        if type(nested_item) is dict:\n                            max_depth = max(max_depth, dict_depth(nested_item) + 1)\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        elif isinstance(d[key], (list, tuple)):\n            depth = max(depth, max([dict_depth(x) + 1 for x in d[key]]))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(value) for value in d.values())\n        return depth\n    elif isinstance(d, list):\n        depth = 1 + max(dict_depth(value) for value in d)\n        return depth\n    else:\n        return 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for k, v in d.items())\n    else:\n        return 0"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, the number of rotations, and the index of the element to find.\n    It returns the element at the given index after rotations.\n\n    Args:\n        arr (list): The input array.\n        ranges (list): A list of tuples, where each tuple contains the lower and upper bounds of a range to rotate through.\n        rotations (int): The number of rotations to apply.\n        index (int): The index of the element to find.\n\n    Returns:\n        int: The element at the given index after rotations.\n    \"\"\"\n    # Find the element at the given index after the number of rotations\n    element = arr[index % len(arr)]\n\n    # Apply the rotations to the element\n    for i in range(rotations):\n        # Generate a random index for the next element to rotate to\n        next_index = index + ranges[i][0] + ranges[i][1]\n        # Rotate the element to the new index\n        arr[index] = arr[next_index]\n        # Move the index to the next element to rotate to\n        index = next_index\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, number of rotations and an index as input.\n    It returns the element at the given index after rotating the array by the number of rotations.\n\n    Example:\n    arr = [1, 2, 3, 4, 5]\n    ranges = [(0, 1), (2, 3)]\n    rotations = 2\n    index = 2\n    Output: 5\n\n    Note: The input array is assumed to be sorted.\n    \"\"\"\n\n    # Initialize the element to be searched.\n    element = arr[index]\n\n    # Iterate through the ranges and rotations to find the element.\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n        if end < index:\n            start += 1\n        while start <= end:\n            mid = (start + end) // 2\n            if arr[mid] == element:\n                return arr[mid]\n            elif arr[mid] < element:\n                start = mid + 1\n            else:\n                end = mid - 1\n\n    # If the element is not found, return -1.\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initialize variables\n    count = 0\n    curr_range = ranges[0]\n    curr_index = 0\n\n    # Loop through rotations and ranges\n    for i in range(rotations):\n        if count + curr_range > index:\n            break\n        if i < len(ranges) - 1:\n            curr_range = ranges[i + 1]\n        curr_index += curr_range\n        count += curr_range\n\n    # Return the element at the final index\n    return arr[curr_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the index after rotations\n    new_index = (index + rotations) % len(arr)\n\n    # Calculate the element at the new index\n    element = arr[new_index]\n\n    # Check if the element is in the given range\n    if ranges[new_index] in arr:\n        return element\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of rotations required to find the element at index\n    num_rotations = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            num_rotations += rotations[i]\n            if index >= ranges[i] + rotations[i]:\n                index -= ranges[i] + rotations[i]\n                break\n\n    # Find the element at index after number of rotations\n    element = arr[(index + num_rotations) % len(arr)]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        count += 1\n        if count == index:\n            if rotations == 1:\n                return arr[i]\n            else:\n                return find_Element(arr, ranges, rotations-1, (index-ranges*rotations+1)%len(arr))"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a list of ranges and a number of rotations, and returns the element at the given index after the specified number of rotations.\n    '''\n    rotated_arr = []\n\n    # Iterate through the array and keep track of the elements in the original order\n    for i in range(len(arr)):\n        element = arr[i]\n        rotated_arr.append(element)\n\n    # Iterate through the list of ranges and rotate the array\n    for i in range(len(ranges)):\n        start = ranges[i][0]\n        end = ranges[i][1]\n        rotation_count = rotations[i]\n\n        # Check if the rotation count is negative, in which case we rotate the array backwards\n        if rotation_count < 0:\n            start, end = end, start\n            rotation_count *= -1\n\n        # Rotate the array using the specified rotation count\n        for j in range(rotation_count):\n            temp = rotated_arr[start]\n            rotated_arr[start] = rotated_arr[end]\n            rotated_arr[end] = temp\n\n            start += 1\n            end -= 1\n\n        # Reverse the rotated array to get the desired element at the given index\n        rotated_arr = rotated_arr[::-1]\n        element = rotated_arr[index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # get the length of the array\n    n = len(arr)\n    # initialize the element that we are looking for to the value at index\n    target_element = arr[index]\n    # initialize the count of rotations to 0\n    count = 0\n    # loop through the array\n    for i in range(n):\n        # get the current element\n        current_element = arr[i]\n        # calculate the rotation count for the current element\n        if i % rotations == 0:\n            count += 1\n            # update the target element to the next element in the array\n            if count == index:\n                target_element = arr[(i + 1) % n]\n            elif count > index:\n                target_element = arr[(i + rotations - count) % n]\n        # check if the target element is found\n        if current_element == target_element:\n            # return the current element at the given index\n            return current_element\n    # if the target element is not found, return -1\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if index > n:\n        return None\n    \n    # Find the first element to be rotated\n    rot_index = 0\n    while rot_index < rotations and rot_index + index < n:\n        rot_index += ranges[rot_index]\n    \n    # Return the element at the given index after rotating the first element\n    if rot_index + index < n:\n        return arr[rot_index + index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges of rotations, and the index where the element needs to be found.\n    It returns the element at the given index after rotations.\n\n    Args:\n        arr (list): The array of integers.\n        ranges (list): A list of ranges of rotations. Each range is a tuple of length 2 containing the start and end index of the rotations.\n        rotations (int): The number of rotations to be applied.\n        index (int): The index where the element needs to be found.\n\n    Returns:\n        int: The element at the given index after rotations.\n\n    \"\"\"\n\n    # Initialize the index of the element to be found.\n    i = index\n\n    # Initialize the list of indices where the element is found.\n    indices = []\n\n    # Loop through the ranges of rotations.\n    for r in ranges:\n\n        # Calculate the start and end indices of the current range.\n        start, end = r\n\n        # Find the indices of the element after the current rotation.\n        if start <= i < end:\n            indices.append(i)\n\n        # Update the value of i after the rotation.\n        i = i % rotations + start\n\n    # Check if the element is found.\n    if i == index:\n        return None\n    else:\n        return arr[i]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) < 2:\n        return None\n    else:\n        return p_words[0], p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_pattern = re.compile(r'^p[a-z]*', re.IGNORECASE)\n    matches = re.findall(p_pattern, words)\n    if len(matches) == 0:\n        return None, None\n    else:\n        p_words = [w for w in words if w.lower().startswith('p')]\n        return p_words[0], p_words[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    p_words = []\n    for word in words:\n        if re.match(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n\n    if len(p_words) == 2:\n        return p_words\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    match = re.search(pattern, words)\n    if match:\n        word1 = match.group()\n        word2 = match.group()[1:]\n        return word1, word2\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with letter 'p'\n    pattern = re.compile(r'\\b[Pp]\\w*\\b')\n\n    # Use the search() method to find all non-overlapping matches of the pattern in the list of words\n    matches = pattern.findall(words)\n\n    # If there are at least two matches, return them as a tuple, otherwise return None\n    if len(matches) >= 2:\n        return tuple(matches)\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Use regular expression to find words starting with 'p'\n    pattern = re.compile(r'p\\w+')\n    result = pattern.findall(words)\n\n    # Return two words from the result list\n    return result[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n\n    # Define a regular expression pattern to match words starting with letter 'p'\n    pattern = r'^p'\n\n    # Initialize variables for storing the two matching words\n    first_word = ''\n    second_word = ''\n\n    # Loop through the list of words and check if each word matches the pattern\n    for word in words:\n        if re.match(pattern, word):\n            # If a match is found, add the word to the appropriate variable\n            if first_word == '':\n                first_word = word\n            else:\n                second_word = word\n\n    # Return the two matching words\n    return first_word, second_word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if word[0].lower() == 'p']\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regular expression pattern to match words starting with 'p'\n    pattern = r'^p.'\n    \n    # use re.findall to find all words in the list that match the pattern\n    matches = re.findall(pattern, words)\n    \n    # return the two words that match the pattern\n    return matches"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if k > index:\n        return 0\n\n    max_sum = 0\n    current_sum = 0\n\n    for i in range(index, n):\n        if a[i] > a[index]:\n            current_sum += a[i]\n        else:\n            current_sum = 0\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if i == k - 1:\n            break\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize dp array with first row of DP table\n    dp = [0] * (k+1)\n    dp[0] = a[0]\n    max_sum = dp[0]\n\n    # Fill dp array with the maximum sum of increasing subsequence from 0 to i\n    for i in range(1, index+1):\n        dp[i] = max(dp[i-1], a[i] + dp[i])\n        max_sum = max(max_sum, dp[i])\n\n    # Find the maximum sum of increasing subsequence including kth element\n    if k >= index:\n        max_sum = max(max_sum, dp[k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum and its index as 0\n    max_sum = 0\n    max_index = -1\n    \n    # Initialize the array of prefixes of increasing subsequences\n    prefixes = [0] * n\n    \n    # Traverse through the array and find the maximum sum of increasing subsequences\n    for i in range(n):\n        if i < k:\n            # If i is less than k, then there is no increasing subsequence\n            prefixes[i] = 0\n        else:\n            # If i is equal to or greater than k, then we can use a binary search to find the maximum sum of increasing subsequences from i-k to i-1\n            l = 0\n            r = i - k\n            while l < r:\n                mid = (l + r) // 2\n                if a[i] > a[i - k + mid]:\n                    l = mid + 1\n                else:\n                    r = mid\n            prefixes[i] = prefixes[i - k] + (i - k) + l\n        \n        # Update the maximum sum of increasing subsequences\n        if prefixes[i] > max_sum:\n            max_sum = prefixes[i]\n            max_index = i\n    \n    # Return the maximum sum of increasing subsequences and its index\n    return max_sum, max_index"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    if index == 0 or k == 0:\n        return max(a[0], a[1])\n    \n    max_ending_here = max(max_sum_increasing_subseq(a, n, index-1, k-1), a[index])\n    max_so_far = max(max_sum_increasing_subseq(a, n, index-1, k), max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize the max sum and max sum subsequence as 0\n    max_sum = 0\n    max_sum_subseq = []\n    \n    # initialize the sum and subsequence as 0\n    sum_so_far = 0\n    subseq = []\n    \n    # loop through the array\n    for i in range(index, n):\n        # check if the current element is greater than k\n        if a[i] > k:\n            # update the sum and subsequence\n            sum_so_far += a[i]\n            subseq.append(a[i])\n            # check if the current sum is greater than the max sum\n            if sum_so_far > max_sum:\n                max_sum = sum_so_far\n                max_sum_subseq = subseq.copy()\n        # check if the current element is less than or equal to k\n        elif a[i] <= k:\n            # check if the current sum is greater than the max sum\n            if sum_so_far > max_sum:\n                # update the max sum and max sum subsequence\n                max_sum = sum_so_far\n                max_sum_subseq = subseq.copy()\n                # remove the last element from the subsequence and update the sum and subsequence\n                sum_so_far -= subseq.pop()\n                subseq.pop()\n                \n    # check if the last element of the subsequence is greater than k\n    if k in subseq:\n        max_sum_subseq.append(k)\n    \n    # return the max sum and max sum subsequence\n    return max_sum, max_sum_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    :param a: list of integers representing the sequence.\n    :param n: length of the sequence.\n    :param index: index of the current element being considered.\n    :param k: index of the kth element.\n    :return: maximum sum of increasing subsequence from prefix until ith index and including kth element.\n    \"\"\"\n    if index == 0:\n        return a[0]\n\n    # Compute the maximum sum of increasing subsequence from prefix until i-1\n    max_sum_1 = max_sum_increasing_subseq(a, index - 1, 0, k)\n\n    # Compute the maximum sum of increasing subsequence from prefix until i and including kth element\n    max_sum_2 = max_sum_increasing_subseq(a, index - 1, index - 1, k)\n\n    # Compute the maximum sum of increasing subsequence from prefix until i and including kth element\n    max_sum_3 = max_sum_increasing_subseq(a, index - 1, index - 1, k - 1)\n\n    # Compute the maximum of the three computed values\n    return max(max_sum_1, max_sum_2, max_sum_3) + a[index]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k <= index:\n        return 0\n    dp = [[0] * (k + 1) for i in range(n + 1)]\n    dp[0][0] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j >= i:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + a[i - 1])\n\n    return dp[n][k]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if k <= index:\n        return a[k] + max_sum_increasing_subseq(a, n, index + 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        for j in range(i, index+1):\n            if a[j] > a[i-1] and j < k:\n                dp[i] = max(dp[i], dp[j]+a[i])\n        max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0:\n        return a[0]\n    elif index > 0 and k <= index:\n        max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index])\n    else:\n        max_sum = max_sum_increasing_subseq(a, n, index - 1, k)\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            colon.append(tuplex[i][j])\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize empty list\n    colon = []\n    \n    # Loop through the elements in the tuple\n    for i in range(len(tuplex)):\n        # Check if the current element is a tuple\n        if type(tuplex[i]) == tuple:\n            # Recursively call the function with the tuple as the argument\n            new_colon = colon_tuplex(tuplex[i], m, n)\n            # Append the resulting colon to the main colon\n            colon.append(new_colon)\n        else:\n            # If the current element is not a tuple, add it to the colon\n            colon.append(deepcopy(tuplex[i]))\n    \n    # Return the main colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = (new_tuplex[i],)\n    for i in range(n-m):\n        new_tuplex = (new_tuplex,())\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return (tuplex[0],)\n    else:\n        new_tuplex = deepcopy(tuplex)\n        new_tuplex[0], new_tuplex[-1] = new_tuplex[-1], new_tuplex[0]\n        return colon_tuplex(new_tuplex, m, n) + (new_tuplex[1],)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        return tuple()\n    if n==0:\n        return tuple((tuplex[0],colon_tuplex(tuplex[1:],m-1,n)))\n    else:\n        return (tuplex[0],colon_tuplex(tuplex[1:],m-1,n))"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # get the number of rows in the input tuple\n    num_rows = len(new_tuplex)\n\n    # get the number of columns in the input tuple\n    num_cols = len(new_tuplex[0])\n\n    # determine the maximum length of the colon\n    max_len = m * num_rows + n * num_cols - 1\n\n    # iterate through the tuple and add a colon at the appropriate position\n    for i in range(num_rows):\n        if i % m == 0:\n            new_tuplex[i] = '|'\n        else:\n            new_tuplex[i] +=''\n\n    for i in range(num_cols):\n        if i % n == 0:\n            for j in range(num_rows):\n                new_tuplex[j] += '-'\n        else:\n            for j in range(num_rows):\n                new_tuplex[j] +=''\n\n    # truncate the tuple to the maximum length\n    new_tuplex = new_tuplex[:max_len]\n\n    # return the truncated tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[:i] + (new_tuplex[i],) + new_tuplex[i+1:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple x and returns a colon of the tuple with m elements.\n    '''\n    # Check if the length of x is equal to m\n    if len(tuplex) == m:\n        # Create a new empty list\n        new_list = []\n        # Loop through the tuple\n        for i in range(m):\n            # Append the i-th element to the new list\n            new_list.append(tuplex[i])\n        # Return the new list\n        return new_list\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    for i in range(len(tuplex)):\n        if i < m:\n            colon += (tuplex[i],)\n        elif i < m+n:\n            colon += (tuplex[i],tuplex[i-m])\n        else:\n            colon += (tuplex[i],)\n    return colon\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    if m > 0 and n > 0:\n        if m > 1:\n            col = col[0:m]\n        if n > 1:\n            col = col[1:n]\n    return col"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return \"Error: N is greater than the length of either list.\"\n    elif N == 0:\n        return []\n    \n    # Find the maximum product of any two factors\n    max_product = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i] * nums2[j], nums1[j] * nums2[i])\n            if product > max_product:\n                max_product = product\n                \n    # Create a list of the maximum product's factors\n    factors = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product = max(nums1[i] * nums2[j], nums1[j] * nums2[i])\n            if product == max_product:\n                factors.append(nums1[i])\n                factors.append(nums2[j])\n    \n    # Sort the factors in descending order\n    factors.sort(reverse=True)\n    \n    # Return the first N factors\n    return factors[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the maximum product for each factor\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n\n    # Iterate through each combination of two factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # Update the maximum product for each factor\n            if product > max_product1:\n                max_product2 = max_product1\n                max_product1 = product\n            elif product > max_product2:\n                max_product2 = product\n\n            # Check if the required number of products has been found\n            if max_product1 >= max_product2:\n                return max_product1\n            elif max_product2 >= max_product1:\n                return max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have the same length')\n    \n    if N > len(nums1) // 2:\n        raise ValueError('Number of largest products should be less than half of the length of the longer list')\n    \n    largest_products = []\n    for i in range(N):\n        largest_product = 1\n        for j in range(len(nums1)):\n            if j == i:\n                continue\n            \n            largest_product *= max(nums1[j], nums2[j])\n            \n        largest_products.append(largest_product)\n        \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the largest product list\n    largest_products = []\n\n    # Iterate over the desired number of products\n    for i in range(N):\n        # Calculate the product of the two largest numbers from each list\n        product = nums1[-1] * nums2[-1]\n\n        # Add the product to the list of largest products\n        largest_products.append(product)\n\n        # Remove the two largest numbers from each list\n        nums1.pop()\n        nums2.pop()\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Calculate the product of the first N largest numbers from each list\n    product = 1\n    for i in range(N):\n        product *= nums1[i]\n    \n    # Calculate the product of the first N largest numbers from each list\n    product2 = 1\n    for i in range(N):\n        product2 *= nums2[i]\n\n    # Find the largest product of any two factors\n    largest_product = max(product, product2)\n\n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return None\n    \n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i], nums2[i]))\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in the two lists\n    max_val = max(max(nums1), max(nums2))\n    \n    # Initialize an empty list to store the largest products\n    largest_products = []\n    \n    # Iterate over the number of largest products to find\n    for i in range(N):\n        # Initialize two variables to hold the current largest product\n        cur_product1 = 1\n        cur_product2 = 1\n        \n        # Iterate over the elements in the two lists\n        for j in range(len(nums1)):\n            # Calculate the product of the current element with the next element in the list\n            cur_product1 *= nums1[j]\n            cur_product2 *= nums2[j]\n        \n        # Check if the current largest product is larger than the maximum value found\n        if cur_product1 > max_val * cur_product2:\n            # If it is, add the current product to the list of largest products\n            largest_products.append(cur_product1)\n        else:\n            # If not, add the maximum value times the current product to the list of largest products\n            largest_products.append(max_val * cur_product2)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    max_product = float('-inf')\n    for i in range(N):\n        current_product = nums1[i] * nums2[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate over the first N elements of the two lists\n    for i in range(N):\n        # Compute the product of the two elements\n        product = nums1[i] * nums2[i]\n\n        # Check if the product is already in the list\n        if product not in largest_products:\n            # If not, add it\n            largest_products.append(product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max1 = 0\n    max2 = 0\n    for i in range(N):\n        if nums1[i] > max1:\n            max1 = nums1[i]\n        if nums2[i] > max2:\n            max2 = nums2[i]\n    max_product = max(nums1[0] * max1, nums2[0] * max2)\n    for i in range(1, N):\n        temp1 = nums1[i] * max1\n        temp2 = nums2[i] * max2\n        if temp1 > max_product:\n            max_product = temp1\n        if temp2 > max_product:\n            max_product = temp2\n    return max_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b, and returns the maximum of a and b.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple of characters\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Initialize an empty list to store the tuple of characters\n    result = []\n    # Loop through each character in the string\n    for char in str1:\n        # Append the character to the list of characters\n        result.append(char)\n    # Return the tuple of characters\n    return tuple(result)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize the variable to store the unset bits\n    unset_bits = 0\n    \n    # Iterate through the bits of the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is unset, set it in the unset_bits variable\n        if bit == '0':\n            unset_bits |= 1 << (len(bin(n)[2:]) - int(bit))\n    \n    # Return the updated value of n with the left most unset bit set\n    return n ^ unset_bits"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to a binary string\n    binary_string = bin(n)[2:]\n    # Find the index of the leftmost unset bit\n    leftmost_unset_bit_index = binary_string.find('1')\n    # Convert the index to a binary string and pad it with zeros to make it a length of 32 bits\n    leftmost_unset_bit_index_binary = '{0:032b}'.format(leftmost_unset_bit_index)\n    # Convert the binary string to an integer and set the leftmost unset bit to 1\n    leftmost_unset_bit = int(leftmost_unset_bit_index_binary, 2)\n    return n | leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    # Find the index of the leftmost unset bit\n    while n & 1 == 0:\n        n >>= 1\n    index = 1\n    while n & 1 == 1:\n        index += 1\n        n >>= 1\n    \n    # Set the leftmost unset bit to 1\n    mask = (1 << index) - 1\n    n |= mask\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to -1\n    leftmost_unset_bit = -1\n    # Iterate over all possible binary numbers from 0 to n\n    for i in range(n+1):\n        # Compute the binary number represented by the current integer\n        current_binary = bin(i)[2:]\n        # Iterate over all possible binary numbers from the left of the unset bit to the end\n        for j in range(leftmost_unset_bit+1, len(current_binary)):\n            # If the current bit is 0, we can set it to 1\n            if current_binary[j] == '0':\n                # Set the leftmost unset bit to the current bit index\n                leftmost_unset_bit = j\n                # Stop iterating over the current integer\n                break\n        # If we found a leftmost unset bit, break out of the loop\n        if leftmost_unset_bit!= -1:\n            break\n    # Return the leftmost unset bit\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Initialize variables\n    bit_index = 0\n    bit = 1 << bit_index\n    bit_mask = 1 << bit_index\n    \n    # Loop until the bit is set\n    while bit & n:\n        bit_index += 1\n        bit = 1 << bit_index\n        bit_mask = 1 << bit_index\n    \n    # Set the leftmost unset bit\n    n |= bit_mask\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n: \n        if n & 1 == 0: \n            n = n >> 1\n            return n + 1\n        else: \n            n = n >> 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit in the given integer n.\n    '''\n    # Initialize the index of the first unset bit\n    index = 0\n    # Check if the rightmost bit is set or not\n    if (n & (1 << 31)) == 0:\n        # If the rightmost bit is set, set the leftmost unset bit to 1\n        n |= 1 << index\n    else:\n        # If the rightmost bit is not set, set the leftmost unset bit to 0\n        n &= ~(1 << index)\n    # Return the updated value of the integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in an integer n.\n    '''\n    # Convert the integer to binary string\n    binary_string = bin(n)[2:]\n    \n    # Check if the binary string has at least one set bit\n    if '1' not in binary_string:\n        # If there is no set bit, return the integer unchanged\n        return n\n    \n    # Find the index of the first set bit in the binary string\n    index = binary_string.index('1')\n    \n    # Set the leftmost unset bit to 1\n    n = n | (1 << index)\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a given integer.\n    '''\n    # Loop through the bits of the integer from right to left\n    for i in range(31, -1, -1):\n        # Check if the i-th bit is set to 1\n        if (n & (1 << i)):\n            # If it is, set the i-th bit to 0\n            n &= ~(1 << i)\n            return n\n    # If no bits are unset, return the original integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit in a given integer n.\n    \"\"\"\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    # find the position of the leftmost unset bit\n    leftmost_unset_bit = binary_str.find('0')\n    # create a mask with all the bits to the left of the leftmost unset bit\n    mask = (1 << leftmost_unset_bit) - 1\n    # apply the mask to the original number\n    result = n & mask\n    # convert the result back to an integer\n    result = int(result, 2)\n    return result"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, radius and height of a cone, and returns the volume of the cone.\n    '''\n    # Formula for volume of a cone using spherical coordinates\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone using the formula:\n    V = 1/3 * \u03c0 * r^2 * h\n    \"\"\"\n    V = (1 / 3) * math.pi * r ** 2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone and returns the volume of the cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = (1/3) * pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    # Calculate the volume of the cone using the formula:\n    # V = (1/3) * pi * r^2 * h\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 1\n    while highest_power_of_2 <= n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2 - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    power = 0\n    while n > 1:\n        power += 1\n        n //= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        n = n // 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes a number as input and returns the highest power of 2 that is less than or equal to that number.\n    \"\"\"\n    # set a variable to store the highest power of 2 found\n    highest = 1\n\n    # loop through all numbers from 2 to n, checking if each number is a power of 2\n    for i in range(2, n+1):\n        # check if i is a power of 2\n        if i == 2**highest:\n            # if i is a power of 2, update the highest power of 2 found\n            highest += 1\n    \n    # return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize maximum power of 2 to 1\n    max_power = 1\n    # Loop through powers of 2 from 2 up to n\n    for i in range(2, n+1):\n        # If i is a power of 2, update maximum power of 2\n        if i == 2**max_power:\n            max_power += 1\n    # Return maximum power of 2\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Iterate through all powers of 2 from 1 to n\n    for i in range(1, n+1):\n        # Check if the current power of 2 is less than or equal to n\n        if i <= n:\n            # If it is, return the current power of 2\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 1\n    while i <= n:\n        if i == n:\n            break\n        i <<= 1\n    return i >> 1"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1: \n        return n \n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the n-th Lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas_numbers = [2, 1]\n    for i in range(2, n+1): \n        lucas_numbers.append(lucas_numbers[i-1] + lucas_numbers[i-2])\n    return lucas_numbers[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    new_list = []\n    for element in list_:\n        new_element = string.format(element)\n        new_list.append(new_element)\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Loop through each element in the list\n    for i in range(len(list_)):\n        # Apply the given format string to the element\n        formatted_element = string.format(list_[i])\n        # Replace the old element in the list with the formatted element\n        list_[i] = formatted_element\n    # Return the modified list\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    # create an empty dictionary to store the converted data\n    converted_data = {}\n\n    # iterate over each list and add the data to the dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            # if the item is a list or a tuple, recursively call the function\n            if isinstance(item, (list, tuple)):\n                converted_data[i] = convert_list_dictionary(*item)\n            else:\n                # add the item to the appropriate position in the dictionary\n                converted_data[i].append(item)\n\n    return converted_data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): A list of integers.\n        l2 (list): A list of strings.\n        l3 (list): A list of floats.\n\n    Returns:\n        dict: A nested dictionary containing the converted lists.\n    \"\"\"\n    # Create a dictionary to store the converted lists\n    nested_dict = {}\n    \n    # Loop through each list and add it to the dictionary with its corresponding key\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l1)!= len(l3):\n        return \"Lists should have the same length.\"\n\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\"sublist1\": l2[i], \"sublist2\": l3[i]}\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i, lst in enumerate(args):\n        for j, item in enumerate(lst):\n            key = i + '.' + str(j)\n            result[key] = item\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    This function takes three lists as arguments and returns a nested dictionary.\n    The function takes three lists as input and returns a dictionary with three keys: 'list1', 'list2' and 'list3'. \n    Each value of the dictionary is a list that contains the corresponding elements of the input lists.\n    '''\n    \n    nested_dict = {'list1': l1, 'list2': l2, 'list3': l3}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    # Loop through the first list\n    for i in range(len(l1)):\n        # Create an empty dictionary to store the current list item\n        current_list = {}\n        # Loop through the second list\n        for j in range(len(l2)):\n            # Loop through the third list\n            for k in range(len(l3)):\n                # Add the third list item to the current list\n                current_list[l3[k]] = l2[j]\n            # Add the second list item to the current list as a value for the first list item\n            nested_dict[l1[i]] = current_list\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # create an empty dictionary to store the result\n    result = {}\n    \n    # loop through each list and add its elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    d = {}\n    \n    # loop through each list and add items to the dictionary\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    \n    # return the resulting dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Convert multiple lists to nested dictionary.\n    '''\n    result = {}\n    for l in lists:\n        for i, item in enumerate(l):\n            if isinstance(item, list):\n                if i not in result:\n                    result[i] = []\n                for sub_item in item:\n                    result[i].append(sub_item)\n            else:\n                if i not in result:\n                    result[i] = []\n                result[i].append(item)\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 3\n    \n    if n == 3:\n        return 9\n    \n    if n == 4:\n        return 25\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    def get_fibonacci(n):\n        if n == 1:\n            return 0\n        elif n == 2:\n            return 1\n        else:\n            return get_fibonacci(n-1) + get_fibonacci(n-2)\n\n    # Find the fibonacci numbers up to n\n    fibonacci_numbers = [get_fibonacci(i) for i in range(1, n+1)]\n\n    # Calculate the sum of the fibonacci numbers\n    fibonacci_sum = sum(fibonacci_numbers)\n\n    # Calculate the maximum sum\n    max_sum = max(fibonacci_sum, fibonacci_sum - n + 1)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return 5\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def f(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 6\n        elif n == 4:\n            return 14\n        elif n == 5:\n            return 42\n\n    def helper(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n == 3:\n            return 6\n        elif n == 4:\n            return 14\n        elif n == 5:\n            return 42\n        else:\n            return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n\n    return helper(n)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The maximum sum possible is:\", get_max_sum(n))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        max_sum = get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n        return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return 1\n\n    # Base case\n    elif n == 2:\n        return 2\n\n    # Recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    else:\n        half_sum = get_max_sum(n//2)\n        third_sum = get_max_sum(n//3)\n        fourth_sum = get_max_sum(n//4)\n        fifth_sum = get_max_sum(n//5)\n        return max(half_sum + third_sum + fourth_sum + fifth_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    if n == 3:\n        return 6\n    \n    if n == 4:\n        return 24\n    \n    if n == 5:\n        return 120\n    \n    max_sum = 0\n    max_factor = 0\n    \n    for i in range(2, n+1):\n        if i == 2 or i == 3 or i == 4 or i == 5:\n            max_factor = i\n            continue\n        \n        current_sum = i * max_factor\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for num in input_list:\n        if len(num) > max_length:\n            max_length = len(num)\n            max_list = [num]\n        elif len(num) == max_length:\n            max_list.append(num)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_list = input_list[i]\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = [i]\n        elif len(i) == max_len:\n            max_list.append(i)\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique elements\n    unique_set = set()\n    # Iterate through the tuple\n    for item in test_tup:\n        # If the item is not already in the set, add it\n        if item not in unique_set:\n            unique_set.add(item)\n        # If the item is already in the set, return False\n        else:\n            return False\n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store the unique elements of the tuple\n    unique_set = set(test_tup)\n\n    # If the length of the set is equal to the length of the tuple, then there are no duplicates in the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set from the input tuple\n    unique_set = set(test_tup)\n    # If the length of the set is equal to the length of the input tuple, then there are no duplicates\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    If there are multiple non-repeated characters, it returns the first one it encounters in the string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first non-repeating character by iterating through the frequency dictionary\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the count of each character in the string\n    char_count = {}\n    # Initialize the first non-repeating character to None\n    first_non_rep_char = None\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is not already in the dictionary, add it with a count of 1\n        if char not in char_count:\n            char_count[char] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_count[char] += 1\n            # If the count of the character is 1, set the first non-repeating character to the current character\n            if char_count[char] == 1:\n                first_non_rep_char = char\n\n    return first_non_rep_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in char_count:\n            # if it is, increment the count of the character\n            char_count[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n\n    # loop through the dictionary to find the first non-repeated character\n    for char in char_count:\n        # if the count of the character is 1, return the character as the first non-repeating character\n        if char_count[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 1:\n            return char"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Calculate the length of the list\n    n = len(nums)\n\n    # Determine the middle index\n    mid = n // 2\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (nums[mid - 1] + nums[mid]) / 2\n    else:\n        median = nums[mid]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted list\n    length = len(sorted_numbers)\n    \n    # Check if the length is odd or even\n    if length % 2 == 0:\n        # Find the middle two elements and take their average\n        median = (sorted_numbers[length//2 - 1] + sorted_numbers[length//2]) / 2\n    else:\n        # Find the middle element and return it\n        median = sorted_numbers[length//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    nums = [a, b, c]\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums) // 2 - 1] + nums[len(nums) // 2]) / 2\n    else:\n        return nums[len(nums) // 2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        return (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        return sorted_numbers[n//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    sorted_numbers = sorted([a, b, c])\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Check if the length of the numbers is odd or even\n    if len(numbers) % 2 == 0:\n        # Find the average of the two middle numbers\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        # Find the middle number\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    nums = sorted([a, b, c])\n    # Find the median\n    if len(nums) % 2 == 0:\n        # Even length list, calculate average of middle two numbers\n        return (nums[len(nums)//2 - 1] + nums[len(nums)//2])/2\n    else:\n        # Odd length list, return middle number\n        return nums[len(nums)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    n = len(numbers)\n\n    if n % 2 == 0:\n        median = (numbers[n//2 - 1] + numbers[n//2]) / 2\n    else:\n        median = numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    middle = len(numbers)//2\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle-1] + numbers[middle]) / 2\n    else:\n        median = numbers[middle]\n    return median\n\nprint(median_numbers(3, 5, 1)) # Output: 4\nprint(median_numbers(5, 3, 1)) # Output: 4\nprint(median_numbers(1, 1, 1)) # Output: 1"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits of all numbers in the list\n    total_sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and loop through each character in the string\n        for digit in str(num):\n            # Convert the character to an integer and add it to the total sum\n            total_sum += int(digit)\n    \n    # Return the total sum of digits of all numbers in the list\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(d) for d in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # create an empty list to store the sum of digits of each number\n    total_sum = []\n    \n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        \n        # add up the digits and append it to the total_sum list\n        total_sum.append(sum(digits))\n        \n    # return the total_sum list\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        num_digits = len(str(num))\n        for digit in range(num_digits):\n            digit_value = int(str(num)[digit])\n            result += digit_value\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        result += sum(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize an empty list to store the sum of digits of each number\n    sum_list = []\n    # iterate through the list of numbers\n    for num in nums:\n        # convert the number to a string and convert each character to an integer\n        num_list = list(str(num))\n        # convert the list of integers back to a string and add its digits to the sum list\n        sum_list.append(sum(map(int, num_list)))\n    # return the sum of digits of each number in the original list\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # compute the sum of the digits\n        digit_sum = sum(digits)\n        # print the sum of digits for each number\n        print(\"Sum of digits for number\", num, \"is\", digit_sum)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(num)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        sum_list.append(digits_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    result = []\n    for num in nums:\n        sum_of_digits = sum(int(digit) for digit in str(num))\n        result.append(sum_of_digits)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # perform bitwise xor operation on each element in the tuple\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n\n    # Initialize variables for the result and the length of the tuples\n    result = 0\n    length = len(test_tup1)\n\n    # Loop through each element in the tuples\n    for i in range(length):\n        # Calculate the bitwise xor of the current element in the first tuple and the current element in the second tuple\n        result = result ^ test_tup1[i] ^ test_tup2[i]\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    unique_tuples = []\n    for key, value in freq_dict.items():\n        unique_tuples.extend([key] * value)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate over the list and add unique tuples to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # Return the length of the set (number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    freq = len(unique_tuples)\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    int: The number of unique tuples in the given list.\n    \"\"\"\n\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item not in freq:\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a new tuple to store the result\n    result = []\n    # Loop through each tuple element in the first tuple\n    for i in range(len(test_tup1)):\n        # Loop through each tuple element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the element at the current index to the result tuple\n            result.append(test_tup1[i] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        inner_sum = 0\n        for j in range(len(test_tup1[i])):\n            inner_sum += test_tup1[i][j] + test_tup2[i][j]\n        result.append(inner_sum)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # get the length of the two nested tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    \n    # initialize the result tuple with zeros\n    result_tup = tuple([0] * tup1_len)\n    \n    # iterate through the two nested tuples and add the corresponding elements\n    for i in range(tup1_len):\n        for j in range(tup2_len):\n            result_tup[i] += test_tup1[i][j] + test_tup2[i][j]\n            \n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with the length of the input tuples\n    result_tup = tuple(i + j for i, j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty tuple to store the result\n    result_tup = ()\n    # Check if the length of the input tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have the same length.')\n    # Perform index wise addition of the tuple elements\n    for i in range(len(test_tup1)):\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Check if the input tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples have different numbers of elements.\")\n        return\n\n    # Create a new tuple to store the result\n    result_tup = ()\n\n    # Iterate over each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Add the elements at the corresponding index positions\n        result_tup += (test_tup1[i] + test_tup2[i], )\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize an empty list to store the sum of the two tuples\n    sum_list = []\n\n    # Iterate over each index in the first tuple\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements from both tuples and append the result to the sum_list\n        sum_list.append(test_tup1[i] + test_tup2[i])\n\n    # Return the sum_list as the output of the function\n    return sum_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = []\n    for i in range(len(test_tup1)):\n        result_tuple.append(test_tup1[i] + test_tup2[i])\n    return result_tuple"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Check if the length of the tuple is equal to the length of the tuple1\n    if len(tuple1) == len(tuplex): \n        # Iterate through the tuples\n        for i in range(len(tuple1)): \n            # Check if the element exists in the tuple\n            if tuple1[i] in tuplex: \n                return True\n        # If all the elements in the tuple1 are not present in the tuple, return False\n        return False\n    else: \n        # If the length of the tuple is not equal to the length of the tuple1, return False\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"The element exists in the tuple\")\n    else:\n        print(\"The element does not exist in the tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Parameters:\n    -----------\n    tuplex : tuple\n        The tuple to search in.\n    tuple1 : tuple\n        The tuple to search for.\n\n    Returns:\n    --------\n    bool\n        True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"Element exists in tuple\")\n    else:\n        print(\"Element does not exist in tuple\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    if tuplex[0] in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    This function takes an integer x as input and returns whether the parity of x is odd or even.\n    '''\n    \n    # We will use bitwise operations to check whether the parity of x is odd or even.\n    \n    # If x is even, x^1 will be odd, so we can use the XOR bitwise operator to find whether x^1 is odd or even.\n    if x^1 == 0:\n        parity = 'even'\n    else:\n        parity = 'odd'\n        \n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0: \n        parity = \"even\"\n    else: \n        parity = \"odd\"\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even\")\n    else:\n        print(x, \"is odd\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the number is even or odd\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n\n    if x % 2 == 0: # if x is even\n        return False\n    else: # if x is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\" \n    else: \n        return \"The number is odd.\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # check if x is even\n        return False # parity is even\n    else: # check if x is odd\n        return True # parity is odd"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    if x%2==0: # If the number is even\n        return False\n    else: # If the number is odd\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n        return False\n    else:\n        print(x, \"is odd.\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # initialize parity to 0\n    parity = 0\n    # loop through each bit of the binary representation of x\n    for i in range(len(bin(x)[2:])):\n        # if the bit is a 1, increment parity\n        if bin(x)[2:].startswith('1'):\n            parity += 1\n    # if parity is even, parity is odd\n    if parity % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize the current number\n    num = n\n\n    # Find the number of digits in the given number\n    num_digits = len(str(num))\n\n    # Iterate through each digit from 0 to 9\n    for digit in range(10):\n        # Initialize a variable to keep track of the number of occurrences of the current digit in the number\n        count = 0\n\n        # Count the occurrences of the current digit in the number\n        for i in range(num_digits):\n            if int(str(num)[i]) == digit:\n                count += 1\n\n        # If the count of the current digit is odd, add 1 to the current digit in the number and break out of the loop\n        if count % 2!= 0:\n            temp_num = int(''.join(str(num)))\n            temp_num += digit\n            new_num = str(temp_num)\n            new_num = int(new_num)\n            break\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Find the largest number with the same digits as n\n    while True:\n        d = str(n)\n        if d == sorted(d):\n            break\n        n += 1\n    \n    # Find the smallest number with the same digits as the current number\n    while True:\n        d = str(n)\n        if d == sorted(d):\n            break\n        n -= 1\n    \n    # Calculate the difference between the two numbers\n    d = int(n) - int(d)\n    \n    # Add 1 to the current number to get the next bigger number\n    n = int(n) + 1\n    \n    # Add the difference to the new number to get the final result\n    return n + d"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = str(n)\n    max_digit = max(digits)\n    next_bigger = int(str(max_digit) + digits.replace(str(max_digit), \"\"))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_digits = len(str(n))\n    new_num = []\n    for i in range(num_digits):\n        digit = n // (10**(num_digits-i-1)) % 10\n        new_num.append(digit)\n    new_num.reverse()\n    new_num = int(''.join(str(x) for x in new_num))\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n\n    # Initialize a variable to store the reversed number\n    reversed_num = \"\"\n\n    # Loop through the digits of the input number from right to left\n    for i in range(len(num_str) - 1, -1, -1):\n        # Add the current digit to the reversed number\n        reversed_num += num_str[i]\n\n    # Convert the reversed number back to an integer and return it\n    return int(reversed_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Reverse the string\n    num = num[::-1]\n    # Create a new string with the digits in the correct order\n    new_num = ''\n    for i in range(len(num)):\n        if num[i] == '9':\n            new_num += '0'\n        else:\n            new_num += str(int(num[i]) + 1)\n    # Convert the new string to an integer\n    new_num = int(new_num)\n    # Return the next bigger number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the number of digits in n\n    num_digits = len(str(n))\n    # Initialize the result number to zero\n    result = 0\n    # Iterate over the digits of n and rearrange them to create the next bigger number\n    for i in range(num_digits - 1, -1, -1):\n        # Extract the current digit\n        digit = int(str(n)[i])\n        # Calculate the power of 10 for the current digit\n        power_of_ten = 10 ** i\n        # Calculate the maximum value that can be added to the current digit\n        max_value = (9 - digit) * power_of_ten\n        # Rearrange the digits of n to create the next bigger number\n        if max_value <= n:\n            result += max_value\n            n -= max_value\n        else:\n            # If the maximum value is greater than the current digit, add the remaining value to the result\n            result += n\n            n = 0\n            break\n    # Return the result number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n\n    # Convert the given number to a string\n    number_str = str(n)\n\n    # Reverse the string\n    reversed_str = number_str[::-1]\n\n    # Split the string into digits\n    digits = [int(digit) for digit in reversed_str]\n\n    # Find the index of the largest digit\n    max_index = digits.index(max(digits))\n\n    # Reverse the first digit and the digit at the max index\n    digits[0], digits[max_index] = digits[max_index], digits[0]\n\n    # Reverse the rest of the digits\n    digits = digits[::-1]\n\n    # Convert the digits back to a string and add the original number's digits at the beginning\n    result_str = ''.join(str(digit) for digit in digits)\n    result = int(result_str + number_str)\n\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # create a string of digits from the given number\n    digits = [int(digit) for digit in str(n)]\n    \n    # sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # create a new number by rearranging the digits in the new order\n    new_number = int(''.join([str(digit) for digit in digits]))\n    \n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Split the string into an array of digits\n    num_arr = list(num_str)\n    # Find the largest digit\n    max_digit = max(num_arr)\n    # Find the index of the largest digit in the array\n    max_index = num_arr.index(max_digit)\n    # Loop through the array starting from the second digit (from the right)\n    for i in range(max_index-1, -1, -1):\n        # If the digit is smaller than the largest digit, swap it with the largest digit\n        if num_arr[i] < max_digit:\n            num_arr[i], num_arr[max_index-1] = num_arr[max_index-1], num_arr[i]\n            # Reverse the array from the second digit (from the right) to the largest digit\n            num_arr[i+1:max_index] = num_arr[i+1:max_index][::-1]\n            # Add the reversed array to the beginning of the array\n            num_arr[:max_index] += num_arr[i+1:max_index]\n            break\n    # Convert the array of digits back to a string and return it as an integer\n    return int(''.join(num_arr))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    heap = []\n    result = []\n\n    for i in range(len(nums1)):\n        heapq.heappush(heap, (-nums1[i], i))\n        heapq.heappush(heap, (-nums2[i], i))\n\n        while len(heap) > k:\n            pair_val, pair_idx = heapq.heappop(heap)\n            heapq.heappush(heap, (-nums1[pair_idx], pair_idx))\n            heapq.heappush(heap, (-nums2[pair_idx], pair_idx))\n\n        while len(heap) > 0 and result:\n            pair_val, pair_idx = heapq.heappop(heap)\n            result.append((-pair_val, pair_idx))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    \n    for num in nums1:\n        heapq.heappush(pq, (num, 0))\n        \n    for num in nums2:\n        if len(pq) < k:\n            heapq.heappush(pq, (num, 1))\n        else:\n            min_num, min_idx = heapq.heappop(pq)\n            if num > min_num:\n                heapq.heappush(pq, (num, min_idx))\n                \n    result = []\n    for i in range(k):\n        min_num, _ = heapq.heappop(pq)\n        result.append((min_num, nums1[nums1.index(min_num)]))\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs of elements\n    heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Iterate through the second array\n        for num2 in nums2:\n            # Create a pair of the current elements\n            pair = (num1, num2)\n            \n            # If the heap is not full, add the pair to the heap\n            if len(heap) < k:\n                heapq.heappush(heap, pair)\n            # Otherwise, if the heap is full and the current pair is smaller than the smallest pair in the heap, pop the smallest pair and add the current pair\n            elif len(heap) == k and pair < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, pair)\n    \n    # Create a list to store the k smallest pairs\n    k_smallest_pairs = []\n    \n    # Iterate through the heap and add the pairs to the list\n    while len(heap) > 0:\n        k_smallest_pairs.append(heapq.heappop(heap))\n    \n    return k_smallest_pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap to store the smallest pairs\n    min_heap = []\n\n    # Loop through each element in the first array\n    for num1 in nums1:\n        # Initialize the current pair to None\n        current_pair = None\n\n        # Loop through each element in the second array\n        for num2 in nums2:\n            # Check if the current pair is None or if it needs to be updated\n            if current_pair is None or current_pair[0] > num1 or current_pair[1] > num2:\n                # Update the current pair with the smaller element\n                current_pair = (min(num1, num2), max(num1, num2))\n                # Add the current pair to the heap if there are less than k pairs in the heap\n                if len(min_heap) < k:\n                    heapq.heappush(min_heap, current_pair)\n                # If there are more than or equal to k pairs in the heap, remove the smallest pair from the heap\n                else:\n                    heapq.heappop(min_heap)\n                    heapq.heappush(min_heap, current_pair)\n\n    # Get the k smallest pairs from the heap\n    result = []\n    for i in range(k):\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k and initialize it with pairs of elements from nums1 and nums2\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pair = (nums1[i]+nums2[j], (i,j))\n            heapq.heappush(heap, pair)\n            if len(heap) > k:\n                pair = heapq.heappop(heap)\n                nums1[pair[1][0]] -= pair[0]\n                nums2[pair[1][1]] -= pair[0]\n    \n    # Extract the k smallest pairs and return them as a list\n    result = []\n    while heap:\n        pair = heapq.heappop(heap)\n        result.append((pair[0], pair[1][0]))\n        nums1[pair[1][0]] += pair[0]\n        nums2[pair[1][1]] += pair[0]\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    :param nums1: first array\n    :param nums2: second array\n    :param k: number of pairs required\n    :return: k smallest pairs\n    \"\"\"\n    # Create a min heap to store k smallest elements\n    min_heap = []\n\n    # Iterate through the first array and the second array\n    for num1 in nums1:\n        for num2 in nums2:\n            # Add the sum of num1 and num2 to the heap\n            heapq.heappush(min_heap, num1 + num2)\n\n            # If the size of the heap is greater than k, remove the smallest element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Return the k smallest elements\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Combine the arrays in a single list\n    nums = nums1 + nums2\n    # Use a min heap to keep track of the k smallest numbers found so far\n    min_heap = []\n    # Initialize the count to 0 and the index of the next smallest number to be added to the heap\n    count, next_index = 0, 0\n    # Iterate over the combined list and add the next smallest number to the heap\n    for num in nums:\n        heapq.heappush(min_heap, num)\n        # Check if we have found k numbers in the heap\n        if count == k:\n            # Return the two smallest numbers as a tuple\n            return (heapq.heappop(min_heap), heapq.heappop(min_heap))\n        # Check if the next smallest number needs to be added to the heap\n        elif next_index < len(nums) and num < nums[next_index]:\n            next_index += 1\n    # If we have not found k numbers, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a min heap for the second array\n    min_heap = []\n    # create a dictionary to store the count of elements in the first array\n    count_dict = {}\n    \n    # loop through the first array\n    for num in nums1:\n        # if the element is already in the dictionary, increment its count by 1\n        if num in count_dict:\n            count_dict[num] += 1\n        # otherwise, add the element to the dictionary with count 1\n        else:\n            count_dict[num] = 1\n            # add the element to the min heap\n            heapq.heappush(min_heap, num)\n        \n        # if the heap size is greater than or equal to k, pop the smallest element from the heap and decrement its count in the dictionary\n        if len(min_heap) >= k:\n            # pop the smallest element from the heap and decrement its count in the dictionary\n            num = heapq.heappop(min_heap)\n            count_dict[num] -= 1\n            # if the count of the element in the dictionary is 0, remove it from the dictionary\n            if count_dict[num] == 0:\n                del count_dict[num]\n            \n    # create a list to store the k number of smallest pairs\n    result = []\n    \n    # loop through the second array again\n    for num in nums2:\n        # if the element is already in the dictionary, decrement its count by 1\n        if num in count_dict:\n            count_dict[num] -= 1\n        # if the element is not in the dictionary, increment its count by 1 and add the element to the result list\n        else:\n            count_dict[num] = 1\n            result.append((num, num))\n            \n        # if the count of the element in the dictionary is 0, remove it from the dictionary\n        if count_dict[num] == 0:\n            del count_dict[num]\n            \n    # sort the result list in ascending order based on the first element of each tuple in the list\n    result.sort(key=lambda x: x[0])\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    count = 0\n\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if count < k:\n                if abs(nums1[i]) + abs(nums2[j]) <= k:\n                    heapq.heappush(heap, (abs(nums1[i]) + abs(nums2[j]), (nums1[i], nums2[j])))\n                    count += 1\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    # Sort the two arrays in ascending order\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min-heap of size k\n    min_heap = []\n    for i in range(k):\n        heappush(min_heap, (nums1[i], i))\n\n    # Iterate through the sorted arrays and extract the smallest element from each array\n    for num2 in nums2:\n        # Extract the smallest element from the min-heap\n        smallest_element, index = heappop(min_heap)\n        # Create a tuple of the element and its index in the original array\n        pair = (smallest_element, index)\n        # Insert this tuple in the min-heap\n        heappush(min_heap, pair)\n\n    # Extract the k smallest pairs from the min-heap and return the list of pairs\n    pairs = []\n    while len(min_heap) > 0:\n        pair = heappop(min_heap)\n        pairs.append(pair)\n        if len(min_heap) < k:\n            smallest_element, index = heappop(min_heap)\n            pair = (smallest_element, index)\n            heappush(min_heap, pair)\n\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            products.append(product)\n    min_product = min(products)\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize minimum product to infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n\n    # Iterate over the tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if necessary\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1)\n    n = len(list1)\n    min_product = float('inf')\n    \n    # Iterate through all pairs of tuples\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the product of the two tuples\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            # Update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for tup1, tup2 in zip(list1, list1[1:]):\n        # Calculate the product of the tuples\n        product = tup1[0] * tup2[1]\n\n        # Check if the product is less than the current minimum product\n        if product < min_product:\n            min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of all pairs of tuples.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        min_product = float('inf')\n        for i in range(len(list1)):\n            for j in range(i+1, len(list1)):\n                product = list1[i][0] * list1[j][1]\n                if product < min_product:\n                    min_product = product\n        return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]  # initialize minimum value with first element\n    for val in listval[1:]:  # iterate over remaining elements\n        if val < min_val:  # if current value is smaller than minimum, update minimum\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    This function takes a list of heterogeneous values as input and returns the minimum value.\n    '''\n    minval = float('inf')\n    for val in listval:\n        if val < minval:\n            minval = val\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # initialize min_val to the first value in the list\n    min_val = listval[0]\n\n    # iterate through the rest of the list\n    for val in listval[1:]:\n        # if the current value is smaller than the current min_val, update min_val\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, (list, tuple)):\n        raise TypeError(\"Input must be a list or tuple.\")\n    \n    min_val = None\n    for item in listval:\n        if min_val is None:\n            min_val = item\n        elif item < min_val:\n            min_val = item\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    word = word.split('_')\n    for i, word_part in enumerate(word):\n        if i == 0:\n            camel_case += word_part\n        else:\n            camel_case += word_part.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = re.findall(r'[a-z]+', word.lower())\n\n    # Convert the first word to uppercase\n    result = words[0].upper()\n\n    # Convert the rest of the words to lowercase and append them to the result\n    for i in range(1, len(words)):\n        result += words[i]\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first letter of each word\n    capitalized_words = [word.capitalize() for word in words]\n    # Join the capitalized words back into a string\n    camel_case_word = ''.join(capitalized_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case by capitalizing the first letter of each word\n    camel_case = re.sub(r'_(.)', lambda m: m.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s1 = re.sub('(_\\w)', lambda m: m.group(1).upper(), word)\n    return s1[0].lower() + s1[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake_case to CamelCase\n    camel_case = ''.join([word[0].lower(), word[1:]])\n    # Remove any numbers in the CamelCase string\n    camel_case = re.sub(r'([0-9])', '', camel_case)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for char in word:\n        if char.isupper():\n            camel_case += char\n        else:\n            camel_case += \"_\" + char.lower()\n    return camel_case[0].upper() + camel_case[1:]"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove leading and trailing underscores\n    word = word.strip('_')\n    \n    # Convert all remaining underscores to spaces\n    word = re.sub('__','', word)\n    \n    # Split the word into words\n    words = word.split()\n    \n    # Convert the first letter to uppercase\n    words[0] = words[0].capitalize()\n    \n    # Join the words with underscores\n    result = '_'.join(words)\n    \n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    This function takes a snake case string and returns a camel case string.\n    '''\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n    camel_case_word = ''\n    for word in words:\n        camel_case_word += word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and returns a new list with all the odd numbers removed.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i % 2!= 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    :param l: list of numbers\n    :return: list with odd numbers removed\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes in a list of tuples and an integer n. \n    It returns the nth element of the list.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for i in range(len(list1)):\n        if i == n - 1:\n            return list1[i][1]\n    return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input must be a list\")\n    \n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    \n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    \n    if n > len(list1):\n        raise ValueError(\"n must be less than or equal to the length of the list\")\n    \n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        print(\"Index out of range\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # loop through each value in the first list\n    for value in list1:\n        # check if the value exists in the second list\n        if value in list2:\n            # if it does, return True\n            return True\n    # if no values in the first list exist in the second list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            print(item, \"is in list1 and list2\")\n        else:\n            print(item, \"is only in list1\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return set(list1).intersection(set(list2))!= set()"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Create a dictionary to store the values of each list\n    values = {value: True for value in list1 + list2}\n\n    # Iterate over the values in the second list and remove them from the dictionary\n    for value in list2:\n        if value in values:\n            del values[value]\n\n    # Check if there are any values left in the dictionary\n    return bool(values)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Loop through each element in list1\n    for item in list1:\n        # Check if the item is in list2\n        if item in list2:\n            return True\n    # If no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = arr[0]\n    max_product = arr[0] * arr[1]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        \n        product = arr[i-1] * max1 * max2\n        if product > max_product:\n            max_product = product\n            \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    This function takes an array of integers as input and returns a tuple containing the maximum product of two integers in the array.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return (max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    \n    # Iterate through array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate product\n            product = arr[i] * arr[j]\n            \n            # Update max product and pair\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    # Return max pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_1 = max_2 = float('-inf')\n    for num in arr:\n        if num > max_1:\n            max_2 = max_1\n            max_1 = num\n        elif num > max_2:\n            max_2 = num\n    return max_1 * max_2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = (0,0)\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            current_pair = (arr[i],arr[j])\n            if current_pair[0]*current_pair[1]>max_pair[0]*max_pair[1]:\n                max_pair = current_pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_pair = (-1, -1)\n    max_product = float('-inf')\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for i in arr:\n        if i > max1:\n            max2 = max1\n            max1 = i\n        elif i > max2:\n            max2 = i\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers and finds the pair with the highest product.\n    \"\"\"\n    # Initialize two variables to keep track of the maximum product and minimum product\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through the array and update the maximum and minimum products\n    for i in range(len(arr)):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            min_product = arr[i]\n        elif arr[i] < min_product:\n            min_product = arr[i]\n\n    # Calculate the maximum product and minimum product for the second half of the array\n    second_half_max = float('-inf')\n    second_half_min = float('inf')\n\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > second_half_max:\n            second_half_max = arr[i]\n        elif arr[i] < second_half_min:\n            second_half_min = arr[i]\n\n    # Calculate the maximum product of all pairs\n    max_pair_product = max(max_product, second_half_max)\n\n    # Calculate the minimum product of all pairs\n    min_pair_product = min(min_product, second_half_min)\n\n    # Return the maximum product of all pairs\n    return max_pair_product"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_elements.append(Input[i][0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common = []\n    for t in Input:\n        if len(set(t)) == 1:\n            common.append(t[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tup in Input:\n        if tup[0] in common_first_element:\n            common_first_element.append(tup[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Finding common first element in the list of tuples\n    common_first_element = None\n    for tuple_element in Input:\n        if common_first_element is None or tuple_element[0] == common_first_element:\n            common_first_element = tuple_element[0]\n        else:\n            break\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n    for item in Input:\n        common_elements.add(item[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common_elements.append(i[0])\n                break\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in Input:\n        if len(set(i[0])) > 1:\n            common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    common_elem = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_elem is None:\n                    common_elem = Input[i][0]\n                else:\n                    common_elem = min(common_elem, Input[i][0])\n    return common_elem"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list of lists, where each inner list contains tuples with common elements of the input list.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append([Input[i], Input[j]])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    common_elements = set()\n\n    for i in Input:\n        common_elements = common_elements.union(set([x[0] for x in i]))\n\n    return common_elements"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes in a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    # initializing variables\n    max_len = 0\n    max_elem = None\n\n    # iterating over the list\n    for elem in lst:\n        # checking if the length of the element is greater than the maximum length found so far\n        if len(elem) > max_len:\n            # updating the maximum length and element\n            max_len = len(elem)\n            max_elem = elem\n\n    # returning the maximum element found\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if not lst: \n        return \"Error: List is empty.\"\n    \n    max_len = 0\n    max_elem = None\n    \n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem)\n            max_elem = elem\n            \n    if max_elem: \n        return max_elem\n    else: \n        return \"Error: List has no elements with maximum length.\""
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum(round(num) for num in list1)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        num = round(num)\n        total_sum += num\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1,n+1,2):\n        sum_cubes += i**3\n    return sum_cubes\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n\n    # loop from 0 to n-1 and add the cube of each even number to the sum\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 3\n\n    # return the sum of the cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    This function finds the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize sum variable to 0\n    sum_of_cubes = 0\n\n    # Iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the cube of the current number\n        cube = i ** 3\n\n        # Add the cube to the sum variable\n        sum_of_cubes += cube\n\n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += i\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # create an empty string variable to store the concatenated string\n    concatenated_str = ''\n    # loop through each element of the tuple\n    for element in test_tup:\n        # concatenate the element to the concatenated string\n        concatenated_str += str(element)\n    # return the concatenated string\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function takes a tuple as an input and concatenates each element of the tuple by the delimiter.\n    '''\n    concatenated_string = \"\"\n    for i in range(len(test_tup)):\n        concatenated_string += str(test_tup[i])\n        if i < len(test_tup)-1:\n            concatenated_string += delimiter\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return_str = ''\n    for i in test_tup:\n        return_str += str(i) + '|'\n    return return_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for i in test_tup:\n        result += str(i)\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = ''\n    for item in test_tup:\n        delimiter += item\n    return delimiter"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    new_tup = \"\"\n    for i in range(len(test_tup)):\n        new_tup += str(test_tup[i])\n        if i < len(test_tup)-1:\n            new_tup += delimiter\n    return new_tup"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n\n    average = sum/count\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(n+1)]  \n    return sum(cubes)/len(cubes)  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0  \n    for i in range(1, n+1):  \n        cube_sum += i**3  \n    return cube_sum/n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(n):\n        sum_of_cubes += i**3\n\n    average_of_cubes = sum_of_cubes/n\n\n    return average_of_cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average = sum_of_cubes/n\n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, string in enumerate(test_tuple):\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for elem in test_tuple:\n        if type(elem) == str:\n            rear_list.append(elem[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in range(len(test_tuple)):\n        rear_tuple += (test_tuple[i][-1],)\n    return rear_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for string in test_tuple:\n        if len(string) > 1:\n            rear_index_elements.append(string[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [str(test_tuple[0]) + str(test_tuple[2])]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_rear = []\n    for i in range(len(test_tuple)):\n        extracted_rear.append(test_tuple[i][-1])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_tuple = ()\n    for i in range(len(test_tuple)):\n        rear_tuple += (test_tuple[i][-1],)\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    # Filter out odd numbers from the list\n    result = [x for x in nums if x % 2!= 0]\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regex pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() method to replace the '-' with '-' in the string\n    return re.sub(r'[^\\d]', '', dt).replace('-', '/')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # Use the re.sub() function to replace the matched pattern with the desired format\n    dt_new = re.sub(pattern, lambda x: x.group(0)[6:4] + '-' + x.group(0)[4:2] + '-' + x.group(0)[2:0], dt)\n    \n    return dt_new"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = day + '-' + month + '-' + year\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # search for the pattern in the input string\n    match = re.search(pattern, dt)\n\n    # check if the pattern is found in the string\n    if match:\n        # extract the date part from the match object\n        date_part = match.group(0)\n        # reverse the order of the date parts\n        date_parts = date_part.split('-')\n        reversed_date = date_parts[2] + '-' + date_parts[1] + '-' + date_parts[0]\n        # return the reversed date string\n        return reversed_date\n    else:\n        # return the input string if the pattern is not found\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_pattern = r'(\\d{2})-(\\d{2})-(\\d{4})'\n    return re.sub(pattern, new_pattern, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.match(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        return f\"{day}-{month}-{year}\"\n    else:\n        print(\"Invalid date format. Please use yyyy-mm-dd format.\")"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.match() method to match the pattern in the given date string\n    match = re.match(pattern, dt)\n\n    # If the match is successful, extract the groups and convert them to dd-mm-yyyy format\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n\n    # If the match is not successful, return the original date string as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    dt (str): date string in yyyy-mm-dd format.\n\n    Returns:\n    str: date string in dd-mm-yyyy format.\n    \"\"\"\n    # Define the regular expression pattern for the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the pattern in the date string and replace the matches with the corresponding strings\n    date_str = re.sub(pattern, lambda match: '%02d-%02d-%04d' % tuple(int(x) for x in match.group(0).split('-')), dt)\n\n    return date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for matching the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the input date format with the pattern and store the matched groups in a list\n    match = re.match(pattern, dt)\n    if not match:\n        print('Invalid date format.')\n        return\n    \n    # Convert the matched groups to dd-mm-yyyy format\n    year, month, day = match.groups()\n    new_dt = f'{day}-{month}-{year}'\n    \n    return new_dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h//3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Find the maximum value in the list\n    max_val = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_val:\n            max_val = my_list[i]\n    \n    # Perform insertion sort for each increment of the value in the list\n    for inc in range(1, max_val+1):\n        for i in range(inc, len(my_list)):\n            # Insert the value in the current position\n            current_val = my_list[i]\n            j = i - inc\n            while j >= 0 and my_list[j] > current_val:\n                # Shift the value to the left\n                my_list[j+inc] = my_list[j]\n                j -= inc\n            # Insert the value in its correct position\n            my_list[j+inc] = current_val"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Sort the array using gap sequence\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the largest gap\n    gap = len(my_list) // 2\n    \n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, len(my_list)):\n            # Compare and swap elements\n            for j in range(i, gap, gap):\n                if my_list[j] > my_list[j - gap]:\n                    my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n        # Reduce the gap by one position\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the two input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must be of equal length.\")\n\n    # Extract the elementwise and tuples using the bitwise AND operator\n    and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define variables to store the length of the tuples and the result tuples\n    len_tup1 = len(test_tup1)\n    len_tup2 = len(test_tup2)\n\n    # Check if the two tuples have the same length\n    if len_tup1!= len_tup2:\n        print(\"The two tuples must have the same length.\")\n        return\n\n    # Extract the elementwise and tuples from the two input tuples\n    and_tup = tuple([a & b for a, b in zip(test_tup1, test_tup2)])\n\n    # Return the result tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # creating empty list to store the elementwise and tuples\n    and_lst = []\n    # iterating over each element of the first tuple\n    for i in range(len(test_tup1)):\n        # extracting the corresponding element of the second tuple\n        j = test_tup2[i]\n        # checking if both elements are True or both are False\n        if (test_tup1[i] and j) or (not test_tup1[i] and not j):\n            # adding the elementwise and tuple to the list\n            and_lst.append((test_tup1[i], test_tup2[i]))\n    return and_lst"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] & test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] and test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input, test_tup1 and test_tup2, and returns a tuple\n    containing the elementwise and of the corresponding elements in the input tuples.\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Extract the elementwise and of the corresponding elements in the input tuples\n    and_tup = tuple(x1 and x2 for x1, x2 in zip(test_tup1, test_tup2))\n    \n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function finds the directrix of a parabola.\n    \n    Parameters:\n    a (float): The coefficient of the first term in the equation.\n    b (float): The coefficient of the second term in the equation.\n    c (float): The constant term in the equation.\n    \n    Returns:\n    float: The value of the directrix of the parabola.\n    '''\n    \n    # Find the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is negative or zero\n    if discriminant < 0:\n        print(\"The parabola is not real.\")\n        return None\n    \n    # Find the directrix\n    directrix = (-b + discriminant**(1/2)) / (2*a)\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the determinant of the matrix\n    determinant = b**2 - 4*a*c\n    \n    # Check if the determinant is positive or negative\n    if determinant > 0:\n        directrix = (-b + determinant**0.5)/(2*a)\n    elif determinant < 0:\n        directrix = (-b - determinant**0.5)/(2*a)\n    else:\n        directrix = None\n    \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola is not defined.\"\n    else:\n        d = (b ** 2) - (4 * a * c)\n        if d > 0:\n            directrix = (-b + (d ** 0.5)) / (2 * a)\n            print(\"The directrix of the parabola is\", directrix)\n        elif d == 0:\n            directrix = -b / (2 * a)\n            print(\"The directrix of the parabola is\", directrix)\n        else:\n            directrix = (-b - (d ** 0.5)) / (2 * a)\n            print(\"The directrix of the parabola is\", directrix)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "c = 4ab^2 - b^2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"The equation of the parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is real\n    if discriminant > 0:\n        # Calculate the directrix\n        x1 = (-b + discriminant**(1/2)) / (2*a)\n        x2 = (-b - discriminant**(1/2)) / (2*a)\n        \n        return x1, x2\n    \n    # Check if the discriminant is zero\n    elif discriminant == 0:\n        x = -b / (2*a)\n        return x\n    \n    # The discriminant is negative, so there is no real root\n    else:\n        return \"No real root exists.\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the directrix\n        directrix = (-b + discriminant**0.5)/(2*a)\n        \n        # Check if the directrix is real and greater than 0\n        if directrix.is_real and directrix > 0:\n            return directrix\n        else:\n            print(\"The directrix is not real or negative.\")\n    else:\n        # The discriminant is negative\n        print(\"The discriminant is negative.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Formula for the directrix of a parabola\n    directrix = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if disc > 0: \n        # Calculate the directrix\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        return root1, root2\n    else:\n        return \"There is no real root\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is positive or negative\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    elif discriminant == 0:\n        root = -b / (2*a)\n        print(\"The directrix of the parabola is:\", root)\n    else:\n        print(\"The discriminant is equal to zero.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        return common_element(list2, list1)\n    for item in list1:\n        if item in list2 and item not in common_list:\n            common_list.append(item)\n    return len(common_list) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for num in list1:\n        if num in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    common = False\n    for element in list1:\n        if element in list2 and not common:\n            common = True\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # create a set from the first list and check if it is in the second list\n    set1 = set(list1)\n    if set1.intersection(set(list2)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * base1 + 0.5 * base2\n    # Calculate the length of the hypotenuse of the trapezium\n    hypotenuse = 0.5 * (base1 + base2)\n    # Calculate the area of the smaller trapezium\n    small_area = 0.5 * base1 * hypotenuse\n    # Calculate the area of the larger trapezium\n    large_area = 0.5 * base2 * hypotenuse\n    # Calculate the difference in area between the smaller and larger trapeziums\n    diff_area = small_area - large_area\n    # Calculate the length of the small trapezium\n    small_length = 0.5 * hypotenuse * diff_area / area\n    # Calculate the length of the large trapezium\n    large_length = 0.5 * hypotenuse * (diff_area - small_area) / area\n    # Find the median length of the trapezium\n    median_length = max(small_length, large_length)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function takes three arguments: base1, base2, and height.\n    It finds the median length of a trapezium using the formula:\n\n    median = 0.5 * (base1 + base2) + 0.5 * height\n\n    and returns the result.\n    '''\n\n    # Calculate the two sides of the trapezium\n    s1 = 0.5 * base1\n    s2 = 0.5 * base2\n    h = 0.5 * height\n\n    # Calculate the area of the trapezium\n    area = s1 + s2 + h\n\n    # Calculate the length of the perpendicular\n    perp_length = 0.5 * (s1 + s2)\n\n    # Calculate the length of the diagonals\n    diag_length = 0.5 * (s1 + s2 + h)\n\n    # Calculate the area of the perpendicular\n    perp_area = 0.5 * (perp_length * perp_length)\n\n    # Calculate the area of the diagonals\n    diag_area = 0.5 * (diag_length * diag_length)\n\n    # Calculate the product of the areas of the diagonals and the area of the perpendicular\n    total_area = 2 * diag_area * perp_area\n\n    # Calculate the ratio of the total area to the area of the trapezium\n    ratio = total_area / area\n\n    # Return the median of the two sides\n    return 0.5 * (diag_length + perp_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1\n    side2 = base2\n\n    # Calculate the length of the longest side\n    max_side = max(side1, side2)\n\n    # Calculate the length of the shortest side\n    min_side = min(side1, side2)\n\n    # Calculate the length of the longest side using the formula:\n    # longest_side = sqrt(2 * area / min_side)\n    longest_side = (area / min_side) ** 0.5\n\n    # Calculate the length of the shortest side using the formula:\n    # shortest_side = sqrt(2 * area / max_side)\n    shortest_side = (area / max_side) ** 0.5\n\n    # Calculate the length of the smaller side\n    smaller_side = min_side if longest_side > min_side else longest_side\n\n    # Calculate the length of the larger side\n    larger_side = max_side if longest_side < max_side else longest_side\n\n    # Calculate the perimeter of the trapezium\n    perimeter = (side1 + side2 + smaller_side + larger_side) / 2\n\n    # Calculate the length of the trapezium\n    trapezium_length = perimeter / 2\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_length - 2 * smaller_side + (trapezium_length - 2 * smaller_side) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    # Calculate the length of the top half of the trapezium\n    top_length = math.sqrt(area)\n    # Calculate the length of the bottom half of the trapezium\n    bottom_length = math.sqrt(area - top_length**2)\n    # Calculate the median length of the trapezium\n    median = (top_length + bottom_length) / 2\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of the first half of the trapezium\n    first_half = 0.5 * (base1 + base2)\n    # Calculate the length of the second half of the trapezium\n    second_half = 0.5 * (base2 + height)\n    # Calculate the length of the trapezium itself\n    trapezium = first_half + second_half\n    # Calculate the lengths of the two halves of the trapezium\n    half1 = first_half\n    half2 = second_half\n    # Sort the lengths of the two halves in descending order\n    half1_sorted = sorted(half1, reverse=True)\n    half2_sorted = sorted(half2, reverse=True)\n    # Calculate the median of the two halves\n    median = 0.5 * (half1_sorted[0] + half2_sorted[0])\n    # Return the median of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the difference between the base areas\n    diff_area = 0.5 * (base1 - base2) * height\n    \n    # Calculate the length of the upper half of the trapezium\n    upper_half = math.sqrt(diff_area ** 2 - area)\n    \n    # Calculate the length of the lower half of the trapezium\n    lower_half = math.sqrt(diff_area ** 2 - upper_half ** 2)\n    \n    # Calculate the median length of the trapezium\n    median = 0.5 * (upper_half + lower_half)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the upper half of the trapezium\n    upper_half_len = base1 + base2 + height\n    # Calculate the length of the lower half of the trapezium\n    lower_half_len = base1 + base2\n    # Find the median of the upper and lower halves\n    median_upper_half = upper_half_len / 2\n    median_lower_half = lower_half_len / 2\n    # Calculate the median of the trapezium\n    trapezium_median = max(median_upper_half, median_lower_half)\n    return trapezium_median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    midpoint = area / 2\n    upper_half = 0\n    lower_half = 0\n    for i in range(height):\n        upper_half += i * base1\n        lower_half += (height - i - 1) * base2\n    upper_median = upper_half / 2\n    lower_median = lower_half / 2\n    if midpoint >= upper_median:\n        if midpoint >= lower_median:\n            return max(base1, base2)\n        else:\n            return base1\n    else:\n        if midpoint >= lower_median:\n            return max(base1, base2)\n        else:\n            return base2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base = (base1 + base2) / 2\n    area = 0.5 * base * height\n    area1 = area - 0.5 * (base1 + base2)\n    area2 = area - 0.5 * (base2 + base)\n    if area1 > area2:\n        return base1\n    elif area2 > area1:\n        return base2\n    else:\n        return None"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Check if the entered number is greater than the first element in the array\n    if number > arr[0]:\n        return True\n    else:\n        # Check if the entered number is greater than the second element in the array\n        if number > arr[1]:\n            return True\n        else:\n            # Check if the entered number is greater than the third element in the array\n            if number > arr[2]:\n                return True\n            else:\n                # Check if the entered number is greater than the fourth element in the array\n                if number > arr[3]:\n                    return True\n                else:\n                    # Check if the entered number is greater than the fifth element in the array\n                    if number > arr[4]:\n                        return True\n                    else:\n                        # Check if the entered number is greater than the sixth element in the array\n                        if number > arr[5]:\n                            return True\n                        else:\n                            # Check if the entered number is greater than the seventh element in the array\n                            if number > arr[6]:\n                                return True\n                            else:\n                                # Check if the entered number is greater than the eighth element in the array\n                                if number > arr[7]:\n                                    return True\n                                else:\n                                    # Check if the entered number is greater than the ninth element in the array\n                                    if number > arr[8]:\n                                        return True\n                                    else:\n                                        # Check if the entered number is greater than the tenth element in the array\n                                        if number > arr[9]:\n                                            return True\n                                        else:\n                                            # If the entered number is not greater than any element in the array, return False\n                                            return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in an array and a number as input and returns True if the number is greater than all the elements in the array, False otherwise.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # loop through the array and check if the number is greater than each element\n    for element in arr:\n        if number > element:\n            # if the number is greater, return True\n            return True\n    # if the number is not greater, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[b]+'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return \"Match found: {}\".format(matches[0])\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    result = re.search(pattern, text)\n    return result.group(0) if result else None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    return pattern.match(text)\n\ntext = \"abcabc\"\nresult = text_match_one(text)\nprint(result)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    last_digit = n % 10\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    This function takes an integer as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # check if the given number is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"The given number should be an integer.\")\n    # calculate the last digit of the number using integer division and modulus operator\n    last_digit = n % 10\n    # return the last digit of the number\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of numbers as input and returns a list of negative numbers in the same order as the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers of the input list.\n    \"\"\"\n    new_list = []\n    for num in lst:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = \"\"\n    # iterate over each character in the input string\n    for char in str1:\n        # check if the character is odd\n        if ord(char) % 2 == 1:\n            # if it is odd, append it to the result string\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = ''\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isdigit() or char.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # create an empty string to store the new string with odd characters removed\n    new_str = \"\"\n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is odd, append it to the new string\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Create an empty string to store the new string without odd characters\n    new_str = \"\"\n    # Iterate through each character in the input string\n    for char in str1:\n        # Check if the character is odd (i.e., it's an odd number)\n        if char % 2!= 0:\n            # If the character is odd, add it to the new string\n            new_str += char\n    # Return the new string without odd characters\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j]!= test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) and (test_list[i][0] == test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    # iterate through the list and update the count in the dictionary\n    for num in test_list:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # iterate through the dictionary and count the number of bidirectional pairs\n    count = 0\n    for num1, count1 in count_dict.items():\n        if num1 < num2:\n            # check if num1 and num2 are both in the dictionary\n            if num2 in count_dict:\n                # if they are, then there is a bidirectional tuple pair\n                count += (count_dict[num1] * count_dict[num2])\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                    bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # initialize variables to keep track of count and current tuple\n    count = 0\n    current_tuple = None\n    \n    # loop through the list of tuples\n    for i, tup in enumerate(test_list):\n        # if the current tuple is equal to the previous tuple, increment the count\n        if current_tuple == tup:\n            count += 1\n        # if the current tuple is not equal to the previous tuple, reset the count\n        else:\n            count = 0\n            \n        # update the current tuple for the next iteration\n        current_tuple = tup\n    \n    # return the final count of bidirectional tuple pairs\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n\n    Parameters:\n    L (list): A list of integers.\n\n    Returns:\n    int: A single integer that is the sum of all the integers in the input list.\n    \"\"\"\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 1\n    for num in L:\n        single_number *= num\n    return single_number"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if all(isinstance(x,int) for x in L):\n        return sum(L)\n    else:\n        raise TypeError('List must contain only integers')"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert list to string\n    s = str(L)\n    # initialize sum to 0\n    s_sum = 0\n    # iterate over each character in string\n    for c in s:\n        # convert character to integer\n        i = int(c)\n        # add to sum\n        s_sum += i\n    # return sum as single integer\n    return s_sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize the sum to 0\n    total = 0\n    \n    # Iterate over the list and add each multiple integer to the sum\n    for num in L:\n        if num % 10 == 0:\n            # If the number is a multiple of 10, add it to the total\n            total += num\n        else:\n            # If the number is not a multiple of 10, multiply it by 10 and add it to the total\n            total += 10 * num\n            \n    # Return the final total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result = result * 10 + i\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w*[A-Z]\\w*s?\\b', text)\n    if len(adverbs) > 0:\n        print(f'The adverb(s) are: {adverbs}')\n    else:\n        print('No adverbs found.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b\\w*adverb\\w*\\b'\n    # Find all the matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n    # Iterate over the matches and find the adverb and its position\n    for match in matches:\n        position = text.find(match)\n        adverb = text[position-len(match):position+len(match)].lower()\n        adverbs.append((adverb, position))\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    pattern = r'(\\w+)\\s+(?:a|an|the)\\s+(\\w+)\\s+(?:adverb|adv|adv\\.|advantage|advant\\.|advantageous|advantages|advantaging|advantages?)\\s+(\\w+)'\n    match = re.search(pattern, text)\n    \n    if match:\n        first_adverb = match.group(1)\n        second_adverb = match.group(2)\n        third_adverb = match.group(3)\n        first_adverb_position = match.start(1)\n        second_adverb_position = match.start(2)\n        third_adverb_position = match.start(3)\n        return first_adverb, second_adverb, third_adverb, first_adverb_position, second_adverb_position, third_adverb_position\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ly\\b', text)\n\n    # Find their positions in the sentence\n    positions = [match.start() for match in re.finditer(r'\\b\\w*ly\\b', text)]\n\n    # Return a dictionary with the adverbs and their positions\n    return {adv: position for adv, position in zip(adverbs, positions)}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Removing all punctuations from the sentence\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Splitting the sentence into words\n    words = text.split()\n\n    # Initializing variables to store the position of the adverb and its value\n    adverb_position = ''\n    adverb_value = ''\n\n    # Looping through each word in the sentence\n    for i, word in enumerate(words):\n        # Checking if the word is an adverb\n        if word.lower() in ['very', 'well', 'already', 'never', 'nowhere', 'right', 'there','so', 'just', 'justly', 'not', 'nevertheless', 'rather','some','seemingly','still', 'too','very','mostly','somewhat', 'just', 'justly', 'quite']:\n            # Updating the position of the adverb and its value\n            adverb_position = i\n            adverb_value = word\n\n    # Returning the position and value of the first adverb\n    return adverb_position, adverb_value"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(?:[a-z]|\\d)\\b'\n\n    # Use the re.finditer() function to find all non-overlapping occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize a dictionary to store the positions of adverbs\n    adverb_positions = {}\n\n    # Iterate through the matches and extract the position and adverb text from each match\n    for match in matches:\n        position = match.start()\n        adverb = text[position:position + len(match.group())]\n        adverb_positions[adverb] = position\n\n    # Return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b(?:(?<=\\d)\\s*(?:a|an|the)\\s*|a|an|the)\\s*(?=\\w+\\s*(?:[a-z]|['\"]|$)|['\"]|$))'\n    # Use re.findall() function to find all the occurrences of adverbs in the given text\n    adverbs = re.findall(pattern, text)\n    # Initialize an empty list to store the adverb and its position\n    adverb_position_list = []\n    # Loop through all the adverbs found\n    for i, adverb in enumerate(adverbs):\n        # Find the starting and ending positions of the adverb in the given text\n        start_pos = text.find(adverb)\n        end_pos = start_pos + len(adverb)\n        # Add the adverb and its starting and ending positions to the adverb_position_list\n        adverb_position_list.append((adverb, start_pos, end_pos))\n    # Return the adverb_position_list\n    return adverb_position_list"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = text.split()\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    # Loop through the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.match(r'\\b(adverb)\\b', word):\n            # If it is, add the adverb and its position to the list\n            adverbs.append((word, i))\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'(\\b|^)(?:a|an|the|in|on|at|for|to|from|with|by|about|over|under|against|before|after|above|below)(?:\\b|$)'\n\n    # Use the re.findall() function to find all the matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if len(matches) == 0:\n        return None\n\n    # Return the first match and its position\n    first_match = matches[0]\n    position = text.find(first_match)\n    return first_match, position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # create a regular expression pattern to match adverbs\n    pattern = r'\\b(?:[a-z]+\\s?adverb(?:s)?|adv|adverbial|adverbially|adv\\.|adv\\.ly|adv\\.s|adv\\.lys|adv\\b|adv\\.\\b|adv\\.\\s\\b|adv\\.\\s|adv\\.\\sl\\b|adv\\.\\sl\\s|adv\\.\\sl\\.)'\n    \n    # search the text for matches to the pattern and return the first match and its position\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return match.group(), match.start()\n    else:\n        return None, None"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l * l) + (2 * l * l * l) + (l * l * l)\n    return surface_area\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * (l * l * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    print(\"The surface area of a cube of length\", l, \"is\", surface_area, \"square units.\")"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize empty arrays to store positive and negative numbers\n    pos_nums = array('i')\n    neg_nums = array('i')\n\n    # Iterate through the array and add positive and negative numbers to the respective arrays\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n        else:\n            neg_nums.append(num)\n\n    # Calculate the ration of positive numbers and return it as a float\n    pos_count = len(pos_nums)\n    neg_count = len(neg_nums)\n    return float(pos_count) / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    positive_ratio = count / len(arr)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize a counter and a denominator\n    count = 0\n    denom = 0\n    \n    # Loop through the array and increment the counter and denominator for each positive number\n    for num in nums:\n        if num > 0:\n            count += 1\n            \n    # Calculate the ration\n    if count > 0:\n        ratio = count / len(nums)\n    else:\n        ratio = 0\n    \n    # Return the ration as a float\n    return float(ratio)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    positive_sum = 0\n    positive_count = 0\n\n    for num in arr:\n        if num > 0:\n            positive_sum += num\n            positive_count += 1\n\n    if positive_count == 0:\n        return 0\n    else:\n        return positive_sum / positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Convert the array to a list to count the number of positive numbers\n    positive_nums = sum(nums)\n    total_nums = len(nums)\n    positive_ratio = positive_nums / total_nums\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Initialize an empty list to store the positive numbers\n    positives = []\n\n    # Loop through each number in the array\n    for num in nums:\n        # If the number is positive, add it to the positives list\n        if num > 0:\n            positives.append(num)\n\n    # Calculate the ration of positive numbers\n    total = len(nums)\n    positive_count = len(positives)\n\n    # Calculate the ration as a decimal\n    ratio = positive_count / total\n\n    # Return the ratio as a decimal\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Create an array of booleans to keep track of whether each number is positive or negative\n    arr = array('b', [False] * len(nums))\n    \n    # Iterate through each number in the array and mark it as positive or negative accordingly\n    for num in nums:\n        if num > 0:\n            arr[nums.index(num)] = True\n    \n    # Calculate the ration of positive numbers in the array\n    positive_count = 0\n    negative_count = 0\n    for i, is_positive in enumerate(arr):\n        if is_positive:\n            positive_count += 1\n        else:\n            negative_count += 1\n    \n    ration = positive_count / (positive_count + negative_count)\n    \n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return positives / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0] # assume the first element is the largest negative number\n    for num in list1:\n        if num < 0: # if the element is negative, check if it's greater than the current largest negative number\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0] # initialize the largest variable with the first element of the list\n    \n    for i in range(1, len(list1)): # loop through the list from the second element to the end\n        if list1[i] < 0 and list1[i] > largest: # if the current element is negative and larger than the current largest, update the largest variable\n            largest = list1[i]\n            \n    return largest # return the largest negative number in the list"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')  # initialize largest variable to negative infinity\n    for num in list1:\n        if num < 0:\n            if num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as input and returns the largest negative number from it.\n    '''\n    largest = -float('inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = -1\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = float('-inf') # initialize largest negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > neg_num:\n            neg_num = num # update the largest negative number if a new one is found\n    return neg_num # return the largest negative number found"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if K > len(test_list[i][j]):\n                K = len(test_list[i][j])\n    return [tuple(x[K:] for x in test_list[i]) for i in range(len(test_list))]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][-K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for t in test_list:\n        if len(t) > K:\n            result.append(tuple(t[i] for i in range(K)))\n        else:\n            result.append(t)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(tuple(t[:i]), tuple(t[i+K:])) for t in test_list for i in range(len(t))]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result_list = []\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            tup = tup[:K]\n        result_list.append(tup)\n    return result_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = (tup[0], tup[1][:K])\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:-K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j > K:\n                test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # iterate over the two tuples and multiply the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Tuple lengths do not match.'\n\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for element in lst: \n        if element in count_dict: \n            count_dict[element] += 1\n        else: \n            count_dict[element] = 1\n\n    for element in tup: \n        if element in count_dict: \n            tup_count = count_dict[element]\n            if tup_count > 0: \n                tup = tup.replace(element, str(tup_count), 1)\n        else: \n            tup = tup.replace(element, str(0), 1)\n\n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for element in lst:\n        if element in count:\n            count[element] += 1\n        else:\n            count[element] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the number of occurrences of each element in the list in the tuple.\n    '''\n    count_dict = Counter(lst)\n    count_dict = {k: v for k, v in count_dict.items() if k in tup}\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = {}\n    for key in count:\n        if key in lst:\n            if key in result:\n                result[key] += count[key]\n            else:\n                result[key] = count[key]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    counter = Counter(tup)\n    count_dict = {}\n    for key in counter:\n        count_dict[key] = counter[key]\n\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for item in lst:\n        if item in counter:\n            counter[item] += 1\n    return counter"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(tup)\n    \n    # Get the counts of each element in the unique set\n    counts = Counter(unique_set)\n    \n    # Count the occurrences of each element in the list\n    count_dict = {}\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Combine the counts with the list of elements\n    result = [(elem, count_dict[elem]) for elem in count_dict]\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(tup) \n    for item in lst: \n        if item in count_dict: \n            count_dict[item] += 1 \n        else: \n            count_dict[item] = 1 \n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    freq = Counter(lst)\n    result = {}\n    for key, value in count.items():\n        result[key] = value * freq[key] if key in freq else 0\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup)\n    # Iterate through the list and update the count of each element in the dictionary\n    for elem in lst:\n        count_dict[elem] += 1\n    # Return the updated count dictionary\n    return count_dict"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += (10 * i + 4) / (i + 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676211, 23416728348467675, 37889062373143886, 61305790721611561, 99194853094755447, 160500643816367008, 259695496911122455, 420196140727489463, 679891637"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n    \n    # Use a loop to calculate the sum of perrin numbers\n    for i in range(1, n+1):\n        total_sum += perrin(i)\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize a variable to store the sum of perrin numbers\n    perrin_sum = 0\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # calculate the perrin number for the current value of i\n        perrin_num = sum(range(1, i+1))\n        # add the perrin number to the running sum\n        perrin_sum += perrin_num\n    # return the total sum of perrin numbers\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    \n    # initialize sum and count\n    sum = 0\n    count = 0\n    \n    # loop through perrin numbers\n    while count < n: \n        # calculate perrin number\n        num = 10 ** count\n        \n        # check if perrin number is prime\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        # add perrin number to sum if it is prime\n        if is_prime:\n            sum += num\n            count += 1\n    \n    # return sum\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and an integer as input and\n    returns a list of strings of the specified size extracted from the input list.\n    \"\"\"\n    result = []\n    for i in range(len(str_list) // size):\n        result.extend(str_list[i*size:i*size+size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for string in str_list:\n        result.append(string[:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for s in str_list:\n        extracted_list.append(s[:l])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            str += l[i]\n            l.pop(i)\n            i -= 1\n    return str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    return [str[:i] for i in range(len(str)+1)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer as input and returns a list of strings with\n    the specified size.\n    '''\n    # initialize an empty list to store the extracted strings\n    extracted_list = []\n\n    # loop through the input list of strings\n    for string in str_list:\n        # check if the current string length is greater than or equal to the specified size\n        if len(string) >= size:\n            # if it is, append the current string to the extracted list\n            extracted_list.append(string)\n\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The desired size of each extracted string.\n\n    Returns:\n        list: A list of extracted string values.\n\n    \"\"\"\n    extracted_str_list = []\n    for str in str_list:\n        if len(str) >= size:\n            extracted_str_list.append(str[:size])\n        else:\n            extracted_str_list.append(str)\n    return extracted_str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in l:\n        if len(i) > l[0]:\n            result.append(i)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if i == l-1:\n            extracted_strings.append(str_list[i])\n            break\n        elif len(str_list[i]) >= l:\n            extracted_strings.append(str_list[i][:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size and returns a new list containing the extracted strings.\n    '''\n    return [x[:size] for x in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    This function takes a string as input and returns a new string without any whitespaces.\n    \"\"\"\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function removes all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text1)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text2 = re.sub(r'\\s+', '', text1)\n    # Print the result\n    print(text2)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Calculates the loss amount on a sale, given the actual cost and the sale amount.\n    \"\"\"\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = actual_cost / sale_amount\n    loss_amount = sale_amount * loss_percentage\n    return loss_amount if loss_amount <= sale_amount else 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0 \n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if i % 2 == 0: \n                sum += i \n    if n > 2 and n % 2 == 0: \n        sum += n \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of even factors of the number.\n\n    For example, if n = 24, the function will return 2 (2 + 8).\n    \"\"\"\n\n    # Initialize a variable to store the sum of even factors\n    evenSum = 0\n\n    # Iterate through all the numbers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n\n        # Check if i is even and if n is divisible by i\n        if n % i == 0 and i % 2 == 0:\n\n            # Add i to the evenSum variable\n            evenSum += i\n\n    # Return the evenSum variable\n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer `n` as input, and returns the sum of even factors of `n`.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumOfFactors(n): \n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even factors of n.\n    \"\"\"\n    # initializing sum variable to 0\n    sum = 0 \n    # iterating through numbers from 1 to n \n    for i in range(1, n+1): \n        # checking if i is even \n        if i % 2 == 0: \n            # checking if i is a factor of n \n            if n % i == 0: \n                # adding i to sum \n                sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Calculating the sum of even factors using a loop\n    sum_even = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even += i\n    return sum_even"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of the number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n//i % 2 == 0:\n                sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i % 2 == 0:\n                sum += i\n            else:\n                sum += i+1\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w+z\\w+')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*z\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if year % 100 == 0:\n                if year % 4 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or (year % 400 == 0)):\n            if (monthnum2 == 2 and year % 4 == 0 and year % 100!= 0 and year % 400 == 0):\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # initialize a dictionary with month number as keys and 31 as their corresponding values\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # check if the month number is present in the dictionary\n    if monthnum in days_in_month:\n        # if the month number is present, check if it has 31 days or not\n        if days_in_month[monthnum] == 31:\n            return True\n        else:\n            return False\n    else:\n        # if the month number is not present, it doesn't have 31 days\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print(monthnum2, \"contains 31 days.\")\n    else:\n        print(monthnum2, \"does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum in range(1, 13):\n        return days[monthnum - 1]\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month has 31 days, False otherwise.\n    '''\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    if monthnum in days_in_month:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 % 2 == 0:\n            if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                return True\n            else:\n                return False\n        else:\n            if monthnum2 == 2:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 3 == 0:\n        return False\n    elif monthnum2 % 3!= 0 and monthnum2 % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    This function takes a month number as an argument and returns a boolean value indicating whether the month contains 31 days or not.\n    \"\"\"\n\n    # Convert the month number to integer\n    monthnum = int(monthnum2)\n\n    # Check if the month is valid or not\n    if monthnum < 1 or monthnum > 12:\n        return False\n\n    # Check if the month has 31 days or not\n    if monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # iterate over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string in place\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # create a dictionary to store the length of each sublist\n    sublist_len = {}\n    \n    # loop through each sublist of the list\n    for i in range(len(lst)):\n        sublist = lst[i]\n        \n        # check if the sublist is already in the dictionary\n        if sublist in sublist_len:\n            # if it is, update its length\n            sublist_len[sublist] += 1\n        else:\n            # if not, add it to the dictionary with a length of 1\n            sublist_len[sublist] = 1\n            \n    # find the sublist with the minimum length\n    min_sublist = ''\n    min_len = float('inf')\n    for sublist, length in sublist_len.items():\n        if length < min_len:\n            min_sublist = sublist\n            min_len = length\n            \n    # return the sublist with the minimum length\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize a variable to store the sublist with minimum length\n    min_sublist = None\n    \n    # Loop through each sublist in the list\n    for sublist in lst:\n        # Check if the length of the current sublist is smaller than the length of the sublist with minimum length\n        if len(sublist) < len(min_sublist) or (len(sublist) == len(min_sublist) and sublist < min_sublist):\n            # Update the sublist with minimum length\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    # create a list to store sublists with minimum length\n    min_sublist = []\n\n    # loop through each sublist in the list\n    for sublist in lst:\n        # check if the length of the current sublist is smaller than the length of the minimum sublist\n        if len(sublist) < len(min_sublist):\n            # if yes, update the minimum sublist\n            min_sublist = sublist\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sub = lst[0]\n\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sub = lst[i]\n\n    return min_sub"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length and sublist\n    min_len = float('inf')\n    min_sublist = []\n\n    # loop through all sublists of the given list\n    for i in range(len(lst)):\n        # loop through all sublists of the remaining sublists\n        for j in range(i+1, len(lst)):\n            # check if the length of the current sublist is smaller than the minimum length\n            if len(lst[i:j+1]) < min_len:\n                # update minimum length and sublist\n                min_len = len(lst[i:j+1])\n                min_sublist = lst[i:j+1]\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sub = None\n    for sub in lst:\n        if len(sub) < min_len:\n            min_len = len(sub)\n            min_sub = sub\n    return min_sub"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]')\n\n    # Use the pattern to split the string into substrings\n    substrings = pattern.split(str1)\n\n    # Use a list comprehension to remove uppercase substrings from the list\n    new_substrings = [s for s in substrings if s.islower()]\n\n    # Join the new substrings back into a string\n    result = ''.join(new_substrings)\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # loop through each substring in the string and remove them\n    result = []\n    for substring in pattern.findall(str1):\n        result.append(substring.lower())\n    # join the remaining substrings into a single string and return it\n    return ''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)[A-Z]+')\n\n    # split the string into substrings\n    substrings = pattern.split(str1)\n\n    # join the substrings without uppercase substrings\n    result = ''.join(substring for substring in substrings if not substring.isupper())\n\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'\\b[A-Z]+\\b')\n    uppercase_matches = uppercase_pattern.findall(str1)\n    for match in uppercase_matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove uppercase substrings using regex\n    str1 = re.sub('([A-Z]+)', r'\\1', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Using regular expression to find all uppercase substrings in a given string\n    uppercase_subs = re.findall(r'[A-Z]+', str1)\n\n    # Removing all uppercase substrings from the given string\n    for sub in uppercase_subs:\n        str1 = re.sub(sub, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    This function takes a string as input and returns the string with uppercase substrings removed.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'([a-z])([A-Z])')\n\n    # Replace uppercase substrings with empty strings\n    string = pattern.sub(r'\\1\\2', string)\n\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)\\b[A-Z][a-z]+\\b')\n    \n    # Use the pattern to find all the uppercase substrings in the string\n    matches = pattern.findall(str1)\n    \n    # Use a list comprehension to iterate over the matches and remove them from the string\n    str1 = ''.join([char for char in str1 if not char.isupper()])\n    \n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n    # Find all the uppercase substrings in the given string\n    matches = pattern.findall(str1)\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list where each sublist is first element.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and returns a list of its first elements.\n    '''\n    first_elements = []\n    for sublist in lst:\n        first_elements.append(sublist[0])\n    return first_elements"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a new list with the first element of each sublist.\n    '''\n    new_list = []\n    for i in lst:\n        new_list.append(i[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(string):\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and counts the number of upper case characters in it.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    '''\n    This function counts the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Get the length of the list\n    length = len(list1)\n    # Initialize an empty list to store the combinations\n    combinations = []\n    # Loop through all possible combinations of the elements\n    for i in range(1, length + 1):\n        for j in range(length - i + 1):\n            # Create a list of elements from the given list\n            subset = list1[j:j+i]\n            # Add the combination to the list of combinations\n            combinations.append(subset)\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(lst):\n    # define the empty result list\n    result = []\n    # define the length of the list\n    n = len(lst)\n    # define a function to generate combinations\n    def generate_combinations(start, curr):\n        if start == n:\n            result.append(curr[:])\n            return\n        for i in range(start, n):\n            # exclude duplicates\n            if i > start and lst[i] == lst[i-1]:\n                continue\n            # add the element to the current combination\n            curr.append(lst[i])\n            # recursively call the function with updated start, curr\n            generate_combinations(i+1, curr)\n            # backtrack to remove the added element\n            curr.pop()\n    # call the recursive function with the starting index and empty combination\n    generate_combinations(0, [])\n    # return the result list of all possible combinations\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list and returns all possible combinations of the elements in the list.\n    '''\n    n = len(lst)\n    for i in range(1, n+1):\n        for j in range(n, n-i+1, -1):\n            yield lst[j:j+i]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n\n    # use a nested loop to generate all possible combinations of the list\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                combinations.append([list1[i], list1[j]])\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    if len(lst) < 2:\n        return []\n\n    combs = []\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)-i+1):\n            comb = lst[j:j+i]\n            combs.append(comb)\n    return combs"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Given a list, find all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(1, len(lst) + 1):\n        for j in range(len(lst) - i + 1):\n            combo = lst[j:j+i]\n            result.append(combo)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Create a recursive function to generate all possible combinations\n    def generate_combinations(indices, start, current_combination):\n        '''\n        This function generates all possible combinations of the elements in the given list.\n        '''\n\n        # Check if all elements have been used\n        if start == len(list1):\n            combinations.append(current_combination[:])\n            return\n\n        # Add the current element to the current combination\n        current_combination.append(list1[start])\n\n        # Generate all combinations after excluding the current element\n        generate_combinations(indices, start+1, current_combination)\n\n        # Remove the current element from the current combination\n        current_combination.pop()\n\n        # Generate all combinations after excluding the next element\n        generate_combinations(indices, start+1, current_combination)\n\n    # Call the recursive function to generate all possible combinations\n    indices = range(len(list1))\n    generate_combinations(indices, 0, [])\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # generate all combinations of length 2\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the maximum product subarray.\n\n    Args:\n    arr: List of integers representing the array.\n\n    Returns:\n    int: The maximum product subarray.\n\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n\n        if max_ending_here > max_product:\n            max_product = max_ending_here\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if current_product < 0:\n            current_product = 1\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n        max_so_far = max(max_so_far, max_product)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    curr_product = 1\n\n    for i in range(1, len(arr)):\n        curr_product *= arr[i]\n        max_product = max(max_product, curr_product)\n        if curr_product < 0:\n            curr_product = 1\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray.\n\n    Parameters:\n    arr (list): An array of integers.\n\n    Returns:\n    int: The maximum product subarray of the array.\n    \"\"\"\n\n    # Initialize variables for max product subarray\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # Return the maximum product subarray\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    curr_product = 1\n    \n    for num in arr:\n        curr_product = max(num, curr_product*num)\n        max_product = max(max_product, curr_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n\n    Args:\n        arr (list): A list of integers representing the input array.\n\n    Returns:\n        int: The maximum product subarray of the input array.\n    \"\"\"\n\n    # Initialize variables for keeping track of the maximum product subarray and the current subarray\n    max_product_subarray = float('-inf')\n    current_subarray_max = float('-inf')\n    current_subarray_min = float('inf')\n\n    # Iterate through the array and update the current subarray\n    for num in arr:\n        if num > current_subarray_max:\n            current_subarray_max = num\n        elif num < current_subarray_min:\n            current_subarray_min = num\n\n        # Update the maximum product subarray\n        current_product = current_subarray_max * current_subarray_min\n        if current_product > max_product_subarray:\n            max_product_subarray = current_product\n\n    return max_product_subarray"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product < 0:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = [value for key, value in dict.items()]\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # create an empty list to store the values\n    values = []\n    # loop through the dictionary and add each value to the list\n    for value in dict.values():\n        values.append(value)\n    # check if the length of the list is equal to the value of n\n    if len(values) == n:\n        # return True if all values are same\n        return True\n    else:\n        # return False if not all values are same\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for value in dict.values():\n        if count == 0:\n            prev_value = value\n        else:\n            if prev_value!= value:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict.values()) and len(dict) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set([dict[key] for key in dict])\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    # Get all values of the dictionary\n    values = dict.values()\n\n    # Check if all values are same\n    if len(set(values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == n:\n        return all(value == values[0] for value in values)\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Iterate through the dictionary\n    for key, value in dict1.items():\n        # If the value is an empty string or None, drop the key-value pair\n        if not value:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    return {key: value for key, value in dict1.items() if value is not None and value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each key-value pair in the dictionary\n    for key, value in dict1.items():\n        # If the value is an empty string or list, remove the key-value pair from the dictionary\n        if not value:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '' or value is None or value == [] or value == {}:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    # Initialize variables to keep track of current and previous products\n    max_product = float('-inf')\n    previous_product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Calculate the product of the current element and the previous product\n        current_product = arr[i] * previous_product\n        \n        # Update the maximum product if the new product is greater\n        if current_product > max_product:\n            max_product = current_product\n        \n        # Update the previous product\n        previous_product = current_product\n        \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Create a new array to store the product of the increasing subsequence ending at each index\n    subseq_products = [1] * n\n\n    # Traverse the array from left to right\n    for i in range(1, n):\n        # Find the index of the maximum element in the subarray ending at index i\n        max_index = i\n        for j in range(i):\n            if arr[j] < arr[i] and subseq_products[j] * arr[j] > subseq_products[max_index]:\n                max_index = j\n\n        # Update the product of the increasing subsequence ending at index i\n        subseq_products[i] = max(arr[i] * subseq_products[i], arr[max_index] * subseq_products[max_index])\n\n    # Find the maximum product of any increasing subsequence ending at any index\n    max_product = subseq_products[0]\n    for product in subseq_products:\n        max_product = max(max_product, product)\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    subseq = [1]\n    max_product = subseq[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            subseq.append(subseq[-1] * arr[i])\n            max_product = max(max_product, subseq[-1])\n        else:\n            subseq.append(subseq[-1])\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        # Update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            pass\n\n        # Update min_ending_here\n        if arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n\n        # Update max_so_far\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    current_max_product = 1\n\n    # Iterate through the array and calculate the maximum product\n    for num in arr:\n        # Update the maximum product ending here\n        current_max_product = max(num, current_max_product * num)\n\n        # Update the maximum product so far\n        max_product_ending_here = max(max_product_ending_here, current_max_product)\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_product_ending_here *= arr[i]\n            if max_product_ending_here > max_product_so_far:\n                max_product_so_far = max_product_ending_here\n        else:\n            max_product_ending_here = 1\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return arr[0]\n\n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    def increasing_subsequence(arr):\n        n = len(arr)\n        dp = [1] * n\n        max_so_far = arr[0]\n        max_ending_here = 1\n\n        for i in range(1, n):\n            if arr[i] > max_ending_here:\n                max_ending_here = arr[i]\n            else:\n                max_ending_here = max(max_ending_here, arr[i])\n\n            dp[i] = max_ending_here\n\n        return dp\n\n    def max_product_subsequence(dp):\n        max_product_ending_here = float('-inf')\n        max_product_so_far = float('-inf')\n\n        for i in range(len(dp)):\n            if dp[i] > max_product_ending_here:\n                max_product_ending_here = dp[i]\n                max_product_so_far = max(max_product_so_far, max_product_ending_here)\n            elif dp[i] < 0:\n                max_product_ending_here = float('-inf')\n\n        return max_product_so_far\n\n    increasing_subsequence_dp = increasing_subsequence(arr)\n    max_product_subsequence = max_product_subsequence(increasing_subsequence_dp)\n\n    return max_product_subsequence"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    if n < 2:\n        return None\n    else:\n        # Initializing the result to the first element of the tuple\n        result = test_tup[0]\n        # Looping through the tuple starting from the second element\n        for i in range(1, n):\n            # Calculating the pairwise addition of the current and next elements\n            pair_sum = test_tup[i] + test_tup[i+1]\n            # Updating the result with the sum of the current and next elements\n            result = result + pair_sum\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Check if the input tuple is valid\n    if len(test_tup) < 2:\n        print(\"The input tuple is invalid.\")\n        return None\n\n    # Find the number of elements in the input tuple\n    n = len(test_tup)\n\n    # Initialize an empty list to store the pairwise additions\n    pairwise_sum = []\n\n    # Loop through the elements of the input tuple\n    for i in range(n-1):\n        # Find the sum of the neighboring elements\n        sum_pair = test_tup[i] + test_tup[i+1]\n        pairwise_sum.append(sum_pair)\n\n    # Return the final list of pairwise additions\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # Add the first and last elements of the tuple\n    result = test_tup[0] + test_tup[-1]\n    \n    # Loop through the tuple and add the pairwise additions of adjacent elements\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return test_tup\n\n    result = [test_tup[0]]\n    for i in range(1, n-1):\n        result.append(result[i-1] + test_tup[i])\n\n    result.append(result[-1] + test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    pairwise_sum = 0\n    n = len(test_tup)\n    for i in range(n-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Get the length of the tuple\n    length = len(test_tup)\n\n    # Initialize the sum of the neighboring elements to 0\n    sum_neighboring_elements = 0\n\n    # Loop through the tuple and add the sum of the neighboring elements\n    for i in range(length):\n        if i > 0:\n            sum_neighboring_elements += test_tup[i]\n        if i < length - 1:\n            sum_neighboring_elements += test_tup[i+1]\n\n    # Return the sum of the neighboring elements\n    return sum_neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1] - test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    \n    for i in range(len(test_tup)-1):\n        result += test_tup[i] + test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i + 1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array of integers arr and an integer n as input and returns the \n    product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Initialize the result variable with 1\n    result = 1\n    \n    # Iterate through the array and multiply each element with the result\n    for element in arr:\n        result = (result * element) % n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize a variable to store the product of the array multiplication modulo n\n    result = 1\n    \n    # Iterate over the array and multiply each element by the product\n    for num in arr:\n        result = (result * num) % n\n        \n    # Return the final result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    # check if the list is empty\n    if len(l) == 0:\n        return True\n\n    # initialize variables for the current and previous numbers in the list\n    current = l[0]\n    prev = 0\n\n    # loop through the list starting from the second element\n    for i in range(1, len(l)):\n        # check if the current number is consecutive to the previous number\n        if l[i] - current == 1:\n            prev = current\n            current = l[i]\n        # if the current number is not consecutive to the previous number, return False\n        else:\n            return False\n\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # Check if the list is empty\n    if len(l) == 0:\n        return \"The list is empty\"\n\n    # Initialize variables to store consecutive numbers\n    current = l[0]\n    consecutive = 1\n\n    # Iterate through the list\n    for num in l:\n        # If the current number is equal to the next number\n        if num == current + 1:\n            consecutive += 1\n        else:\n            # If the current number is not equal to the next number\n            if consecutive == 1:\n                return \"The list does not contain consecutive numbers\"\n            else:\n                # If the current number is not equal to the next number and the consecutive number is greater than 1\n                return \"The list contains consecutive numbers\"\n        # Update the current number\n        current = num"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1):\n        if l[i] + 1!= l[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    if len(l) < 2:\n        return True\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1]-l[i]!= 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n\n    Args:\n        l: list of integers\n\n    Returns:\n        True if all elements in the list are consecutive, False otherwise.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    # Check if the list has at least 3 elements\n    if len(l) < 3:\n        return False\n\n    # Initialize the variable to store the first element of the list\n    first = l[0]\n\n    # Iterate through the rest of the elements in the list\n    for i in range(1, len(l)):\n        # Check if the current element is equal to the next element plus 1\n        if l[i] == first + i:\n            return True\n\n        # Update the first element to the current element\n        first = l[i]\n\n    # If all the elements in the list are consecutive, the function will reach here and return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i+1]-l[i]!= 1: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            count += 1\n        else:\n            break\n    if count == len(l)-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of unique elements from the first list\n    unique_set = set(test_list1)\n    # filter out elements in the second list that are not in the first set\n    result = list(filter(lambda x: x in unique_set, test_list2))\n    # return the result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set from the first list to remove duplicates\n    set1 = set(test_list1)\n    # create a set from the second list to remove duplicates\n    set2 = set(test_list2)\n    # find the intersection of the two sets using the & operator\n    intersection = set1.intersection(set2)\n    # create a new list from the intersection and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new list containing the intersection of the elements present in both the lists irrespective of their order.\n    '''\n    # Creating a set to store unique elements of the first list\n    set1 = set(test_list1)\n    \n    # Creating a set to store unique elements of the second list\n    set2 = set(test_list2)\n    \n    # Finding the intersection of the two sets and converting it into a list\n    intersection_list = list(set1.intersection(set2))\n    \n    # Returning the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # convert the lists to sets to remove duplicates\n    set_list1 = set(test_list1)\n    set_list2 = set(test_list2)\n\n    # create an empty list for the intersection\n    intersection = []\n\n    # iterate through each element in the set of list 1\n    for element in set_list1:\n        # if the element is in both sets, add it to the intersection list\n        if element in set_list2:\n            intersection.append(element)\n\n    # convert the intersection list to a tuple\n    tuple_intersection = tuple(intersection)\n\n    return tuple_intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # converting the given tuple lists to sets for faster comparison\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # finding the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # converting the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of elements from both lists and find their intersection\n    unique_elements = set(test_list1 + test_list2)\n    intersection = set(test_list1) & set(test_list2)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates and order doesn't matter\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n    \n    # Convert the intersection back to a list\n    intersection_list = list(intersection)\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # create a set of the unique elements in both lists\n    unique_elements = set(test_list1 + test_list2)\n\n    # create a list of the intersection of the sets\n    intersection_list = list(set.intersection(*[set(test_list1)] * len(unique_elements), *[set(test_list2)] * len(unique_elements)))\n\n    # sort the resulting list in ascending order\n    intersection_list.sort()\n\n    # return the sorted list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Convert both lists into sets to remove duplicates and preserve the order\n    test_list1 = set(test_list1)\n    test_list2 = set(test_list2)\n\n    # Find the intersection of the two sets using the & operator\n    intersection = test_list1 & test_list2\n\n    # Convert the intersection set back into a list and return it\n    return list(intersection)\n"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Replace all occurrences of ch with newch in str1\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(str1)):\n        # if the character matches the character to be replaced\n        if str1[i] == ch:\n            # replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Create a new dictionary with sorted values\n    sorted_dict = {}\n    for i in sorted_counter:\n        sorted_dict[i[0]] = i[1]\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return Counter(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n    # sort the counter in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # create a dictionary from the sorted counter\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = {}\n    for key, value in dict1.items():\n        sorted_dict[value] = key\n    sorted_dict = dict(sorted(sorted_dict.items()))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_val = max(nums)\n    min_val = min(nums)\n    \n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Return their sum\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize the largest and smallest values\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Initialize two variables to store the largest and smallest value\n    largest = nums[0]\n    smallest = nums[0]\n\n    # Loop through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns their sum of the largest and smallest value.\n    '''\n\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Calculate the sum of the largest and smallest values\n    total = largest + smallest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lower case.\n    '''\n    if all(char.islower() for char in string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    \"\"\"\n    This function converts the given string to lower case.\n\n    :param string: The string to convert to lower case.\n    :type string: str\n    :return: The converted string.\n    :rtype: str\n    \"\"\"\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are in lowercase and False otherwise.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # Convert the string to lower case\n    string = string.lower()\n    # Return the lower case string\n    return string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.lower() == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    \n    # Remove all lowercase substrings from the string\n    for substring in lowercase_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression to match lowercase substrings\n    pattern = re.compile(r'[a-z]')\n    \n    # Find all the lowercase substrings in the string and replace them with an empty string\n    result = pattern.sub('', str1)\n    \n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase = re.compile(r'[a-z]+')\n    return re.sub(lowercase, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.sub() function to replace all lowercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    str1 = str1.lower()  # Convert the string to lowercase\n    pattern = r'[a-z]+'  # Define a regular expression pattern for lowercase substrings\n    result = re.sub(pattern, '', str1)  # Use the regular expression pattern to remove the substrings\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_lowercase(str1):\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # Use the `sub` method to replace all matches with an empty string\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes in a string as input and returns the string with all lowercase substrings removed.\n    '''\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # initialize the first digit variable\n    first_digit = \"\"\n    \n    # extract the first digit from the input number\n    first_digit = str(n)[0]\n    \n    # return the first digit as the output\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_char = str(n)[0]\n    # Return the first character as the first digit of the number\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as an argument and returns its first digit.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    #convert the number to a string\n    num_str = str(n)\n    #find the first character of the string\n    first_char = num_str[0]\n    #convert the first character to a number and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if isinstance(n, int) and n > 0:\n        return str(n)[0]\n    else:\n        return \"The input is not a valid integer greater than 0.\""
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n > 0:\n        return str(n)[0]\n    else:\n        return None"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = []\n\n    for num in list: \n        if num % 2!= 0: \n            odd_list.append(num) \n\n    return odd_list "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list: \n        if num % 2!= 0: \n            odd_numbers.append(num) \n    return odd_numbers "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n\n    difference = sum_of_cubes - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(1,n+1)]\n    sum_cubes = sum(cubes)\n    sum_natural = sum(range(1,n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    # Calculate the sum of the first n natural numbers\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_natural_numbers += i\n    # Calculate the difference\n    difference = cube_sum - sum_of_natural_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1,n+1))\n    sum_of_numbers = sum(range(1,n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initialize variables\n    sum_cubes = 0\n    sum_natural = 0\n    # loop through the first n natural numbers and calculate the sum of cubes and the sum of natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    # calculate the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_cubes - sum_natural\n    # return the difference\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1, n+1)]\n    sums = [x for x in range(1, n+1)]\n    sum_of_cubes = sum(cubes)\n    sum_of_natural_numbers = sum(sums)\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate the sum of the first n natural numbers\n    sum_first_n = (n * (n + 1)) // 2\n    \n    # calculate the sum of the cubes of the first n natural numbers\n    sum_cubes_first_n = sum([x**3 for x in range(1, n + 1)])\n    \n    # find the difference between the two sums\n    difference_sum = abs(sum_cubes_first_n - sum_first_n)\n    \n    return difference_sum"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and an integer N as input and returns the count of odd pairs in the array.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in a list A of integers and an integer N. It finds the number of pairs in A whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    xor_sum = 0\n    count = 0\n    for i in range(N):\n        xor_sum = xor_sum ^ A[i]\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_diff = A[i] ^ A[j]\n            if xor_diff % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    xor_sum = 0\n    xor_sum = sum(A)\n    for i in range(N):\n        xor_sum -= A[i]\n        if xor_sum % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if ((A[i] ^ A[j]) % 2!= 0):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # create a new string to store the toggled characters\n    toggled_string = \"\"\n    # iterate over each character in the input string\n    for char in string:\n        # if the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            toggled_string += char.upper()\n        # if the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            toggled_string += char.lower()\n        # otherwise, leave it as is\n        else:\n            toggled_string += char\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Create a list of characters to toggle case\n    case_toggle = ['a', 'A', '1', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '{', '}', '[', ']', '|', '\\\\', '|', ';', ':', '\\'', '\"', '<', '>', ',', '.', '?', '/', '`', '~']\n    # Iterate through the string\n    for i in range(len(string)):\n        # Check if the character is in the list of toggle characters\n        if string[i] in case_toggle:\n            # Toggle the case of the character\n            if string[i].islower():\n                string = string[:i] + string[i].upper() + string[i+1:]\n            else:\n                string = string[:i] + string[i].lower() + string[i+1:]\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string += char.upper() if char.islower() else char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        new_char = \"\"\n        if char.isupper():\n            new_char = char.lower()\n        elif char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # check if the character is a lowercase letter\n        if string[i].islower():\n            # convert it to uppercase\n            string = string[:i] + string[i].upper() + string[i+1:]\n        # check if the character is an uppercase letter\n        elif string[i].isupper():\n            # convert it to lowercase\n            string = string[:i] + string[i].lower() + string[i+1:]\n        # if the character is neither a lowercase or uppercase letter, do nothing\n    return string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings and split them into lists\n    n1_str = str(n1)\n    n2_str = str(n2)\n\n    # Create two empty lists to hold the digits of the integers\n    n1_digits = []\n    n2_digits = []\n\n    # Loop through each character in the strings and add it to the corresponding list\n    for char in n1_str:\n        n1_digits.append(int(char))\n    for char in n2_str:\n        n2_digits.append(int(char))\n\n    # Calculate the per-digit difference between the two integers\n    diff = 0\n    for i in range(len(n1_digits)):\n        diff += abs(n1_digits[i] - n2_digits[i])\n\n    # Return the sum of the per-digit difference\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        num1 = n1 % 10\n        num2 = n2 % 10\n        if num1!= num2:\n            sum_diff += abs(num1 - num2)\n        n1 //= 10\n        n2 //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n    \n    # Calculate the per-digit difference between the two lists of digits\n    per_digit_diff = [(digits1[i] - digits2[i]) % 10 for i in range(len(digits1))]\n    \n    # Calculate the sum of the per-digit differences\n    total_diff = sum(per_digit_diff)\n    \n    # Return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert both numbers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # initialize sum to 0\n    sum_diff = 0\n\n    # loop through each digit in both strings\n    for i in range(len(s1)):\n        diff = abs(int(s1[i]) - int(s2[i]))\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = 0\n    for i in range(len(str(n1))):\n        diff += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of their digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n\n    # Calculate the sum of per-digit differences\n    sum_diff = 0\n    for i in range(len(digits1)):\n        diff = abs(digits1[i] - digits2[i])\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize variables\n    digit_diff = 0\n    \n    # loop through each digit of the two numbers\n    for i in range(len(str(n1))):\n        digit_diff += abs(int(str(n1)[i]) - int(str(n2)[i]))\n        \n    return digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize sum of differences to 0\n    diff_sum = 0\n    # convert integers to lists of digits\n    digit_list1 = [int(i) for i in str(n1)]\n    digit_list2 = [int(i) for i in str(n2)]\n    # iterate over the digits of the two integers\n    for i in range(len(digit_list1)):\n        # calculate the absolute difference between the digits\n        diff = abs(digit_list1[i] - digit_list2[i])\n        # add the difference to the sum of differences\n        diff_sum += diff\n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        sum_diff += abs(int(n1[i]) - int(n2[i]))\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    # Convert both numbers to strings so we can split them into lists of digits\n    n1_str = str(n1)\n    n2_str = str(n2)\n    \n    # Calculate the length of the longest number\n    max_len = max(len(n1_str), len(n2_str))\n    \n    # Initialize a list of zeros to store the difference for each digit\n    digit_diff = [0] * max_len\n    \n    # Loop through each digit in the numbers and calculate the difference\n    for i in range(max_len):\n        digit_diff[i] = abs(ord(n1_str[i]) - ord(n2_str[i]))\n    \n    # Calculate the sum of the differences\n    digit_sum = sum(digit_diff)\n    \n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        return -1  # size is greater than the length of the list\n\n    max_sum = a[0]  # Initialize the maximum sum with the first element\n    current_sum = a[0]  # Initialize the current sum with the first element\n\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Calculate the sum of the largest contiguous sublist of the given size in the list a.\n    \"\"\"\n    # Initialize variables for the current sublist sum and maximum sublist sum found so far\n    current_sum = a[0]\n    max_sum = current_sum\n    \n    # Loop through the list from index 1 to size-1 (excluding the last element)\n    for i in range(1, size):\n        # Add the current element to the current sublist sum\n        current_sum += a[i]\n        \n        # If the current sublist sum is greater than the maximum sublist sum found so far, update the maximum sublist sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n    # Return the maximum sublist sum found\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n    else:\n        max_sum = max(max_sub_array_sum(a, size - 1), a[size - 1] + max_sub_array_sum(a, size - 1))\n        return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initialize max sum to negative infinity\n    current_sum = 0 # initialize current sum to zero\n\n    for i in range(size):\n        current_sum += a[i] # add element to current sum\n        if current_sum > max_sum: # check if current sum is greater than max sum\n            max_sum = current_sum # update max sum to current sum\n\n    return max_sum # return max sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        raise ValueError(\"Size is greater than the length of the list\")\n    max_sum = float('-inf')\n    current_sum = 0\n    current_start = 0\n    for i in range(len(a) - size + 1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_start = i\n    return max_sum, a[current_start:current_start + size]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables for sum and max_sum\n    sum = 0\n    max_sum = float('-inf')\n    \n    # Traverse through the list and calculate sum of sublist\n    for i in range(size):\n        sum += a[i]\n        \n        # Check if the sum is greater than the current max_sum\n        if sum > max_sum:\n            max_sum = sum\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = a[0]\n    curr_sum = a[0]\n\n    # Iterate over the given list and update the current sum\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Union of two tuples\n    test_union = test_tup1 + test_tup2\n\n    # Sort the union in ascending order\n    test_union.sort()\n\n    # Print the union\n    print(\"The union of the two tuples is:\", test_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Convert the combined list to a set to remove duplicates\n    unique_set = set(combined_list)\n\n    # Convert the set back to a sorted list\n    sorted_list = sorted(list(unique_set))\n\n    # Print the sorted list\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples\n    union = set(test_tup1) | set(test_tup2)\n    # convert the union set to a list and sort it in ascending order\n    sorted_union = sorted(union)\n    # return the sorted union\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(set(test_tup2))\n    union_list = list(union_set)\n    union_list.sort()\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    union_set = test_tup1.union(test_tup2)\n    union_set = sorted(union_set)\n    return union_set"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Union of test_tup1 and test_tup2 using set()\n    test_set = set(test_tup1).union(set(test_tup2))\n    # Convert set to list and sort it\n    union_list = sorted(list(test_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Convert the combined tuple to a set to remove duplicates\n    unique_set = set(combined_tup)\n    # Convert the set back to a tuple and sort it\n    sorted_tup = tuple(sorted(unique_set))\n    # Output the sorted tuple\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # converting tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    \n    # finding the union of the lists\n    union_list = list(set(list1+list2))\n    \n    # converting the union list back to tuple\n    union_tup = tuple(union_list)\n    \n    # sorting the tuple in ascending order\n    union_tup = sorted(union_tup)\n    \n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples using the union() method\n    combined_tup = test_tup1 | test_tup2\n    \n    # Convert the combined tuple to a list and sort it in ascending order\n    sorted_list = sorted(list(combined_tup))\n    \n    # Output the sorted list of elements\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Convert the input tuples to sets to remove duplicates and sort them\n    set1 = sorted(set(test_tup1))\n    set2 = sorted(set(test_tup2))\n\n    # Combine the two sets using the union operator\n    combined_set = set1 | set2\n\n    # Convert the combined set back to a list and sort it in ascending order\n    union_list = sorted(list(combined_set))\n\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i]\n        for j in range(i+1, len(lst)):\n            sub_lst = sub_lst + lst[j]\n            if len(sub_lst) > max_len:\n                max_len = len(sub_lst)\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        if max_length < len(sublist):\n            max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            maxLength = max(maxLength, len(lst[i:j+1]))\n    return maxLength"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    curr_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            curr_length += 1\n            max_length = curr_length\n        else:\n            curr_length = max(1, curr_length - 1)\n            max_length = max(max_length, curr_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i]:\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        else:\n            current_length = 0\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            if len(lst[i:j+1]) > max_length:  \n                max_length = len(lst[i:j+1])  \n    return max_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    # initialize max_length to 0 and current_length to 0\n    max_length = 0\n    current_length = 0\n    \n    # loop through the list\n    for i in range(len(lst)):\n        # if the current element is smaller than the previous element, increment the current_length\n        if lst[i] < lst[i-1]:\n            current_length += 1\n        # if the current element is greater than the previous element, reset the current_length to 1\n        else:\n            current_length = 1\n        \n        # if the current_length is greater than max_length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n    \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            max_len = max(max_len,len(lst[i:j+1]))\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        max_length = 1\n        for i in range(len(lst)):\n            if len(lst[i]) > max_length:\n                max_length = len(lst[i])\n        return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define the regular expression pattern to match values between quotation marks\n    pattern = r'\"(.*?)\"'\n\n    # Use the re.findall() function to find all the values between quotation marks\n    values = re.findall(pattern, text)\n\n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"' # regular expression to match any quotation marks\n    matches = re.findall(pattern, text) # find all matches of the pattern in the text\n    values = []\n    for match in matches:\n        value = match[1:-1] # remove the quotes from the value\n        values.append(value) # add the value to the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(\".*?\")') # pattern to match between quotation marks\n    matches = pattern.findall(text) # find all matches in the text\n    values = [] # empty list to store extracted values\n    \n    for match in matches:\n        values.append(match[1:-1]) # remove quotes from each match and append to the values list\n    \n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\".*?\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"(?:[^\\\\\"]|\\\\.)*\"')\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the extracted values\n    values = []\n    \n    # Loop through each match and extract the value between the quotes\n    for match in matches:\n        # Remove the first and last characters of the match (the quotation marks)\n        value = match[1:-1]\n        \n        # If the value is not empty (i.e., not just a single quote), append it to the values list\n        if value!= '':\n            values.append(value)\n    \n    # Return the values list\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n\n    # Use regular expressions to find all values between quotation marks\n    pattern = re.compile(r'(\".*?\")')\n    matches = pattern.findall(text)\n\n    # Return a list of the extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    values = [match[1] for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"([^\"]*)\"', text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Initialize a counter variable to keep track of the number of pairs\n    count = 0\n    \n    # Loop through the elements in the array\n    for i in range(n):\n        # Check if the next element in the array is in the dictionary\n        if arr[i+1] in freq:\n            # If it is, check if the elements are equal\n            if arr[i]!= arr[i+1]:\n                # If they are not, increment the counter variable\n                count += 1\n    \n    # Return the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    #Initializing a counter variable\n    count = 0\n    \n    #Looping through the array\n    for i in range(n): \n        #Looping through the rest of the array\n        for j in range(i+1,n): \n            #Checking if the elements at the current indices are different\n            if arr[i]!= arr[j]: \n                #If they are different, incrementing the counter variable\n                count += 1\n    \n    #Returning the final count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Initialize a set to store the unique elements in the array\n    unique_set = set(arr)\n\n    # Initialize a counter variable to store the number of pairs\n    count = 0\n\n    # Iterate through the unique set of elements\n    for num in unique_set:\n        # If the number is equal to n, we don't need to check the other element\n        if num!= n:\n            # Iterate through the unique set of elements again to find pairs of numbers that add up to n\n            for other in unique_set:\n                # Check if the sum of the current and other number is equal to n\n                if num + other == n:\n                    # If it is, increment the count of pairs\n                    count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string as input and splits it into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through each digit in the integer\n    while n > 0:\n        # get the rightmost digit\n        digit = n % 10\n\n        # add the digit to the sum\n        sum += digit\n\n        # remove the rightmost digit from the integer\n        n = n // 10\n\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string so that we can iterate over its digits\n    n = str(n)\n\n    # Initialize a variable to keep track of the sum of the digits\n    total = 0\n\n    # Iterate over each digit in the string and add it to the total\n    for digit in n:\n        total += int(digit)\n\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input to an integer\n    n = int(n)\n    # Initialize the sum of digits to zero\n    sum_of_digits = 0\n    # Loop through each digit in the input\n    while n > 0:\n        # Get the last digit of the input\n        digit = n % 10\n        # Add the digit to the sum of digits\n        sum_of_digits += digit\n        # Remove the last digit from the input\n        n //= 10\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # calculate the sum of the digits\n    total = sum(digits)\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through each digit of n and add it to the sum\n    while n > 0:\n        sum += n % 10\n        n //= 10\n\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through each character in the string and add its integer value to the sum\n    for char in num_str:\n        digit = int(char)\n        sum += digit\n    # return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    else:\n        # Convert the integer to a list of digits\n        digits = [int(digit) for digit in str(n)]\n        # Sum the digits\n        return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input number to a string\n    num_str = str(n)\n    # Initialize the sum variable to 0\n    sum_val = 0\n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer\n        digit = int(char)\n        # Add the integer to the sum variable\n        sum_val += digit\n    # Return the sum of the digits\n    return sum_val"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(lst):\n    '''\n    This function takes a list as input and returns True if it is sorted, False otherwise.\n    '''\n    if len(lst) <= 1:\n        return True\n    else:\n        if lst[0] <= lst[1]:\n            return issort_list(lst[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and checks whether it is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if not list1:\n        return \"The list is empty.\"\n\n    # Check if all elements in the list are equal\n    if all(list1[0] == x for x in list1):\n        return \"The list is sorted.\"\n\n    # Check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return \"The list is already sorted.\"\n\n    # List is not sorted\n    return \"The list is not sorted.\""
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) < 2:\n        return True\n    if list1[0] > list1[1]:\n        return False\n    for i in range(1, len(list1)-1):\n        if list1[i] < list1[i-1]:\n            return False\n    if list1[-1] < list1[-2]:\n        return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] >= list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = ''.join(sorted(list1[i][j].lower()))\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with duplicate numbers removed.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through each list in the input\n    for num_list in nums:\n        # loop through each number in the current list\n        for num in num_list:\n            # add the number to the set if it's not already there\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Convert each list to a set to remove duplicate values and then convert back to a list\n    unique_nums = list(set([num for sublist in nums for num in sublist]))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n\n    # Iterate through each number in the list\n    for num in nums:\n        # If the number is already in the dictionary, remove it from the list\n        if num in unique_nums:\n            nums.remove(num)\n        # If the number is not in the dictionary, add it to the dictionary with its index\n        else:\n            unique_nums[num] = nums.index(num)\n\n    # Return the updated list of unique numbers\n    return nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of lists as input and returns a new list with all duplicates removed.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of each element in the lists\n    freq_dict = {}\n    for lst in nums:\n        for num in lst:\n            if num in freq_dict:\n                freq_dict[num] += 1\n            else:\n                freq_dict[num] = 1\n    \n    # Create an empty list to store the unique elements from the lists\n    unique_elements = []\n    \n    # Iterate over the keys of the dictionary, which represent the elements and their frequency in the lists\n    for key, value in freq_dict.items():\n        # If the frequency of the element is 1, add it to the unique_elements list\n        if value == 1:\n            unique_elements.append(key)\n    \n    # Return the unique_elements list\n    return unique_elements"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Creating an empty list to store the unique numbers\n    unique_nums = []\n\n    # Looping through each number in the input list\n    for num in nums:\n        # If the number is not already present in the unique list, append it to the list\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    # Returning the unique numbers list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_list = []\n    product = 1\n\n    # Loop through each element in the list\n    for num in list_data:\n        # If the number is not already in the unique_list, add it and multiply the product by the number\n        if num not in unique_list:\n            unique_list.append(num)\n            product *= num\n\n    # Return the product of the unique numbers\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert list to set of unique numbers\n    product = 1  # initialize product to 1\n    for num in unique_numbers:  # iterate over unique numbers\n        product *= num  # multiply current number with product\n    return product  # return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    unique_list = []\n    for i in range(len(list_data)):\n        if list_data[i] not in unique_list:\n            unique_list.append(list_data[i])\n    product = 1\n    for j in range(len(unique_list)):\n        product *= unique_list[j]\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    # create a set of unique elements from the list\n    unique_elements = set(list_data)\n    # calculate the product of unique elements\n    product = 1\n    for element in unique_elements:\n        product *= element\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 * unique_nums[0]"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # convert the list to a set to remove duplicates\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers as input and returns the product of the unique numbers in the list.\n    '''\n    unique_set = set(list_data)\n    product = 1\n    for num in unique_set:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * (3.14 * r ** 2) + (2 * 3.14 * r * h) + (2 * 3.14 * h ** 2)\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the radius and height\n    radius = r\n    height = h\n    \n    # calculate the surface area of the cylinder\n    surface_area = 2 * math.pi * radius * height + 2 * math.pi * math.pow(radius, 2)\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2 * math.pi * r * r + 2 * math.pi * r * h + 2 * math.pi * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r ** 2 + 2 * 3.14159 * r * h + 3.14159 * h ** 2"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for the surface area of a cylinder:\n    # surface area = (2 * pi * r * h)\n    return 2 * 3.14159 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * h  # formula for surface area of a cylinder\n    return area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    i = 0\n    j = 0\n    while j < len(A):\n        if A[j] == B[i]:\n            i += 1\n            if i == len(B):\n                return True\n        j += 1\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)): \n        if A[i] in B: \n            return True \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B): # if the first list is greater in length than the second list\n        return False\n    \n    i = 0 # initializing index for the first list\n    j = 0 # initializing index for the second list\n\n    while i < len(A) and j < len(B): # while both list have elements to compare\n        if A[i] == B[j]: # if the current elements of both list are same\n            i += 1 # increment the index of the first list\n            j += 1 # increment the index of the second list\n        else: # if the current elements of both list are not same\n            if i > 0: # if the index of the first list is greater than 0\n                i -= 1 # decrement the index of the first list\n            else: # if the index of the first list is 0\n                return False # if the index of the first list is 0 and the elements of both list are not same, then return false\n    \n    return True # if the loop completes then the sublist is found"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Check if the first list is a sublist of the second list.\n    \"\"\"\n    if not B:\n        return True\n    for i in range(len(A)):\n        if A[i] in B:\n            B.remove(A[i])\n            if not B:\n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists as input and returns True if B is a sublist of A and False otherwise.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    if j == len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>=len(B): \n        for i in range(len(A)-len(B)+1): \n            if A[i:] == B: \n                return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return \"False\"\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif i > 0:\n            i = i - 1\n            j += 1\n        else:\n            return \"False\"\n    if i == len(A):\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    # Check if B is a sublist of A\n    if B in A:\n        return True\n    \n    # Check if B is a sublist of any sublist of A\n    for i in range(len(A)):\n        if B in A[i:]:\n            return True\n    \n    # If none of the above conditions are satisfied, B is not a sublist of A\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: # if B is empty, then return True\n        return True\n\n    if not A: # if A is empty, then return False\n        return False\n\n    if len(A) < len(B): # if length of A is less than length of B, then return False\n        return False\n\n    i = 0\n    j = 0\n\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n\n    if j == len(B): # if all elements of B are matched, then return True\n        return True\n    else: # if not, then return False\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    for i in range(len(A)): \n        if A[i] in B: \n            return True\n\n    return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert input number to string\n    n_str = str(n)\n    # get the last digit of the string\n    last_digit = n_str[-1]\n    # convert the last digit to int and return its factorial\n    return int(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initializing the result variable\n    result = 0\n    \n    # converting the input number to a string\n    number_str = str(n)\n    \n    # iterating over the digits of the number string\n    for digit in number_str:\n        # converting the digit to an integer\n        digit_int = int(digit)\n        # multiplying the result by the factorial of the digit\n        result = result * (digit_int * (digit_int + 1)) // 2\n    \n    # finding the last digit in the result\n    last_digit = result % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0: \n        factorial = factorial * n \n        n = n - 1\n    last_digit = factorial % 10 \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # Convert n to a string to perform arithmetic operations on it\n    n = str(n)\n    \n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, int(n)+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial as an integer\n    last_digit = int(factorial[-1])\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    # Find the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit and the factorial of the given number\n    last_digit = 0\n    factorial = 1\n\n    # loop through the digits of the given number\n    for digit in str(n):\n        # multiply the current factorial by 10 to get the factorial of the next digit\n        factorial *= 10\n\n        # add the last digit of the previous factorial to the last digit of the current factorial\n        last_digit += factorial // 10\n\n    # return the last digit of the final factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # Finding the factorial of n\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n\n    # Finding the last digit of the factorial\n    last_digit = fact % 10\n\n    # Printing the last digit of the factorial\n    print(\"The last digit of the factorial of\", n, \"is\", last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    while n > 0: \n        factorial *= n \n        n -= 1 \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize variables\n    last_digit = 0\n    num = n\n    \n    #calculate factorial\n    factorial = 1\n    while num > 0:\n        factorial *= num\n        num -= 1\n    \n    #find last digit of factorial\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n    \n    #return last digit of factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    \n    # Initialize an empty list to hold the interleaved list\n    interleaved_list = []\n    \n    # Loop through each element in the lists\n    for i in range(len(list1)):\n        # Append the first element from list1 to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the second element from list2 to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the third element from list3 to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through each list and add all the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Find the length of the longest list\n    n = max(len(list1), len(list2), len(list3))\n    # Initialize an empty list to hold the interleaved list\n    interleaved = []\n    # Loop through the lists and add each element to the interleaved list\n    for i in range(n):\n        interleaved.append(list1[i%len(list1)])\n        interleaved.append(list2[i%len(list2)])\n        interleaved.append(list3[i%len(list3)])\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): A list of elements.\n    list2 (list): A list of elements.\n    list3 (list): A list of elements.\n\n    Returns:\n    A single list that contains all the elements from the input lists.\n\n    \"\"\"\n    # Initialize an empty list to store the final interleaved list.\n    interleaved_list = []\n\n    # Loop through each list in the input lists.\n    for i in range(len(list1)):\n        # Append the element from list1 to the interleaved list.\n        interleaved_list.append(list1[i])\n\n        # Append the element from list2 to the interleaved list.\n        interleaved_list.append(list2[i])\n\n        # Append the element from list3 to the interleaved list.\n        interleaved_list.append(list3[i])\n\n    # Return the final interleaved list.\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # use a for loop to iterate through the input lists and add the elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    This function takes in 3 lists of the same length and returns a single flat list containing all of the elements in \n    each list in the order they appear in the input lists.\n    '''\n    # Define the length of the lists\n    n1 = len(list1)\n    n2 = len(list2)\n    n3 = len(list3)\n\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Iterate through each list and add its elements to the interleaved list in the desired order\n    for i in range(min(n1, n2, n3)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # If there are any remaining elements in list1, append them to the end of the interleaved list\n    if n1 > n2 and n1 > n3:\n        for i in range(n1 - min(n1, n2, n3)):\n            interleaved_list.append(list1[i])\n\n    # If there are any remaining elements in list2, append them to the end of the interleaved list\n    elif n2 > n1 and n2 > n3:\n        for i in range(n2 - min(n1, n2, n3)):\n            interleaved_list.append(list2[i])\n\n    # If there are any remaining elements in list3, append them to the end of the interleaved list\n    else:\n        for i in range(n3 - min(n1, n2, n3)):\n            interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of elements in test_tup1\n    set1 = set(test_tup1)\n    \n    # create a set of elements in test_tup2\n    set2 = set(test_tup2)\n    \n    # find the intersection of the two sets\n    intersec = set1.intersection(set2)\n    \n    # return the elements in test_tup1 that are not in the intersection\n    dissimilar = test_tup1[0:0]\n    for element in test_tup1:\n        if element not in intersec:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    # Loop through the elements of both tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        if element1!= element2:\n            # If the elements are not equal, add it to the list\n            dissimilar_elements.append(element1)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty list to store dissimilar elements\n    dissimilar_list = []\n\n    # iterate over the elements in both tuples\n    for i in range(len(test_tup1)):\n        # if the elements are not equal, append the element to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    common_elements = set(test_tup1) & set(test_tup2)\n    return sorted(list(set(test_tup1) - common_elements)) + sorted(list(set(test_tup2) - common_elements))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize a set to store the dissimilar elements\n    dissimilar_set = set()\n    \n    # Loop through the elements of the first tuple\n    for elem1 in test_tup1:\n        # If the element is not present in the second tuple, add it to the dissimilar set\n        if elem1 not in test_tup2:\n            dissimilar_set.add(elem1)\n    \n    # Return the dissimilar set\n    return dissimilar_set"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the first tuple and check if it's present in the second tuple\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar_list.append(elem)\n    \n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    dissimilar_list = []\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function that checks if an element is even or not\n    def is_even(x): \n        return x % 2 == 0\n\n    # Filter out the even elements using the is_even function\n    filtered_tuple = filter(is_even, test_tuple)\n\n    # Convert the filtered tuple back to a list\n    even_list = list(filtered_tuple)\n\n    # Apply the even_fnc function to each element in the even_list\n    for i in range(len(even_list)):\n        even_list[i] = even_fnc(even_list[i])\n\n    # Return the updated even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            for j in i:\n                if even_fnc(j):\n                    new_tuple.append(j)\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def is_even(x):\n        return x % 2 == 0\n    \n    for i in range(len(test_tuple)):\n        if isinstance(test_tuple[i], (list, tuple)):\n            even_ele(test_tuple[i], even_fnc)\n        elif is_even(even_fnc(test_tuple[i])):\n            test_tuple = test_tuple[:i] + test_tuple[i+1:]\n    \n    return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    result = []\n    for item in test_tuple:\n        if even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if type(elem) == tuple:\n            result.extend(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                result.append(elem)\n    return result\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store even elements\n    even_list = []\n    # Loop through each element of the tuple\n    for elem in test_tuple:\n        # Check if the element is even using the even_fnc function\n        if even_fnc(elem):\n            # If the element is even, append it to the even_list\n            even_list.append(elem)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def check_even(elem): \n        '''\n        Helper function to check if an element is even or odd.\n        '''\n        return even_fnc(elem)\n\n    return [elem for elem in test_tuple if check_even(elem)]"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Create an empty list to store the even elements of the tuple\n    even_list = []\n\n    # Loop through each element of the tuple\n    for i in test_tuple:\n        # Check if the element is even\n        if even_fnc(i):\n            # If the element is even, append it to the even_list\n            even_list.append(i)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for item in test_tuple:\n        if not even_fnc(item):\n            uneven_elements.append(item)\n    return uneven_elements\n\ndef is_even(num):\n    return num % 2 == 0\n\ntest_tuple = (1, (2, (3, 4), 5), 6, (7, 8, 9))\nprint(even_ele(test_tuple, is_even)) # Output: [(2, (3, 4), 5), (7, 8, 9)]"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the area of each side of the square pyramid\n    area1 = (b * b) * 2\n    area2 = (s * s) * 2\n    area3 = (s * s) * 2\n    \n    # Calculating the area of the entire pyramid\n    surface_area = (area1 + area2 + area3) / 2\n    \n    # Returning the surface area of the square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of each face of the pyramid\n    face_area = b * s\n    # calculate the total surface area by adding up the surface areas of each face\n    total_area = face_area * 4\n    # return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(base, height): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = base * height * 3   # formula for surface area of a square pyramid\n    print(\"Surface Area:\", surface)\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the surface area of a square pyramid\n    surface_area = (b * s) + (b * s) + (2 * b * s * s)\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each side of the square pyramid\n    area_1 = b * s\n    area_2 = b * s\n    area_3 = b * s\n    \n    # Calculate the area of the pyramid by adding the areas of the three sides\n    area_pyramid = area_1 + area_2 + area_3\n    \n    # Calculate the surface area of the pyramid by multiplying the area of the pyramid by the height of the pyramid\n    surface_area = area_pyramid * s\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b + 2*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # Calculating the area of each triangle\n    area1 = 0.5 * b * b\n    area2 = 0.5 * s * s\n    area3 = 0.5 * b * s\n    \n    # Adding up the areas of all the triangles to get the total surface area\n    total_area = area1 + area2 + area3\n    \n    # Returning the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating surface area of the base rectangle \n    base_area = b*b \n    # Calculating surface area of the pyramid \n    pyramid_area = (4*base_area)/3 \n    # Adding surface area of the base rectangle and pyramid to get the total surface area \n    total_area = base_area + pyramid_area \n\n    # Returning the total surface area \n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base of the pyramid\n    base_area = 0.5 * b * b\n    # Calculate the surface area of the side of the pyramid\n    side_area = 0.5 * b * s\n    # Calculate the surface area of the pyramid using Heron's formula\n    pyramid_area = base_area + side_area\n    # Return the surface area of the pyramid\n    return pyramid_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    This function checks if a dictionary is empty or not.\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if len(dict1.items()) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    if n == 0:\n        return 1\n    else:\n        return n * catalan_number(n-1) // (2*n)\n\nprint(catalan_number(5))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n-1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Catalan numbers are defined for positive integers only.\")\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum(int(x) for x in bin(2 * n - 1)[2:])"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-3)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan = 0\n        for i in range(1, n+1):\n            catalan += catalan_number(i-1)\n        return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number using the formula:\n    C(n) = (2n)! / (n!(n-1)! * (n-1)!)\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    catalan = factorial // ((2*n) * factorial)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (1 - (1/2))**num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, num + 1):\n            result += catalan_number(i - 1) * catalan_number(num - i)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return (2 * catalan_number(n-1)) // (n + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num // 2) + catalan_number((num + 1) // 2)\n    else:\n        return catalan_number((num - 1) // 2) + catalan_number(num // 2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b' # regex pattern for finding ly adverbs\n    match = re.search(pattern, text) # search for the first match in the string\n    if match:\n        return match.start(), match.end() # return the starting and ending positions of the adverb\n    else:\n        return None # return None if no adverb is found"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Regular expression pattern to match adverbs ending with \"ly\"\n    pattern = re.compile(r'\\b[aeiou]\\w+ly\\b', re.IGNORECASE)\n\n    # Search for the first match of the pattern in the text\n    match = pattern.search(text)\n\n    # If a match is found, return a tuple containing the match object and the positions of the match\n    if match:\n        return (match, match.span())\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r\"\\b(ly)\\b\"\n    matches = re.findall(pattern, text)\n    if matches:\n        for i, match in enumerate(matches):\n            print(f\"Adverb {i+1}: {match}\")\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            print(f\"Positions: {start_index} to {end_index}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b(?:never|seriously|extremely|amazingly|enormously|exceptionally|outrageously|terribly|abnormally|utterly|remarkably|quite|incredibly|definitively|absolutely|very|really|greatly|much|extremely|really|absolutely|ultimately|seriously|terribly|outrageously|remarkably|quite|amazingly|extremely|much|absolutely|seriously|amazingly|extremely|much|very|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|extremely|much|very|ext"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b[A-Z][a-z]*ly\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define regex pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use regex search() method to find all occurrences of the pattern in the string\n    matches = re.findall(pattern, text)\n    # Print all matches along with their positions in the text\n    for i, match in enumerate(matches):\n        print(f'Match {i+1}: \"{match}\", Position: {text.find(match)}')\n    # Return the matches list\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly)\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        print(f'Adverb: {match[0]} - Position: {text.find(match[0])}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match the adverb ending with 'ly'\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n    \n    # Create a list to store the adverb positions and their lengths\n    positions = []\n    \n    # Loop through the matches and extract the position and length of each match\n    for match in matches:\n        start = text.index(match)\n        end = start + len(match)\n        positions.append((start, end - start))\n    \n    # Return the list of adverb positions and their lengths\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r\"\\bly\\b\"\n    matches = re.findall(pattern, text)\n    for i, match in enumerate(matches):\n        print(f\"{i+1}. {match}\")"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the n most expensive items\n    heap = []\n\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(heap, item)\n\n        # If the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Given a list of items and a positive integer n,\n    returns a list of the n most expensive items in the dataset.\n    \"\"\"\n    # Initialize a min-heap of the n largest items\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, -items[i])\n\n    # Initialize the result list\n    result = []\n\n    # Fill the result list with the n largest items\n    for i in range(n):\n        result.append(-heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of size n to store the n most expensive items\n    heap = []\n\n    # Loop through each item in the dataset\n    for item in items:\n        # If the heap is full, remove the smallest item from the heap\n        if len(heap) == n:\n            heapq.heappop(heap)\n\n        # Add the current item to the heap\n        heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and returns the n most expensive items.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)  # push negative value to heap to sort in descending order\n        if len(heap) > n:\n            heapq.heappop(heap)  # remove least expensive item from heap if heap size exceeds n\n    return [-heap[i] for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes in a list of items and an integer n and returns a list of the n most expensive items.\n    '''\n    # First, we need to create a min heap of the items and keep track of the index of the item in the list\n    # as well as its price.\n    min_heap = [(items[i],i) for i in range(len(items))]\n    heapq.heapify(min_heap)\n    \n    # We then iterate through the min heap and keep track of the n most expensive items\n    most_expensive_items = []\n    for i in range(n):\n        # We take the first item from the heap and add it to the list of most expensive items\n        most_expensive_items.append(min_heap[0][0])\n        \n        # We then remove the first item from the heap as we don't want to consider it again\n        heapq.heappop(min_heap)\n    \n    return most_expensive_items"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        else:\n            if -heap[0] > item:\n                heapq.heappop(heap)\n                heapq.heappush(heap, -item)\n    return -heap[0] * (-1 if heap[0] < 0 else 1)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function finds the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items in descending order based on price\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # Find the n most expensive items and return them as a list\n    return [item for i, (item, price) in enumerate(items[:n])]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    heap = []\n    # Iterate through the items in the dataset\n    for item in items:\n        # If the heap is full and the item is less than or equal to the root of the heap,\n        # extract the root and insert the item into the heap\n        if len(heap) < n and not heapq.heappushpop(heap, item):\n            heapq.heappop(heap)\n        # If the heap is not full, simply insert the item into the heap\n        elif len(heap) < n:\n            heapq.heappush(heap, item)\n        # If the heap is full and the item is greater than the root of the heap,\n        # pop the root and insert the item into the heap\n        else:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # Return the n most expensive items in the heap\n    return heapq.nsmallest(n, heap)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return \"List length should be greater than or equal to n\"\n    elif n < 0:\n        return \"n should be greater than or equal to 0\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n <= 0 or n >= len(l):\n        raise ValueError(\"n must be a positive integer less than or equal to the length of the list\")\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # If the list is empty or has less than n elements, return the original list\n    if len(l) < n:\n        return l\n    \n    # Split the list at the nth element\n    mid = n // 2\n    first_part = l[:mid]\n    second_part = l[mid:]\n    \n    # Add the first part to the end of the second part and return the result\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    This function takes a list and an integer n and splits the list at the nth element and adds the first part to the end.\n    \"\"\"\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return []\n    elif n == 1:\n        return [l[0]]\n    else:\n        return l[n-1:] + [l[0]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n <= 0:\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty\n    if len(l) == 0:\n        return []\n    # if the list has only one element, split it and return it\n    elif len(l) == 1:\n        return l\n    # split the list at the nth element\n    else:\n        mid = len(l) // 2\n        left = l[:mid]\n        right = l[mid:]\n        # if the nth element is even, split at the (n-1)th element\n        if n % 2 == 0:\n            return left + [right[n-1]] + right[n:]\n        # if the nth element is odd, split at the nth element\n        else:\n            return left + [right[n]] + right[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n\n    if n < 0 or n > len(l):\n        return None\n\n    # Splitting the list at the nth element\n    mid = n\n    while mid < len(l):\n        mid += 1\n\n    # Adding the first part to the end\n    if mid - n > 0:\n        part1 = l[:mid - n]\n        part2 = l[mid:]\n        return part2 + part1\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth element and add the first part to the end.\n    \"\"\"\n    # Calculate the number of elements to be added to the beginning of the list\n    num_elements = n - len(l)\n    \n    # Split the list into two parts\n    part1 = l[:num_elements]\n    part2 = l[num_elements:]\n    \n    # Add the first part to the end of the second part\n    result = part1 + part2\n    \n    return result"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    Converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest value in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # return the difference between largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # Calculate the difference between the two numbers\n    diff = max_num - min_num\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function finds the difference between the largest and smallest value in a given list of numbers.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"The list is empty.\"\n    \n    smallest = min(nums)\n    largest = max(nums)\n    \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # calculate the difference between largest and smallest values\n    diff = max_val - min_val\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n\n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i**2)\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i*i\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        j = i * i\n        while j <= b:\n            if j == i * i:\n                print(i, j)\n                j += 1\n            else:\n                break\n    return None"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Find all perfect squares between two given numbers a and b.\n    \"\"\"\n    # Start with an empty list to store the results\n    squares = []\n    # Iterate through each number between a and b, inclusive\n    for num in range(a, b+1):\n        # Check if the square of the current number is equal to the current number\n        if num == num**0.5:\n            # If it is, add it to the list of squares\n            squares.append(num)\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create an empty list to store perfect squares\n    squares = []\n    \n    # loop through the range of numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # add the perfect square to the list of perfect squares\n            squares.append(num)\n    \n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num = i*i\n        if num == i*i:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # Loop through the numbers between a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        is_perfect_square = True\n        j = i\n        while j*j <= i:\n            if i%j!= 0:\n                is_perfect_square = False\n                break\n            j += 1\n        # If i is a perfect square, add it to the list\n        if is_perfect_square:\n            perfect_squares_list.append(i)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    for i in range(a, b+1):\n        square = i**2\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    perfect_squares = []\n    # Loop through all numbers from a to b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i*i == i:\n            # Add i to the list of perfect squares\n            perfect_squares.append(i)\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            result.append(i)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    r = abs(x)\n    theta = cmath.phase(x)\n\n    # converting to rectangular coordinates\n    if y >= 0:\n        x = r * cmath.cos(theta)\n        y = r * cmath.sin(theta)\n    else:\n        x = r * cmath.sin(theta)\n        y = -r * cmath.cos(theta)\n\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return (x_rect, y_rect)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert radians to degrees\n    theta = theta * 180 / cmath.pi\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2) # calculate distance from origin\n    theta = cmath.phase(x + y*1j) # calculate angle in radians\n    x_rect = r * cmath.cos(theta) # calculate rectangular x-coordinate\n    y_rect = r * cmath.sin(theta) # calculate rectangular y-coordinate\n    return x_rect.real, x_rect.imag, y_rect.real, y_rect.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,phi):\n    '''\n    This function takes two parameters: r (radius) and phi (angle in radians).\n    It returns the x and y coordinates of the point (x,y) in rectangular coordinates.\n    '''\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, phi):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(r + 1j*phi)  # phi in radians\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes two parameters, r and theta, and returns the rectangular coordinates corresponding to the input values.\n\n    Parameters:\n        r (float): radius of the circle\n        theta (float): angle of the line in radians\n\n    Returns:\n        tuple: (x, y) where x is the horizontal component of the rectangular coordinates, and y is the vertical component.\n    \"\"\"\n\n    # Convert angle from radians to degrees\n    theta = cmath.degrees(theta)\n\n    # Calculate x and y components\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    phi = cmath.phase(x - y*1j)\n    return (r*cmath.cos(theta), r*cmath.sin(theta))"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n    # Swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Print the updated list\n    print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    # check if the list is not empty\n    if not newList:\n        return newList\n\n    # swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least 2 elements\n    if len(newList) >= 2:\n        # get the first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        # replace the first element with the last element\n        newList[0] = last_element\n        # replace the last element with the first element\n        newList[-1] = first_element\n    else:\n        print(\"List has less than 2 elements. No swapping can be performed.\")\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # If the length of the list is less than 2, return the original list.\n    if len(newList) < 2:\n        return newList\n    # If the length of the list is 2, swap the first and last elements.\n    elif len(newList) == 2:\n        return newList[::-1]\n    # If the length of the list is greater than 2, swap the first and last two elements.\n    else:\n        return [newList[-1], newList[0]] + newList[1:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    # Check if the list is empty or not\n    if len(newList) <= 1: \n        return newList\n    # Interchange the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    # Call the recursive function for the rest of the list\n    return swap_List(newList[1:])"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 1:\n        return newList\n    elif len(newList) == 2:\n        if newList[0] == newList[-1]:\n            return newList\n        else:\n            return [newList[-1], newList[0]]\n    else:\n        return [newList[-1], newList[0]] + newList[:-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # checking the length of the list\n    if len(newList) < 2:\n        print(\"The list should have at least two elements to perform this operation\")\n        return\n    # swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) >= 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"List must have at least 2 elements.\""
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # initialize the product variable to 1\n    product = 1\n    # loop through the range of values of k from 0 to n-1\n    for i in range(k+1):\n        # multiply the product by (n-i) and add it to the sum\n        product *= (n-i)\n        sum += product\n    # return the sum\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate from k to n-k\n    for i in range(k,n):\n        # Calculate the binomial coefficient using the formula:\n        # B(n,k) = n! / (k! (n-k)!)\n        factorial = 1\n        for j in range(1,i+1):\n            factorial *= j\n        for j in range(1,k-1):\n            factorial /= (i-j+1)\n        # Add the product of the binomial coefficient to the sum\n        sum += factorial\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i * binomial_Coeff(n-1,i-1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    elif k > n - k:\n        return binomial_Coeff(n, n - k)\n    else:\n        return binomial_Coeff(n - 1, k - 1) * n // k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    num = 1\n    for i in range(1,k+1):\n        num *= (n-i+1) // i\n    return num"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    if n == k == 0:\n        return 1\n    elif k == 0:\n        return n\n    elif k == n:\n        return 1\n    else:\n        return n * binomial_Coeff(n-1, k-1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = 1\n    for i in range(1,k+1): \n        coeff *= (n-i+1)/i\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n    n (int): The number of elements in the sequence.\n    k (int): The number of elements to be included in the sequence.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n\n    '''\n    # initialize the sum to 0\n    sum_coeff = 0\n\n    # loop over the range of k, starting from 1 and ending at n\n    for i in range(1,k+1):\n        # calculate the product of the k-th term and the (n-k+i)-th term\n        product = n * (n-1) * (n-2) *... * (n-i+1)\n        # add the product to the sum\n        sum_coeff += product\n    \n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    def binomial_Coeff_helper(n, k, result=0):\n        if k == 0:\n            return 1\n        elif k == 1:\n            return n\n        else:\n            return binomial_Coeff_helper(n - 1, k - 1) * (n - k + 1) / k\n\n    return binomial_Coeff_helper(n, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff = 1\n    for i in range(1,k+1):\n        binomial_coeff *= (n-i+1) / i\n    return binomial_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*([0-9]+)\\s*$', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from the ip address using regex\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^(0)(\\d{1,3})(\\d{1,3})(\\d{1,3})(\\d{1,3})(\\d{1,3})(\\d{1,3})$', r'\\1\\2\\3\\4\\5\\6\\7', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d{1,2}|1\\d\\d|2[0-4]\\d|25[0-5])$\"\n    match = re.match(pattern, ip)\n    if match:\n        ip_list = match.groups()\n        for i in range(len(ip_list)):\n            ip_list[i] = ip_list[i].lstrip('0')\n        return '.'.join(ip_list)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # Remove leading zeroes from an IP address\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Define regex pattern to match the ip address\n    pattern = r'\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b'\n\n    # Use the pattern to find all matches in the ip address\n    matches = re.findall(pattern, ip)\n\n    # Remove leading zeroes from all matches\n    for match in matches:\n        ip = ip.replace(match, match.lstrip('0'))\n\n    # Return the modified ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even = num\n        elif num % 2 == 1:\n            odd = num\n    \n    diff = abs(even - odd)\n    \n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return None\n    else:\n        even = 0\n        odd = 0\n        for i in list1:\n            if i % 2 == 0:\n                even += i\n            else:\n                odd += i\n        diff = even - odd\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables\n    even = 0\n    odd = 0\n\n    # iterate through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            even += num\n        # check if the number is odd\n        elif num % 2!= 0:\n            odd += num\n\n    # return the difference of even and odd numbers\n    return abs(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an argument and finds the difference between the first even and first odd number in the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    diff = abs(even_num - odd_num)\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_sum += num\n        else:\n            odd_count += 1\n            odd_sum += num\n            \n    if even_count == 0 and odd_count == 0:\n        print(\"The given list does not have any even and odd numbers.\")\n    else:\n        first_even = even_sum // even_count\n        first_odd = odd_sum // odd_count\n        diff = first_even - first_odd\n        \n        print(f\"The difference between the first even and first odd number is: {diff}\")"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # first, find the first even and first odd numbers\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n\n    # next, find the difference between the even and odd numbers\n    diff = even_num - odd_num\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        \n        if num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    \n    if even_num is None:\n        print(\"The first even number is not present in the list.\")\n    elif odd_num is None:\n        print(\"The first odd number is not present in the list.\")\n    else:\n        print(\"The difference of the first even and first odd number is\", even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = None\n    odd_number = None\n    \n    # iterate through the list\n    for num in list1:\n        if num % 2 == 0:\n            even_number = num\n        else:\n            odd_number = num\n    \n    # check if both even and odd numbers have been found\n    if even_number is None or odd_number is None:\n        return 'The list does not have even and odd numbers'\n    \n    # calculate the difference between even and odd numbers\n    diff = even_number - odd_number\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    count = 0\n    swap = 0\n    n = len(str1)\n    m = len(str2)\n\n    # Loop through characters of both strings\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swap += 1\n            # Check if swapping will lead to a smaller number\n            # If yes, count the swap\n            if str1[i] < str2[i]:\n                count += swap\n            swap = 0\n\n    # If the last swapping leads to a smaller number, count it\n    if swap!= 0:\n        count += swap\n\n    # Return the minimum number of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # initialize a variable to keep track of the number of swaps\n    swap_count = 0\n\n    # while num1 and num2 are not equal\n    while num1!= num2:\n\n        # if num1 is greater, swap the bits of num2 with the least significant bit of num1\n        if num1 > num2:\n            bit_index = num2.index('1')\n            swap_count += bit_index\n            num2 = num2[:bit_index] + '0' + num2[bit_index+1:]\n\n        # if num2 is greater, swap the bits of num1 with the least significant bit of num2\n        else:\n            bit_index = num1.index('1')\n            swap_count += bit_index\n            num1 = num1[:bit_index] + '0' + num1[bit_index+1:]\n\n    # return the final swap count\n    return swap_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # convert both strings to binary\n    binary_str1 = bin(int(str1, 2))[2:]\n    binary_str2 = bin(int(str2, 2))[2:]\n\n    # create two empty lists to store the swaps required for each binary number\n    swaps_list1 = []\n    swaps_list2 = []\n\n    # create a list of tuples, where each tuple contains the index of the character in the original binary number and the value of the character\n    binary_list1 = [(i, int(c)) for i, c in enumerate(binary_str1)]\n    binary_list2 = [(i, int(c)) for i, c in enumerate(binary_str2)]\n\n    # create a dictionary to store the difference between the binary numbers\n    diff_dict = {}\n\n    # calculate the difference between the binary numbers\n    diff = abs(binary_list1[0][1] - binary_list2[0][1])\n    diff_dict[diff] = 0\n\n    # loop through the remaining characters in the binary numbers\n    for i in range(1, len(binary_list1)):\n        # calculate the difference between the current character in the original binary number and the corresponding character in the binary number that we are comparing with\n        diff = abs(binary_list1[i][1] - binary_list2[i][1])\n\n        # if the difference is already in the dictionary, increment its value by 1\n        if diff in diff_dict:\n            diff_dict[diff] += 1\n        # otherwise, add the difference as a key and 1 as a value to the dictionary\n        else:\n            diff_dict[diff] = 1\n\n    # loop through the keys in the dictionary and find the minimum value\n    min_swaps = float('inf')\n    for key in diff_dict.keys():\n        if diff_dict[key] < min_swaps:\n            min_swaps = diff_dict[key]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2): \n    # Convert the binary strings to integers \n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize a variable to store the number of swaps \n    swaps = 0\n\n    # Initialize variables to store the binary representation of the numbers \n    binary1 = bin(num1)[2:]\n    binary2 = bin(num2)[2:]\n\n    # Compare the binary representations and swap the values if required \n    while binary1!= binary2: \n        # Check if the binary values are the same or not. If not, swap the values and increment the swaps count. \n        if binary1 > binary2: \n            num1 = num1 + num2\n            binary1 = bin(num1)[2:]\n            swaps += 1\n        else: \n            num2 = num1 + num2\n            binary2 = bin(num2)[2:]\n            swaps += 1\n\n    # Return the minimum number of swaps required to convert the binary numbers \n    return swaps "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary strings as input and returns the minimum number of swaps required to convert\n    one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for swaps and count of 0's\n    swaps = 0\n    count_0 = 0\n\n    # Traverse through the two binary strings one by one\n    for i in range(32):\n\n        # Get the bit positions of the two numbers\n        bit1 = (num1 >> i) & 1\n        bit2 = (num2 >> i) & 1\n\n        # Check if swapping the bits is required\n        if bit1 == 1 and bit2 == 0:\n            count_0 += 1\n            if count_0 > 1:\n                swaps += (count_0 - 1) * 2\n                count_0 = 0\n\n        # Check if swapping the bits is not required\n        elif bit1 == 0 and bit2 == 1:\n            count_0 += 1\n\n    # Add the final count of 0's to the total swaps\n    if count_0 > 1:\n        swaps += (count_0 - 1) * 2\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # initialize variables for count of swaps and max difference\n    count = 0\n    max_diff = 0\n    \n    # loop through each character in both strings\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            # if the characters are different, check if the difference is greater than max difference\n            diff = abs(ord(str1[i]) - ord(str2[i]))\n            if diff > max_diff:\n                max_diff = diff\n                \n            # if there are more than 1 character that are different, add a swap to count\n            if i > 0 and diff > 1:\n                count += diff - 1\n                \n    # if there were no swaps, return max difference\n    if count == 0:\n        return max_diff\n    \n    # otherwise, return minimum number of swaps plus max difference\n    else:\n        return count + max_diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * (n + 1) for _ in range(2)]\n    for i in range(2):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            else:\n                if str1[j-1] == str2[i-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1])\n    return dp[1][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Check if the length of the two binary numbers are the same\n    if len(str1)!= len(str2):\n        return \"Error: The length of the two binary numbers must be the same.\"\n\n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n\n    # Iterate through each character of the two binary numbers\n    for i in range(len(str1)):\n        # Compare the characters of the two binary numbers\n        if str1[i]!= str2[i]:\n            # If the characters are different, add 1 to the minimum number of swaps required\n            min_swaps += 1\n            # If the characters are the same, find the position of the first different character in the two binary numbers\n            # and swap the characters at that position with the corresponding characters in the second binary number\n            if i < len(str1) // 2:\n                str1[i], str2[i] = str1[i], str2[i]\n            else:\n                str1[i], str2[i] = str2[i], str1[i]\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input, represented as strings. \n    It then returns the minimum number of swaps required to convert the first number to the second number.\n\n    :param str1: A binary number represented as a string.\n    :param str2: A binary number represented as a string.\n\n    :return: The minimum number of swaps required to convert the first number to the second number.\n    \"\"\"\n\n    # create a dictionary to store the number of swaps required for each bit position\n    swaps = {}\n    # iterate through each bit position of both binary numbers\n    for i in range(len(str1)):\n        # check if the bit positions are different in both binary numbers\n        if str1[i]!= str2[i]:\n            # if they are different, check if the bit position is already in the dictionary\n            if str1[i] in swaps:\n                # if it is, increment the number of swaps for that bit position by 1\n                swaps[str1[i]] += 1\n            else:\n                # if it's not, add the bit position and the number of swaps required to convert it to the dictionary\n                swaps[str1[i]] = 1\n\n    # iterate through each bit position in the first binary number\n    for i in range(len(str1)):\n        # if the bit position is not in the dictionary, increment the number of swaps by 1\n        if str1[i] not in swaps:\n            swaps[str1[i]] = 1\n\n    # find the minimum number of swaps required\n    min_swaps = float('inf')\n    for i in range(len(str1)):\n        # if the number of swaps required for the current bit position is less than the minimum, update the minimum\n        if swaps[str1[i]] < min_swaps:\n            min_swaps = swaps[str1[i]]\n\n    # return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # convert strings to binary\n    binary1 = bin(int(str1, 2))[2:]  # removing the \"0b\" prefix\n    binary2 = bin(int(str2, 2))[2:]  # removing the \"0b\" prefix\n\n    # check for common prefixes\n    i = 0\n    while i < min(len(binary1), len(binary2)) and binary1[i] == binary2[i]:\n        i += 1\n\n    # swap common prefix if any\n    if i > 0:\n        diff = len(binary1) - i\n        binary1 = binary1[:i] + '0' * diff + binary1[i:]\n        binary2 = binary2[:i] + '0' * diff + binary2[i:]\n\n    # find the minimum number of swaps required to convert binary1 to binary2\n    swaps = 0\n    i = 0\n    j = 0\n    while i < len(binary1) and j < len(binary2):\n        if binary1[i] == binary2[j]:\n            i += 1\n            j += 1\n        else:\n            if binary1[i] == '0':\n                swaps += 1\n                j += 1\n            else:\n                swaps += 1\n                i += 1\n\n    # return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.setcheckinterval(10000)  # Set the check interval for PyPy\n    \n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_list = []\n    for tuple_obj in tuple_list:\n        size_list.append(sys.getsizeof(tuple_obj))\n    total_size = sum(size_list)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple to 0\n    size = 0\n    \n    # Loop through each element of the tuple and add its size to the total size\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n        \n    # Return the total size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for t in tuple_list:\n        size += sys.getsizeof(t)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size in bytes of all tuples in the list.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments - arr1, arr2, and k.\n    It returns the kth smallest element from the two sorted arrays.\n    \"\"\"\n    i = j = 0  # Initialize two pointers for arr1 and arr2\n    kth_elem = None  # Initialize variable to store the kth smallest element\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n    \n    if k == 1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and k as input and returns the kth element\n    from the two arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the smaller array and its length\n    if n1 < n2:\n        smaller_arr = arr1\n        smaller_len = n1\n    else:\n        smaller_arr = arr2\n        smaller_len = n2\n\n    # Initialize variables for the kth element\n    kth_element = None\n\n    # Compare the first elements of both arrays\n    if arr1[0] <= arr2[0]:\n        if k > 1:\n            # If k is greater than 1, then we need to find the first element greater than arr1[0]\n            i = 1\n            while i < n1 and arr1[i] > arr1[0]:\n                i += 1\n            kth_element = smaller_arr[i - 1]\n    else:\n        if k > 1:\n            # If k is greater than 1, then we need to find the first element greater than arr2[0]\n            i = 1\n            while i < n2 and arr2[i] > arr2[0]:\n                i += 1\n            kth_element = smaller_arr[i - 1]\n\n    # If k is greater than the length of smaller array\n    if k > smaller_len:\n        return kth_element\n\n    # Initialize variables for the index of the last element of smaller array\n    last_index = smaller_len\n\n    # If k is equal to the length of smaller array\n    if k == smaller_len:\n        return kth_element\n\n    # Initialize variables for the index of the first element of larger array\n    first_index = 0\n\n    # Compare the remaining elements of the smaller array with the kth element\n    while k > 0:\n        # If the kth element is smaller than the first element of larger array\n        if smaller_arr[first_index] < kth_element:\n            # Move the kth element to the end of larger array\n            kth_element = smaller_arr[first_index]\n            last_index = first_index\n\n            # Move the first element of larger array to the right\n            first_index += 1\n        else:\n            # Move the first element of larger array to the right\n            first_index += 1\n\n        # Decrease k\n        k -= 1\n\n    # If the kth element is not present in the larger array\n    if kth_element is None:\n        return None\n\n    # Find the kth element in the larger array\n    i = last_index\n    while i > first_index and kth_element!= smaller_arr[i]:\n        i -= 1\n\n    return smaller_arr[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize two pointers, one for each array\n    i = j = 0\n    # Initialize the result variable\n    result = None\n    # Loop through the arrays until we find kth element\n    while i < len(arr1) and j < len(arr2):\n        # If the current elements are equal, we increment both pointers\n        if arr1[i] == arr2[j]:\n            i += 1\n            j += 1\n            # If kth element has not been found, check if k is greater than the sum of elements in the arrays\n            if result is None and k > i+j:\n                result = arr1[i-1]\n        # If arr1[i] is less than arr2[j], we increment the i pointer\n        elif arr1[i] < arr2[j]:\n            i += 1\n        # If arr1[i] is greater than arr2[j], we increment the j pointer\n        else:\n            j += 1\n    # If we have not found the kth element, return None\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Given two sorted arrays, return the kth smallest element.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # found a common element\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(arr, temp, left, mid, right):\n    \"\"\"\n    Helper function to merge two subarrays of arr[].\n    First subarray is arr[left..mid]\n    Second subarray is arr[mid+1..right]\n    \"\"\"\n    i = left\n    j = mid + 1\n    k = left\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            i += 1\n        else:\n            temp[k] = arr[j]\n            j += 1\n        k += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        j += 1\n        k += 1\n\n\ndef merge_sort(arr, temp, left, right):\n    \"\"\"\n    Helper function to merge sort two subarrays of arr[].\n    First subarray is arr[left..right]\n    \"\"\"\n    if left < right:\n        mid = (left + right) // 2\n        merge_sort(arr, temp, left, mid)\n        merge_sort(arr, temp, mid + 1, right)\n        merge(arr, temp, left, mid, right)\n\n\ndef find_kth(arr1, arr2, k):\n    \"\"\"\n    Main function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two sorted arrays\n    temp = [0] * (len(arr1) + len(arr2))\n    merge_sort(arr1, temp, 0, len(arr1) - 1)\n    merge_sort(arr2, temp, len(arr1), len(arr1) + len(arr2) - 1)\n\n    # Find the kth element in each sorted array\n    i = j = kth = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            kth += len(arr1) - i\n            j += 1\n\n    if i < len(arr1):\n        kth += len(arr1) - i\n    else:\n        kth += len(arr2) - j\n\n    return arr1[kth - k]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    # find the middle element of the merged array\n    middle = len(merged_arr) // 2\n    # find the kth element by comparing with both middle elements and finding the larger one\n    if k < middle:\n        return find_kth(arr1, merged_arr[:middle], k)\n    elif k == middle:\n        return merged_arr[middle]\n    else:\n        return find_kth(merged_arr[middle:], arr2, k - middle)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10 or number >= 1000000:\n        return False\n    \n    arm_sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        arm_sum += digit ** 3\n        temp //= 10\n        \n    if arm_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a list of digits\n    number_list = [int(digit) for digit in str(number)]\n    # Initialize the sum of digits to 0\n    sum_of_digits = 0\n    # Loop through each digit in the number_list\n    for digit in number_list:\n        # Multiply the sum by the digit raised to the power of the length of the number_list\n        sum_of_digits += digit ** len(number_list)\n    # Check if the sum is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize variables\n    num = number\n    sum = 0\n    temp = num\n    \n    # convert number to a list of digits\n    digits = [int(digit) for digit in str(num)]\n    \n    # loop through each digit in the list\n    for digit in digits:\n        # calculate the power of the digit\n        power = digit ** len(digits)\n        # add the power to the sum\n        sum += power\n    \n    # check if the sum is equal to the original number\n    if sum == num:\n        print(f\"{number} is an armstrong number.\")\n    else:\n        print(f\"{number} is not an armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    number_str = str(number)\n    total = 0\n    temp_number = number\n\n    while temp_number > 0:\n        digit = temp_number % 10\n        total += digit ** len(number_str)\n        temp_number //= 10\n\n    return number == total\n\ndef armstrong_number(number):\n    \"\"\"\n    Checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    if is_armstrong_number(number):\n        print(f\"{number} is an Armstrong number.\")\n    else:\n        print(f\"{number} is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n\n    # Convert the number to string to remove any leading zeros\n    number_str = str(number)\n\n    # Calculate the sum of the cube of each digit in the number\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n\n    # Check if the sum is equal to the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    # Find the length of the number\n    n = len(str(number))\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Convert the number to an integer and extract the digits\n    num = int(str(number)[::-1])\n    \n    # Calculate the sum of the digits raised to the power of the number of digits\n    for i in range(n):\n        sum += num // (10 ** i)\n    \n    # If the sum is equal to the number, it's an armstrong number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digits_sum = 0\n    n = number\n    while n > 0:\n        digit = n % 10\n        digits_sum += digit ** 3\n        n //= 10\n    return digits_sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    # Initialize a variable to store the sum of the digits of the number\n    sum_digits = 0\n    # Iterate over each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_digits += int(digit)\n    # Check if the sum of digits of the number equals the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        temp = number\n        total = 0\n        while temp > 0:\n            digit = temp % 10\n            total += digit ** 3\n            temp //= 10\n        if number == total:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    # Get the number of digits in the number\n    digit_count = len(str(number))\n\n    # Calculate the sum of the cubes of the digits\n    cube_sum = 0\n    temp_num = number\n    while temp_num > 0:\n        digit = temp_num % 10\n        cube_sum += digit ** 3\n        temp_num //= 10\n\n    # Check if the sum of cubes is equal to the original number\n    if digit_count == len(str(cube_sum)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    sum_total = sum(sum_list)\n    average = sum_total / number\n    return sum_total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = int(input(\"Enter the number of natural numbers: \"))\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        num = int(input(\"Enter the \" + str(i) + \"th natural number: \"))\n        sum += num\n        count += 1\n    average = sum / count\n    print(\"Sum of the first \" + str(n) + \" natural numbers is: \" + str(sum))\n    print(\"Average of the first \" + str(n) + \" natural numbers is: \" + str(average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # Initialize sum and count to zero\n    total_sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers and add them to the sum\n    for i in range(1, number + 1):\n        total_sum += i\n        count += 1\n\n    # Calculate the average\n    average = total_sum / count\n\n    # Return the sum and average\n    return (total_sum, average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables to hold sum and average\n    sum_of_numbers = 0\n    sum_of_numbers_squared = 0\n    count = 0\n    # calculate sum and square of numbers\n    for i in range(1, number + 1):\n        sum_of_numbers += i\n        sum_of_numbers_squared += i * i\n        count += 1\n    # calculate average\n    average = sum_of_numbers / count\n    # print results\n    print(\"Sum of first\", number, \"natural numbers:\", sum_of_numbers)\n    print(\"Sum of squares of first\", number, \"natural numbers:\", sum_of_numbers_squared)\n    print(\"Average of first\", number, \"natural numbers:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    # initialize sum and count variables to 0\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers and calculate their sum\n    for i in range(1, n+1):\n        sum += i\n    \n    # calculate the average\n    average = sum/n\n    \n    # return the sum and average as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # take input for number of terms\n    n = int(input(\"Enter number of terms: \"))\n\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # loop through first n terms\n    for i in range(n):\n        # take input for each term\n        term = int(input(\"Enter term: \"))\n        # add term to sum and increment count\n        sum += term\n        count += 1\n\n    # calculate average and store in variable\n    average = sum / count\n\n    # print sum and average\n    print(\"Sum of first\", n, \"natural numbers is:\", sum)\n    print(\"Average of first\", n, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # loop through first n numbers\n    for i in range(1, number+1):\n        # add each number to sum\n        sum += i\n        # increment count\n        count += 1\n    \n    # calculate average\n    average = sum / count\n    \n    # return sum and average\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f'{n} is even.')\n    else:\n        print(f'{n} is odd.')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # check if the number is even\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of characters in the string\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # find the character with the highest frequency\n    max_freq = 0\n    first_char = None\n    for char in freq_dict:\n        if freq_dict[char] > max_freq:\n            max_freq = freq_dict[char]\n            first_char = char\n\n    # return the first character with the highest frequency\n    return first_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    freq = {}\n    for char in str1:\n        if char in freq:\n            return char\n        else:\n            freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment the count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it and set its count to 1\n        else:\n            char_count[char] = 1\n    # iterate through the dictionary and find the first repeated character\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        else:\n            char_freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it and set its count to 1\n        else:\n            freq[char] = 1\n    # Iterate through each character in the string again to find the first repeated character\n    for char in str1:\n        if freq[char] == 2:\n            return char\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # convert string to list of characters\n    char_list = list(str1)\n\n    # loop through the list to find the first repeated character\n    for i in range(len(char_list)):\n        if char_list.count(char_list[i]) > 1:\n            return char_list[i]\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    return is_prime(n) or is_divisible_by_2(n)\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given integer is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_divisible_by_2(n):\n    '''\n    Write a function to check if a given integer is divisible by 2 or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == 2:\n            lucid_numbers.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = [1]\n    while lucid[-1] <= n:\n        lucid.append(lucid[-1] * lucid[-2] + lucid[-1])\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    # create an empty list to store the lucid numbers\n    lucid_numbers = []\n\n    # loop through all integers starting from 1 and up to n\n    for i in range(1, n+1):\n\n        # check if i is a lucid number\n        is_lucid = True\n        j = i\n\n        # loop through all numbers from 2 to i-1\n        while j > 1:\n            if j % 2 == 0:\n                j = j // 2\n            else:\n                j = (3*j) + 1\n\n            # if j becomes 1, the number is not a lucid number\n            if j == 1:\n                is_lucid = False\n                break\n\n        # if i is a lucid number, add it to the list\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    # return the list of lucid numbers\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_numbers = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    A helper function to check if a given number is a lucid number.\n    '''\n\n    # convert the number to a string and reverse it\n    rev_str = str(num)[::-1]\n\n    # check if the reversed string is equal to the original number\n    return num == int(rev_str)"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludics = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            ludics.append(i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    i = 1\n\n    while i <= n:\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        i += 1\n\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    reversed_words = words[::-1]  # reverse the list of words\n    reversed_string =''.join(reversed_words)  # join the reversed words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    reversed_words = words[::-1]  # reverse the order of the words\n    reversed_string =''.join(reversed_words)  # join the words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # Split the string into a list of words\n    \n    for i in range(len(words)):\n        words[i] = words[i][::-1]  # Reverse the word\n    \n    return''.join(words)  # Join the reversed words back into a string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back together with spaces\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    \n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    \n    # Join the reversed words into a single string with spaces\n    result =''.join(reversed_words)\n    \n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words using the split() method\n    words = s.split()\n    # Reverse each word using the reverse() method\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string using the join() method\n    return \" \".join(reversed_words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is a prime number or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    This function takes an integer as input and returns True if the number is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    '''\n    This function takes an integer as input and returns True if the integer is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    This function takes an integer as input and returns True if the integer is a prime number, False otherwise.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num, 2):\n        if num % i == 0:\n            return False\n    return True\n\nprint(prime_num(10)) # Output: True\nprint(prime_num(11)) # Output: False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is equal to 2\n    if num == 2:\n        return True\n\n    # Check if the number is divisible by any number between 2 and num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    # If the loop completes without returning False, the number is prime\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    '''\n    A function to check if a given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(3, num, 2):\n        if is_prime(i):\n            return False\n    return True\n\nprint(prime_num(10)) # Output: True\nprint(prime_num(11)) # Output: False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n\nprint(radian_degree(90))"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = text[match.start():match.end()]\n        literals.append((literal, match.start(), match.end()))\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start_index = match.start()\n        end_index = match.end()\n        print(f\"Found literal: {literal}, start index: {start_index}, end index: {end_index}\")\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        print(f\"Match: {match}, start index: {start}, end index: {end}\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches a string for a regex pattern.\n    The function returns the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * (bell_Number(n-1) - bell_Number(n-2))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth Bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = 0\n    for i in range(n):\n        bell += (n - i) * (i + 1) // 2\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    This function will return the nth Bell number using the formula:\n    B(n) = (sqrt(5) / 2)^n - (sqrt(5) / 2)^(n-1)\n    \n    '''\n    import math\n    sqrt5 = math.sqrt(5)\n    bell_n = (sqrt5 / 2) ** n - (sqrt5 / 2) ** (n - 1)\n    return bell_n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer L as input, and returns a list with the same elements, \n    but the k'th element removed.\n    '''\n    # Remove the k'th element from the list\n    kth_element = list1[L-1]\n    list1.remove(kth_element)\n    # Remove the k'th element from the list again\n    list1.remove(kth_element)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and removes the kth element from it.\n    \"\"\"\n    k = int(L)\n    if k > len(list1):\n        return \"Invalid input. The value of k should be less than or equal to the length of the list.\"\n    \n    list1 = list(set(list1))  # Remove duplicates\n    list1 = list1[k:]  # Remove the kth element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer as input and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    # Create a copy of the list\n    list2 = list1.copy()\n    # Remove the k'th element from the list\n    list2.pop(L-1)\n    # Return the list with the k'th element removed\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and an integer k as input and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a number 'L' as input, and returns a new list with all the elements of the original list,\n    except for the kth element (counting from 0).\n    '''\n    list1.pop(L)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    # Check if the list is empty\n    if len(list1) == 0:\n        return []\n    # Check if the L is greater than the length of the list\n    if L > len(list1):\n        return list1\n    # Initialize two pointers, one at the beginning of the list and one at the end\n    i = 0\n    j = len(list1) - 1\n    # Initialize a variable to keep track of the number of elements to remove\n    k = L\n    # Iterate until the kth element is reached\n    while k > 0:\n        # Check if the element at the current pointer is equal to the kth element\n        if list1[i] == k:\n            # Increment the pointer for the kth element\n            k -= 1\n            # If the pointer is not at the end, move it to the right\n            if i!= j:\n                list1[i], list1[j] = list1[j], list1[i]\n                i += 1\n                j -= 1\n        # Move the pointers to the right\n        i += 1\n        j -= 1\n    # Return the list with the k'th element removed\n    return list1[:-L]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = []\n    for row in test_list:\n        col.append(row[N-1])\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort(reverse=True)\n    max_val = 0\n    for i in range(len(test_list)):\n        max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value of the n-th column in a matrix.\n\n    Args:\n        matrix: A list of lists representing the matrix.\n        n: The index of the column to consider (starting from 0).\n\n    Returns:\n        The maximum value of the n-th column in the matrix.\n    \"\"\"\n    max_value = 0\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_num = 0\n    for row in test_list:\n        if N <= len(row):\n            if row[N-1] > max_num:\n                max_num = row[N-1]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Given a matrix represented as a list of lists, returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    if N > m:\n        raise ValueError(\"N should be less than or equal to the number of columns in the matrix\")\n    \n    for i in range(n):\n        max_val = max(test_list[i][j] for j in range(m))\n        test_list[i].append(max_val)\n    \n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    max_val = 0\n    \n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        elif i < N-1:\n            max_val = max(max_val, max_of_nth(test_list, i+1))\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Convert the matrix to a list of lists of tuples\n    matrix = [[tuple(row) for row in sublist] for sublist in test_list]\n    # Find the maximum value of then'th column\n    max_val = max([row[N-1] for row in matrix])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    # create an empty list to store the merged lists\n    merged_lst = []\n\n    # loop through each sublist in the main list\n    for sublist in lst:\n\n        # add the first element of the sublist to the first list in the merged list\n        merged_lst.append([sublist[0], sublist[1]])\n\n    # return the merged list\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        result.append([first, second])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    return [[a, b] for sublist in lst for a, b in sublist]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    merged = []\n\n    for i in lst:\n        merged.append([i[0], i[1]])\n\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Define a new empty list to store the merged lists\n    merged_lst = []\n    # Loop through each sublist in the original list\n    for sublist in lst:\n        # Check if the sublist has only two elements, if it does, add it to the merged_lst as a tuple\n        if len(sublist) == 2:\n            merged_lst.append((sublist[0], sublist[1]))\n        # If the sublist has more than two elements, append it as a list to the merged_lst\n        else:\n            merged_lst.append(sublist)\n    # Return the merged_lst\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values that are present in the list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            sum_list.append(sum(test_list[i:j+1]))\n    return sum_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            for i in item:\n                cum_sum += i\n        else:\n            cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n        for j in range(1, len(test_list[i])):\n            cum_sum += test_list[i][j]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the sum\n    cum_sum = 0\n    \n    # Loop through the tuple list\n    for tup in test_list:\n        # If the tuple has only one element, add it to the cum_sum\n        if len(tup) == 1:\n            cum_sum += tup[0]\n        # If the tuple has more than one element, add the sum of its elements to the cum_sum\n        else:\n            cum_sum += sum(tup)\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize an empty list to store the cumulative sum\n    cumulative_sum = []\n    \n    # loop through the given tuple list\n    for tup in test_list:\n        # loop through the values in the current tuple\n        for val in tup:\n            # if the value is not already present in the cumulative sum, add it to the list\n            if val not in cumulative_sum:\n                cumulative_sum.append(val)\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for item in test_list:\n        total += item\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if i == 0:\n            cum_sum += test_list[i][0]\n        else:\n            cum_sum += test_list[i][0] + cum_sum\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    num_tuples = len(nums)\n    for i in range(num_tuples):\n        total_sum += sum(nums[i])\n    return [total_sum/num_tuples]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(x) / len(x) for x in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    # Loop through each tuple in the input list\n    for i in range(len(nums)):\n        # Initialize an empty list to store the values for each tuple\n        values = []\n        # Loop through each value in the current tuple\n        for j in range(len(nums[i])):\n            # Append the value to the values list\n            values.append(nums[i][j])\n        # Calculate the average value for the current tuple\n        avg = sum(values) / len(values)\n        # Append the average value to the averages list\n        averages.append(avg)\n    # Return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        averages.append(sum(num_tuple)/len(num_tuple))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n\n    result = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        result.append(total/len(tup))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        tup = nums[i]\n        total = sum(tup)\n        avg = total/len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Create an empty list to store the average values\n    avg_list = []\n\n    # Loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average value for the current tuple\n        avg = sum(tup) / len(tup)\n        # Add the average value to the list of average values\n        avg_list.append(avg)\n\n    # Return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in nums]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in range(len(nums)):\n        sum_list = []\n        for j in range(len(nums[i])):\n            sum_list.append(nums[i][j])\n        avg_list.append(sum(sum_list)/len(sum_list))\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += ((test_tup1[i] % test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return None\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    jumps = 0\n    curr_x = 0\n    curr_y = 0\n\n    # Traverse the list of steps\n    for i in range(len(steps)):\n        # Calculate the next position\n        next_x = curr_x + steps[i][0]\n        next_y = curr_y + steps[i][1]\n\n        # Check if the next position is at the destination point\n        if (next_x == d) and (next_y == 0):\n            return jumps\n\n        # Check if the next position is within the boundaries of the plane\n        if next_x < 0 or next_x > d or next_y < 0 or next_y > d:\n            return -1\n\n        # Check if the next position is reachable\n        if abs(next_x - curr_x) == abs(next_y - curr_y):\n            jumps += 1\n            curr_x = next_x\n            curr_y = next_y\n        else:\n            return -1\n\n    # If the loop is completed, return the number of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize the variables\n    count = 0\n    jumps = 0\n\n    # If the first step is less than or equal to d\n    if steps[0] <= d:\n        # If the first step is less than d, add it to the count and set the jumps to 1\n        count += 1\n        jumps = 1\n\n    # Loop through the remaining steps\n    for i in range(1, len(steps)):\n        # If the current step is less than d, add the jump count to the count\n        if steps[i] <= d:\n            jumps += 1\n        # If the current step is greater than d, add the jumps count to the count and subtract the first step from the second step\n        else:\n            count += jumps\n            jumps = 1\n\n    # Add the last jump count to the count\n    count += jumps\n\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    rows = int(steps/d) + 1 # number of rows in the 2D plane\n    cols = steps % d + 1 # number of columns in the 2D plane\n    \n    dp = [[float('inf')] * cols for _ in range(rows)] # dp[i][j] stores the minimum jumps required to reach (d, 0) from origin in row i with j steps\n    \n    for i in range(rows):\n        for j in range(cols):\n            if i == 0 and j == 0: # if the point is at origin (0, 0)\n                dp[i][j] = 0 # no jump is required\n            elif i == 0: # if the point is at origin in row i\n                dp[i][j] = j # no jump is required\n            elif j == 0: # if the point is at origin in column j\n                dp[i][j] = i # no jump is required\n            else: # if the point is somewhere in the 2D plane\n                if i == 1 and j == 1: # if the point is at destination (d, 0)\n                    dp[i][j] = 0 # no jump is required\n                elif i == 1: # if the point is at destination in row i\n                    dp[i][j] = dp[i-1][j] # no jump is required\n                elif j == 1: # if the point is at destination in column j\n                    dp[i][j] = dp[i][j-1] # no jump is required\n                else: # if the point is somewhere in the 2D plane\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1 # minimum jumps required to reach the point\n\n    return dp[-1][-1] # return the minimum number of jumps required to reach (d, 0) from origin in the 2D plane"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    jump = 0\n    curr_x = 0\n    curr_y = 0\n    \n    # Iterate through the given steps and calculate the number of jumps required\n    for i in range(steps):\n        if curr_x == d:\n            # We have reached the destination point, so we have made a minimum number of jumps\n            return jump + 1\n        \n        # Calculate the next position based on the current position\n        if curr_x < d:\n            next_x = curr_x + 1\n        else:\n            next_x = curr_x - 1\n        \n        if curr_y < d:\n            next_y = curr_y + 1\n        else:\n            next_y = curr_y - 1\n        \n        # Update the current position\n        curr_x = next_x\n        curr_y = next_y\n        \n        # Increment the jump count\n        jump += 1\n    \n    # If we have not reached the destination point, we have made the maximum number of jumps\n    return jump"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    if steps < d:\n        return -1\n    elif steps == d:\n        return 0\n    else:\n        i, j = 0, steps\n        jumps = 0\n\n        while i < j:\n            jumps += 1\n            if j < d:\n                j = d\n            else:\n                j -= i\n                i += 1\n\n        return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0: \n        return steps\n    else: \n        return min_Jumps(steps, d-1) + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == 1:\n        return steps\n    else:\n        steps_taken = min_Jumps(steps, d-1)\n        if d % 2 == 0:\n            steps_taken += steps - (d // 2)\n        else:\n            steps_taken += steps - (d // 2) + 1\n        return steps_taken"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Check if the starting point is at (d, 0) or not\n    if d == 0: \n        return steps\n    \n    # Initialize variables for checking the number of jumps\n    count = 0\n    curr_x = 0\n    curr_y = 0\n    \n    # Iterate through the list of points\n    for i in range(len(steps)):\n        if steps[i][0] == curr_x:\n            count += 1\n            if steps[i][1] == 0:\n                return count\n            \n            # Update the current position\n            curr_x += steps[i][1]\n            curr_y += steps[i][1]\n        else:\n            curr_x += steps[i][1]\n            curr_y += steps[i][1]\n    \n    # If the starting point is not at (d, 0)\n    return \"No possible path found\""
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #initialize count to 0 and cost to 0\n    count = 0\n    cost = 0\n    #iterate over all possible steps\n    for i in range(1, steps+1):\n        #if distance is less than or equal to d, increment count\n        if i <= d:\n            count += 1\n        #if cost is greater than 0, decrement cost\n        elif cost > 0:\n            cost -= 1\n        #if count is greater than 0, increment cost by count\n        else:\n            count += 1\n            cost = i\n    #return count as the number of jumps required\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    jumps = 0\n    start_point = (0, 0)\n\n    for i in range(steps):\n        if start_point[0] < d:\n            start_point = (start_point[0] + 1, start_point[1])\n        else:\n            start_point = (start_point[0], start_point[1] + 1)\n            jumps += 1\n\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: division by zero\")\n            return None\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists should have same length\")\n        return\n    \n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    \n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize variables\n    num_start = False\n    num_list = []\n    num_end = False\n    \n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is a number\n        if test_str[i].isdigit():\n            # If the current number is at the start of the string\n            if not num_start:\n                # Set the flag to True\n                num_start = True\n                # Add the number to the list\n                num_list.append(test_str[i])\n            # If the current number is not at the start of the string\n            else:\n                # Set the flag to True\n                num_end = True\n                # Add the number to the list\n                num_list.append(test_str[i])\n        # If the current character is not a number\n        else:\n            # If the current number is at the end of the string\n            if num_end:\n                # Add the number to the list\n                num_list.append(test_str[i])\n                # Reset the flag to False\n                num_end = False\n    \n    # Join the list of numbers into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    numbers = re.findall(r'\\d+', test_str)\n    for num in numbers:\n        test_str = test_str.replace(num, '')\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str.replace(''.join(nums), '')"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Define a list to store the numbers\n    numbers = []\n    # Loop through the characters in the string\n    for char in test_str:\n        # If the character is a number, append it to the list of numbers\n        if char.isdigit():\n            numbers.append(char)\n    # Reverse the order of the numbers in the list\n    numbers.reverse()\n    # Join the characters of the list into a string and return it\n    return ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n\n    # iterate through each character in the given string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the num_str string\n            num_str += char\n        else:\n            # if the character is not a number, add it to the beginning of the string\n            test_str = char + test_str\n\n    # return the modified string with all the numbers moved to the end\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_count = 0\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_count += 1\n            new_str = new_str + char\n        else:\n            new_str = new_str + char\n    if num_count > 0:\n        new_str = new_str + ''.join(str(i) for i in range(num_count))\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n\n    # move the numbers to the end of the string\n    for num in nums:\n        test_str = test_str.replace(num, '', 1)\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize the variable to store the number of digits in the string\n    num_digits = 0\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a digit, increment the number of digits\n        if char.isdigit():\n            num_digits += 1\n    # initialize an empty list to store the non-number characters\n    non_num_chars = []\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is not a digit, add it to the non-number list\n        if not char.isdigit():\n            non_num_chars.append(char)\n    # initialize an empty list to store the number characters\n    num_chars = []\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a digit, add it to the number list\n        if char.isdigit():\n            num_chars.append(char)\n    # concatenate the non-number and number lists\n    concatenated_list = non_num_chars + num_chars\n    # join the list of characters into a string\n    final_str = ''.join(concatenated_list)\n    # return the final string with all the numbers moved to the end\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # Split the string into a list of characters\n    char_list = list(test_str)\n\n    # Initialize variables to keep track of numbers and non-numbers\n    numbers = \"\"\n    non_numbers = \"\"\n\n    # Iterate over each character in the list\n    for char in char_list:\n\n        # If the character is a number, append it to the numbers variable\n        if char.isdigit():\n            numbers += char\n\n        # Otherwise, append it to the non_numbers variable\n        else:\n            non_numbers += char\n\n    # Combine the non_numbers and numbers variables into a single string and return it\n    return numbers + non_numbers"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Loop through the string and move all the numbers to the end\n    for i in range(len(test_str) - 1, -1, -1):\n        if test_str[i].isdigit():\n            test_str = test_str[:i] + test_str[i:]\n            break\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    n = len(a)\n    dp = [1] * n  # initialize a list to store the size of the largest subset ending at each index\n\n    # Traverse the array from right to left\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            # check if the current element is divisible by the element to its right\n            if a[i] % a[j] == 0:\n                # if it is divisible, update the size of the largest subset ending at the current index\n                dp[i] = max(dp[i], dp[j]+1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    largest = 0\n    count = 0\n    for i in range(n):\n        temp = i + 1\n        while temp < n and a[temp] % a[i]!= 0:\n            temp += 1\n        count = temp - i\n        largest = max(largest, count)\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables to keep track of the size of the largest subset\n    max_size = 0\n    current_size = 0\n    \n    # Iterate over each number in the list\n    for num in a:\n        # Check if the current number is divisible by the previous number\n        if num % a[current_size] == 0:\n            # If it is, increment the size of the largest subset\n            current_size += 1\n            # Update the maximum size if the current size is greater\n            if current_size > max_size:\n                max_size = current_size\n                \n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n\n    # initialize variables\n    count = 0\n    max_count = 0\n    max_start = 0\n\n    # iterate through the list\n    for i in range(len(a)):\n        # check if the difference between the current number and the next number is divisible\n        if a[i+1] % a[i] == 0:\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i\n        else:\n            count = 0\n\n    # return the maximum subset size\n    return max_count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    n = len(a)\n    dp = [1] * n  # initialize the dp array with 1 for each element of the list\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Use a set to store all unique divisors of each number in the list\n    unique_divisors = set()\n    for num in a:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                unique_divisors.add(i)\n\n    # Sort the unique divisors in ascending order\n    unique_divisors = sorted(unique_divisors)\n\n    # Initialize variables to store the size of the largest subset and its elements\n    largest_size = 0\n    largest_subset = []\n\n    # Iterate over all pairs of numbers in the list\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            # Check if the pair of numbers is divisible by a unique divisor\n            if a[i] % unique_divisors[0] == 0 and a[j] % unique_divisors[0] == 0:\n                # Check if the current subset is larger than the current largest subset found so far\n                if len(largest_subset) < len(a) - i:\n                    largest_size = len(a) - i\n                    largest_subset = [a[i], a[j]]\n                # Check if the current subset is the same size as the current largest subset found so far\n                elif len(largest_subset) == len(a) - i:\n                    for k in range(len(largest_subset)):\n                        if largest_subset[k] < a[i] and largest_subset[k] < a[j]:\n                            break\n                    else:\n                        largest_size = len(a) - i\n                        largest_subset = [a[i], a[j]]\n\n    # Return the size of the largest subset and its elements\n    return largest_size, largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    count = 0\n    for i in range(n):\n        if i == 0 or a[i] % a[i-1]!= 0:\n            count += 1\n            if count == 2:\n                return count\n        else:\n            count -= 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list in ascending order\n    a = sorted(a)\n    # Initialize a list to store the sizes of the largest subsets\n    subsets = []\n    # Initialize variables to keep track of the current subset and its size\n    curr_subset = []\n    curr_size = 0\n    # Iterate through the list\n    for num in a:\n        # If the number is already in the current subset, increment its size\n        if num in curr_subset:\n            curr_size += 1\n        # If the current subset is not empty and the difference between its size and the current number is greater than 1,\n        # add the current size to the list of subsets and reset the current subset and size\n        elif curr_subset and (curr_size % num)!= 0:\n            subsets.append(curr_size)\n            curr_subset = []\n            curr_size = 0\n        # If the current subset is empty or the difference between its size and the current number is less than or equal to 1,\n        # add the current number to the current subset and increment its size\n        else:\n            curr_subset.append(num)\n            curr_size += 1\n    # Add the last subset to the list of subsets if it is not empty and has a non-zero size\n    if curr_subset:\n        subsets.append(curr_size)\n    # Return the maximum size of any subset\n    return max(subsets)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the input list\n    a = sorted(a)\n    \n    # initialize variables\n    size = 0\n    last = -1\n    \n    # iterate through the list\n    for i in range(len(a)):\n        # check if the current number is divisible by the last number\n        if a[i] % last == 0:\n            size += 1\n            last = a[i]\n        # check if the current number is greater than the last number\n        elif a[i] > last:\n            size = 1\n            last = a[i]\n            \n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    count = 1\n    subset_size = 1\n    for i in range(1, n):\n        if a[i] % a[i-1] == 0:\n            count += 1\n        else:\n            count = 1\n        subset_size = max(subset_size, count)\n    return subset_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two arrays\n    merged_arr = merge_sort(arr1, arr2)\n    \n    # Find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_arr[mid - 1] + merged_arr[mid]) / 2\n    else:\n        median = merged_arr[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    if len(arr) % 2 == 0:\n        return (arr[len(arr)//2-1] + arr[len(arr)//2])/2\n    else:\n        return arr[len(arr)//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the middle index of the first list\n    mid1 = n // 2\n    \n    # Find the middle index of the second list\n    mid2 = n // 2\n    \n    # Check if the first list has less elements than the second list\n    if len(arr1) < len(arr2):\n        # Slice the first list to get the middle elements\n        mid1 = n - mid1 - 1\n        arr1 = arr1[:mid1]\n        arr2 = arr2[mid1:]\n    \n    # Check if the second list has less elements than the first list\n    elif len(arr2) < len(arr1):\n        mid2 = n - mid2 - 1\n        arr1 = arr1[mid2:]\n        arr2 = arr2[:mid2]\n    \n    # Check if the length of the two lists is odd\n    if n % 2 == 1:\n        # Return the middle element of the first list\n        return arr1[mid1]\n    \n    # Return the average of the middle elements of both lists\n    return (arr1[mid1] + arr2[mid2]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # find the median\n    mid = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid-1] + merged_list[mid]) / 2.0\n    else:\n        median = merged_list[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Find the length of the lists\n    m = len(arr1)\n    n = len(arr2)\n    # Find the maximum length of the lists\n    max_len = max(m, n)\n    # Create a new list to store the merged lists\n    merged_list = []\n    # Merge the two lists\n    for i in range(max_len):\n        if i < m:\n            merged_list.append(arr1[i])\n        if i < n:\n            merged_list.append(arr2[i])\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the median\n    if max_len % 2 == 0:\n        median = (merged_list[max_len//2 - 1] + merged_list[max_len//2]) / 2\n    else:\n        median = merged_list[max_len//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Calculate the size of the merged list\n    size = len(merged_list)\n    \n    # Calculate the middle index\n    middle_index = size // 2\n    \n    # Check if the size of the list is odd or even\n    if size % 2 == 0:\n        # If the size is even, return the average of the middle two elements\n        return (merged_list[middle_index - 1] + merged_list[middle_index]) / 2\n    else:\n        # If the size is odd, return the middle element\n        return merged_list[middle_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function finds the median of two sorted lists of same size.\n    \"\"\"\n    # concatenate the two arrays\n    arr = arr1 + arr2\n    # sort the combined array\n    arr.sort()\n    # get the length of the array\n    length = len(arr)\n    # if the length is odd, the median is the middle element\n    if length % 2 == 1:\n        return arr[length//2]\n    # if the length is even, the median is the average of the middle two elements\n    else:\n        return (arr[length//2] + arr[length//2 - 1]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the concatenated list\n    arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2])/2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two lists\n    merged_list = arr1 + arr2\n    \n    # sort the concatenated list\n    merged_list.sort()\n    \n    # find the median index\n    median_index = n // 2\n    \n    # check if the length of the list is odd or even\n    if n % 2 == 0:\n        # find the average of the two middle elements\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n    else:\n        # find the middle element\n        median = merged_list[median_index]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if the length of the list is even, take the average of the two middle elements\n        mid1 = n // 2\n        mid2 = n // 2\n        if arr1[mid1] > arr2[mid2]:\n            return (arr1[mid1] + arr2[mid2-1]) / 2\n        else:\n            return (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # if the length of the list is odd, take the middle element\n        mid = n // 2\n        if arr1[mid] > arr2[mid]:\n            return arr1[mid]\n        else:\n            return arr2[mid]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Use a list comprehension to iterate over each number in the list\n    nth_powers = [num ** n for num in nums]\n    return nth_powers"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase\n    string = string.upper()\n    # Return the uppercase string\n    return string"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as an argument and swaps the first and last elements of the list.\n    '''\n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is greater than 1\n    if len(newList) > 1:\n        # swap the first and last element\n        newList[0], newList[-1] = newList[-1], newList[0]\n    else:\n        print(\"The length of the list should be greater than 1.\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define the first and last indices of the list\n    first = 0\n    last = len(newList) - 1\n\n    # Swap the first and last elements\n    newList[first], newList[last] = newList[last], newList[first]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # Store the length of the list\n    length = len(newList)\n\n    # If the length of the list is less than or equal to 1, return the same list\n    if length <= 1:\n        return newList\n\n    # Set the index of the first element to 0 and the index of the last element to length-1\n    firstIndex = 0\n    lastIndex = length-1\n\n    # Swap the first and last elements\n    temp = newList[firstIndex]\n    newList[firstIndex] = newList[lastIndex]\n    newList[lastIndex] = temp\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        # swapping first and last element\n        newList[0], newList[n-1] = newList[n-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the length of the list is greater than or equal to 2\n    if len(newList) >= 2:\n        # Interchange the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # calculate the area of the semicircle\n    area = math.pi * r**2\n    \n    # find the hypotenuse of the largest triangle\n    hypotenuse = (3/4) * r**2\n    \n    # calculate the area of the largest triangle\n    triangle_area = (math.sqrt(3) / 4) * hypotenuse\n    \n    return triangle_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-diameter\n    d = r * 2\n    \n    # Calculate the area of a regular triangle\n    s = math.sqrt(d ** 2 - r ** 2)\n    \n    # Calculate the area of a regular triangle with side length d\n    a = math.sqrt(3) / 4 * d ** 2\n    \n    # Calculate the area of a triangle with base length d and height 2s\n    b = math.sqrt(3) / 4 * d * s\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = max(a, b)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r**2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Formula to find the area of a triangle with sides of length a, b, and c\n    def triangle_formula(a, b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n\n    # Use the formula to find the largest area of a triangle that can be inscribed in a semicircle\n    def largest_triangle(r):\n        a = r\n        b = 0\n        c = r\n        while a >= r:\n            a = a - 1\n            area = triangle_formula(a, b, c)\n            if area > largest_area:\n                largest_area = area\n        return largest_area\n\n    largest_area = 0\n    area = largest_triangle(r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def is_valid(a, b, c):\n        '''\n        Helper function to check if the given triangle is valid or not.\n        '''\n        s = (a + b + c) / 2\n        return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2 or s**2 == r**2\n    \n    def s_side_length(a, b, c):\n        '''\n        Helper function to find the side length of the triangle with the given side lengths.\n        '''\n        s = (a + b + c) / 2\n        area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return area\n    \n    a = r / 2\n    b = r / 2\n    c = 0\n    while not is_valid(a, b, c):\n        a -= 0.01\n        b -= 0.01\n        c -= 0.01\n    \n    return s_side_length(a, b, c)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the triangle\n    semi_perimeter = 2 * r\n\n    # Use Heron's formula to find the area of the largest triangle\n    area = (semi_perimeter * (semi_perimeter - r) ** 0.5) / 2\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter\n    a = 2 * r\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    A = math.sqrt(3) * (2 * r)\n\n    # calculate the area of the smallest triangle that can be inscribed in the semicircle\n    B = math.sqrt(3) * r ** 2\n\n    # calculate the angle between the two triangles\n    angle = math.acos((B**2 + A**2 - A**2 - B**2) / (2 * A * B))\n\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    C = A * math.sin(angle)\n\n    # calculate the area of the largest triangle\n    area = math.sqrt(math.pi) * C\n\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r * math.tan(math.pi/6)\n\n    # Calculate the area of the largest triangle inscribed in the semicircle\n    area = (math.sqrt(3)*s)/(4*math.tan(math.pi/6))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle angle and side length\n    angle = 60  # degrees\n    side_length = r * math.sin(math.radians(angle))\n\n    # Calculate the perimeter of the triangle\n    perimeter = 3 * side_length\n\n    # Calculate the area of the triangle\n    area = math.sqrt(perimeter * (perimeter - side_length) * (perimeter - 2 * side_length))\n\n    # Return the area of the triangle\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for i in range(start,end+1):\n        if i not in array:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    # Loop through the array and find the first missing number\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    \n    # If we reach here, we didn't find a missing number\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n\n    Returns:\n    int: The smallest missing number from the array.\n\n    Example:\n    >>> find_First_Missing([1, 2, 3, 4, 5])\n    6\n\n    Note:\n    - The input array may contain duplicates, so we should use a set to remove duplicates.\n    - If the input array is empty, the function should return None.\n    - If the input array is None, the function should return None.\n    \"\"\"\n    # Remove duplicates from the array\n    unique_array = list(set(array))\n\n    # Check if the input array is empty or None\n    if not unique_array or array is None:\n        return None\n\n    # Find the smallest missing number from the array\n    min_missing = start\n    for num in unique_array:\n        if num!= min_missing:\n            return min_missing\n        min_missing += 1\n\n    # If the loop completes without returning a value, the smallest missing number is the last number plus one\n    return min_missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n    # check if the input is valid\n    if not isinstance(array, list):\n        raise TypeError(\"Input must be a list of natural numbers\")\n    for i in array:\n        if not isinstance(i, int):\n            raise TypeError(\"All elements in the input list must be natural numbers\")\n        if i < start:\n            raise ValueError(\"All elements in the input list must be greater than or equal to the starting number\")\n        if i > end:\n            raise ValueError(\"All elements in the input list must be less than or equal to the ending number\")\n\n    # find the missing number\n    n = len(array)\n    for i in range(start, end + 1):\n        if i not in array:\n            return i\n\n    # if the missing number is not found, it means there is no missing number\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If no end is provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Iterate over the array from start to end-1\n    for i in range(start, end):\n        # If the current element is equal to i+1, return i+1\n        if array[i] == i + 1:\n            return i + 1\n\n    # If the end of the array has been reached without finding a missing number, return the last element + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # Check if the list is empty or not\n    if not array:\n        return None\n\n    # Check if the list is sorted or not\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return None\n    for i in range(start, end):\n        if array[i] > array[i + 1]:\n            return i + 1 + start\n\n    # If the list is not sorted, find the smallest missing number\n    while start <= end:\n        mid = (start + end) // 2\n        if mid == 0 or array[mid - 1] < mid:\n            if mid == len(array):\n                return mid + 1 + start\n            else:\n                return mid + 1 + start\n        else:\n            end = mid - 1\n\n    return None"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes in a list of numbers and returns a list of even numbers.\n    \"\"\"\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    This function takes a list of numbers and returns a list containing only even numbers.\n    \"\"\"\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    # get all adjacent coordinates\n    adj = [(ele[0] + i, ele[1] + j) for i in [-1, 0, 1] for j in [-1, 0, 1] if (i!= 0 or j!= 0)]\n\n    # add the sublist to the list of sublists if it's not empty\n    if sub:\n        adj += sub\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x - 1, y))\n    if x < n - 1:\n        adj.append((x + 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    if y < m - 1:\n        adj.append((x, y + 1))\n    sub.extend(adj)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Extract the coordinate values from the given tuple\n    x, y = ele\n\n    # Create a list of adjacent coordinates\n    adj = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            # Check if the adjacent coordinate is within the grid boundaries\n            if 0 <= x+i < 10 and 0 <= y+j < 10:\n                # Add the adjacent coordinate to the list of adjacent coordinates\n                adj.append((x+i, y+j))\n\n    # Add the current coordinate to the list of adjacent coordinates\n    adj.append(ele)\n\n    # Add the adjacent coordinates to the list of adjacent coordinates recursively\n    for new_coord in adj:\n        sub.append(new_coord)\n        adjac(new_coord, sub)\n\n    # Return the list of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i, j in [(ele[0]+1, ele[1]), (ele[0]-1, ele[1]), (ele[0], ele[1]+1), (ele[0], ele[1]-1)]:\n        if i < 0 or j < 0 or i >= len(sub) or j >= len(sub[0]):\n            continue\n        if (i, j) not in sub:\n            sub.append((i, j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # initialize a list to store adjacent coordinates\n    adj_coords = []\n\n    # extract the x and y coordinates of the element\n    x, y = ele\n\n    # loop through all possible moves for the element\n    for move in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n        # calculate the new x and y coordinates of the adjacent element\n        nx = x + move[0]\n        ny = y + move[1]\n        # check if the new element is within the boundaries of the grid and not already in the sublist\n        if 0 <= nx < n and 0 <= ny < m and (nx, ny) not in sub:\n            # add the new element to the sublist\n            sub.append((nx, ny))\n            # append the adjacent coordinate to the list\n            adj_coords.append((nx, ny))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    neighbors = []\n    if x > 0:\n        neighbors.append((x - 1, y))\n    if x < 25:\n        neighbors.append((x + 1, y))\n    if y > 0:\n        neighbors.append((x, y - 1))\n    if y < 25:\n        neighbors.append((x, y + 1))\n    return neighbors + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if type(ele) == tuple:\n        x, y = ele\n        adj_coords = [(x+dx, y+dy) for dx in (-1, 0, 1) for dy in (-1, 0, 1) if (x+dx, y+dy) not in sub]\n        return adj_coords + [ele]\n    elif type(ele) == list:\n        return [adjac(coord, sub) for coord in ele]\n    else:\n        return []"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the coordinates from the given tuple\n    x, y = ele\n    \n    # Extract the adjacent coordinates using a list comprehension\n    adj = [(x+i, y+j) for i in range(-1, 2) for j in range(-1, 2) if (i**2 + j**2)!= 0]\n    \n    # Remove the original coordinate from the adjacent coordinates\n    adj = [adj for adj in adj if adj!= ele]\n    \n    # Append the adjacent coordinates to the sublist\n    sub.extend(adj)\n    \n    # Return the sublist with the adjacent coordinates added\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if y+1 < 10:\n        sub.append((x, y+1))\n    if y-1 >= 0:\n        sub.append((x, y-1))\n    if x+1 < 10:\n        sub.append((x+1, y))\n    if x-1 >= 0:\n        sub.append((x-1, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extracting the first element of the coordinate tuple\n    x, y = ele\n    # Extracting the adjacent coordinates\n    n = x - 1, y - 1, x + 1, y + 1\n    sub.extend([n])\n    # Recursion for all the adjacent coordinates\n    for i in n:\n        if isinstance(i, int):\n            adjac((i, y), sub)\n    return sub"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += '_'\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # check if input is a string\n    if not isinstance(text, str):\n        raise TypeError('Input must be a string.')\n    # replace spaces with underscores\n    new_text = text.replace(' ', '_')\n    # replace underscores with spaces\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        else:\n            result += text[i]\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    j = 0\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [x for x in num_list if x!= 0] + [0] * len([x for x in num_list if x == 0])"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    \n    for i in range(len(zero_index)-1, -1, -1):\n        num_list.pop(zero_index[i])\n        num_list.insert(len(num_list)-1, 0)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n    if zero_index!= -1:\n        num_list.pop(zero_index)\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    # Iterate over the list using a for loop\n    for i in range(len(num_list)):\n        # Check if the current element is zero\n        if num_list[i] == 0:\n            # Move the zero to the end of the list\n            for j in range(i, len(num_list)-1):\n                num_list[j] = num_list[j+1]\n            break"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    # create a new list to store the non-zero values\n    non_zero_list = []\n\n    # loop through the list and append non-zero values to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # loop through the new list and insert zeros at the beginning\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.insert(0, num_list.pop(i))\n\n    # print the new list with all zeros at the end\n    print(non_zero_list)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    i = 0\n    \n    while i < len(num_list):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n        i += 1\n        \n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1\n        \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of numbers as input and moves all the zeroes to the end of the list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for i in range(len(new_list)):\n        if new_list[i] == 0:\n            new_list.insert(i, 0)\n    return new_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes a list 'arr' and the length of 'arr' as input\n    and returns the sum of the XOR of all pairs of numbers in the list.\n    \"\"\"\n    # XOR of two numbers is their difference\n    xor_sum = 0\n\n    # Loop through the list and calculate XOR of all pairs\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and an integer n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # XOR all the numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    # return the XOR sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize the sum to 0\n    total = 0\n    # loop through the list\n    for i in range(n):\n        # loop through the list again\n        for j in range(i+1, n):\n            # add the xor of the two numbers to the total\n            total += arr[i] ^ arr[j]\n    # return the total sum\n    return total"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_sum(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input and returns the sum of the xor of all pairs of integers in the list.\n    \"\"\"\n    xor_sum = 0\n    \n    # Iterate over the list of integers\n    for i in range(n):\n        # Iterate over the rest of the list, starting from i+1\n        for j in range(i+1, n):\n            # Compute the xor of the pair (arr[i], arr[j])\n            xor = arr[i] ^ arr[j]\n            # Add the xor to the sum\n            xor_sum += xor\n    \n    # Return the final sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n): \n        xor ^= arr[i]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n-1):\n        xor = arr[i] ^ arr[i+1]\n        sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for num in iterable:\n        heapq.heappush(heap, num)\n\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable to a list\n    iterable = list(iterable)\n\n    # Build a min heap from the list\n    heap = iterable\n\n    # Sort the heap by repeatedly swapping the root node with the last node in the heap and then reducing the heap size\n    while len(heap) > 1:\n        # Swap the root node with the last node in the heap\n        hq.heappop(heap)\n        # Reduce the heap size by one\n        heapq.heapify(heap)\n\n    # Return the sorted list\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns the sorted list using heap sort algorithm.\n    '''\n    # Create a min-heap from the list\n    hq.heapify(iterable)\n    # Initialize the result list\n    result = []\n    # Extract elements from the heap one by one and append them to the result list\n    while hq.heapify(iterable):\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    n = len(iterable)\n    # build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(iterable, n, i)\n\n    # extract max element from heap and add to sorted list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(iterable))\n\n    return result\n\ndef heapify(iterable, n, i):\n    '''\n    Helper function to build a max heap.\n    '''\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n\n    if l < n and iterable[l] > iterable[largest]:\n        largest = l\n\n    if r < n and iterable[r] > iterable[largest]:\n        largest = r\n\n    if largest!= i:\n        iterable[i], iterable[largest] = iterable[largest], iterable[i]\n        heapify(iterable, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    n = len(iterable)\n    for i in range(n // 2 - 1, -1, -1):\n        hq.heapify(iterable, i, n)\n\n    for i in range(n - 1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        hq.heapify(iterable, 0, i)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1,0,-1):\n        hq.heappop(iterable)\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = iterable\n    sorted_list = []\n\n    while heap:\n        smallest = hq.heappop(heap)\n        sorted_list.append(smallest)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes a list or iterable and sorts it using the heap sort algorithm.\n    '''\n    # convert the list to a min-heap\n    heap = [heapq.nsmallest(len(iterable)//2, iterable)]\n    # extract and remove the smallest elements from the heap\n    for i in range(len(iterable)-len(heap[0])):\n        # add the next smallest element to the heap\n        heapq.heappush(heap, heapq.nsmallest(1, iterable)[0])\n    # convert the heap back to a sorted list\n    sorted_list = [heapq.heappop(heap) for _ in range(len(heap))]\n    # reverse the sorted list if necessary\n    if iterable[0] < iterable[-1]:\n        sorted_list.reverse()\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Args:\n        actual_cost (float): the cost of the sale\n        sale_amount (float): the amount of the sale\n    \n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise\n    '''\n    \n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # If profit is less than or equal to zero and loss is also less than or equal to zero, then the amount has no profit and no loss\n    if profit <= 0 and loss <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check if the actual cost is greater than or equal to the sale amount\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes two arguments: actual_cost and sale_amount.\n    It returns True if the given amount has no profit and no loss,\n    and False otherwise.\n\n    If the actual_cost is greater than the sale_amount, the function\n    returns False.\n\n    If the sale_amount is greater than or equal to the actual_cost \n    divided by 10, the function returns True.\n    '''\n    if actual_cost > sale_amount:\n        return False\n    elif sale_amount >= actual_cost / 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    This function checks whether the given amount has no profit and no loss.\n    It takes two arguments, actual_cost and sale_amount.\n    '''\n    if actual_cost > sale_amount: \n        return False\n    elif actual_cost == sale_amount: \n        return True\n    else: \n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"Profitable\")\n    else:\n        print(\"Unprofitable\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No profit and no loss\")\n    elif actual_cost > sale_amount:\n        print(\"No profit\")\n    else:\n        print(\"No loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost: int\n        the actual cost of the sale\n    \n    sale_amount: int\n        the amount to be sold\n    \n    Returns:\n    bool\n        True if the sale has no profit and no loss, False otherwise.\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost:\n        return False\n    elif sale_amount == actual_cost:\n        return True\n    else:\n        return True"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    w = 13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * (t ** 2) - 0.1144 * (t ** 3)\n    # Round to the nearest integer\n    w_int = math.ceil(w)\n    # Return the wind chill index\n    return w_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the dew point temperature (using the formula T = 243.04 (T0) + 0.611 (dT/dt) - 273.15 (T0))\n    T0 = 243.04\n    dT_dt = 0.611\n    T = T0 + dT_dt * (t - T0) + 273.15\n\n    # calculate the wind chill index\n    wci = 35.74 + 0.6215 * (v / 100) + 35.75 * math.exp((17.625 * (t - T)) / (t - T0 + 237.3))\n\n    # round the wind chill index to the nearest integer\n    wci = round(wci)\n\n    return wci\n````\n\nThe `wind_chill` function takes two parameters, `v` and `t`, representing the wind velocity in km/h and a temperature in celsius respectively.\n\nThe first step is to calculate the dew point temperature using the formula `T = 243.04 + 0.611 (dT/dt) - 273.15 (T0)`. This is done using a lookup table in `math.py`, which calculates the value of the dew point temperature for given temperatures and wind velocities.\n\nNext, the function calculates the wind chill index using the formula `wci = 35.74 + 0.6215 (v/100) + 35.75 * exp((17.625 (t - T))/(t - T0 + 237.3))`, which is a modified version of the formula used by the NWS.\n\nFinally, the function rounds the wind chill index to the nearest integer using the `round` function and returns the result.\n\nHere's an example of how to use the function:\n\n````python\n>>> wind_chill(20, 20)\n23\n````\n\nIn this example, the wind chill index for wind speed of 20 km/h and temperature of 20 degrees Celsius is 23, which is rounded to the nearest integer."
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Define the formula for wind chill index\n    C = 0.5*v*(t+273.15)\n    index = math.floor(C/(23.1*math.exp((C-32)/10)))\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_celsius = (v * 9/5) + 32\n    wind_speed_fahrenheit = (v * 1.8) + 32\n    if t < -40:\n        # absolute temperature is less than -40 degrees celsius, so the wind chill index is zero\n        wind_chill_index = 0\n    elif 40 <= t <= 100:\n        # absolute temperature is between 40 and 100 degrees celsius, so the wind chill index is 100\n        wind_chill_index = 100\n    else:\n        # absolute temperature is greater than 100 degrees celsius, so calculate the wind chill index using the given formula\n        if wind_speed_celsius < 0:\n            wind_speed_celsius = 0\n        if wind_speed_fahrenheit < 0:\n            wind_speed_fahrenheit = 0\n        wind_speed_ratio = wind_speed_celsius / wind_speed_fahrenheit\n        if wind_speed_ratio < 1.1:\n            wind_chill_index = 13.12 + (0.6215 * t) - (11.37 * math.log(wind_speed_ratio))\n        else:\n            wind_chill_index = 35.74 + (0.6215 * t) - (35.75 * math.log(wind_speed_ratio))\n\n    # round the wind chill index to the nearest integer and return it\n    return int(math.ceil(wind_chill_index))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = math.sqrt(v**2 + 101325) # convert wind speed from km/h to m/s\n    if wind_speed <= 5:\n        return -1\n    else:\n        c = 13.12 + 0.6215*t - 11.37*math.log(wind_speed) + 0.3965*t*math.log(wind_speed)\n        return round(c)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the nearest integer.\n\n    :param v: Wind velocity in kilometers per hour\n    :param t: Temperature in Celsius\n    :return: Wind chill index rounded to the nearest integer\n    \"\"\"\n    wind_speed_m_s = v * 1000  # convert kilometers per hour to meters per second\n    c = (1004.6 * math.exp((17.625 * t) / (t + 243.125))) / ((1004.6 * math.exp((17.625 * t) / (t + 243.125))) + (35.75 * math.exp((17.625 * (t + 10)) / (t + 243.125))))  # calculate the specific heat capacity at constant pressure\n    return round((13.12 + 0.6215 * wind_speed_m_s + 11.37 * math.exp(-0.1903 * wind_speed_m_s)) / (2.75 * c))  # calculate the wind chill index\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert wind velocity to m/s\n    v_ms = v * 1.60934\n\n    # calculate the wind chill index\n    wc = 35.74 + 0.6215 * t - 35.75 * math.pow(t,0.16) + 0.4275 * math.pow(v_ms,0.16)\n\n    # round to the nearest integer\n    wc_int = int(wc + 0.5)\n\n    # return the wind chill index rounded to the nearest integer\n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 35.74 + 0.6215 * v - 35.75 * math.exp((17.625 * t) / (t + 243.5))\n    return math.ceil(w)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t >= 0 and t <= 100:\n        # Convert the temperature to Fahrenheit\n        t = (t * 9/5) + 32\n        # Calculate the wind chill index using the formula WCI = 13.12 + 0.6215 * (t-273.15) + 0.4275 * v^0.16\n        wci = 13.12 + 0.6215 * (t-273.15) + 0.4275 * v**0.16\n        # Round the wind chill index to the nearest integer\n        wci = round(wci)\n        return wci\n    else:\n        # Raise a ValueError if the temperature is out of range\n        raise ValueError('Temperature must be between 0 and 100 degrees Celsius')"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index using the formula:\n    # WC = 13.12 + 0.6215*t_f - 11.37*t_f**2 + 0.3965*t_f**3\n    wc = 13.12 + 0.6215 * t_f - 11.37 * t_f**2 + 0.3965 * t_f**3\n    \n    # Calculate the wind chill index rounded to the next integer\n    wc_int = round(wc)\n    \n    # Return the wind chill index rounded to the next integer\n    return wc_int"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_names(names):\n        return [name for name in names if not name[0].islower()]\n\n    sum_lengths = lambda lst: sum(len(name) for name in lst)\n\n    names_without_lowercase = remove_names(sample_names)\n    total_length = sum_lengths(names_without_lowercase)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = []\n    for name in sample_names:\n        if name.startswith('a'):\n            lowercase_names.append(name)\n\n    total_length = 0\n    for name in lowercase_names:\n        total_length += len(name)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name.isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty list to store the names that meet the criteria\n    valid_names = []\n\n    # loop through each name in the input list\n    for name in sample_names:\n        # if the name does not start with a lowercase letter\n        if not name[0].islower():\n            # add the name to the valid_names list\n            valid_names.append(name)\n\n    # create an empty variable to store the sum of the lengths of valid names\n    total_length = 0\n\n    # loop through each valid name in the valid_names list\n    for name in valid_names:\n        # add the length of the name to the total_length variable\n        total_length += len(name)\n\n    # return the total_length variable as the output\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    total_length = sum([len(name) for name in names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    sum_lengths = sum([len(name) for name in lowercase_names])\n    return sum_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # loop through the list of names\n    sum_name_length = 0\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it and move on to the next name\n            continue\n        # otherwise, add the length of the name to the running total\n        sum_name_length += len(name)\n    # return the sum of the name lengths\n    return sum_name_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^\\)]+\\)'\n    return re.sub(pattern, '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regular expression to match parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n    \n    # Use re.findall() to find all matches in the string\n    matches = pattern.findall(items)\n    \n    # Remove the parenthesis from each match and join the list back into a string\n    new_items = [item.replace('(', '').replace(')', '') for item in matches]\n    new_items = ''.join(new_items)\n    \n    # Return the modified string\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\(.*?\\)'\n    regex = re.compile(pattern)\n    result = regex.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*?\\)' # regex pattern to match the parenthesis\n    return re.sub(pattern, '', items) # remove the matched parenthesis from the string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 12\n    else:\n        return (n * (n - 1) + 1) * (n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_numbers = []\n    # Generating all nonagonal numbers up to n\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            nonagonal_numbers.append(i*(i+1))\n\n    if len(nonagonal_numbers) == n:\n        return nonagonal_numbers[-1]\n    else:\n        return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # The formula for the nth nonagonal number is:\n    # n*(n-1) + n\n    # However, we need to subtract 2 to get the correct value.\n    return ((n*(n-1)) // 2) + n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if it is a non-agonal number and False otherwise.\n    A non-agonal number is a number that is not a multiple of 6.\n    '''\n    \n    # initialize the counter variable\n    counter = 0\n    \n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # if the number is not a multiple of 6, increment the counter\n        if i % 6!= 0:\n            counter += 1\n        # if the counter reaches n, return True\n        if counter == n:\n            return True\n    \n    # if the loop completes without finding n non-agonal numbers, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    # Loop through the range of n\n    for i in range(n):\n        # Calculate the next nonagonal number\n        c = a + b\n        # Update variables\n        a = b\n        b = c\n    # Return the final nonagonal number\n    return b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num += (i*2*(n-i))\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # Check if n is an integer greater than 1\n    if not isinstance(n, int) or n <= 1:\n        return \"Please enter a positive integer greater than 1.\"\n\n    # Initialize the counter variable\n    count = 1\n\n    # Check each number from 1 to n\n    for i in range(2, n+1):\n        # Increment the counter for even numbers\n        if i % 2 == 0:\n            count += 1\n\n        # Increment the counter for odd numbers\n        if i % 2!= 0:\n            count += 2\n\n    # Return the nth nonagonal number\n    return count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    This function calculates the nth nonagonal number.\n    '''\n    nonagonal = 0\n    num = 1\n    for i in range(1, n+1):\n        nonagonal += num * i\n        num += 2\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (is_nonagonal(n - 1) + is_nonagonal(n - 2)) * 2 + n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the squares of the first n natural numbers\n    squares = [i**2 for i in range(1, n+1)]\n    # Calculate the sum of the squares\n    sum_of_squares = sum(squares)\n    # Return the result of the sum divided by the product of the squares\n    return sum_of_squares / (n*(n-1)*(2*n-1))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])(z)(?![a-zA-Z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+(?=z)[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' except at the start and end of the word\n    pattern = r\"(?<![a-zA-Z0-9])z(?![a-zA-Z0-9])\"\n    # Use the re.search() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Check if there are any matches and return the result\n    if matches:\n        return \"The text contains 'z' in the middle of words.\"\n    else:\n        return \"The text does not contain 'z' in the middle of words.\""
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def text_match_wordz_middle(text):\n    # Define a regular expression pattern to match 'z' at the start and end of a word\n    pattern = r'\\b(z)\\b'\n\n    # Use the re.search() function to search for occurrences of the pattern in the text\n    result = re.search(pattern, text)\n\n    # If a match is found, return True\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\b'\n    match = re.search(pattern, text, re.IGNORECASE)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][a-zA-Z]*\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'(?<![a-zA-Z])z(?=[a-zA-Z])')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove all non-alphanumeric characters from the text\n    text = re.sub('[^a-zA-Z0-9]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Check if the first and last words contain 'z'\n    if words[0][-1] == 'z' and words[-1][-1] == 'z':\n        return True\n\n    # Check if the middle words contain 'z'\n    for i in range(1, len(words)-1):\n        if words[i][-1] == 'z' and words[i+1][-1] == 'z':\n            return True\n\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\b)z(?=\\b)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[z]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 0 or k > len(input):\n        return \"Invalid position\"\n\n    reverse_input = input[::-1]\n    return reverse_input[:k] + reverse_input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the input array\n    input = input[::-1]\n\n    # reverse the input array upto kth position\n    for i in range(len(input)//2):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Make a copy of the input array to avoid changing the original array\n    arr = input[:]\n\n    # Reverse the array from index 0 to k-1\n    arr[0:k] = arr[0:k][::-1]\n\n    # Reverse the array from index k to the end\n    arr[k:] = arr[k:][::-1]\n\n    return arr"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # finding the length of the array\n    n = len(input)\n    # finding the position of kth element\n    kth_element = n - k\n    # finding the reverse of the array upto the kth element\n    reverse_array = input[:kth_element][::-1]\n    # merging the two reversed arrays\n    result = input[kth_element:] + reverse_array\n    # returning the merged array\n    return result"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array\n    input[:] = input[::-1]\n    # reverse all the elements before k-1\n    input[:k-1] = input[:k-1][::-1]\n    # reverse all the elements after k-1\n    input[k-1:] = input[k-1:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n-1, k-1, -1):\n        input[i], input[n-1] = input[n-1], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Args:\n    input (list): A list of integers.\n    k (int): The position to reverse the array upto.\n\n    Returns:\n    A list of integers.\n    \"\"\"\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize two pointers, one for the start of the array and the other for the end of the array.\n    start = 0\n    end = len(input) - 1\n\n    # Swap elements till the start pointer reaches the kth element from the end.\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Reverse the remaining part of the array.\n    start = k\n    end = len(input) - 1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k >= n:\n        return input\n    reversed_arr = []\n    for i in range(n-1, -1, -1):\n        if i < k:\n            reversed_arr.append(input[i])\n        else:\n            break\n    return reversed_arr"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Check if the dictionary is a dictionary or not\n    if isinstance(test_dict, dict):\n        # Create a new dictionary and add the values of the original dictionary\n        new_dict = {**test_dict}\n        # Convert the dictionary to a tuple\n        new_tup = tuple(new_dict.values())\n    else:\n        # If the dictionary is not a dictionary, print an error message and return the tuple unchanged\n        print(\"Error: The input is not a dictionary.\")\n        new_tup = test_tup\n    \n    # Add the new dictionary to the original tuple\n    new_tup = new_tup + (new_dict,)\n    \n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a list\n    test_list = list(test_dict.items())\n    # add the list to the tuple\n    return test_tup + test_list"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create an empty dictionary\n    new_dict = {}\n    # iterate through the keys of the dictionary\n    for key in test_dict:\n        # add the key-value pair to the new dictionary\n        new_dict[key] = test_dict[key]\n    # add the new dictionary to the tuple\n    new_tuple = test_tup + (new_dict,)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Copy the original tuple to avoid modifying it\n    modified_tup = test_tup[:]\n    # Add the dictionary to the modified tuple\n    modified_tup.append(test_dict)\n    # Return the modified tuple\n    return modified_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Create a new dictionary with the same keys as the original dictionary\n    new_dict = {k: test_dict[k] for k in test_dict}\n    # Add the new dictionary to the tuple\n    return test_tup + (new_dict,)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[float('-inf')] * N for _ in range(N)]\n    \n    for i in range(N):\n        dp[i][i] = 0\n        for j in range(i+1, N):\n            dp[i][j] = dp[i][j-1] + cost[i][j]\n            dp[j][i] = dp[j][i-1] + cost[j][i]\n            \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if j == N-1:\n                max_avg = max(max_avg, dp[i][j] / (j+1))\n            elif i == N-1:\n                max_avg = max(max_avg, dp[i][j] / (i+1))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_avg = 0\n    num_cells = 1\n    path_sum = cost[0][0]\n    \n    # Calculate the maximum average\n    for i in range(1, len(cost)):\n        for j in range(1, len(cost[0])):\n            path_sum += cost[i][j]\n            num_cells += 1\n            current_avg = path_sum / num_cells\n            if current_avg > max_avg:\n                max_avg = current_avg\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    visited = set()\n    paths = []\n\n    def backtrack(i, j, path):\n        if (i, j) == (N - 1, N - 1):\n            nonlocal max_avg\n            nonlocal visited\n            nonlocal paths\n            avg = sum(cost[i][j])\n            if avg > max_avg:\n                max_avg = avg\n            visited.add((i, j))\n            paths.append(path)\n            return\n        if (i, j) not in visited:\n            visited.add((i, j))\n            path.append((i, j))\n            if cost[i][j] > cost[i + 1][j]:\n                backtrack(i + 1, j, path)\n            else:\n                backtrack(i, j + 1, path)\n            path.pop()\n            visited.remove((i, j))\n\n    backtrack(0, 0, [(0, 0)])\n\n    return max_avg / len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_sum = 0\n    max_cost = 0\n    for i in range(n):\n        for j in range(n):\n            if j == 0: # visit top row\n                if i == 0: # start from top left cell\n                    if i == j: # only one cell in the path\n                        max_cost = cost[i][j]\n                    else: # more than one cell in the path\n                        max_cost = cost[i][j] + maxAverageOfPath(cost[i+1:]) # visit down row\n                    max_sum += max_cost\n                else: # visit left column\n                    max_cost = cost[i][j] + maxAverageOfPath([row[:j] + row[j+1:] for row in cost[:i]]) # visit right row\n                    max_sum += max_cost\n            elif j == n-1: # visit bottom row\n                if i == n-1: # start from bottom right cell\n                    if i == n-j: # only one cell in the path\n                        max_cost = cost[i][j]\n                    else: # more than one cell in the path\n                        max_cost = cost[i][j] + maxAverageOfPath(cost[i-1:]) # visit up row\n                    max_sum += max_cost\n                else: # visit right column\n                    max_cost = cost[i][j] + maxAverageOfPath([row[:j] + row[j+1:] for row in cost[i+1:]]) # visit left row\n                    max_sum += max_cost\n            else: # visit any other cell in the matrix\n                if i == j: # only one cell in the path\n                    max_cost = cost[i][j]\n                else: # more than one cell in the path\n                    max_cost = cost[i][j] + maxAverageOfPath(cost[i+1:i+1]) # visit down row\n                    max_sum += max_cost\n    return max_sum / (n*n) # average is computed as total cost divided by the number of cells visited in the path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    N = len(cost)\n    max_avg = float('-inf')\n    \n    # initialize the first row and column of the matrix\n    for i in range(N):\n        max_avg = max(max_avg, sum(cost[0][i:]) + sum(cost[i][0:N]))\n        \n    # fill in the rest of the matrix using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            max_avg = max(max_avg, max(sum(cost[i][k:j]) + sum(cost[k][j:i]) for k in range(j, N)) + sum(cost[i][j]))\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    paths = []\n\n    # Traverse each cell and generate all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Generate all possible paths from top-left cell to current cell\n            paths.extend(generate_paths(i, j, cost))\n\n    # Find the maximum average over all paths\n    for path in paths:\n        total_cost = sum(cost[i][j] for i, j in path)\n        num_cells = len(path)\n        avg = total_cost / num_cells\n        if avg > max_avg:\n            max_avg = avg\n\n    return max_avg\n\n\ndef generate_paths(i, j, cost):\n    '''\n    Given the starting cell (i, j), generates all possible paths that can be generated from there.\n    '''\n    N = len(cost)\n    paths = []\n\n    # Add the starting cell\n    paths.append([(i, j)])\n\n    # Move right\n    if i < N - 1:\n        paths.extend(generate_paths(i + 1, j, cost))\n\n    # Move down\n    if j < N - 1:\n        paths.extend(generate_paths(i, j + 1, cost))\n\n    return paths"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    n = len(cost)\n    dp = [[0]*n for _ in range(n)]\n    max_avg = float('-inf')\n    \n    # Calculate the maximum average of each path\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i-1][j], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n                \n            if i == n-1 and j == n-1:\n                max_avg = max(max_avg, dp[i][j])\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[False] * N for _ in range(N)]\n    path = []\n    for i in range(N):\n        for j in range(N):\n            visited[i][j] = True\n            path.append((i, j))\n            if i == N-1 and j == N-1:\n                avg = sum(cost[i][j]) / N\n                if avg > max_avg:\n                    max_avg = avg\n                path.pop()\n                visited[i][j] = False\n                continue\n            if i < N-1 and not visited[i+1][j]:\n                visited[i+1][j] = True\n                path.append((i+1, j))\n            if j < N-1 and not visited[i][j+1]:\n                visited[i][j+1] = True\n                path.append((i, j+1))\n            visited[i][j] = False\n            path.pop()\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_path_avg = 0\n    max_path_length = 0\n    \n    # Loop through all paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if this cell is already visited\n            if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                continue\n            \n            # Check if we can reach the bottom right corner of the matrix\n            if i == len(cost) - 1 or j == len(cost[i]) - 1:\n                path_length = 1\n                path_avg = cost[i][j]\n            else:\n                # Recursively calculate the path average\n                path_length = maxAverageOfPath(cost) + 1\n                path_avg = (cost[i][j] + path_length * maxAverageOfPath(cost[i+1:])) / path_length\n            \n            # Update maximum path average and length\n            if path_avg > max_path_avg or (path_avg == max_path_avg and path_length > max_path_length):\n                max_path_avg = path_avg\n                max_path_length = path_length\n                \n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    max_avg = 0.0\n    max_path = None\n\n    # Loop over all possible paths\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue # Ignore paths starting from top-left cell\n            current_path = [str((i,j))] # Initialize current path with current cell\n            visited_cells = 1 # Initialize number of visited cells to 1\n            \n            # Loop over all possible moves\n            while True:\n                # Check if current cell is at bottom right cell\n                if i == N-1 and j == N-1:\n                    break # End loop if we reach bottom right cell\n                # Move to right cell if possible\n                if i+1 < N and cost[i+1][j] > cost[i][j]:\n                    current_path.append(str((i+1,j)))\n                    visited_cells += 1\n                    i += 1\n                # Move to bottom cell if possible\n                elif j+1 < N and cost[i][j+1] > cost[i][j]:\n                    current_path.append(str((i,j+1)))\n                    visited_cells += 1\n                    j += 1\n                # Move to left cell if possible\n                elif i-1 >= 0 and cost[i-1][j] > cost[i][j]:\n                    current_path.append(str((i-1,j)))\n                    visited_cells += 1\n                    i -= 1\n                # Move to top cell if possible\n                elif j-1 >= 0 and cost[i][j-1] > cost[i][j]:\n                    current_path.append(str((i,j-1)))\n                    visited_cells += 1\n                    j -= 1\n                # No more moves left, break out of loop\n                else:\n                    break\n            \n            # Calculate average cost of current path\n            avg_cost = sum([int(cell[1:]) for cell in current_path]) / visited_cells\n            \n            # Update max average if necessary\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = current_path\n    \n    # Return max average path\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight.\n    The function should return a new dictionary containing the students whose height and weight are above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # initialize an empty list to store the students that meet the criteria\n    output = []\n    \n    # loop through the students dictionary\n    for name, info in students.items():\n        # unpack the tuple of height and weight from the dictionary\n        height, weight = info\n        # check if the student has a height greater than or equal to the minimum height and a weight greater than or equal to the minimum weight\n        if height >= h and weight >= w:\n            # if the student meets the criteria, add their name to the output list\n            output.append(name)\n    \n    # return the list of students that meet the criteria\n    return output"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # loop through the dictionary\n    for name,info in students.items():\n        # unpack the height and weight from the tuple\n        height, weight = info\n        # check if the height and weight are greater than the minimum values\n        if height > h and weight > w:\n            # if so, add the student to the filtered list\n            filtered_students.append(name)\n    # return the filtered list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    # create an empty dictionary to store filtered students\n    filtered_students = {}\n    \n    # iterate through each student in the original dictionary\n    for name, data in students.items():\n        # unpack the height and weight from the data tuple\n        height, weight = data\n        \n        # check if the student's height and weight are above the minimum\n        if height > h and weight > w:\n            # add the student to the filtered dictionary\n            filtered_students[name] = data\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, values in students.items():\n        height, weight = values\n        if height > h and weight > w:\n            filtered_students[name] = values\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    filtered_students = {}\n    \n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {name: value for name, value in students.items() if value[0]>h and value[1]>w}"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length.\n    Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so that we can split it into individual digits\n    base_str = str(base)\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate over each digit in the string and add it to the sum based on the power\n    for digit in base_str:\n        digit_int = int(digit)\n        digit_sum = digit_int * (power + 1)\n        total_sum += digit_sum\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += sum_digits(base)\n    return sum\n\n\ndef sum_digits(number):\n    '''\n    Write a function that takes a number as an argument and returns the sum of its digits.\n    '''\n    sum = 0\n    while number > 0:\n        sum += number % 10\n        number //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        sum += base % 10\n        base //= 10\n        power -= 1\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Initialize sum variable to zero\n    sum_of_digits = 0\n    # Initialize remainder variable to base\n    remainder = base\n\n    # Calculate the sum of digits of base to the specified power\n    for i in range(power):\n        # Get the last digit of the remainder\n        last_digit = remainder % 10\n        # Add the last digit to the sum of digits variable\n        sum_of_digits += last_digit\n        # Divide the remainder by 10 to remove the last digit\n        remainder //= 10\n\n    # Return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Convert the base and power to integers\n    base = int(base)\n    power = int(power)\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the digits of the base\n    while base > 0:\n        # Get the last digit of the base\n        digit = base % 10\n\n        # Add the digit to the sum\n        sum += digit\n\n        # Remove the last digit from the base\n        base = base // 10\n\n    # Calculate the sum of the digits raised to the power\n    result = sum ** power\n\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    \n    while power > 0:\n        digit = temp % 10\n        result += digit ** power\n        temp //= 10\n        power -= 1\n        \n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    total = 0\n    num = base\n    while power > 0:\n        total += num % 10\n        power -= 1\n        num //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # convert the base to a string and store it in a variable\n    base_str = str(base)\n\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum of digits\n        digit_sum += int(digit)\n\n    # return the sum of digits raised to the power\n    return digit_sum ** power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    # calculate the sum of all digits of the base to the specified power\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit ** power\n        base //= 10\n        power -= 1\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'  # Find all quoted strings\n    matches = re.findall(pattern, text)  # Find all matches using the pattern\n    values = []\n    for match in matches:\n        value = match.strip('\"')\n        values.append(value)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define the regular expression pattern for matching quotation marks\n    pattern = r'\".*?[^\\\\]\"\\s'\n    \n    # use the re.findall() function to find all the matches in the string\n    matches = re.findall(pattern, text1)\n    \n    # return the list of matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = re.compile(r'\".*?\"')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # find all the quotation marks in the string\n    matches = re.findall('\"[^\"]*\"', text)\n    # extract all the values between the quotation marks\n    values = []\n    for match in matches:\n        start = match.find('\"') + 1\n        end = match.rfind('\"')\n        value = match[start:end]\n        values.append(value)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Find all the occurrences of quotation marks in the text\n    matches = re.findall(r'\"([^\"]*)\"', text1)\n    # Remove the double quotes from the matches\n    result = [match.strip('\"') for match in matches]\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)-1):\n        new_tup += (test_tup[i]*test_tup[i+1],)\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize the output tuple with zeros\n    output_tup = [0] * len(test_tup)\n    # iterate over the input tuple and multiply each element with the next\n    for i in range(len(test_tup)-1):\n        output_tup[i] = test_tup[i] * test_tup[i+1]\n    # return the output tuple\n    return output_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Create a new empty tuple to hold the result\n    result = ()\n    \n    # Loop through the input tuple and multiply each number by the next number\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n        \n    # Add the last number to the result tuple\n    result += (test_tup[-1],)\n        \n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [test_tup[0]]\n    for i in range(1, N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # check if the input tuple has at least two elements\n    if len(test_tup) < 2:\n        return None\n    # initialize an empty result list and the list of indices\n    result = []\n    indices = []\n    # iterate over the input tuple, starting from the second element\n    for i in range(1, len(test_tup)):\n        # compute the index of the next element\n        next_index = i + 1\n        # check if the next element exists\n        if next_index < len(test_tup):\n            # compute the product of the current and next elements and add it to the result list\n            result.append(test_tup[i] * test_tup[next_index])\n            # add the index of the next element to the indices list\n            indices.append(next_index)\n    # check if there are elements left in the input tuple\n    if len(test_tup) % 2 == 0:\n        # compute the product of the last two elements and add it to the result list\n        result.append(test_tup[-2] * test_tup[-1])\n        # add the index of the second last element to the indices list\n        indices.append(-1)\n    else:\n        # compute the product of the last two elements and add it to the result list\n        result.append(test_tup[-1] * test_tup[-2])\n        # add the index of the last element to the indices list\n        indices.append(-2)\n    # create a new tuple with the computed result list and the indices list\n    return tuple(result), tuple(indices)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[0] * test_tup[4])\n    for i in range(1, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # create an empty list to store the sum of two lists\n    result = []\n    # iterate over the two lists and add the corresponding elements\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    # return the summed list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # combine the two lists using the '+' operator\n    result = lst1 + lst2\n    # return the result\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check that the input lists are of the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Input lists must have the same length\")\n    # initialize the result list with the first element of each list\n    result = [lst1[0]]\n    # loop over the remaining elements of the first list\n    for i in range(1, len(lst1)):\n        # add the current element of the first list to the accumulated result\n        result.append(lst1[i] + result[-1])\n    # loop over the remaining elements of the second list\n    for i in range(1, len(lst2)):\n        # add the current element of the second list to the accumulated result\n        result.append(lst2[i] + result[-1])\n    # return the accumulated result\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(filter(lambda x: len(list(x)) > 1, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(set(nums)), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # Iterate through the unique_nums set and group by consecutive duplicates\n    grouped_nums = {k: list(g) for k, g in groupby(unique_nums)}\n    # Iterate through the grouped_nums dictionary to remove consecutive duplicates\n    for key, group in grouped_nums.items():\n        if len(group) > 1:\n            continue\n        # If there is only one element in the group, add it to the unique_nums set\n        unique_nums.update(group)\n    # Convert the unique_nums set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    for key, group in groupby(sorted(nums)):\n        if key == len(list(group)):\n            yield from group"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [item[0] for key, group in groupby(nums) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    grouped_nums = groupby(enumerate(nums), lambda x: x[0] == x[1]-1)\n    return [num for num in nums if num not in grouped_nums]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n    '''\n    return [num for _, group in groupby(enumerate(nums), lambda x: x[1] == x[0] + 1) if not group]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # calculate the area of a circle\n    area_circle = math.pi * r * r\n\n    # calculate the lateral surface area\n    lateral_surface_area = (2 * area_circle * r) / (3 * h)\n\n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # calculate the lateral surface area\n    lateral_surface_area = math.pi * r * h\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the area of the base of the cone\n    area_base = math.pi*r**2\n\n    # Calculate the area of the top of the cone\n    area_top = math.pi*r**2*h\n\n    # Calculate the lateral surface area of the cone\n    lateral_area = area_base + area_top\n\n    # Return the lateral surface area of the cone\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    This function takes two parameters: r, the radius of the cone, and h, the height of the cone.\n    It calculates the lateral surface area of the cone and returns the result.\n    '''\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = 2 * math.pi * r * h\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*(h/3)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Calculate the lateral surface area of the cone\n    surface_area = 2*(math.pi*r**2+math.pi*h**2-2*math.pi*r*h)\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r ** 2 * h / 3\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for finding special characters\n    pattern = r'[^\\w\\s]'\n\n    # Replace all special characters with a colon\n    text = re.sub(pattern, ':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]|_+', '', text)\n    text = text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s|\\,|\\.', ':', text)\n\ntext = \"Hello, world! This is a test.\"\nprint(replace_specialchar(text))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r',+', ':', text)\n    text = re.sub(r'\\.\\+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[,\\. ]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the pattern to match the special characters\n    pattern = r'[\\s,\\.]'\n    # Replace all matches with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces and dots with a colon\n    text = text.replace(\" \", \":\").replace(\".\", \":\")\n    # Replace commas with a semicolon\n    text = text.replace(\",\", \";\")\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern for finding special characters\n    pattern = r'[\\s.,;:!?()]'\n    \n    # Replace all occurrences of special characters with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # create a regular expression pattern to match any of the special characters\n    pattern = re.compile(r'[\\s,\\.]')\n    # use the pattern to replace all matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Initialize the index of the first occurrence of x to -1\n    first_occurrence_index = -1\n\n    # Initialize a variable to keep track of the current index\n    current_index = 0\n\n    # Loop through the array\n    while current_index < len(A) and A[current_index] < x:\n        current_index += 1\n\n    # If x is found in the array, update the first_occurrence_index variable\n    if current_index < len(A) and A[current_index] == x:\n        first_occurrence_index = current_index\n\n    # Return the first_occurrence_index variable\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    :param A: sorted array\n    :type A: list[int]\n    :param x: the number to search for\n    :type x: int\n    :return: index of the first occurrence of x in A, or -1 if x is not found in A\n    :rtype: int\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index as -1\n    first_occurrence_index = -1\n    \n    # Initialize two pointers, one at the beginning and one at the end of the array\n    left = 0\n    right = len(A) - 1\n    \n    # Compare the array elements and update the first occurrence index if the current element is equal to x\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            first_occurrence_index = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the first index to -1\n    index = -1\n\n    # loop through the sorted array\n    for i in range(len(A)):\n        # check if the current element is equal to the given number\n        if A[i] == x:\n            # if it is, update the index\n            index = i\n            # exit the loop\n            break\n\n    # return the index of the first occurrence of the given number\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in a sorted array and a number x, and returns the index of the first occurrence of x in the array.\n    If x is not in the array, the function returns -1.\n    \"\"\"\n    # Find the leftmost index where A[i] > x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # If we reach this point, x is the first occurrence of x in the array\n            i = mid\n            while i > 0 and A[i-1] == x:\n                i -= 1\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # find the index of the first occurrence of x in A\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    # if x was not found, return -1\n    if i == len(A):\n        return -1\n    # find the index of the first occurrence of x in A[i+1:]\n    j = i + 1\n    while j < len(A) and A[j] == x:\n        j += 1\n    return j"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sub_array_sum = [0] * (n + 1)\n    \n    for i in range(n + 1):\n        sub_array_sum[i] = arr[0] * i\n    \n    for i in range(1, n):\n        for j in range(i, n + 1):\n            sub_array_sum[j] += arr[i] * sub_array_sum[j - i]\n    \n    return sub_array_sum[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    product_sum = 0\n\n    for i in range(n):\n        product_sum += arr[i] * arr[i+1] * arr[i+2] *... * arr[i+n-1]\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prod = 1\n    dp = [0] * (n+1)\n    dp[0] = 0\n\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * arr[i-1]\n        prod *= arr[i-1]\n\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            max_sum = max(max_sum, dp[j] - dp[i]*dp[j])\n\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    subarray_product = [1] * n\n\n    # Calculate the product of all subarrays\n    for i in range(n):\n        subarray_product[i] = arr[i] * subarray_product[i]\n        for j in range(i):\n            subarray_product[i] *= arr[j]\n            subarray_product[i] //= subarray_product[j]\n\n    # Calculate the sum of products of all subarrays\n    subarray_product_sum = 0\n    for i in range(n):\n        subarray_product_sum += subarray_product[i]\n\n    # Return the sum of products of all subarrays\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize an empty list to store the product of subarray\n    prod_list = []\n\n    # Initialize a variable to store the sum of products of subarrays\n    subarray_sum = 0\n\n    # Loop through each subarray of length 1 to n-1\n    for i in range(n-1):\n        # Calculate the product of the subarray\n        subarray_prod = arr[i] * arr[i+1]\n\n        # Add the product to the sum of products of subarrays\n        subarray_sum += subarray_prod\n\n        # Append the product to the list of products of subarrays\n        prod_list.append(subarray_prod)\n\n    # Calculate the sum of products of all possible subarrays\n    sum_of_products = subarray_sum * (n-1)\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod_arr = []\n    for i in range(n):\n        prod_arr.append(1)\n        for j in range(i+1, n):\n            prod_arr.append(prod_arr[j-1] * arr[j])\n    return sum(prod_arr)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = [1] * n\n\n    # calculate product of first element\n    prod[0] = arr[0]\n\n    # calculate product of subarrays with last element removed\n    for i in range(1, n):\n        prod[i] = prod[i-1] * arr[i]\n\n    # calculate product of subarrays with first and last elements removed\n    for i in range(n-2, -1, -1):\n        prod[i] = prod[i+1] * arr[i]\n\n    # calculate sum of products of subarrays with all elements removed\n    sum_prod = sum(prod)\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        sum_1 = sum_Of_Subarray_Prod(arr[1:])\n        sum_2 = 0\n        for i in range(n):\n            sum_2 += arr[i]*arr[i+1]\n        return sum_1 + sum_2"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    max_sum = float('-inf')\n    max_product = 0\n    start = 0\n\n    for end in range(1, n + 1):\n        max_sum = max(max_sum, prefix_sum[end] - prefix_sum[start])\n        if max_sum == 0:\n            max_product = max(max_product, prefix_sum[end] - prefix_sum[start])\n            start += 1\n\n    return max_product"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n\n    for i in range(n):\n        prefix_sum[i+1] = prefix_sum[i] + arr[i]\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray_product = 1\n            for k in range(i, j):\n                subarray_product *= arr[k]\n            result += prefix_sum[j] - prefix_sum[i] * subarray_product\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = (n & 1)\n    last_bit = (n >> 31) & 1\n    n = n ^ ((first_bit | last_bit) << 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    # Get the number of bits in the number\n    num_bits = bin(n).count('1')\n    \n    # Get the index of the middle bit\n    middle_bit = num_bits // 2\n    \n    # Get the first and last bits of the number\n    first_bit = n & (1 << middle_bit)\n    last_bit = n & (1 << (num_bits - 1))\n    \n    # Toggle the middle bit\n    n ^= (1 << middle_bit)\n    \n    # Set the first and last bits\n    n |= first_bit | last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Shift the bits to the right by one position to make space for the middle bit\n    n = n >> 1\n\n    # Extract the middle bit\n    middle_bit = n & 1\n\n    # Toggle the middle bit\n    n = n ^ middle_bit\n\n    # Shift the bits back to the original position\n    n = n << 1\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = 1 << (n.bit_length() - 1)\n    last_bit = (1 << (n.bit_length() - 1)) - 1\n    result = n ^ first_bit ^ last_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the length of the number\n    length = len(bin(n)[2:])\n    # Calculate the middle bits\n    middle_bits = n & ((1 << length) - 1)\n    # Toggle the middle bits\n    middle_bits = middle_bits ^ ((1 << (length-1)) - 1)\n    # Set the first and last bits to 0\n    first_bit = n & 1\n    last_bit = n & ((1 << length) - 2)\n    middle_bits = middle_bits ^ (first_bit | last_bit)\n    # Combine the middle bits with the first and last bits\n    final_number = first_bit ^ middle_bits ^ last_bit\n    # Convert the final number back to its original binary format\n    final_binary = bin(final_number)[2:]\n    # Return the final binary number\n    return final_binary"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    bit1 = 1 << 0  # First bit\n    bit2 = 1 << 1  # Second bit\n    bit3 = 1 << 2  # Third bit\n    bit4 = 1 << 3  # Fourth bit\n    \n    first_bit = (n & bit1) >> 0\n    last_bit = (n & bit2) >> 1\n    \n    toggled_bits = ((n & bit3) << 2) | ((n & bit4) << 1) | (last_bit << 3) | (first_bit >> 2) | (first_bit << 2) | (last_bit >> 1) | (first_bit >> 3)\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the length of the binary representation of the number\n    n_length = len(bin(n)[2:])\n\n    # Check if the length is odd or even\n    if n_length % 2 == 0:\n        # Get the middle bit index\n        middle_bit_index = n_length // 2\n\n        # Toggle all the middle bits except the first and last bit\n        for i in range(middle_bit_index-1, n_length-2, 2):\n            n |= 1 << i\n\n        # Toggle the first and last bits\n        n |= 1 << middle_bit_index\n        n |= 1 << (n_length-1)\n\n    else:\n        # Get the middle bit index\n        middle_bit_index = (n_length - 1) // 2\n\n        # Toggle all the middle bits except the first and last bit\n        for i in range(middle_bit_index-1, n_length-2, 2):\n            n |= 1 << i\n\n        # Toggle the first and last bits\n        n |= 1 << middle_bit_index\n        n |= 1 << (n_length-1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle a bit, we need to shift it to the left by one position and then shift it to the right by two positions.\n    # The left shift moves the bits to the left by one position and clears the high bit.\n    # The right shift moves the bits to the right by two positions and sets the high bit.\n    # To toggle the first and last bits, we can use a combination of left shift and right shift.\n    # Let's take an example:\n    # 00001101 -> 00010001 -> 00011001 -> 00011010\n    # To toggle the first and last bits, we can use:\n    # 00001101 << 1 -> 00010001 -> 00011001\n    # 00011001 >> 2 -> 00010001 -> 00011001\n    # 00011001 << 2 -> 00001101 -> 00010001\n    # 00010001 >> 1 -> 00011001 -> 00011001\n    # Now we can see that the first and last bits are toggled.\n    # We can repeat the same process for other bits.\n    # So, our final code is:\n    # 1. Get the first and last bits of the number.\n    # 2. Shift the first bit to the left by one position and clear the high bit.\n    # 3. Shift the last bit to the right by two positions and set the high bit.\n    # 4. Shift all other bits to the left by one position and clear the high bit.\n    # 5. Shift all other bits to the right by two positions and set the high bit.\n    # 6. Combine the shifted bits to get the final number.\n    # 7. Return the final number.\n    first_bit = (n & 1) << 1  # shift the first bit to the left by one position and clear the high bit\n    last_bit = (n >> 15) & 1  # shift the last bit to the right by two positions and set the high bit\n    shifted_bits = (n >> 1) & 0x55555555  # shift all other bits to the left by one position and clear the high bit\n    shifted_bits = shifted_bits << 1  # shift all other bits to the right by two positions and set the high bit\n    shifted_bits = shifted_bits & 0x33333333  # combine the shifted bits to get the final number\n    result = first_bit + shifted_bits + last_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the binary representation of the number\n    binary = bin(n)[2:]\n    \n    # Check if the first and last bits are 0 and 1 respectively\n    if binary[0] == '0' and binary[-1] == '1':\n        # Create a new binary string with the first and last bits toggled\n        binary = binary[:1] + binary[1:-1] + binary[-1]\n    else:\n        # Create a new binary string with the first and last bits reversed\n        binary = binary[:1] + binary[1:][::-1] + binary[-1]\n    \n    # Convert the binary string back to an integer\n    return int(binary, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    This function takes a number as input and returns a new number with the middle two bits toggled.\n    \"\"\"\n    # Extracting the first and last bits of the number\n    first_bit = (n & 0b1) << 1\n    last_bit = (n & 0b10000000) >> 7\n    \n    # Extracting the middle bits of the number\n    middle_bits = n & 0b11111111\n    \n    # Toggling the middle bits\n    middle_bits = middle_bits ^ 0b10101010\n    \n    # Concatenating the first and last bits and the middle bits\n    result = first_bit + last_bit + middle_bits\n    \n    return result"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    # Binary search\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Initialize the left and right indices of the sorted array\n    left = 0\n    right = len(a) - 1\n    \n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the value being inserted is greater than the midpoint value, search in the right half of the array\n        if a[mid] < x:\n            left = mid + 1\n            \n        # If the value being inserted is less than or equal to the midpoint value, search in the left half of the array\n        else:\n            right = mid - 1\n            \n    # Return the left index of the insertion point\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    if x < a[index]:\n        return index\n    else:\n        return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        if a[index] == x:\n            return index\n        elif a[index] < x:\n            return left_insertion(a[index+1:], x)\n    return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Using bisect.bisect_left function to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # Return the left insertion point\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # create a list to store the indices of the sorted list\n    indices = []\n    for i in range(len(a)):\n        indices.append(i)\n    \n    # use binary search to find the left insertion point\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[indices[mid]] < x:\n            left = mid + 1\n        else:\n            right = mid\n    \n    # return the index of the left insertion point\n    return indices[left]"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function will return the index of the left insertion point of a specified value x in a sorted list a.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list `a` and a value `x` as input.\n    It returns the left insertion point of `x` in `a` using binary search algorithm.\n\n    :param a: sorted list of numbers\n    :param x: value to be searched for in `a`\n    :return: the left insertion point of `x` in `a`\n    \"\"\"\n\n    # Use binary search algorithm to find the left insertion point of x\n    index = bisect.bisect_left(a, x)\n\n    # If value is present at the beginning of the list\n    if index == 0 and a[0] == x:\n        return 0\n\n    # If value is present at the end of the list\n    if index == len(a) and a[index-1] == x:\n        return index\n\n    # If value is present somewhere in the middle of the list\n    if a[index-1] < x <= a[index]:\n        return index\n\n    # If value is greater than all the elements in the list\n    if index == len(a):\n        return index+1\n\n    # If value is less than all the elements in the list\n    return index-1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a[:index], x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True \n    else: \n        return False "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    return bool(pattern.match(string))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Calculate the geometric sum of n-1 using recursion.\n\n    :param n: int, the number of terms to sum\n    :return: int, the geometric sum of n-1\n    \"\"\"\n    if n == 1:\n        return 1  # base case: 1 term -> sum = 1\n    else:\n        return n * geometric_sum(n - 1)  # recursive case: add n to sum of n-1"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Parameters:\n        n (int): The value of n.\n\n    Returns:\n        int: The geometric sum of n-1.\n\n    \"\"\"\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1 / geometric_sum(n-1) + n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Check if n is less than or equal to 0\n    if n <= 0:\n        return 0\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n\nprint(geometric_sum(5))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    :param n: The value of n to find the geometric sum for.\n    :return: The geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return (n * geometric_sum(n - 1)) ** (1 / n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # generate a list of all triangular numbers up to n\n    triangular = [math.comb(n, i) for i in range(n+1)]\n    # sort the list\n    sorted_triangular = sorted(triangular)\n    # return the index of the smallest number\n    return triangular.index(sorted_triangular[0])"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Define a function that generates the nth triangular number\n    def triangular(n):\n        return n*(n+1)//2\n    \n    # Initialize variables\n    index = 1\n    triangular_num = 1\n    \n    # Loop through the triangular numbers up to the nth triangular number with n digits\n    while triangular_num <= triangular(n):\n        index += 1\n        triangular_num = triangular(index)\n        \n    return index-1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function will find the index of the smallest triangular number with n digits.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a given number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_factors(num):\n        \"\"\"\n        A helper function to count the factors of a given number.\n        \"\"\"\n        count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                count += 1\n        return count\n\n    def is_valid(num):\n        \"\"\"\n        A helper function to check if a given number is a valid triangular number or not.\n        \"\"\"\n        if count_factors(num)!= 3:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_digits(num):\n        \"\"\"\n        A helper function to count the number of digits of a given number.\n        \"\"\"\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def find_index(n):\n        \"\"\"\n        The main function to find the index of the smallest triangular number with n digits.\n        \"\"\"\n        triangular_num = 0\n        for i in range(n):\n            triangular_num *= 10\n\n        while True:\n            if is_valid(triangular_num):\n                index = count_digits(triangular_num)\n                if index == n:\n                    return triangular_num\n                triangular_num += 1\n            else:\n                triangular_num += 1\n\n    return find_index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n): \n    '''\n    This function will find the index of the smallest triangular number with n digits.\n    The triangular number is calculated using the formula: T(n) = n(n+1)/2\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 0\n        while math.sqrt(count) % 1!= 0:\n            count += 1\n        for i in range(int(math.sqrt(count))+1):\n            if count + i * (i-1) * (i-1) > 2**n:\n                break\n            triangular_number = count + i * (i-1) * (i-1)\n            digits = len(str(triangular_number))\n            if digits == n:\n                return count + i * (i-1) * (i-1)\n        return \"Not possible to find a triangular number with \" + str(n) + \" digits.\""
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_digits(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num //= 10\n        return count\n\n    def smallest_prime_number(n):\n        prime_count = 0\n        for i in range(2, n+1):\n            if is_prime(i):\n                prime_count += 1\n                if prime_count == 1:\n                    return i\n\n    def is_smallest_triangular_number(n):\n        count = count_digits(n)\n        if count < n:\n            return False\n        if count == n:\n            return True\n        prime = smallest_prime_number(n)\n        if prime == 0:\n            return False\n        while prime * prime <= n:\n            if n % prime == 0:\n                return False\n            n = (n-prime) // prime\n        return True\n\n    def smallest_triangular_number(n):\n        if not is_smallest_triangular_number(n):\n            return -1\n        i = 1\n        while i < n:\n            i *= 10\n        return i - 1\n\n    def find_Index(n):\n        index = 0\n        num = smallest_triangular_number(n)\n        while count_digits(num) < n:\n            index += 1\n            num *= 10\n        return index\n\n    return find_Index(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # Step 1: Calculate the value of the nth triangular number\n    nth_triangular = math.ceil((n * (n+1) * (2*n+1)) / 6)\n    \n    # Step 2: Take the index of the nth triangular number\n    index = math.ceil((n * (n+1)) / 2)\n    \n    # Step 3: Find the value of the smallest triangular number with n digits\n    smallest_triangular = math.ceil((n * (n+1) * (2*n+1)) / 6)\n    \n    # Step 4: Compare the value of the nth triangular number with the value of the smallest triangular number with n digits\n    if nth_triangular < smallest_triangular:\n        return index\n    else:\n        return find_Index(n+1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Find the number of digits in the input number n \n    count = 0\n    temp = n\n    while temp > 0: \n        count += 1\n        temp //= 10\n        \n    # Calculate the smallest triangular number with n digits \n    tri_n = math.trunc((n*(n+1))//2)\n    \n    # Calculate the index of the smallest triangular number with n digits \n    index = tri_n - ((n-1)*math.trunc((math.log10(tri_n)-math.log10(n-1))/2))+1\n    \n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n\n    Args:\n        n (int): The number of digits in the triangular number.\n\n    Returns:\n        int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    if n == 0: \n        return 0 \n    triangular_numbers = [] \n    for i in range(1, 10**(n+1)): \n        triangular_numbers.append(i) \n    smallest_triangular_number = min(triangular_numbers) \n    smallest_triangular_number_index = triangular_numbers.index(smallest_triangular_number) \n    return smallest_triangular_number_index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def find_Smallest(n):\n        if n == 1:\n            return 1\n        else:\n            return (math.factorial(n) * (math.factorial(n-1) ** 2)) // (math.factorial(n-1) * math.factorial(n-2))\n\n    def find_Indices(n):\n        if n == 1:\n            return [0]\n        else:\n            indices = find_Indices(n-1)\n            smallest = find_Smallest(n)\n            for i in range(len(indices)):\n                indices[i] += smallest\n            return indices\n\n    indices = find_Indices(n)\n    return min(indices)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Base case for n=1\n    if n == 1:\n        return 0\n    \n    # Base case for n=2\n    elif n == 2:\n        return 1\n    \n    # Calculate the smallest triangular number with n digits\n    smallest_triangular = (10 ** (n-1)) * 7\n    \n    # Find the index of the smallest triangular number with n digits\n    index = 1\n    while math.floor(smallest_triangular ** 0.5)!= smallest_triangular ** 0.5:\n        smallest_triangular += 1\n        index += 1\n    \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return {i:test_tup[i+1] for i in range(len(test_tup)-1)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary to store the key-value pairs\n    my_dict = {}\n    # use two indices to iterate through the tuple\n    i, j = 0, 1\n    # while j < len(test_tup):\n    while i < len(test_tup)-1:\n        my_dict[test_tup[i]] = test_tup[j]\n        i += 1\n        j += 1\n    # return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_obj = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element to the dictionary as a key with the next element as its value\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result = {}\n    for i in range(0, len(test_tup), 2):\n        result[test_tup[i]] = test_tup[i+1]\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dict_ = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Initialize an empty dictionary to store key-value pairs\n    d = {}\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the current element as a key and the next element as a value to the dictionary\n        d[test_tup[i]] = test_tup[i + 1]\n\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    dict_obj = {}\n    # Iterate through the tuple using a loop\n    for i in range(0, len(test_tup), 2):\n        # Add the current element as the key and the next element as the value in the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1: # check if tuple has odd length\n        return None\n    else:\n        key_value_dict = {}\n        for i in range(0, len(test_tup), 2): # iterate over the tuple with even indices\n            key_value_dict[test_tup[i]] = test_tup[i+1] # add key-value pair to dictionary\n        return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The length of the tuple should be even.\")\n    \n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    \n    return result_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    # If the string is empty or only contains spaces, return True\n    if len(s.strip()) == 0:\n        return True\n    # Convert the string to a list of characters\n    char_list = list(s)\n    # If there is only one character, return True\n    if len(char_list) == 1:\n        return True\n    # Compare the first two characters in the list\n    if char_list[0]!= char_list[1]:\n        return False\n    # Recursively call the function for the remaining characters\n    return all_Characters_Same(char_list[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    char_set = set(s)\n    if len(char_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    otherwise it returns False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    # Check if the string is empty\n    if not s:\n        return True\n    \n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Iterate over the string from the second character to the end\n    for char in s[1:]:\n        # Check if the current character is not the same as the first character\n        if char!= first_char:\n            return False\n    \n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Convert the string to lowercase\n    s = s.lower()\n    # Iterate over the string\n    for char in s:\n        # If the first character is found, return False\n        if char == s[0]:\n            return False\n    # If no characters are found, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    s = ''.join(e for e in s.lower() if e.isalnum()).strip()\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    # Check if all the characters are the same\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are same or not.\n    \"\"\"\n    # convert string to list\n    l = list(s)\n    # check if all elements in list are same\n    if len(set(l)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all characters in the string are the same, else False.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculating the semi-perimeter\n    semi_perimeter = (3*side) ** 0.5\n\n    # Calculating the area\n    area = (1/3) * math.pi * semi_perimeter ** 2\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2 * math.sin(math.pi / 3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # calculate the semi-perimeter of the base\n    s = (1/3) * side\n\n    # calculate the area of the base using Heron's formula\n    area = (1/3) * s * (s-side) * (s-2*side) ** 2\n\n    # calculate the volume of the base using Heron's formula\n    volume = (1/6) * area\n\n    # calculate the area of the tetrahedron using Heron's formula\n    area_tet = math.sqrt(3) * side * volume\n\n    return area_tet"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    This function calculates the area of a tetrahedron.\n\n    Parameters:\n    side (float): The length of the base of the tetrahedron\n\n    Returns:\n    float: The area of the tetrahedron\n    '''\n    return (1/3) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Formula for tetrahedron area\n    a = side\n    b = side\n    c = side\n    d = math.sqrt(3)/2 * side\n\n    # Calculate the area using the formula\n    area = (a + b + c + d) / 6\n\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return (1/6)*side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (6 * side ** 2) / (5 * (1 + math.cos(math.pi / 5)))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/6)*side*side*side\n    return math.sqrt(s)"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list = list[m:] + list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # Check if m is valid input\n    if m >= n:\n        return list\n    # Find the last element of the first sublist and the first element of the second sublist\n    first_sublist = list[-m:]\n    second_sublist = list[:m]\n    # Concatenate the two sublists and return the result\n    return first_sublist + second_sublist"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        left_half = list[:m]\n        right_half = list[m:]\n        return right_half + left_half"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0 or m == len(list):\n        return list\n    else:\n        n = len(list)\n        for i in range(m, n):\n            list[i-m] = list[i]\n        for i in range(n-m):\n            list[i] = 0\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(n-1):\n            list[j] = list[j+1]\n        list[n-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    \n    # reverse the list from start to mid\n    list[:n//2] = list[:n//2][::-1]\n    \n    # reverse the list from mid+1 to end\n    list[n//2:] = list[n//2:][::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[m:n] = list[:m]\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m %= n\n    list[0:m], list[m:] = list[m:], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, m):\n    n = len(lst)\n    m = m % n\n    lst[-n:] = lst[-n-m:] + lst[:-n-m]\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_found = False\n    for val in test_tup:\n        if val is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda x: all(int(digit) in str(x) for digit in str(x))\n    \n    # Define a list comprehension to find all numbers in the given range that are divisible by every digit in the number\n    divisible_numbers = [x for x in range(startnum, endnum+1) if is_divisible_by_digit(x)]\n    \n    # Return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # create a lambda function that checks if a number is divisible by a digit\n    divisible_by_digit = lambda x: all(int(digit) == 0 for digit in str(x))\n    \n    # create a list of numbers within the given range\n    numbers = range(startnum, endnum+1)\n    \n    # filter the list of numbers based on the divisibility condition\n    divisible_numbers = list(filter(divisible_by_digit, numbers))\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    def is_divisible_by_digits(num):\n        digits = set(str(num))\n        return all(num % digit == 0 for digit in digits)\n\n    numbers_in_range = list(range(startnum, endnum+1))\n    result = [num for num in numbers_in_range if is_divisible_by_digits(num)]\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digits_set = set()\n    for num in range(startnum, endnum+1):\n        for digit in str(num):\n            digits_set.add(int(digit))\n    divisible_numbers = [num for num in range(startnum, endnum+1) if all(digit in str(num) for digit in digits_set)]\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return lambda x: x % 10 == 0"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_all_digits(n):\n        return all(int(d) % 10 == 0 for d in str(n))\n\n    return filter(lambda n: is_divisible_by_all_digits(n), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return lambda num: all(digit in str(num) for digit in str(num))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    divisible_nums = []\n    for num in range(startnum, endnum+1):\n        is_divisible = True\n        for digit in str(num):\n            if int(digit) % int(digit)!= 0:\n                is_divisible = False\n                break\n        if is_divisible:\n            divisible_nums.append(num)\n    return divisible_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        digits = list(str(num))\n        for digit in digits:\n            if int(digit) % int(digit)!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n\nprint(divisible_by_digits(100, 200))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Convert angle from degrees to radians\n    angle = a * math.pi/180\n    \n    # Check if angle is greater than 360 degrees\n    if angle > math.pi:\n        return None\n    \n    # Calculate area of sector\n    area = r * r * angle\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r ** 2) * (a / 360)"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * (a/360)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # convert angle to radians\n    a = math.radians(a)\n    \n    # check if angle is within range\n    if a > math.pi/2:\n        return None\n    \n    # calculate area using radius and angle\n    area = r * math.sin(a)\n    \n    # return area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r**2)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * (r ** 2) * a / 360"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    #create a 2D array to store the length of LCS for every substring of X, Y and Z\n    #initialize all elements with 0\n    m, n = len(X), len(Y)\n    lcs = [[0] * (n+1) for i in range(m+1)]\n\n    #fill the 2D array using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                lcs[i][j] = lcs[i-1][j-1] + 1\n            else:\n                lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n\n    #backtrack to find the LCS string\n    i, j = m, n\n    lcs_string = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs_string = X[i-1] + lcs_string\n            i -= 1\n            j -= 1\n        elif lcs[i-1][j] > lcs[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs_string"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    p = [[0]*(m+1) for i in range(n+1)] \n    for i in range(1,n+1): \n        for j in range(1,m+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n    return p[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    dp = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                elif X[i-1] == Y[j-1]:\n                    dp[i][j] = dp[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    lcs = \"\"\n    i = n\n    j = m\n    k = p\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == Y[j-1]:\n            lcs = Y[j-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            j -= 1\n            k -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    \n    # Create a 3D table to store the lengths of LCS for all possible suffixes\n    L = [[[0] * (p+1) for j in range(m+1)] for i in range(n+1)]\n    \n    # Fill the 3D table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, p+1):\n            if X[i-1] == Z[j-1]:\n                L[i][j][0] = L[i-1][j-1][0] + 1\n            elif X[i-1] == Y[j-1]:\n                L[i][j][0] = max(L[i-1][j][0], L[i][j-1][0])\n            else:\n                L[i][j][0] = max(L[i-1][j][0], L[i][j-1][0])\n                \n    # Find the longest common subsequence for all suffixes\n    i = n\n    j = p\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Z[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n        else:\n            j -= 1\n            \n    # Reverse the order of the suffixes to get the final LCS\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    # The length of X, Y, and Z are given. \n    # Initialize a table of size (m+1) x (n+1) \n    m = len(X) \n    n = len(Y) \n\n    # Create a 2D table to store lengths of longest common subsequence \n    # for all substrings of X[0..m], Y[0..n] and Z[0..0] \n    L = [[0 for j in range(n+1)] for i in range(m+1)] \n\n    # Build table L in bottom up fashion \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1 \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n    # Return the length of the longest common subsequence \n    return L[m][n] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    for i in range(m + 1):\n        for j in range(n + 1):\n            for k in range(p + 1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i - 1][j - 1][k - 1])\n\n    lcs = []\n    i, j, k = m, n, p\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i - 1][j][k] == dp[i][j - 1][k]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # find the length of the string sequences\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # create a 2D table to store the lengths of LCS for subsequences of X, Y and Z\n    L = [[0] * (p+1) for i in range(n+1)]\n\n    # fill the table using dynamic programming\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k-1])\n\n    # find the length of the LCS and its ending indexes\n    lcs_length = L[n][m][p]\n    i = n\n    j = m\n    k = p\n    lcs = []\n\n    # backtrack to find the LCS\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i-1][j][k-1]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j-1][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # reverse the LCS and return it\n    lcs.reverse()\n    return ''.join(lcs), lcs_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # Step 1\n    dp = [[0] * (p + 1) for _ in range(m + 1)]\n\n    # Step 2\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Z[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Step 3\n    lcs = []\n    i, j = m, p\n    while i > 0 and j > 0:\n        if X[i - 1] == Z[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Find length of X, Y and Z \n    n, m, l = len(X), len(Y), len(Z) \n  \n    # Create a table to store lengths of LCS of prefixes of X[], Y[], and Z[] \n    L = [[0] * (m + 1) for i in range(n + 1)] \n  \n    # Fill L[][] in bottom up fashion. Note that L[i][j] contains length of LCS of \n    # prefix X[0..i-1], Y[0..j-1] and Z[0..l-1] \n  \n    # Base case \n    for i in range(n + 1): \n        L[i][0] = 0 \n    for j in range(m + 1): \n        L[0][j] = 0 \n  \n    # Fill L[][] using L[i-1][j] and L[i][j-1] values \n    for i in range(1, n + 1): \n        for j in range(1, m + 1): \n            if X[i - 1] == Y[j - 1] and X[i - 1] == Z[l - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1 \n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n  \n    # Print the LCS \n    i, j = n, m \n    lcs = \"\" \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[l - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n            l -= 1 \n        elif L[i - 1][j] > L[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Find length of each string \n    lenX = len(X) \n    lenY = len(Y) \n    lenZ = len(Z) \n  \n    # Create a 2D array to store lengths of longest common subsequence of three strings \n    L = [[0 for j in range(lenZ+1)] for i in range(lenX+1)] \n  \n    # Fill the 2D array in bottom up manner \n    for i in range(lenX+1): \n        for j in range(lenY+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0 \n  \n            elif X[i-1] == Y[j-1] and i > 0 and j > 0: \n                L[i][j] = L[i-1][j-1] + 1 \n  \n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Starting point of the 3D array to find the length of longest common subsequence \n    i = lenX \n    j = lenY \n    k = lenZ \n    \n    # Initialize a list to store the common subsequence \n    subseq = [] \n  \n    # Traverse the 2D array in reverse order \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and i > 0 and j > 0 and i == j == k: \n            subseq.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n  \n    # Reverse the common subsequence list \n    subseq.reverse() \n  \n    # Return the length of the longest common subsequence \n    return len(subseq) "
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters from the input string\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces between them\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b(\\w)(\\w*)\\b', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # split the string into words\n    words = string.split()\n    \n    # iterate over each word\n    for i in range(len(words)):\n        # if the word starts with a capital letter, add a space before it\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    # return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with a space\n    str1 = re.sub(r'[^a-zA-Z0-9]','', str1)\n    \n    # split the string into words\n    words = str1.split()\n    \n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define a regular expression pattern to match words starting with capital letters\n    pattern = re.compile(r'(?<=[A-Z])[A-Z](?=[a-z])')\n    # Use the re.sub() function to replace all matches of the pattern with a single space\n    return re.sub(pattern,'', str1).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Define regex pattern to find capitalized words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    # Split the string by word boundary\n    words = re.findall(pattern, str1)\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Join the words with spaces\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression to match words that start with capital letters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n\n    # Split the string into words\n    words = pattern.findall(str1)\n\n    # Create a list to store the modified words\n    modified_words = []\n\n    # Iterate over each word\n    for word in words:\n        # Split the word into individual characters\n        chars = list(word)\n\n        # If the first character is capital, append a space\n        if chars[0].isupper():\n            chars.insert(0,'')\n\n        # Join the characters back into a string\n        modified_word = ''.join(chars)\n\n        # Add the modified word to the list of modified words\n        modified_words.append(modified_word)\n\n    # Join the modified words back into a string\n    modified_string =''.join(modified_words)\n\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define a regular expression pattern to match capital words\n    pattern = re.compile(r'\\b\\w*[A-Z]\\w*\\b')\n\n    # Iterate over the words in the string\n    for word in re.findall(pattern, string):\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # Add a space between the current word and the next word\n            string = string.replace(word,'' + word)\n\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub(r'\\1\\ ', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings of numbers as input and sorts them numerically.\n    \"\"\"\n    # Convert all strings to float type to sort them numerically\n    nums = list(map(float, nums_str))\n    # Sort the list in ascending order\n    nums.sort()\n    # Convert sorted list back to string type\n    sorted_nums = list(map(str, nums))\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and sorts them numerically. It first converts all the strings to numeric values using the `int()` function, and then sorts the resulting list.\n    '''\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    return nums_int"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    # Convert all strings to integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the integers using the sorted() function\n    sorted_nums_int = sorted(nums_int)\n    # Convert the sorted integers back to strings and join them into a single string\n    sorted_nums_str = [str(num) for num in sorted_nums_int]\n    # Return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(s))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    # Split the list of strings by commas\n    nums = nums_str.split(\",\")\n\n    # Convert the strings to numeric values\n    nums = [float(num) for num in nums]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings\n    nums_str = \",\".join(map(str, nums))\n\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x.strip('\\'\"').replace(',', '')))\n    return nums_str"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Check if the given list is a list of tuples\n    if not all(isinstance(x, tuple) for x in test_list):\n        raise TypeError(\"Input must be a list of tuples\")\n    \n    # Check if the given tuple is a valid tuple\n    if not all(isinstance(x, tuple) for x in test_tup):\n        raise TypeError(\"Input must be a tuple\")\n    \n    # Add the given tuple to the given list\n    test_list.append(test_tup)\n    \n    # Return the modified list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Create a new list with the original list and the new tuple\n    new_list = test_list + test_tup\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for elem in test_list:\n        if isinstance(elem, tuple):\n            if elem == test_tup:\n                return True\n        elif isinstance(elem, list):\n            if elem in test_tup:\n                return True\n    return False"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in test_list:\n        test_list[test_list.index(i)] += test_tup\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    \n    left = 2*i + 1\n    right = 2*i + 2\n    \n    if left < len(arr) and arr[left] < arr[i]:\n        return False\n    elif right < len(arr) and arr[right] < arr[i]:\n        return False\n    \n    return True\n\n\ndef check_min_heap(arr):\n    for i in range(len(arr)//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # If the index is greater than or equal to the length of the array, then the array is not a min heap\n    if i >= len(arr):\n        return True\n\n    # Check if the left child of the current node is smaller than the current node\n    if arr[i] > arr[2 * i + 1]:\n        return False\n\n    # Recursively call the function for the left and right children\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case: an empty array is always a min heap\n    if not arr:\n        return True\n\n    # Check if the first element of the array is the minimum element\n    if arr[0] > arr[1]:\n        return False\n\n    # Recursively call the function for the subarray starting from the second element\n    return check_min_heap_helper(arr[1:], 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[parent(i)]:\n        return False\n    return check_min_heap_helper(arr, parent(i))\n\ndef parent(i):\n    return (i - 1) // 2"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n\n    Args:\n    arr (list): The given array to be checked.\n    i (int): The index of the root node.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    '''\n\n    if i >= len(arr) // 2:  # If the root is not greater than or equal to half the array size, then it is a min heap.\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[i] > arr[left]:  # If the left child is greater than the parent, the array is not a min heap.\n        return False\n\n    if right < len(arr) and arr[i] > arr[right]:  # If the right child is greater than the parent, the array is not a min heap.\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)  # Recursively check the left and right children."
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i >= len(arr):\n        return True\n\n    # Check if the parent node is greater than or equal to the child node\n    if arr[i] < arr[i*2+1]:\n        return False\n\n    # Recursively check the left and right child nodes\n    return check_min_heap_helper(arr, i*2+1) and check_min_heap_helper(arr, i*2+2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Check if the array contains any element\n    if not arr:\n        return True\n\n    # Check if the first element is greater than or equal to the last element\n    if arr[0] >= arr[-1]:\n        return False\n\n    # Recursively check the rest of the array\n    return check_min_heap_helper(arr, 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[i//2]:\n        return False\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    min_index = i\n\n    if left < len(arr) and arr[left] < arr[min_index]:\n        min_index = left\n\n    if right < len(arr) and arr[right] < arr[min_index]:\n        min_index = right\n\n    if min_index!= i:\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n        check_min_heap_helper(arr, min_index)\n\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr):\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n    return False\n\ndef check_min_heap(arr):\n    \"\"\"\n    Given an array, return True if the array represents a min heap, else return False.\n    \"\"\"\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[0]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0 or (i > 0 and arr[i] >= arr[i//2]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # Define the jacobsthal function\n        def jacobsthal(n):\n            if n == 1:\n                return 1\n            else:\n                return 2 * jacobsthal(n - 1)\n        \n        # Find the nth term in the jacobsthal sequence\n        j_n = 0\n        for i in range(1, n + 1):\n            j_n = j_n + jacobsthal(i)\n        \n        return j_n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**n * (1 + 2*n) // (1 + n)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        prev = 1\n        curr = 1\n        for i in range(3, n+1, 2):\n            prev, curr = curr, prev + curr\n        return curr\n    else:\n        prev = 0\n        curr = 1\n        for i in range(1, n):\n            prev, curr = curr, prev + curr\n        return curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n\n    Returns:\n        The nth jacobsthal number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        # Calculate the previous jacobsthal number\n        prev_num = jacobsthal_num(n-1)\n        # Calculate the next jacobsthal number\n        next_num = prev_num + jacobsthal_num(n-2)\n        return next_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal_nums = [0, 1]\n        for i in range(2, n):\n            jacobsthal_nums.append(jacobsthal_nums[i-1] + jacobsthal_nums[i-2])\n        return jacobsthal_nums[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    lucas = 2\n    jacob = 1\n    for i in range(n-1): \n        jacob = jacob * lucas\n        lucas = lucas + 1\n    return jacob"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    j = 1  # Initialize the first jacobsthal number\n    jl = 1  # Initialize the last jacobsthal number\n    i = 1  # Initialize the first jacobsthal Lucas number\n    il = 1  # Initialize the last jacobsthal Lucas number\n\n    # Calculate the nth jacobsthal number\n    while i <= n:\n        j += 1\n        i += 1\n\n    # Calculate the nth jacobsthal Lucas number\n    while il <= n:\n        jl += 1\n        il += 1\n\n    return jl - j + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The value of nth jacobsthal number is:\", jacobsthal_num(n))\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacobsthal = 1\n        lucas = 1\n        for i in range(2, n+1):\n            jacobsthal += lucas\n            lucas = jacobsthal - lucas\n        return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = 0\n        for i in range(1, n+1):\n            jacob += (4*i-3)//2\n        return jacob"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    test_list.sort(key=lambda x: x[1])\n    min_list = test_list[:K]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    test_list = sorted(test_list, key=lambda x: x[1])\n    min_sum = float('inf')\n    min_k_sum = 0\n    count = 0\n    for i in range(K):\n        if test_list[i][0] < min_sum:\n            min_sum = test_list[i][0]\n            min_k_sum = test_list[i][1]\n            count = 1\n        elif test_list[i][0] == min_sum:\n            min_k_sum += test_list[i][1]\n            count += 1\n        if count == K:\n            break\n    return min_k_sum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(K):\n        min_list.append(float('inf'))\n    for tup in test_list:\n        for i in range(K):\n            if tup[i] < min_list[i]:\n                min_list[i] = tup[i]\n    min_list = [tup for tup in min_list if tup!= float('inf')]\n    min_list.sort()\n    if len(min_list) < K:\n        return None\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=lambda x: x[0])\n    result = []\n    i = 0\n    while i < len(test_list) and len(result) < K:\n        if len(result) == 0 or test_list[i][0] > result[-1][0]:\n            result.append(test_list[i])\n            i += 1\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    # Implement me!\n    pass"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the tuples based on the value in first element\n    test_list.sort(key=lambda x: x[0])\n    # Initializing minimum k value and index of minimum k value\n    min_value = test_list[0][0]\n    min_index = 0\n    # Finding minimum k value and its index\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min_value:\n            min_value = test_list[i][0]\n            min_index = i\n        elif test_list[i][0] == min_value and i-min_index < K:\n            min_index = i\n    # Returning the minimum k value and its index\n    return min_value, min_index"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    # function to find minimum k records from tuple list\n    # taking input list and k as arguments\n    # and returning the minimum k records from the list\n    # if the length of the list is less than k, return the entire list\n    if len(test_list) < K:\n        return test_list\n    else:\n        # initialize minimum list and minimum value\n        min_list = []\n        min_val = float('inf')\n        # loop through the list and check if the value is smaller than minimum value\n        for i in range(len(test_list)):\n            if test_list[i][1] < min_val:\n                min_list = [test_list[i]]\n                min_val = test_list[i][1]\n            elif test_list[i][1] == min_val:\n                min_list.append(test_list[i])\n        # return the minimum k records from the list\n        return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize the minimum list\n    minimum_list = []\n    \n    # Iterate over the sorted list and keep adding the minimum k records\n    for i in range(K):\n        minimum_list.append(test_list[i])\n    \n    # Return the minimum list\n    return minimum_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list (list of tuples): A list of tuples containing keys and values.\n    K (int): An integer representing the number of records to be considered.\n    \n    Returns:\n    A list of tuples containing the k minimum records from the given tuple list.\n    '''\n\n    # sort the list of tuples based on the values in descending order\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # initialize an empty list to store the k minimum records\n    min_records = []\n\n    # add the first K records from the sorted list to the min_records list\n    for i in range(K):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from a given list of tuples.\n    \n    Args:\n        test_list: A list of tuples.\n        K: An integer representing the number of records to find the minimum.\n        \n    Returns:\n        A list of tuples representing the K records with the minimum value.\n    \"\"\"\n    # Sort the list in ascending order based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    \n    # Extract the first K records from the sorted list\n    min_k_list = sorted_list[:K]\n    \n    return min_k_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Initialize the second smallest number to be the largest possible integer\n    second_smallest = 2147483647\n\n    # Iterate through the list of numbers\n    for num in numbers:\n        # If the current number is smaller than the second smallest number, update the second smallest number\n        if num < second_smallest:\n            second_smallest = num\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    first_smallest = second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = number\n        elif number < second_smallest and number!= first_smallest:\n            second_smallest = number\n    \n    return second_smallest if second_smallest!= float('inf') else None"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Returns the second smallest number in a list.\n    \"\"\"\n    numbers.sort()  # sort the list in ascending order\n    return numbers[-2]  # return the second element of the sorted list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x: numbers.index(x))"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n    smallest = max(numbers)\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort() # sort the list in ascending order\n    return numbers[1] # return the second smallest element"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = max(numbers)\n        second_smallest = None\n        for number in numbers:\n            if number!= smallest:\n                if second_smallest is None:\n                    second_smallest = number\n                else:\n                    second_smallest = min(number, second_smallest)\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?:b)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b|\\w)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b*)')\n    result = pattern.search(text)\n    if result:\n        return result.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[b]+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found\""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b|){1,}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+b?'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    pairs = 0\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i] == test_list[j][::-1]:\n                pairs += 1\n                \n    return pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    for string in test_list:\n        reversed_string = string[::-1]\n        reverse_list.append(reversed_string)\n    count = 0\n    for i in range(len(reverse_list)):\n        for j in range(i+1, len(reverse_list)):\n            if reverse_list[i] == reverse_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    \"\"\"\n    reverse_dict = {}\n    pairs = 0\n\n    for word in test_list:\n        if word in reverse_dict:\n            pairs += reverse_dict[word]\n        else:\n            reverse_dict[word[::-1]] = 0\n\n    for word in test_list:\n        if word[::-1] in reverse_dict:\n            reverse_dict[word[::-1]] += 1\n            pairs += 1\n\n    return pairs // 2"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    # Define a function to check if two strings are reverse of each other\n    def is_reverse(str1, str2):\n        return str1 == str2[::-1]\n\n    # Initialize a variable to store the count of pairs\n    count = 0\n\n    # Loop through each string in the list\n    for i in range(len(test_list)):\n\n        # Get the current string\n        current = test_list[i]\n\n        # Loop through each string after the current string in the list\n        for j in range(i + 1, len(test_list)):\n\n            # Get the next string\n            next = test_list[j]\n\n            # Check if the current and next strings are reverse of each other\n            if is_reverse(current, next):\n\n                # If they are, increment the count of pairs\n                count += 1\n\n    # Return the count of pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    # Create an empty dictionary to store the count of reverse pairs\n    count = {}\n\n    # Iterate through the list and count the number of pairs of reverse strings\n    for string in test_list:\n        # Convert the string to a list and sort it in reverse order\n        reversed_list = sorted(list(string), reverse=True)\n        # Create a string from the reversed list\n        reversed_string = ''.join(reversed_list)\n        # Check if the reversed string is already in the dictionary\n        if reversed_string in count:\n            # If it is, increment its count by 1\n            count[reversed_string] += 1\n        else:\n            # If it isn't, add it to the dictionary with a count of 1\n            count[reversed_string] = 1\n\n    # Return the dictionary of counts\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    # create an empty set to store the pairs of reverse strings\n    reverse_pairs = set()\n\n    # loop through each string in the list\n    for i in range(len(test_list)):\n        # loop through the remaining strings in the list and compare them to the current string\n        for j in range(i+1, len(test_list)):\n            # check if the reversed version of the current string is equal to the next string in the list\n            if test_list[i][::-1] == test_list[j]:\n                # if they are, add the pair to the set of reverse pairs\n                reverse_pairs.add((test_list[i], test_list[j]))\n\n    # return the size of the set of reverse pairs\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for item in list1:\n        tuple_item = tuple(item)\n        if tuple_item in sublist_count:\n            sublist_count[tuple_item] += 1\n        else:\n            sublist_count[tuple_item] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if tuple(sublist) in sublists:\n            sublists[tuple(sublist)] += 1\n        else:\n            sublists[tuple(sublist)] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        # Convert the sublist to a tuple and count its occurrences in the original list\n        tuple_sublist = tuple(sublist)\n        count = 0\n        for item in list1:\n            if item == tuple_sublist:\n                count += 1\n        sublist_count[tuple_sublist] = count\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        sublists[tuple(list1[i])] = list1[i].count(tuple(list1[i]))\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    unique_dict = {}\n\n    # loop through each list in the original list\n    for i in range(len(list1)):\n        # convert the list to a tuple and check if it is already in the dictionary\n        if tuple(list1[i]) in unique_dict:\n            # if it is, increment its value\n            unique_dict[tuple(list1[i])] += 1\n        else:\n            # if it is not, add it to the dictionary with a count of 1\n            unique_dict[tuple(list1[i])] = 1\n\n    # return the dictionary\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if tuple(list1[i:j]) not in count:\n                count[tuple(list1[i:j])] = 1\n            else:\n                count[tuple(list1[i:j])] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list.\n    The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the count of unique sublists\n    count = {}\n    # Loop through each list in the input list\n    for sublist in lst:\n        # Convert each sublist to a tuple and check if it's already in the dictionary\n        if tuple(sublist) in count:\n            # If it's already in the dictionary, increment its count by 1\n            count[tuple(sublist)] += 1\n        else:\n            # If it's not in the dictionary, add it to the dictionary with a count of 1\n            count[tuple(sublist)] = 1\n    # Return the final dictionary\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the count of each unique sublist\n    sublist_count = {}\n\n    # loop through each element in the list\n    for element in list1:\n        # convert the element to a tuple and check if it's already in the dictionary\n        if tuple(element) in sublist_count:\n            sublist_count[tuple(element)] += 1\n        # if the element is not in the dictionary, add it with a count of 1\n        else:\n            sublist_count[tuple(element)] = 1\n\n    # return the dictionary of sublist counts\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create an empty dictionary to store the sublist counts\n    sublist_counts = {}\n\n    # Iterate through each element of the list\n    for element in list1:\n        # Convert the element to a tuple\n        element_tuple = tuple(element)\n        # If the tuple is not already in the dictionary, add it with a value of 1\n        if element_tuple not in sublist_counts:\n            sublist_counts[element_tuple] = 1\n        # If the tuple is already in the dictionary, increment its value by 1\n        else:\n            sublist_counts[element_tuple] += 1\n\n    # Return the dictionary containing the sublist counts\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary to store the sublists and their occurrences\n    sublists_dict = {}\n    # Iterate over the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the dictionary if it doesn't already exist\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in sublists_dict:\n            sublists_dict[sublist_tuple] = 1\n        else:\n            sublists_dict[sublist_tuple] += 1\n    # Return the dictionary\n    return sublists_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        decimal_num = float(num)\n        decimal_num_str = str(decimal_num)\n        if len(decimal_num_str.split('.')) > 1 and len(decimal_num_str.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = []\n    for i in num:\n        if i.isdigit():\n            num_list.append(i)\n        else:\n            return False\n\n    if len(num_list) == 0:\n        return False\n\n    if len(num_list) > 2:\n        return False\n\n    for i in num_list:\n        if int(i) >= 10 or int(i) < 0:\n            return False\n\n    if len(num_list) > 1:\n        if num_list[1] == '.' and len(num_list) > 2:\n            return False\n\n    for i in num_list:\n        if int(i) >= 10 or int(i) < 0:\n            return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        precision = len(num.split('.')[1])\n        if precision == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num and num.split('.')[1].isdigit() and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n\n    # Check if the input is a decimal number with a precision of 2\n    if '.' not in num or num.count('.')!= 1:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts[0]) > 3 or len(num_parts[1]) > 2:\n        return False\n    if len(num_parts[1]) == 2 and num_parts[1].count('.')!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num:\n            num = num.split('.')\n            if len(num)!= 2:\n                return False\n            num = float(num[0] + '.' + num[1][0:2])\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        # Check if the number contains a decimal point\n        decimal_point = num.find('.')\n        int_part = num[:decimal_point]\n        dec_part = num[decimal_point+1:]\n        if len(int_part) > 9 or len(dec_part) > 2:\n            return False\n        # Check if the integer part has more than 9 digits or the decimal part has more than 2 digits\n        int_part = int(int_part)\n        dec_part = int(dec_part)\n        if int(str(int_part)[::-1]) > 9 or dec_part > 99:\n            return False\n        # Check if the integer part is in the range of -2^31 to 2^31-1\n        if -2**31 > int_part > 2**31-1:\n            return False\n        # Check if the decimal part is in the range of -2^15 to 2^15-1\n        if -2**15 > dec_part > 2**15-1:\n            return False\n        # Check if the decimal part is divisible by 10\n        if dec_part % 10!= 0:\n            return False\n        # Check if the integer part is divisible by the decimal part\n        if int_part % dec_part!= 0:\n            return False\n    else:\n        # Check if the number only contains digits\n        for char in num:\n            if not char.isdigit():\n                return False\n        # Check if the number is in the range of -2^31 to 2^31-1\n        if -2**31 > int(num) > 2**31-1:\n            return False\n        # Check if the number is divisible by 10\n        if int(num) % 10!= 0:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer() and num >= 0 and num % 1 == 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    This function checks whether a list of numbers contains only one distinct element or not.\n    It returns True if it contains only one distinct element and False otherwise.\n    '''\n    \n    # create a dictionary to store the unique elements\n    unique_dict = {}\n    \n    # iterate over the list of numbers and update the dictionary with the unique elements\n    for num in arr:\n        if num in unique_dict:\n            unique_dict[num] += 1\n        else:\n            unique_dict[num] = 1\n    \n    # check if the length of the dictionary is one\n    if len(unique_dict) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    unique = True\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            unique = False\n            break\n        \n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for num in arr:\n        if len(arr.count(num)) == 1:\n            unique_count += 1\n    \n    if unique_count == len(arr):\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check if a list contains only one distinct element.\n\n    Args:\n    arr: a list of numbers\n\n    Returns:\n    True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    distinct_elements = set(arr)  # create a set of the distinct elements\n    return len(distinct_elements) == 1  # check if the set has only one element"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        if arr.count(arr[i])!= 1:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Check if the frequency of each element is 1\n    for value in freq.values():\n        if value!= 1:\n            return False\n\n    # If all elements have a frequency of 1, then the array contains only one distinct element\n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Dictionary containing the number of days in each month\n    days_in_month = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number is present in the dictionary\n    if monthnum3 in days_in_month:\n        # If yes, check if it contains 30 days or not\n        if days_in_month[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # If no, return False\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0 and monthnum3!= 2:\n        if monthnum3 == 2 and is_leapyear(2020):\n            return True\n        elif monthnum3 == 2:\n            return False\n        else:\n            return True\n    else:\n        return False\n\ndef is_leapyear(year):\n    '''\n    A function to check whether a year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0 and (monthnum3 % 100!= 0 or monthnum3 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return \"Invalid month number.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the month number is between 1 and 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # Check if the month has 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if monthnum3 in months:\n        if months[monthnum3] == 30:\n            print(f\"{monthnum3} has 30 days.\")\n        else:\n            print(f\"{monthnum3} doesn't have 30 days.\")\n    else:\n        print(f\"{monthnum3} is not a valid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2: # February has 28 or 29 days\n        if calendar.isleap(year):\n            if monthnum3 == 2 and day <= 29:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 2 and day <= 28:\n                return True\n            else:\n                return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11: # March, May, July, or November has 30 days\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n\n    # Step 1: Sort the array in non-decreasing order \n    arr.sort() \n\n    # Step 2: Initialize min_diff to the difference between the last two elements \n    min_diff = abs(arr[-1] - arr[-2]) \n\n    # Step 3: Initialize two pointers, left and right, at the beginning and end of the array respectively \n    left = 0 \n    right = n-1 \n\n    # Step 4: Iterate through the array using two pointers and keep updating min_diff as we go \n    while left < right: \n\n        # Step 5: Calculate the difference between the current element and its neighbors \n        diff = arr[left] - arr[right] \n\n        # Step 6: Update min_diff if the current difference is smaller than min_diff \n        if diff < min_diff: \n            min_diff = diff \n\n        # Step 7: If the difference is positive, we can move left pointer to the right \n        if diff >= 0: \n            left += 1 \n        # Otherwise, we can move right pointer to the left \n        else: \n            right -= 1 \n\n    # Step 8: Return the minimum difference found \n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Loop through all pairs of elements in the sorted array\n    for i in range(n-1):\n        for j in range(i+1, n):\n            # Calculate the difference between the elements\n            diff = abs(arr[i]-arr[j])\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array\n    arr.sort()\n\n    # Initialize two variables for storing the minimum difference and the last element\n    min_diff = float('inf')\n    prev = arr[0]\n\n    # Traverse the array\n    for i in range(1, n):\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - prev\n\n        # Update the minimum difference if the difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update the previous element\n        prev = arr[i]\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 2:\n        return 0\n\n    arr.sort() #sort the array\n    diff = arr[1] - arr[0] #initialize the minimum difference\n\n    for i in range(2,n):\n        temp = arr[i] - diff #calculate the difference between current element and the minimum difference\n        if temp < diff: #if the calculated difference is smaller than the minimum difference, update the minimum difference\n            diff = temp\n\n    return diff #return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Initialize two variables to store minimum difference and current difference\n    min_diff = float('inf')\n    curr_diff = arr[1] - arr[0]\n\n    # Traverse through the array from second element to the last\n    for i in range(1, n-1):\n        # Calculate the current difference\n        curr_diff = arr[i+1] - arr[i]\n\n        # If the current difference is smaller than the minimum difference, update the minimum difference\n        if curr_diff < min_diff:\n            min_diff = curr_diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to keep track of minimum and maximum values\n    min_val = arr[0]\n    max_val = arr[-1]\n\n    # Initialize variables to keep track of minimum and maximum differences\n    min_diff = max_val - min_val\n    max_diff = arr[-1] - arr[0]\n\n    # Iterate through the array and update the minimum and maximum values and differences\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n            min_diff = arr[-1] - arr[0]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n            max_diff = arr[-1] - arr[0]\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    '''\n    if n < 2:\n        return \"Array should have at least 2 elements\"\n    \n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize min_diff variable with the first difference between the first two elements\n    min_diff = arr[1] - arr[0]\n\n    # Initialize two pointers at the first and second indices of the array\n    i = 1\n    j = 1\n\n    # Iterate through the array until we reach the end\n    while i < n:\n        # Calculate the difference between the current element and the previous element\n        diff = arr[i] - arr[j-1]\n\n        # If the difference is smaller than the current minimum difference, update the minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n        # Move the pointers one index to the right\n        i += 1\n        j += 1\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    diff = arr[1] - arr[0]\n    min_diff = diff\n\n    for i in range(1, n-1):\n        temp_diff = abs(arr[i] - arr[i+1])\n        if temp_diff < min_diff:\n            min_diff = temp_diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function will find the nth polite number.\n    A polite number is a number that is less than or equal to its square root.\n    '''\n    # Calculate the square root of n\n    sqrt_n = math.sqrt(n)\n    # If the square root is an integer, then n is not a polite number\n    if sqrt_n.is_integer():\n        return False\n    # Check if the square root is less than or equal to the square of the nth prime\n    i = 2\n    while True:\n        if i**2 > sqrt_n:\n            break\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    This function takes an integer n and returns the nth polite number.\n    '''\n\n    # Define the set of polite numbers\n    polite_numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20}\n\n    # Find the nth polite number\n    if n in polite_numbers:\n        return n\n    else:\n        for i in range(2, n+1):\n            if i % 10!= 5 and math.gcd(i, 5) == 1:\n                polite_numbers.add(i)\n                if len(polite_numbers) == n:\n                    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer as input and returns True if it is a polite number, False otherwise.\n\n    A polite number is a number that is not divisible by 3 or 5, and whose sum of digits is a multiple of 7.\n\n    Example:\n\n    >>> is_polite(100)\n    False\n\n    >>> is_polite(135)\n    True\n\n    >>> is_polite(321)\n    False\n    '''\n\n    if n % 3 == 0 or n % 5 == 0:\n        return False\n\n    digits_sum = sum(int(digit) for digit in str(n))\n    return digits_sum % 7 == 0 and n % 7!= 0"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # polite numbers start with 'A' or 'a'\n    if n == 1: \n        return 'A'\n    elif n == 2: \n        return 'a'\n    else:\n        # if n is odd, then n/2 is the next polite number\n        if n % 2 == 1: \n            return chr(ord('A') + math.ceil((n-1)/2))\n        # if n is even, then n/2 is the next odd polite number\n        else: \n            odd = int((n-1)/2)\n            even = 2 * odd + 1\n            return chr(ord('A') + odd) + chr(ord('a') + even)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n    else: \n        count = 0 \n        for i in range(3, n+1, 2): \n            count += 1 \n        return count\n\nif __name__ == \"__main__\": \n    n = 10\n    print(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Define the range of polite numbers\n    low = 1\n    high = 100\n    polite_number = []\n\n    # Loop through the range of polite numbers\n    while len(polite_number) < n:\n        # Calculate the next polite number\n        next_polite = low + 1 + (high - low) * (math.log(low + 1) - math.log(high))\n        polite_number.append(next_polite)\n        # Check if the next polite number is greater than the current high value\n        if next_polite > high:\n            # Set the high value to the next polite number\n            high = next_polite\n            # Check if the next polite number is greater than 100\n            if next_polite > 100:\n                # Set the high value to 100\n                high = 100\n\n    # Return the nth polite number\n    return polite_number[n-1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    if n == 1:\n        return \"Hello, polite person!\"\n    elif n == 2:\n        return \"Hi, polite person!\"\n    else:\n        polite_number = \"\"\n        for i in range(1, n):\n            if i % 2 == 0:\n                polite_number += str(i*i) + \", \"\n            else:\n                polite_number += str(i) + \", \"\n        polite_number = polite_number[:-2] + \".\"\n        return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        i = 2\n        while True:\n            if is_prime(i):\n                yield i\n            i += 1\n\n    for i, num in enumerate(nth_polite_number(n)):\n        if i == n-1:\n            return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number.\n    '''\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n\n    polite_numbers = []\n    sieve = [True] * (n+1)\n    sieve[0] = sieve[1] = False\n\n    p = 2\n    while p**2 <= n:\n        if sieve[p]:\n            for i in range(p**2, n+1, p):\n                sieve[i] = False\n        p += 1\n\n    for i in range(2, n+1):\n        if sieve[i]:\n            polite_numbers.append(i)\n\n    if n < len(polite_numbers):\n        return polite_numbers[n]\n    else:\n        return \"There is no nth polite number.\""
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 1\n    i = 2\n\n    while i <= n:\n        a, b = b, a + b\n        i += 1\n\n    return b"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i],l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and the sum as input and returns the number of pairs\n    whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the count of pairs whose sum is equal to the target sum.\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a new list containing the elements present in li1 but not present in li2.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # create an empty list to store the differences\n    diff = []\n    # loop through each element in the first list\n    for item in li1:\n        # if the element is not present in the second list, append it to the diff list\n        if item not in li2:\n            diff.append(item)\n    # return the diff list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a Python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists and returns a new list that contains all the elements that are in one list but not in the other.\n    '''\n    # initialize an empty list to store the difference\n    diff_list = []\n    # loop through each element in list 1\n    for item in li1:\n        # if the element is not in list 2, add it to the diff_list\n        if item not in li2:\n            diff_list.append(item)\n    # return the diff_list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # Create an empty list to store the difference\n    diff_list = []\n    # Loop through each element in the first list\n    for elem in li1:\n        # If the element is not in the second list, add it to the difference list\n        if elem not in li2:\n            diff_list.append(elem)\n    # Return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as arguments and returns the difference between them.\n    '''\n    # Creating a set of unique values in the first list\n    set1 = set(li1)\n    # Creating a set of unique values in the second list\n    set2 = set(li2)\n    # Creating a set of values in the first list but not in the second list\n    diff1 = set1 - set2\n    # Creating a set of values in the second list but not in the first list\n    diff2 = set2 - set1\n    # Combining the two sets to get the final difference between the two lists\n    diff = diff1.union(diff2)\n    # Returning the difference\n    return list(diff)"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum\n\nprint(odd_num_sum(10)) # Output: 2560"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_powers = 0\n    num = 1\n    count = 0\n    \n    # iterate over odd numbers from 1 to n\n    while count < n:\n        # add fourth power of odd number to sum of powers\n        sum_of_powers += num ** 4\n        \n        # increment count\n        count += 1\n        \n        # increment odd number\n        num += 2\n        \n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_fourth = 0\n    i = 1\n    while i <= n:\n        sum_fourth += i ** 4\n        i += 1\n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initializing the sum of fourth power of odd natural numbers\n    odd_num_pow_sum = 0\n\n    # iterating for the first n odd natural numbers\n    for i in range(1, n+1):\n        # calculating the fourth power of the i-th odd natural number\n        odd_num_pow = i ** 4\n\n        # adding the fourth power to the sum of fourth power of odd natural numbers\n        odd_num_pow_sum += odd_num_pow\n\n    # returning the sum of fourth power of odd natural numbers\n    return odd_num_pow_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= n:\n        if count % 2!= 0:\n            sum += count ** 4\n        count += 1\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i.isdigit() or i == '.':\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            if i == ')':\n                if stack[-1] == '(':\n                    stack.pop()\n                else:\n                    return False\n            elif i == '}':\n                if stack[-1] == '{':\n                    stack.pop()\n                else:\n                    return False\n            elif i == ']':\n                if stack[-1] == '[':\n                    stack.pop()\n                else:\n                    return False\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for bracket in exp:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack:\n                return False\n            if close_brackets[bracket]!= stack.pop():\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_par = {'(': ')', '[': ']', '{': '}'}\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char!= open_par[top]:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return \"Not balanced\"\n            top = stack.pop()\n            if top!= '(':\n                return \"Not balanced\"\n    return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if close_brackets[char] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n\n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            del words[i]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through each word and check its length\n    for i, word in enumerate(words):\n        # Check if the length of the current word is equal to K\n        if len(word) == K:\n            # If it is, remove the word from the list of words\n            del words[i]\n    \n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    # Loop through the words and remove the words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    # Join the remaining words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new string\n    new_str = ''\n    # Loop through each word in the string\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Append the word to the new string\n            new_str += word +''\n    # Remove the last space from the new string\n    new_str = new_str[:-1]\n    # Return the new string\n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the given string into a list of words\n    words = test_str.split()\n\n    # loop through each word in the list\n    for i in range(len(words)):\n        # check if the length of the current word is equal to K\n        if len(words[i]) == K:\n            # remove the word from the list\n            words.pop(i)\n            i -= 1\n\n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Create an empty list to store the non-matching words\n    non_matching_words = []\n    \n    # Iterate through the words\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # Append the word to the non-matching words list\n            non_matching_words.append(word)\n    \n    # Join the non-matching words back into a string\n    test_str = \" \".join(non_matching_words)\n    \n    # Return the modified string\n    return test_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Remove words with length K or less\n    filtered_words = [word for word in words if len(word) > K]\n    \n    # Join the filtered words into a string\n    filtered_str = \" \".join(filtered_words)\n    \n    return filtered_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n\n    # initialize a list to store the non-k length words\n    non_k_words = []\n\n    # loop through each word in the list\n    for word in words:\n        # if the length of the word is not equal to K, add it to the non_k_words list\n        if len(word)!= K:\n            non_k_words.append(word)\n\n    # join the non_k_words list into a string and return it\n    return''.join(non_k_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        for i,match in enumerate(result):\n            print(f\"Match {i+1}: '{match[0]}', Position: {match.start()}\")\n        return True\n    else:\n        print(\"No match found.\")\n        return False"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    This function finds the occurrence and position of the substrings within a string.\n    \"\"\"\n    matches = re.findall(pattern, text)\n\n    if not matches:\n        return None\n\n    for match in matches:\n        index = text.find(match)\n        print(f\"The substring '{match}' occurs at index {index}.\")\n\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Check if any matches are found\n    if not matches:\n        return None\n    \n    # Iterate over the matches and extract the positions and lengths of the substrings\n    positions = []\n    lengths = []\n    for match in matches:\n        positions.append(match.start())\n        lengths.append(match.end() - match.start())\n        \n    # Find the maximum length of the substrings\n    max_length = max(lengths)\n    \n    # Return a list of tuples, where each tuple contains the position and length of a substring of the maximum length\n    return [(pos, max_length) for pos in positions]"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # using re.search() method to search for pattern in the text\n    match = re.search(pattern, text)\n\n    # if pattern is found\n    if match:\n        # extracting the position and occurrence of the pattern\n        pos = match.start()\n        occ = match.group()\n        # returning a tuple containing the position and occurrence\n        return (pos, occ)\n    else:\n        # otherwise returning None\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a match!\")\n        return (match.group(), match.start(), match.end())\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None\n    \n    for match in matches:\n        text_with_match = re.sub(pattern, '###', text)\n        if '###' in text_with_match:\n            index = text_with_match.index('###')\n            start_index = index - len(match)\n            end_index = index + len(match)\n            return match, start_index, end_index\n    \n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        matches = re.findall(pattern, text)\n        if matches:\n            for match in matches:\n                pos = text.find(match)\n                return match, pos\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Initialize a boolean variable to keep track of whether all odd indices contain odd numbers\n    all_odd = True\n    \n    # Loop through each odd index in the list\n    for i in range(1, len(nums), 2):\n        # Check if the current odd index contains an odd number\n        if nums[i] % 2 == 0:\n            all_odd = False\n            break\n    \n    # Return the boolean variable indicating whether all odd indices contain odd numbers\n    return all_odd"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if all(x % 2 == 1 for x in nums[i:]):\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if all(x % 2!= 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2 == 1:\n            count += 1\n            if count == 1:\n                return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if the index is odd\n            if len([x for x in nums[i] if x % 2!= 0]) % 2!= 0:  # check if the length of the odd numbers is even\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            odd_count += 1\n    if odd_count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 1 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i%2==0:\n            if nums[i]%2==0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i-1] in vowels:\n                if test_str[i] in vowels:\n                    count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n\n    for i in range(len(test_str)):\n        if i > 0:\n            prev_char = test_str[i-1]\n            curr_char = test_str[i]\n            next_char = test_str[i+1]\n\n            if curr_char in vowels and (prev_char in vowels or next_char in vowels):\n                vowel_count += 1\n\n    return vowel_count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # Define a set of vowels to use as neighbors\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n\n    # Initialize a counter for the number of vowels\n    num_vowels = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # Check if the character is a vowel\n        if test_str[i] in vowels:\n\n            # Check if the previous character is also a vowel\n            if i > 0 and test_str[i-1] in vowels:\n                num_vowels += 1\n\n    # Return the number of vowels\n    return num_vowels"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the number of occurrences of each element in the list\n    count = {}\n    # initialize a variable to store the sum of non-repeated elements\n    total = 0\n    \n    # loop through the list and update the count and total variables\n    for num in arr:\n        if num not in count:\n            count[num] = 1\n            total += num\n        else:\n            count[num] += 1\n    \n    # return the total sum of non-repeated elements\n    return total"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as an argument and returns the sum of all non-repeated elements in the list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Calculate the sum of the unique elements\n    sum_of_unique = sum(unique_set)\n\n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    \n    # Convert set to list to find sum of elements\n    sum_list = list(unique_elements)\n    \n    # Calculate the sum of the list\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then convert it back to a list\n    unique_list = list(set(arr))\n    # Initialize a variable to keep track of the sum of non-repeated elements\n    non_repeated_sum = 0\n    # Iterate through the unique list and add the elements to the sum\n    for num in unique_list:\n        non_repeated_sum += num\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n\n    # convert the set to a list and sort it\n    unique_list = sorted(list(unique_set))\n\n    # initialize a variable to store the sum of non-repeated elements\n    sum_non_repeated = 0\n\n    # loop through the unique list and add the element to the sum if it is not already present in the set\n    for element in unique_list:\n        if element not in unique_set:\n            sum_non_repeated += element\n\n    # return the sum of non-repeated elements\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Create a list to store the sum of the unique elements\n    unique_sum = []\n\n    # Iterate through the set and add its sum to the list\n    for elem in unique_set:\n        unique_sum.append(sum(arr))\n\n    # Return the sum of the unique elements\n    return sum(unique_sum)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # convert the set to a list and sum its elements\n    sum_list = list(unique_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to keep track of non-repeated elements\n    unique_set = set()\n\n    # Iterate through the list and add unique elements to the set\n    for element in arr:\n        if element not in unique_set:\n            unique_set.add(element)\n\n    # Calculate the sum of the unique elements\n    sum_of_unique = sum(unique_set)\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            result.append(list(group))\n        else:\n            result.append([key])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(enumerate(list1)):\n        group = list(group)\n        if len(group) > 1:\n            result.append([list1[group[0][0]]] + [list1[i] for i in range(group[0][0]+1, group[-1][0]+1)])\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    return [list(group) for key, group in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list as input and returns a new list where consecutive duplicate elements are grouped together.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Split the list into sublists of consecutive duplicates\n    sublists = [list(group) for key, group in groupby(lst)]\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    # group consecutive duplicates by their keys\n    grouped = groupby(enumerate(lst), lambda x: x[0] == x[1])\n\n    # unpack groups to get sublists\n    return [list(group) for key, group in grouped]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Create a generator of consecutive duplicates\n    consecutive_duplicates = (list(g) for k, g in groupby(lst) if len(list(g)) > 1)\n    # Convert the generator to a list of sublists\n    sublists = [list(g) for g in consecutive_duplicates]\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Loop through the list\n    for k, g in groupby(list1):\n        # Check if the group of consecutive duplicates is greater than 1\n        if len(list(g)) > 1:\n            # If it is, pack it into a sublist and append it to the final list\n            new_sublist = list(g)\n            list1.remove(new_sublist[0])\n            list1.remove(new_sublist[-1])\n            sublist = [new_sublist[0]] + new_sublist[1:-1] + [new_sublist[-1]]\n            list1.extend(sublist)\n\n    return list1"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j in count:\n                    count[j] += 1\n                else:\n                    count[j] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for i, item in enumerate(list1):\n        if isinstance(item, list):\n            for subitem in item:\n                if isinstance(subitem, tuple):\n                    if subitem in unique_lists:\n                        unique_lists[subitem] += 1\n                    else:\n                        unique_lists[subitem] = 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate over each element of the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Turn the list into a tuple and check if it's already in the dictionary\n            if tuple(element) in counts:\n                # Increment the count of this tuple\n                counts[tuple(element)] += 1\n            else:\n                # Add the tuple to the dictionary and set its count to 1\n                counts[tuple(element)] = 1\n    \n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of unique lists\n    count_dict = {}\n\n    # iterate over the lists in the input list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        tup = tuple(sublist)\n\n        # check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # if it is, increment its count\n            count_dict[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # return the dictionary of unique lists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the counts of each unique list\n    count_dict = {}\n\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(elem, list):\n            tuple_elem = tuple(elem)\n            if tuple_elem in count_dict:\n                count_dict[tuple_elem] += 1\n            else:\n                count_dict[tuple_elem] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    set1 = set(list1)\n    # Create a dictionary to store the count of each list\n    count_dict = {}\n    # Iterate through the set and count the occurrences of each list\n    for lst in set1:\n        count = set1.count(lst)\n        count_dict[lst] = count\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of unique sublists\n    counts = {}\n    # Iterate over each element in the list\n    for item in list1:\n        # Convert the item to a tuple to make it unique\n        sublist = tuple(item)\n        # Check if the sublist is already in the dictionary\n        if sublist not in counts:\n            # If it is not, add it to the dictionary with a value of 1\n            counts[sublist] = 1\n        else:\n            # If it is, increment the count of its occurrences\n            counts[sublist] += 1\n    # Return the dictionary of unique sublists and their counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of unique sublists\n    unique_dict = {}\n    # loop through each list in the input list\n    for sublist in list1:\n        # turn the list to a tuple so that it can be counted as a unique sublist\n        sublist_tuple = tuple(sublist)\n        # check if the tuple is already in the dictionary\n        if sublist_tuple in unique_dict:\n            # if it is, increment the count of that sublist by 1\n            unique_dict[sublist_tuple] += 1\n        else:\n            # if it's not, add the tuple to the dictionary with a count of 1\n            unique_dict[sublist_tuple] = 1\n    # return the dictionary of unique sublists\n    return unique_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create an empty dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Iterate over each list in the input list\n    for lst in list1:\n        \n        # Convert the list to a tuple and check if it's already in the dictionary\n        tup = tuple(sorted(lst))\n        if tup not in counts:\n            \n            # If it's not in the dictionary, add it with a count of 1\n            counts[tup] = 1\n            \n        # If it's already in the dictionary, increment its count by 1\n        else:\n            counts[tup] += 1\n    \n    # Return the dictionary of counts of unique sublists\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize a dictionary to store the count of unique sublists\n    count_dict = {}\n\n    # Loop through every element in the input list\n    for element in list1:\n        # If the element is a list, turn it into a tuple and add it to the count dictionary\n        if isinstance(element, list):\n            count_dict[tuple(element)] = count_dict.get(tuple(element), 0) + 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            combination = tuple(test_list[i:j])\n            combinations_list.append(combination)\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns a list of all combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    n = len(test_list)\n    all_combinations = []\n    for i in range(n):\n        for j in range(i+1, n):\n            all_combinations.append(tuple(sorted((test_list[i][0]+test_list[j][0], test_list[i][1]+test_list[j][1]))))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    n = len(test_list)\n\n    for i in range(total_sum - n + 1):\n        print(\"Sum:\", i)\n        for j in combinations(test_list, n):\n            print(j)\n            print()"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for comb in combinations(test_list, r=2):\n        if total - sum(comb) in test_list:\n            print(comb, end=\" \")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    # Create a set of unique tuples in the list\n    unique_tuples = set(test_list)\n    \n    # Iterate through each combination of unique tuples\n    for comb in combinations(unique_tuples, len(unique_tuples)):\n        # Calculate the sum of the tuples in the combination\n        comb_sum = sum(comb)\n        # Check if the combination is in the list of test_list\n        if comb_sum in test_list:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns all combinations of sums that can be formed from the tuples.\n\n    Example:\n    Input: [(1, 2), (3, 4), (5, 6)]\n    Output: [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]\n    '''\n    # Sort the list of tuples\n    test_list.sort()\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list) - 1):\n        # Generate all possible pairs of numbers between test_list[i][0] and test_list[i][1]\n        for j in range(i + 1, len(test_list)):\n            # Calculate the sum of the numbers in the pair\n            pair_sum = test_list[i][0] + test_list[j][0] + test_list[i][1] + test_list[j][1]\n\n            # Check if the sum is in the list of tuples and add it to the combinations list\n            if pair_sum in test_list:\n                combinations_list.append((test_list[i][0], test_list[i][1], test_list[j][0], test_list[j][1]))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            total = test_list[i][0] + test_list[j][0]\n            if total in test_list[i] and total in test_list[j]:\n                comb = combinations(test_list[i], 2)\n                comb = list(comb)\n                comb = comb[0] + comb[1]\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    n = len(test_list)\n    res = []\n\n    for i in range(1, n+1):\n        for j in combinations(range(n), i):\n            temp_sum = sum([test_list[k] for k in j])\n            if temp_sum == total_sum:\n                res.append(tuple(sorted(j)))\n    return res"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the maximum value in the list of tuples\n    max_val = max([max(t) for t in test_list])\n\n    # Create a list of tuples with the maximum value as the first element\n    test_list.append((max_val,))\n\n    # Use itertools to generate all combinations of sums from the list of tuples\n    for comb in combinations(test_list, len(test_list)-1):\n        # Check if the sum of the tuples in the combination is equal to the maximum value\n        if sum(comb) == max_val:\n            # If the sum is equal to the maximum value, print the combination\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    combinations_list = []\n\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            combination = tuple(test_list[j:j+i])\n            combinations_list.append(combination)\n\n    return combinations_list\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return True\n    return count == 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    # check if the number is negative\n    if n < 0:\n        return \"The number must be non-negative.\"\n    # calculate the sum of the divisors\n    sum_divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_divisors += i + n // i\n    # check if the sum is even\n    if sum_divisors % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    # Function to check whether the count of divisors is even or odd\n    def check_even(num):\n        count = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                count += 1\n        return count % 2 == 0\n    \n    # Function to check whether the number is prime or not\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Check if the number is prime and then count the number of divisors\n    if is_prime(n):\n        return check_even(n)\n    else:\n        return check_even(count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns True if the count of divisors is even, else False. \n    Divisors of an integer n are the integers that divide it evenly. The count of divisors of n is the number of integers from 1 to n that are divisible by n.\n    '''\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n    count = len(divisors)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    divisors = []\n    for i in range(1, n+1): \n        if n % i == 0: \n            divisors.append(i)\n    return len(divisors), sum(divisors)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def count_div(num):\n        div_list = []\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_list.append(i)\n        return div_list\n    \n    div_list = count_div(n)\n    div_count = len(div_list)\n    \n    if div_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Initialize the count of divisors to 0\n    count = 0\n\n    # Check if n is a prime number\n    for i in range(2, int(math.sqrt(n))+1): \n        # If n is divisible by i, increment the count by 1\n        if n % i == 0: \n            count += 1 \n            if count % 2 == 1: \n                return False\n            # If count is even, return True immediately after checking for primes\n            if count % 2 == 0: \n                return True\n\n    # If n is not divisible by any prime number, return True\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n        if count > n//i:\n            break\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # initialize count of divisors as 0\n    count = 0\n    # loop through from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n))+1):\n        # if n is divisible by i, add 1 to the count\n        if n % i == 0:\n            count += 1\n    # if n is prime and has an even number of divisors, return True\n    if count == 2 and n > 1:\n        return True\n    # if n is not prime or has an odd number of divisors, return False\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all possible subarrays of odd length\n    for i in range(1, n):\n        for j in range(i):\n            # Check if the sum of the subarray is odd\n            if sum(arr[j:j+i]) % 2 == 1:\n                sum += sum(arr[j:j+i])\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    odd_sum = 0\n    \n    for i in range(n):\n        if i%2!= 0:\n            odd_sum += arr[i]\n            \n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Loop through all the subarrays\n    for i in range(len(arr)):\n        # Check if the length of the subarray is odd\n        if i % 2 == 1:\n            # Initialize the current subarray sum to 0\n            current_sum = 0\n            \n            # Loop through all the elements in the subarray\n            for j in range(i, len(arr)):\n                # Add the element to the current subarray sum\n                current_sum += arr[j]\n                \n                # If the current subarray sum is odd, add it to the sum\n                if current_sum % 2 == 1:\n                    sum += current_sum\n                    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd_length_subarrays = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n            if j-i+1 % 2 == 1:\n                sum_odd_length_subarrays += sum(arr[i:j+1])\n    \n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, min(i+2*n, n)+1, 2):\n            if arr[i:j] == sorted(arr[i:j]):\n                sum += sum(arr[i:j])\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    sum_odd_length = 0\n    \n    # Iterate through all subarrays of odd length\n    for i in range(1, n+1, 2):\n        # Sum all odd length subarrays\n        sum_odd_length += sum(arr[j] for j in range(i-1, n, 2))\n    \n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or (i < n - 1 and arr[i] % 2!= 0):\n            left = i\n            right = i + 2 if i + 2 < n else n\n            while left < right:\n                sum += arr[left]\n                left += 1\n        else:\n            left = i + 1\n            right = i + 3 if i + 3 < n else n\n            while left < right:\n                sum += arr[left]\n                left += 1\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum_of_odd_length_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum_of_odd_length_subarrays += arr[j] - arr[i]\n\n    return sum_of_odd_length_subarrays"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color model.\n\n    Parameters:\n    r (int): Red value between 0 and 255.\n    g (int): Green value between 0 and 255.\n    b (int): Blue value between 0 and 255.\n\n    Returns:\n    h (float): Hue value between 0 and 360.\n    s (float): Saturation value between 0 and 1.\n    v (float): Value (brightness) value between 0 and 1.\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == 0:\n        h = 0\n    elif max_color == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_color == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif max_color == b:\n        h = 60 * ((r - g) / delta) + 240\n\n    if max_color == min_color:\n        s = 0\n    else:\n        s = delta / max_color\n\n    v = max_color\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n\n    Parameters:\n        r (int): Red value.\n        g (int): Green value.\n        b (int): Blue value.\n\n    Returns:\n        h (float): Hue value (in degrees).\n        s (float): Saturation value (0-100).\n        v (float): Value value (0-100).\n    \"\"\"\n\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        h = (cmax - cmin) / delta\n\n        if delta == r:\n            h = (g - b) / delta + (h if g < b else 6)\n        elif delta == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n\n        h *= 60\n\n        if h < 0:\n            h += 360\n\n    if cmax == r:\n        s = (g - b) / delta\n    else:\n        if cmax == g:\n            s = (b - r) / delta + delta\n        else:\n            s = (r - g) / delta + delta\n\n        s /= (1 - abs(2 * cmax - 1))\n\n    v = cmax * 100\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255\n    g = g/255\n    b = b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    v = cmax\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h * 60\n    if h < 0:\n        h += 360\n    s = delta / cmax\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_val\n\n    delta = max_val - min_val\n    if max_val!= 0:\n        s = delta / max_val\n\n    if delta!= 0:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h *= 60\n        if h < 0:\n            h += 360\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts an RGB color to HSV color.\n\n    Args:\n    r (int): Red color value.\n    g (int): Green color value.\n    b (int): Blue color value.\n\n    Returns:\n    h (float): Hue value in the range [0, 360].\n    s (float): Saturation value in the range [0, 1].\n    v (float): Value value in the range [0, 1].\n    \"\"\"\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0.0\n    s = 0.0\n    v = max_value\n\n    if delta == 0:\n        h = 0.0\n    elif max_value == r:\n        h = (g - b) / delta % 6.0\n    elif max_value == g:\n        h = (b - r) / delta + 2.0\n    elif max_value == b:\n        h = (r - g) / delta + 4.0\n\n    h = h * 60.0\n    if h < 0:\n        h += 360.0\n\n    s = delta / max_value\n\n    if max_value == 0:\n        v = 0.0\n    else:\n        v = max_value\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    del_c = cmax - cmin\n    if cmax == 0:\n        h = 0\n    else:\n        if del_c == 0:\n            h = 0\n        elif r == cmax:\n            h = 60 * ((g - b) / del_c)\n        elif g == cmax:\n            h = 60 * ((b - r) / del_c) + 120\n        elif b == cmax:\n            h = 60 * ((r - g) / del_c) + 240\n    if h < 0:\n        h += 360\n    v = cmax\n    s = del_c / (1 - abs(2 * cmax - 1)) if del_c!= 0 else 0\n    return int(h*255), int(s*255), int(v*255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    import math\n\n    # Convert r, g, and b values to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find the min, max, and average values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    avg_val = (r + g + b) / 3.0\n\n    # Determine the hue\n    if max_val == min_val:\n        hue = 0.0\n    elif max_val == r:\n        hue = (60.0 * ((g - b) / (max_val - min_val))) % 360.0\n    elif max_val == g:\n        hue = (60.0 * ((b - r) / (max_val - min_val)) + 120.0) % 360.0\n    elif max_val == b:\n        hue = (60.0 * ((r - g) / (max_val - min_val)) + 240.0) % 360.0\n\n    # Determine the saturation\n    if max_val == 0:\n        saturation = 0.0\n    elif avg_val == r:\n        saturation = (max_val - min_val) / (max_val + min_val)\n    elif avg_val == g:\n        saturation = (max_val - min_val) / (max_val + min_val)\n    else:\n        saturation = (max_val - min_val) / (max_val + min_val)\n\n    # Determine the value\n    value = max_val\n\n    # Convert the values to a tuple\n    hsv_color = (int(hue), int(saturation * 255), int(value * 255))\n\n    return hsv_color"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Convert RGB to HSV\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if cmax == r:\n            h = 60 * ((g - b) / delta)\n        elif cmax == g:\n            h = 60 * ((b - r) / delta) + 120\n        elif cmax == b:\n            h = 60 * ((r - g) / delta) + 240\n\n        if h < 0:\n            h += 360\n\n        if cmax == 0:\n            s = 0\n        else:\n            s = delta / cmax\n\n    v = cmax\n\n    return round(h), round(s), round(v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0 # Scale the color values to the range [0,1]\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n\n    h = round(h*60)\n    s = round(s*100)\n    v = round(v*100)\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    max_color = max(r, g, b)\n    min_color = min(r, g, b)\n    delta = max_color - min_color\n\n    if max_color == 0:\n        h = 0\n    elif max_color == r:\n        h = (g - b) / delta\n    elif max_color == g:\n        h = 2 + (b - r) / delta\n    elif max_color == b:\n        h = 4 + (r - g) / delta\n\n    if max_color == min_color:\n        s = 0\n    else:\n        s = delta / max_color\n\n    v = max_color\n\n    h = h * 60 if h < 0 else h * 60\n    s = s * 100 if s < 0 else s * 100\n    v = v * 100 if v < 0 else v * 100\n\n    return h, s, v"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even = 1\n    odd = 1\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n        \n        product *= even // odd\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            product = num\n            break\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even_count = 0\n    odd_count = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n        if even_count > 0 and odd_count > 0:\n            product *= num\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 1\n    odd = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even *= num\n        else:\n            odd *= num\n\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    if even_count == 0:\n        return 0\n    else:\n        return odd_count * even_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return lst[0] * lst[1]\n    else:\n        return \"No even and odd numbers found\"\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_sum = odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of words\n    words = test_str.split(',')\n    \n    # Convert each word to an integer\n    int_words = [int(word) for word in words]\n    \n    # Convert the list of integers back to a tuple\n    int_tuple = tuple(int_words)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of substrings\n    substrings = test_str.split(',')\n    \n    # Convert each substring to an integer\n    integers = [int(substring) for substring in substrings]\n    \n    # Convert the list of integers to a tuple\n    result = tuple(integers)\n    \n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Convert a tuple string to an integer tuple.\n\n    Parameters:\n    test_str (str): a tuple string in the format (1,2,3,4)\n\n    Returns:\n    tuple: an integer tuple\n    '''\n    return tuple(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").split(\",\")))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = list(map(int, test_str.split(',')))\n    return tuple(test_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_tuple = ()\n    for char in test_str:\n        if char.isdigit():\n            int_tuple += (int(char),)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = test_str.split(',')\n    int_tuple = tuple(int(i) for i in str_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split()\n    # Initialize an empty list for integers\n    int_list = []\n    # Loop through the list of strings\n    for str_elem in str_list:\n        # If the string is an integer, append it to the list of integers\n        if str_elem.isdigit():\n            int_list.append(int(str_elem))\n        else:\n            # If the string is not an integer, raise an exception\n            raise ValueError(\"String contains non-integer element\")\n    # Return the tuple of integers\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty list to store the tuple values\n    values = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, convert it to an integer and append to the list\n        if char.isdigit():\n            values.append(int(char))\n        # if the character is not a digit, skip it\n        else:\n            continue\n\n    # convert the list of integer values to a tuple and return it\n    return tuple(values)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(test_str)\n    # Initialize an empty integer tuple\n    int_tuple = ()\n    # Iterate over the list of characters\n    for char in char_list:\n        # Check if the character is a digit\n        if char.isdigit():\n            # If it is a digit, append it to the tuple\n            int_tuple += (int(char),)\n    # Return the integer tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # convert string to tuple\n    test_tup = tuple(test_str.split(','))\n\n    # convert tuple to integer tuple\n    int_tup = tuple(int(i) for i in test_tup)\n\n    return int_tup"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where to insert x in the sorted list a[0:i]\n    index = bisect.bisect_right(a, x)\n    # If the value is not found, return the index where to insert it\n    if index == len(a):\n        index = len(a)\n    # Return the index where to insert x\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx < len(a) and a[idx] == x:\n        return idx\n    else:\n        return idx - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index = len(a)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the right insertion point using bisect function from the bisect module\n    index = bisect.bisect_right(a, x)\n    \n    # Check if the insertion point is already present in the list\n    if index!= len(a) and a[index] == x:\n        index += 1\n    \n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0 or a[index-1] < x:\n        return index\n    else:\n        return index-1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the first element greater than or equal to x\n    i = bisect.bisect_left(a, x)\n    # If x is equal to the last element, insert it at the end of the array\n    if i == len(a):\n        a.append(x)\n        return len(a) - 1\n    # If x is less than the first element, insert it at the beginning of the array\n    elif x < a[i - 1]:\n        a.insert(0, x)\n        return 0\n    # If x is greater than or equal to the first and last elements, perform a linear search\n    else:\n        for j in range(i, len(a)):\n            if a[j] >= x:\n                return j\n        # If no elements greater than or equal to x are found, insert it at the end of the array\n        a.append(x)\n        return len(a) - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    idx = bisect.bisect_right(a, x)\n    if idx!= len(a) and a[idx] == x:\n        return idx\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{' + str(3) + '}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=bb{3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(str(test_str) + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = (test_str, test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to tuple\n    new_list = tuple(test_list)\n    # concatenate the list and the string\n    result = new_list + (test_str,)\n    return result"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert string to list\n    test_list = list(test_str)\n    # Combine the two lists and create a new tuple\n    new_tup = tuple(test_list + test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    # Convert the combined list to a tuple and return it\n    return tuple(combined_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Converting the list to a tuple\n    test_tuple = tuple(test_list)\n    # Adding the given string to the tuple\n    test_tuple += (test_str,)\n    # Returning the new tuple\n    return test_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Split the string into a list of characters\n    list_of_chars = list(test_str)\n    # Reverse the order of the characters in the list\n    list_of_chars.reverse()\n    # Join the characters in the list into a single string\n    new_string = ''.join(list_of_chars)\n    # Convert the new string to a list of integers and create a new tuple from the list\n    new_tuple = tuple(int(x) for x in new_string)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([num for num in nums[i:i+2] if num % 2 == 0]))!= 1:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    This function takes a list of integers and checks whether every even index contains even numbers.\n    '''\n    count = 0\n    \n    # Loop through the list and count the number of even numbers in each even index\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    \n    # Check if the count of even numbers is equal to the length of the list divided by 2\n    if count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # check if the length of the list is odd\n    if len(nums) % 2 == 1:\n        return False\n    # loop through the list and check if the even indices have an even number of even numbers\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and (i % 2!= 0 or i == 0):\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if even_count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len([num for num in nums[i::2] if num % 2 == 0])!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # create a list to store the elements of the tuple\n    tup_list = []\n    # loop through each element of the tuple\n    for element in test_tup:\n        # if the element is not a tuple, add it to the list\n        if not isinstance(element, tuple):\n            tup_list.append(element)\n        # if the element is a tuple, recursively call the function and append the resulting list to the list\n        else:\n            tup_list.append(remove_nested(element))\n    # return the list of elements after removing the tuples\n    return tup_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for inner_item in item:\n                result.append(inner_item)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # check if the given tuple is a tuple\n    if isinstance(test_tup, tuple):\n        # loop through each element of the tuple\n        for i in range(len(test_tup)):\n            # check if the current element is a tuple\n            if isinstance(test_tup[i], tuple):\n                # recursively call the function on the current element\n                remove_nested(test_tup[i])\n            else:\n                # check if the current element is a list or set\n                if isinstance(test_tup[i], list) or isinstance(test_tup[i], set):\n                    # remove the current element from the list\n                    del test_tup[i]\n                else:\n                    # remove the current element from the tuple\n                    del test_tup[i]\n    else:\n        # if the given tuple is not a tuple, ignore it\n        pass"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup += item\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n        else:\n            result.extend(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [i for tup in test_tup for i in tup if isinstance(i, (int, float, str))]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the last position of the element to -1\n    last_position = -1\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # If the current element is equal to the target element, set the last position to i\n        if arr[i] == x:\n            last_position = i\n\n    # Return the last position of the element\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize a variable to store the last position of x in arr\n    last_position = -1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If x is found, update the last_position variable\n        if arr[i] == x:\n            last_position = i\n    \n    # Return the last_position variable\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Create a dictionary to store the last position of the element in the array\n    last_pos = {}\n    # Loop through the array and store the last position of the element in the dictionary\n    for i in range(len(arr)):\n        if arr[i] in last_pos:\n            last_pos[arr[i]] = i\n        else:\n            last_pos[arr[i]] = i\n    # Loop through the array again to find the last position of the element in the dictionary\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] in last_pos and arr[i] == x:\n            return last_pos[arr[i]]\n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i == -1:\n        return \"Element not found in the array.\"\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the last index of the array that is less than or equal to x\n    last_idx = bisect_left(arr, x)\n    # If x is not found in the array, return -1\n    if last_idx == len(arr):\n        return -1\n    # If x is found in the array, return the index of the last occurrence of x\n    else:\n        return last_idx - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x. It then returns the last position of the element in the array.\n    \"\"\"\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize variables to keep track of the starting and ending positions\n    start = 0\n    end = len(arr) - 1\n\n    # loop until the starting position is greater than or equal to the ending position\n    while start < end:\n        # calculate the middle position\n        mid = (start + end) // 2\n\n        # if the middle element is equal to the target element, return its index\n        if arr[mid] == x:\n            return mid\n\n        # if the target element is less than the middle element, search in the upper half of the array\n        elif x < arr[mid]:\n            end = mid\n        # otherwise, search in the lower half of the array\n        else:\n            start = mid + 1\n\n    # if the target element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr: A sorted array.\n        x: The element to search for.\n\n    Returns:\n        The index of the last occurrence of x in arr, or -1 if x is not in arr.\n    \"\"\"\n    if x < arr[0]:\n        return -1\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            return mid\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'(?<!b)a(?![bB])(.*)b(?!b)')\n    match = pattern.search(text)\n    if match:\n        return match.group(2)\n    return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?P<start>^a)([^\\s]*)b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('start')\n    else:\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a(.*?b)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    \"\"\"\n    Write function to find the sum of all items in the given dictionary.\n    \"\"\"\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for value in dict.values():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # Find the maximum and minimum odd numbers in the range\n    max_odd = n\n    min_odd = 1\n\n    while max_odd % 2 == 0:\n        max_odd = max_odd // 2\n    while min_odd % 2 == 0:\n        min_odd = min_odd // 2\n\n    # Initialize the sum to 0\n    total = 0\n\n    # Iterate through all odd numbers within the range\n    for i in range(min_odd, max_odd + 1, 2):\n        # Add each odd number to the total\n        total += i\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through all the odd natural numbers within the range l and r\n    for i in range(n, 0, -2):\n        # Add the odd number to the sum variable\n        sum += i\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through range of numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # add odd numbers to sum\n        sum += i\n    # return sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize variables for sum and current odd number\n    sum = 0\n    num = 1\n\n    # loop through the range of natural numbers\n    while num <= n:\n        # if the current odd number is odd, add it to the sum\n        if num % 2!= 0:\n            sum += num\n\n        # increment the current odd number\n        num += 1\n\n    # return the sum of all odd numbers in the range\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r + 1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit of the range: \"))\n    r = int(input(\"Enter the upper limit of the range: \"))\n    \n    # Initializing the sum variable\n    sum = 0\n    \n    # Looping through the range of numbers\n    for i in range(l, r+1):\n        \n        # Checking if the number is odd\n        if i % 2!= 0:\n            \n            # Adding the number to the sum\n            sum += i\n    \n    # Printing the sum\n    print(\"The sum of all odd natural numbers within the range {} and {} is {}\".format(l, r, sum))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_ = 0\n    \n    while l <= r:\n        if l % 2!= 0:\n            sum_ += l\n        l += 1\n    \n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    total_sum = 0\n    while l <= r:\n        if l % 2!= 0:\n            total_sum += l\n        l += 1\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes two arguments: the lower bound and the upper bound of the range.\n    It returns the sum of all odd natural numbers within the range.\n    \"\"\"\n    # Initialize a variable to store the sum of odd natural numbers\n    total = 0\n    \n    # Loop through all the natural numbers between l and r\n    for i in range(l, r+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Add the number to the total\n            total += i\n    \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_array(arr):\n    '''\n    This function takes an array as input and returns the sum of all the elements in the array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # iterate over the array\n    for i in arr:\n        # add each element to the sum\n        sum += i\n    # return the final sum\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        total += arr[i]\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert binary number to decimal number\n    num = int(n, 2)\n\n    # Calculate the number of bits to rotate\n    num_rotated = num >> d\n\n    # Calculate the shifted bits\n    shifted_bits = num & ((1 << d) - 1)\n\n    # Combine the shifted bits with the rotated bits\n    rotated_num = shifted_bits | (num_rotated << (32 - d))\n\n    # Convert the rotated number back to binary\n    rotated_str = bin(rotated_num)[2:]\n\n    # Add zeros to the left until the length of the binary string is 32 bits\n    while len(rotated_str) < 32:\n        rotated_str = '0' + rotated_str\n\n    # Convert the rotated binary string back to decimal number\n    rotated_num = int(rotated_str, 2)\n\n    # Return the rotated number in binary\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    \n    result = 0\n    while d > 0:\n        if d & 1 == 1:\n            result = (result << 1) + (n & 1)\n        else:\n            result = result << 1\n        n = n >> 1\n        d = d >> 1\n    \n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    while d > 0:\n        n = (n << d) | (n >> (32 - d))\n        d = d - 1\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xFFFFFFFF  # Make sure the number is positive\n    d = d % 32  # Ensure d is within the range of 0 to 31\n    if d == 0:\n        return n\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF  # Perform the rotation"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and check its length\n    binary = bin(n)[2:]\n    length = len(binary)\n    # If length of binary is less than d, rotate left by 32 - d bits\n    if length < d:\n        d = 32 - d\n        n = n << d | n >> (32 - d)\n    # Rotate left by d bits\n    else:\n        n = n << d | n >> (length - d)\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF # Rotate left by d bits and mask to 32 bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    # check if n is a 32-bit integer\n    if not isinstance(n, int) or n > 2**31 - 1 or n < -2**31:\n        return None\n    # compute the number of left shifts to perform\n    shift_count = (d % 32) if d < 0 else (32 + d % 32)\n    # compute the resulting number by performing the left shift\n    result = (n << shift_count) | (n >> (32 - shift_count))\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates the bits of a given number to the left by d bits.\n    \"\"\"\n    # Reverse the binary representation of n\n    n_reverse = bin(n)[2:]\n    # Get the number of bits in n\n    num_bits = len(n_reverse)\n\n    # Add d to the number of bits\n    new_num_bits = num_bits + d\n\n    # If the new number of bits is greater than 32,\n    # rotate the bits by (new_num_bits - 32) bits\n    if new_num_bits > 32:\n        # Get the number of bits to rotate\n        rotate_bits = new_num_bits - 32\n        # Reverse the first rotate_bits bits\n        n_reverse = n_reverse[rotate_bits:] + n_reverse[:rotate_bits]\n        # Get the number of bits in n after rotation\n        num_bits = new_num_bits - rotate_bits\n\n    # Reverse the first num_bits bits\n    n_reverse = n_reverse[num_bits - d:] + n_reverse[:num_bits - d]\n    # Reverse the binary representation of n\n    n_reverse = ''.join([str(int(bit)) for bit in n_reverse])\n    # Convert the reversed binary string back to an integer\n    n = int(n_reverse, 2)\n\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff\n    return ((n << d) | (n >> (32 - d))) & mask"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match all whitespace characters\n    pattern = r'\\s+'\n    # Use the re.sub() function to replace all matches of the pattern with an empty string\n    return re.sub(pattern, '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('[\\s]+', '', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    # initialize count variable\n    count = 0\n\n    # check for equal values\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n\n    # return count of equal values\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(3):\n        if x == y and x == z:\n            count += 1\n        elif y == x and y == z:\n            count += 1\n        elif z == x and z == y:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(max(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i+1, y+1):\n            for k in range(j+1, y+1):\n                if i == x or j == x or k == x or i == y or j == y or k == y or i == z or j == z or k == z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # initialize variables to keep track of the number of equal numbers\n    count = 0\n\n    # iterate over the three integers and count the number of equal ones\n    for i in range(3):\n        if x == y == z:\n            count += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n            if i == n-1:\n                count -= 1\n                break\n            j = i+1\n            while j<n and arr[j] < arr[i]:\n                j += 1\n            if j == n:\n                count -= 1\n                break\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Count the number of rotations required to sort the array in ascending order\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    pivot = arr[0]\n    count = 0\n    while n > 1:\n        count += n // 2\n        right = 0\n        left = 0\n        while right < n:\n            if arr[right] > pivot:\n                arr[left], arr[right] = arr[right], arr[left]\n                left += 1\n            right += 1\n        n = left\n        pivot = arr[left]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Count the number of rotations required to generate a sorted array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The number of rotations required to generate a sorted array.\n\n    Examples:\n        count_rotation([4, 5, 1, 3, 2]) -> 1\n        count_rotation([1, 2, 3, 4, 5]) -> 0\n    \"\"\"\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the last element of the array and its index\n    last = arr[-1]\n    index = arr.index(last)\n    \n    # Initialize the count of rotations\n    count = 0\n    \n    # Perform a binary search to find the largest index j such that arr[j] is smaller than last\n    # or arr[j] is equal to last.\n    left, right = 0, index\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < last:\n            left = mid + 1\n        else:\n            right = mid\n    if arr[left] == last:\n        count = count + left - 1\n    \n    # Return the count of rotations required to generate the sorted array\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Traverse through the array and find the minimum element\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    # Find the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(n):\n        if arr[i] > min_val:\n            count += n - i\n            break\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n\n    n = len(arr)\n\n    # initialize two variables to store the maximum and minimum elements of the array\n    max_element = arr[0]\n    min_element = arr[n - 1]\n\n    # loop through the array and update the maximum and minimum elements\n    for i in range(1, n - 1):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # check if the array is already sorted\n    if min_element == 0 and max_element == n - 1:\n        return 0\n\n    # check if the array is already sorted in reverse\n    if min_element == n - 1 and max_element == 0:\n        return 0\n\n    # if the array is not sorted, count the rotations required\n    if max_element > min_element:\n        count = (max_element - min_element + 1) // 2\n        return count\n    else:\n        count = (min_element - max_element + 1) // 2\n        return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array.\n    '''\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        if arr[i]!= arr[n-i-1]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\n    Parameters:\n    arr (list): A list of integers\n\n    Returns:\n    int: The number of rotations required to generate a sorted array.\n\n    Example:\n    count_rotation([4,5,1,3,2])\n    # Output: 1\n\n    count_rotation([1,2,3,4,5])\n    # Output: 2\n\n    count_rotation([3,1,4,1,5])\n    # Output: 4\n\n    count_rotation([1,1,1,1,1])\n    # Output: 5\n    '''\n\n    # Find the smallest and largest element in the array\n    smallest = arr[0]\n    largest = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < smallest:\n            smallest = arr[i]\n        if arr[i] > largest:\n            largest = arr[i]\n\n    # Calculate the gap between the smallest and largest element\n    gap = largest - smallest + 1\n\n    # Calculate the number of rotations required to generate a sorted array\n    count = 0\n    while gap > 1:\n        # Calculate the number of times the gap can be divided by 2\n        n = gap // 2\n\n        # Iterate n times\n        for i in range(n):\n            # Check if the current element is greater than its next element\n            if arr[i] > arr[i + n]:\n                # If it is, swap them\n                arr[i], arr[i + n] = arr[i + n], arr[i]\n                count += 1\n\n        # Update the gap for the next iteration\n        gap = gap // 2\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid] >= arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    if arr[left] >= arr[right]:\n        count += right - left\n    else:\n        count += n - left + 1\n    \n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Checks if the given number is a perfect square or not.\n    \"\"\"\n    # Base case\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        # Find the square root of n using the babylonian method\n        a = 0\n        b = n\n        while b**2 - n > 0:\n            a, b = b, (b + n // b)\n        while b**2 - n < 0:\n            a, b = b, (b - n // b)\n        # Check if the square root is an integer\n        if b**2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    import math\n    sqrt_n = math.sqrt(n)\n    if sqrt_n == int(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(int(n**0.5)+1):\n        if n == i**2:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 1:\n        return True\n    for i in range(int(n**0.5)+1):\n        if n//i**2 == i:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    left = 1\n    right = n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # calculate the square root of n using the math module\n    sqrt_n = round(n ** 0.5)\n\n    # check if the square of sqrt_n is equal to n\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is negative or not\n    if n < 0:\n        return False\n    \n    # Calculate the square root of the number\n    sqrt = int(n**0.5)\n    \n    # Check if the square of the square root of the number is equal to the original number\n    if n == sqrt*sqrt:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square or False otherwise.\n    \"\"\"\n    # calculate the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n    \n    # check if sqrt_n is a perfect square or not\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square, False otherwise.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n < 1:\n        return False\n    else:\n        i = 1\n        while i * i <= n:\n            if i * i == n:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    This function checks whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # initialize variables to store the product and the sum of even products\n    product = 1\n    even_product = 1\n    \n    # loop through the list and calculate the product and sum of even products\n    for num in arr:\n        product *= num\n        \n        if num % 2 == 0:\n            even_product *= num\n            \n    # check if the product of even products is even or odd\n    if even_product % 2 == 0:\n        print(\"The product of even products is even.\")\n    else:\n        print(\"The product of even products is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    if len(arr) < 2:\n        return \"The list should have at least two elements.\"\n    \n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return \"The product of the numbers in the list is even.\"\n    else:\n        return \"The product of the numbers in the list is odd.\""
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize variables\n    max_sum = float('-inf')\n    max_list = None\n\n    # loop through each list of lists\n    for l in lists:\n        # initialize a variable for the sum of the elements in the list\n        current_sum = 0\n\n        # loop through each element in the list\n        for e in l:\n            # add the element to the sum\n            current_sum += e\n\n        # check if the current sum is greater than the maximum sum so far\n        if current_sum > max_sum:\n            # if it is, update the maximum sum and the corresponding list\n            max_sum = current_sum\n            max_list = l\n\n    # return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = []\n    for lst in lists:\n        lst.sort(reverse=True)\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize maximum sum and list with the first element of each list\n    max_sum = sum(lists[0])\n    max_list = lists[0]\n    # Loop through the remaining elements of the list\n    for i in range(1, len(lists)):\n        # Calculate the sum of the current list and its previous list\n        current_sum = sum(lists[i])\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            # If it is, update the maximum sum and list\n            max_sum = current_sum\n            max_list = lists[i]\n    # Return the maximum sum and list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            temp_sum = 0\n            for k in range(len(lists[i][j])):\n                temp_sum += lists[i][j][k]\n            \n            if temp_sum > max_sum:\n                max_sum = temp_sum\n                max_list = [lists[i][j]]\n            elif temp_sum == max_sum:\n                max_list.append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize variables to store the maximum sum and the current list\n    max_sum = 0\n    current_list = []\n\n    # Loop through each sub-list in the list of lists\n    for sub_list in lists:\n        # Initialize variables to store the current sum and a flag to determine if the current sum is the maximum\n        current_sum = 0\n        max_sum_found = False\n\n        # Loop through each element in the sub-list\n        for element in sub_list:\n            # Add the element to the current sum\n            current_sum += element\n\n            # If the current sum is greater than the maximum sum found so far, update the maximum sum and the current list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                current_list = sub_list\n                max_sum_found = True\n\n            # If the current sum is equal to the maximum sum found so far, update the current list\n            elif current_sum == max_sum:\n                current_list = sub_list\n                max_sum_found = True\n\n        # If the maximum sum was found, break out of the inner loop\n        if max_sum_found:\n            break\n\n    # Return the current list as the result\n    return current_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for sublist in lists:\n        sum = 0\n        for num in sublist:\n            sum += num\n        if sum > len(max_sum) or (sum == len(max_sum) and sublist < max_sum):\n            max_sum = sublist\n    return max_sum"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    max_sum = []\n    for i in range(len(lists)):\n        current_list = lists[i]\n        for j in range(i+1, len(lists)):\n            sub_list = current_list[j:] + current_list[:j]\n            current_sum = sum(sub_list)\n            if current_sum > max_sum and sum(sub_list) == max_sum:\n                max_sum = sub_list\n    return max_sum"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    count = 1\n    max_count = 1\n    max_run = 1\n    current_char = test_str[0]\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            current_char = test_str[i]\n        else:\n            count = 1\n            current_char = test_str[i]\n\n        if count > max_count:\n            max_count = count\n            max_run = 1\n        elif count == max_count:\n            max_run += 1\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 1\n    max_run_start = 0\n    current_run = 0\n    current_run_start = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1].upper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = current_run_start\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                max_run_start = current_run_start\n            current_run = 0\n            current_run_start = i\n            \n    if current_run > max_run:\n        max_run = current_run\n        max_run_start = current_run_start\n        \n    return test_str[max_run_start:max_run_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    run = 0\n    for i in range(n):\n        if test_str[i] == test_str[i].upper():\n            run += 1\n            if run > max_run:\n                max_run = run\n        else:\n            if run > max_run:\n                max_run = run\n            run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables\n    max_run = 0\n    start = 0\n    end = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase\n        if test_str[i].isupper():\n            # If the run of uppercase characters is longer than the current maximum run\n            if i - start + 1 > max_run:\n                # Update the maximum run and its starting and ending indices\n                max_run = i - start + 1\n                start = i\n\n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    current_char = test_str[0]\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n            current_char = test_str[i]\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_start = 0\n    run_end = 0\n    max_run = 0\n    max_run_start = 0\n    max_run_end = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            if i == 0 or not test_str[i-1].isupper():\n                run_start = i\n                run_end = i\n            else:\n                run_end = i\n            if run_end - run_start + 1 > max_run:\n                max_run = run_end - run_start + 1\n                max_run_start = run_start\n                max_run_end = run_end\n        else:\n            run_start = 0\n            run_end = 0\n\n    return max_run, test_str[max_run_start:max_run_end+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    start = 0\n    max_len = 0\n    max_run = []\n\n    # Iterate through the string\n    for i in range(1, len(test_str)):\n        # Check if the current character is uppercase\n        if test_str[i].isupper():\n            # If it is, update the start index\n            start = i\n            # Check if the current run of uppercase characters is longer\n            while i < len(test_str) - 1 and test_str[i+1].isupper():\n                i += 1\n            # Update the maximum run of uppercase characters found\n            max_run.append((start, i))\n            # Update the maximum length of the run\n            max_len = max(max_len, i - start + 1)\n\n    # Return the maximum run of uppercase characters\n    return max_run, max_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    count = 0\n    start_index = 0\n    max_run = 0\n    max_index = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if count > max_run:\n                max_run = count\n                max_index = start_index\n            count = 0\n        else:\n            count += 1\n        start_index = i + 1\n        \n    return test_str[max_index:max_index+max_run]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    # initialize first odd number to be None\n    first_odd_num = None\n\n    # loop through each number in the list\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # if it is, set first_odd_num to the current number\n            first_odd_num = num\n            # break out of the loop\n            break\n\n    # return the first odd number\n    return first_odd_num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None  # no odd numbers found"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)-K):\n            if test_tup[i]!= test_tup[i+K]:\n                return False\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    \n    # check if all elements of the tuple are the same\n    for i in range(K):\n        if test_tup[i]!= test_tup[0]:\n            return False\n    \n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == 2 and len(K) == 1:\n        return True\n    elif len(test_tup) == 1 and len(K) == 2:\n        return True\n    elif len(test_tup) == 2 and len(K) == 2:\n        return test_tup[0] in K or test_tup[1] in K\n    elif len(test_tup) == 2 and len(K) == 3:\n        if test_tup[0] in K or test_tup[1] in K:\n            return True\n        elif test_tup[0] == K[2]:\n            return True\n        else:\n            return False\n    elif len(test_tup) == 3 and len(K) == 2:\n        if test_tup[0] in K or test_tup[1] in K or test_tup[2] in K:\n            return True\n        elif test_tup[0] == K[1] or test_tup[1] == K[1]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_tup = tuple(filter(lambda x: x == K, test_tup))\n    if k_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup2)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if length of first tuple is same as length of second tuple\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of equal length\"\n\n    # Loop through the first tuple and check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n\n    # If all elements in the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: The first tuple contains a number greater than the corresponding number in the second tuple.\")\n            return\n        if test_tup1[i] < test_tup2[i]:\n            print(\"The first tuple contains the smaller number(s) than the corresponding number(s) in the second tuple.\")\n            return\n\n    print(\"The second tuple contains the same numbers as the first tuple.\")"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]