[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared.append(element)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    # loop through the first tuple and compare it to the second tuple\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    # return the shared elements as a tuple\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # creating a set of all elements in both lists\n    common_set = set(test_tup1 + test_tup2)\n    # converting the set to a list and sorting it\n    sorted_common_list = sorted(list(common_set))\n    # creating an empty list to store the shared elements\n    shared_list = []\n    # looping through the first list and checking if the element is present in the common set\n    for element in test_tup1:\n        if element in common_set:\n            # appending the element to the shared list\n            shared_list.append(element)\n    # looping through the second list and checking if the element is present in the common set\n    for element in test_tup2:\n        if element in common_set:\n            # appending the element to the shared list\n            shared_list.append(element)\n    # returning the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared.append(test_tup1[i])\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    common_elements = []\n    for element in test_tup1:\n        if element in test_tup2 and element not in common_elements:\n            common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    elif n == 3:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function will identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    # check if n is less than 2 (not prime)\n    if n < 2:\n        return True\n    # check if n is divisible by any number between 2 and n-1 (not prime)\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    # if n is divisible by no numbers between 2 and n-1, it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function takes a list of numbers and the number of largest elements required as inputs.\n    It returns the n largest elements in the given list in descending order.\n    \"\"\"\n    # create a min-heap of size n to store the largest n elements\n    hq.heapify(nums)\n\n    # remove the largest element from the min-heap and append it to the result list\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(nums))\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with initial list of nums\n    hq.heapify(nums)\n\n    # Pop n largest integers from heap\n    largest_nums = [hq.heappop(nums) for i in range(n)]\n\n    # Return largest_nums in descending order\n    return largest_nums[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n\n    max_heap = [0] * n\n    hq.heapify(max_heap)\n    \n    # iterate through the input list and add each number to the min-heap\n    for num in nums:\n        hq.heappushpop(max_heap, -num)\n        \n    # return the n largest integers from the min-heap\n    return [-num for num in max_heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max-heap of size n\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, -num)\n    # Extract the n largest numbers from the max-heap\n    largest = []\n    for i in range(n):\n        largest.append(-hq.heappop(max_heap))\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = hq.nsmallest(n, nums)\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        nums.pop()\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap of size n and fill it with the given numbers\n    min_heap = hq.nsmallest(n, nums)\n    # Pop the min heap until it becomes empty and return the popped elements in descending order\n    return [hq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    max_heap = []\n    for num in nums:\n        hq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            hq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heapq.nlargest(n, heap)"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:  # check if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the binary representation of x has only one 1 followed by zeroes and False otherwise.\n    '''\n    if x == 0:\n        return True\n    binary_representation = bin(x)[2:]\n    count = 0\n    for i in binary_representation:\n        if i == '1':\n            count += 1\n            if count > 1:\n                return False\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function takes an integer x as input and returns True if the two numbers differ at one bit position only, \n    False otherwise.\n    '''\n    if (x & (x - 1)) == 0: # Check if x is a power of two\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    x &= ~(x-1)  # remove all trailing zeros\n    return x == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Find the number of set bits in the binary representation of x\n    count = bin(x).count('1')\n    \n    # Check if x has exactly one set bit\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the two numbers differ at one bit position only, and False otherwise.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    bit_position = 0\n    while (x & 1) == 0 and bit_position < 32:\n        x >>= 1\n        bit_position += 1\n    \n    if (x & 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a power of two, and False otherwise.\n    \"\"\"\n    # If x is 0 or 1, it is a power of two.\n    if x == 0 or x == 1:\n        return True\n    \n    # If x is greater than 1, we can check if it is a power of two by checking if its binary representation is all 1's.\n    binary_representation = bin(x)[2:]  # Extracts the binary representation of x from the prefix \"0b\".\n    if binary_representation == '0' * len(binary_representation):  # If the binary representation is all 0's, it is a power of two.\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the bit position of the first differing bit\n    for i in range(31, -1, -1):\n        if (x & (1 << i))!= (y & (1 << i)):\n            return False\n    \n    # If all the bits are same, then the two numbers are not differing at any position only.\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words using the regular expression pattern \\b\\w+\\b\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Loop through each word and check if it is at least 4 characters long\n    long_words = []\n    for word in words:\n        if len(word) >= 4:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text.lower())\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() function to find all words that match the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_num = num ** 2\n        squared_nums.append(squared_num)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Loop through each element in the list\n    for num in nums:\n        # Square the element and append it to a new list\n        squares.append(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    rotations = 0\n    for i in range(len(str)):\n        if freq[str[i]] == 1:\n            del freq[str[i]]\n            rotations += 1\n            break\n        else:\n            freq[str[i]] -= 1\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j] and str[j] == str[n-i-1]:\n                return i+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Find the minimum number of rotations required to get the string in descending order\n    min_rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                min_rotations += 1\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # Initialize variables to keep track of the length and number of rotations required\n    len_str = len(str)\n    rotations = 0\n    \n    # Loop through all possible rotations of the string\n    for i in range(len_str):\n        for j in range(i+1, len_str):\n            # Check if the two substrings are equal\n            if str[i:j+1] == str[j:i+1][::-1]:\n                rotations += 1\n                # If the two substrings are equal, check if the first string is a permutation of the second string\n                if str[0:i] + str[i:j+1] + str[j+1:] == str[0:j+1] + str[j:i+1][::-1] + str[i+1:]:\n                    rotations += 1\n                    break\n    \n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    while str!= str[::-1]:\n        str = str[1:] + str[0]\n        count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # check if all characters are same or not\n    if n == 1 or str[0] == str[-1]:\n        return 0\n    # initialize dictionary to store the frequency of each character in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n    # sort the frequency dictionary in descending order of frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # initialize result variable and check if all characters have same frequency\n    result = 0\n    for i in range(n-1):\n        if sorted_freq[i][1] == sorted_freq[i+1][1]:\n            result += 1\n        else:\n            break\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # define the function to check if a string is equal to another string after rotating it \n    def isEqual(str1, str2): \n        if len(str1)!= len(str2): \n            return False \n        rotated = str1[::-1] \n        for i in range(len(str1)): \n            if str1[i]!= rotated[i]: \n                return False \n        return True \n\n    # get the length of the string \n    n = len(str) \n\n    # initialize the minimum number of rotations required to get the same string \n    min_rotations = n // 2 \n    \n    # loop until all possible rotations have been checked \n    while True: \n        # check if the current rotations are equal to the original string \n        if isEqual(str, str[::-1]): \n            return min_rotations \n        # check if there are more rotations to try \n        else: \n            min_rotations += 1 "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    # Create a list of characters in the string\n    char_list = list(str)\n\n    # Initialize the count of rotations to 0\n    rotation_count = 0\n\n    # While the list contains more than one character\n    while len(char_list) > 1:\n        # Find the index of the smallest character\n        min_index = 0\n        for i in range(1, len(char_list)):\n            if char_list[i] < char_list[min_index]:\n                min_index = i\n\n        # Swap the smallest character with the last character in the list\n        char_list[min_index], char_list[-1] = char_list[-1], char_list[min_index]\n\n        # Decrement the length of the list by 1\n        len_list = len(char_list)\n        char_list = char_list[:-1]\n\n        # Increment the rotation count\n        rotation_count += 1\n\n    # Return the rotation count\n    return rotation_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Find the length of the string\n    n = len(str)\n\n    # If the length of the string is 1, there is no rotation required\n    if n == 1: \n        return 0\n\n    # If the length of the string is 2 or more, there is a rotation required\n    count = 0\n\n    # Check all possible rotations of the string\n    for i in range(n): \n        for j in range(i+1, n): \n            if str[i:j+1] == str[j:i+1][::-1]: \n                count += 1\n\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n    \n    Parameters:\n    str (str): The string to be rotated.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    \n    # Calculate the frequency of each character in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Calculate the frequency of the first character in the string\n    first_char = str[0]\n    first_freq = freq.get(first_char, 0)\n    \n    # Calculate the frequency of the last character in the string\n    last_char = str[-1]\n    last_freq = freq.get(last_char, 0)\n    \n    # Calculate the frequency of the second last character in the string\n    second_last_char = str[-2]\n    second_last_freq = freq.get(second_last_char, 0)\n    \n    # Calculate the maximum frequency that can be obtained by rotating the first character to the last position\n    max_freq = max(first_freq, last_freq, second_last_freq)\n    \n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = max_freq - first_freq\n    \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n\n    # Split the string into a list of characters\n    chars = list(s)\n\n    # Find the index of the first occurrence of the character\n    first_index = chars.index(ch)\n\n    # Find the index of the last occurrence of the character\n    last_index = chars.rindex(ch)\n\n    # Remove the first and last occurrences of the character\n    del chars[first_index:last_index+1]\n\n    # Join the list of characters back into a string\n    s = ''.join(chars)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence of the character\n    s = s.replace(ch, '', 1)\n    # Remove last occurrence of the character\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.replace(ch,'',1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    # split the string into a list of characters\n    s_list = list(s)\n    \n    # initialize two variables to keep track of the index of the first and last occurrences of the character in the string\n    i = 0\n    j = len(s_list) - 1\n    \n    # loop through the list of characters\n    while i <= j:\n        # if the current character is equal to the given character, increment i\n        if s_list[i] == ch:\n            i += 1\n        # if the current character is not equal to the given character, decrement j\n        else:\n            j -= 1\n        # if the current character is not equal to the given character and j is greater than or equal to i, remove the current character from the string\n        if i <= j:\n            s_list.pop(i)\n    \n    # join the list of characters back into a string and return it\n    return ''.join(s_list)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    if ch not in s:\n        return s\n    else:\n        return s[:s.find(ch)] + s[s.rfind(ch)+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if s.count(ch) == 0:\n        return s\n    else:\n        if s.count(ch) == 1:\n            if s[0] == ch:\n                return s[1:]\n            elif s[-1] == ch:\n                return s[:-1]\n        else:\n            left = \"\"\n            right = \"\"\n            for i in range(len(s)):\n                if s[i] == ch:\n                    if i == 0:\n                        left = s[i+1:]\n                        break\n                    elif i == len(s)-1:\n                        right = s[:i]\n                        break\n                    else:\n                        left = s[i+1:i]\n                        right = s[:i-1]\n            return left + right"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if string is empty or None\n    if not s:\n        return None\n    # remove first occurrence of character from string\n    if s.startswith(ch):\n        return s[len(ch):]\n    # remove last occurrence of character from string\n    elif s.endswith(ch):\n        return s[:-len(ch)]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # initialize two variables to keep track of the first and last occurrence of the character\n    first_occurrence = -1\n    last_occurrence = -1\n    \n    # iterate through the string and keep track of the first and last occurrence of the character\n    for i in range(len(s)):\n        if s[i] == ch:\n            if first_occurrence == -1:\n                first_occurrence = i\n            last_occurrence = i\n            \n    # check if there is a first occurrence and a last occurrence\n    if first_occurrence == -1 or last_occurrence == -1:\n        return \"Character not found in the string\"\n    \n    # remove the first and last occurrence of the character from the string\n    s = s[:first_occurrence] + s[last_occurrence+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == 0:\n        s = s[1:]\n    elif s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a new list to store the sorted matrix\n    sorted_M = []\n\n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n\n        # Create a new list with the row values sorted in ascending order\n        sorted_row = sorted(row)\n\n        # Create a new list with the row and its sorted value\n        new_row = [row_sum] + sorted_row\n\n        # Append the new row to the sorted matrix\n        sorted_M.append(new_row)\n\n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Get the number of rows and columns in the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # Initialize two empty lists to store the sorted matrix and row sums\n    sorted_matrix = [[0] * m for _ in range(n)]\n    row_sums = []\n    \n    # Loop through each row of the matrix\n    for i in range(n):\n        # Get the row sum and sort it in ascending order\n        row_sums.append(sum(row))\n        sorted_row = sorted(M[i])\n        # Copy the sorted row to the sorted matrix\n        for j in range(m):\n            sorted_matrix[i][j] = sorted_row[j]\n    \n    # Sort the row sums in ascending order\n    row_sums.sort()\n    \n    # Create a new matrix that stores the sorted matrix based on the sorted row sums\n    sorted_matrix_final = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            sorted_matrix_final[i][j] = sorted_matrix[row_sums.index(row_sums[i])][j]\n    \n    return sorted_matrix_final"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # transpose the matrix\n    for i in range(n):\n        for j in range(i+1, n):\n            M[i][j], M[j][i] = M[j][i], M[i][j]\n    # sort each row in descending order\n    for i in range(n):\n        M[i] = sorted(M[i], reverse=True)\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Create a copy of the matrix\n    M_sorted = M.copy()\n\n    # Sort the rows of the matrix\n    for i in range(len(M_sorted)):\n        for j in range(len(M_sorted[i])):\n            for k in range(len(M_sorted[i]) - 1):\n                if M_sorted[i][k] > M_sorted[i][k + 1]:\n                    M_sorted[i][k], M_sorted[i][k + 1] = M_sorted[i][k + 1], M_sorted[i][k]\n\n    # Sort the columns of the matrix\n    for i in range(len(M_sorted)):\n        for j in range(len(M_sorted[i])):\n            for k in range(len(M_sorted) - 1):\n                if M_sorted[k][j] > M_sorted[k + 1][j]:\n                    M_sorted[k][j], M_sorted[k + 1][j] = M_sorted[k + 1][j], M_sorted[k][j]\n\n    # Print the sorted matrix\n    for row in M_sorted:\n        print(row)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # sort the matrix based on the sum of rows\n    sorted_M = sorted(M, key=lambda x: row_sums[M.index(x)])\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # loop through the rows of the matrix\n    for i in range(len(M)):\n        \n        # loop through the columns of the current row\n        for j in range(len(M[i])):\n            \n            # loop through the rest of the matrix to find the smallest value\n            for k in range(i, len(M)):\n                if M[k][j] < M[i][j]:\n                    M[i], M[k] = M[k], M[i]\n                    break\n            \n            # if the column is already sorted, break out of the inner loop\n            if j == len(M[i]) - 1:\n                break\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    # Initialize variables to store the row sums and the index of the row with the maximum sum\n    max_sum = 0\n    max_sum_row_index = 0\n    \n    # Loop through each row of the matrix\n    for row in range(len(M)):\n        # Initialize the sum of the current row to 0\n        row_sum = 0\n        \n        # Loop through each element in the current row\n        for elem in M[row]:\n            # Add the element to the row sum\n            row_sum += elem\n            \n            # Update the maximum sum and its corresponding row index if the row sum is greater than the current maximum sum\n            if row_sum > max_sum:\n                max_sum = row_sum\n                max_sum_row_index = row\n    \n    # Initialize a variable to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row in the matrix and add the elements in the row with the maximum sum to the sorted matrix\n    for row in range(len(M)):\n        if row == max_sum_row_index:\n            sorted_matrix.append(max_sum)\n        else:\n            sorted_matrix.append(M[row][max_sum_row_index])\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Find the sum of each row of the matrix\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the matrix based on the sum of each row\n    sorted_matrix = sorted(M, key=lambda x: row_sums.index(sum(x)))\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # Find the row with the maximum sum\n        max_row_sum = float('-inf')\n        max_row = None\n        for j in range(n):\n            if j!= i:\n                row_sum = sum(M[j])\n                if row_sum > max_row_sum:\n                    max_row_sum = row_sum\n                    max_row = j\n        # If there are multiple rows with the maximum sum, choose the one with the smallest index\n        if max_row is not None:\n            for j in range(n):\n                if j!= i and j!= max_row:\n                    if M[j][i] > M[max_row][i]:\n                        M[j], M[max_row] = M[max_row], M[j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # initialize an empty list to store the sorted matrix\n    sorted_matrix = []\n\n    # loop through each row of the matrix\n    for row in M:\n        # calculate the sum of the row\n        row_sum = sum(row)\n\n        # check if the sum is already in the sorted matrix\n        if row_sum in [sorted_matrix[i][0] for i in range(len(sorted_matrix))]:\n            # if it is, append the current row to the sorted matrix\n            sorted_matrix[-1].append(row)\n        else:\n            # if it isn't, initialize a new row and add it to the sorted matrix\n            new_row = [row_sum]\n            sorted_matrix.append(new_row)\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5 * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function will find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    volume = l * b * h / 6\n    \n    # return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the volume using the formula V = 1/6 * (area * height) \n    volume = (1/6) * l * b * h \n\n    # Return the calculated volume \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h/3\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism and returns the volume of the prism.\n    '''\n    area = (l * b * h) / 2.0 # calculating the area of the prism\n    volume = area * l # calculating the volume of the prism\n\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = l * b * h / 3 # formula to find volume of a triangular prism\n    \n    return volume # return the volume of the prism"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    underscore_pattern = r'(?<=[a-z])_+'\n    return bool(re.match(underscore_pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    # Define a regular expression pattern to match lowercase letters\n    pattern = re.compile(r'[a-z]+')\n    \n    # Use the search() method to search for matches in the input string\n    matches = pattern.findall(text)\n    \n    # Check if there are any matches\n    if matches:\n        # If there are matches, check if they are followed by an underscore\n        if text[matches[-1]+1] == '_':\n            # If the underscore is the second character after the last match, return true\n            return True\n        else:\n            # If the underscore is not the second character after the last match, return false\n            return False\n    else:\n        # If there are no matches, return false\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]*_[a-z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<![A-Z])[a-z]+(?![A-Z_])_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z][a-z0-9]*[_]?[a-z0-9]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z]+_[a-z]+)')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define the regex pattern to match lowercase letters joined with an underscore\n    pattern = re.compile(r'[a-z]+_')\n    # Return True if the pattern matches any part of the input string, otherwise False\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string (str): the input string\n        remove_chars (str): the string containing the characters to be removed\n\n    Returns:\n        str: the modified string with the specified characters removed\n    \"\"\"\n    # Convert the input strings to lists of Unicode characters\n    string_list = list(string)\n    remove_chars_list = list(remove_chars)\n\n    # Iterate over the input list of characters and remove any that are present in the remove_chars list\n    for char in string_list[:]:\n        if char in remove_chars_list:\n            string_list.remove(char)\n\n    # Convert the modified list back to a string and return it\n    return ''.join(string_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_set = string.lower()\n    unique_chars = set(char_set)\n    first_str = string\n    second_str = ''.join(chr(i) for i in range(NO_OF_CHARS) if chr(i) not in unique_chars)\n\n    # Removing characters from the first string which are present in the second string\n    first_str_without_chars = ''\n    for char in first_str:\n        if char not in second_str:\n            first_str_without_chars += char\n\n    return first_str_without_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string, exclude):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list\n    list_str = list(string)\n    # Remove the characters in the exclude list from the list\n    for char in exclude:\n        list_str.remove(char)\n    # Convert the list back to a string\n    result = ''.join(list_str)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Create a set of characters to remove from the first string\n    remove_set = set(string)\n\n    # Loop through each character in the first string and add it to a new list if it's not in the remove_set\n    list_str = []\n    for char in string:\n        if char not in remove_set:\n            list_str.append(char)\n\n    return ''.join(list_str)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    str1 = ''.join(char_list)\n    str2 = ''.join([c for c in string if c in str1])\n    return str2"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert string to list of characters\n    list_str = list(string)\n    # convert string to list of characters\n    list_chars = list(NO_OF_CHARS)\n    # remove characters in the first string from the second string\n    for char in list_str:\n        if char in list_chars:\n            list_chars.remove(char)\n    # convert the list of characters back to string\n    result = ''.join(list_chars)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = set(string.lower())\n    new_string = []\n    for char in string:\n        if char.lower() not in remove_chars:\n            new_string.append(char)\n    return ''.join(new_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            char_list.append(chr(i))\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # initialize the list of characters to be removed\n    remove_chars = set()\n    # read the second string and convert it to a set of characters\n    for char in string:\n        remove_chars.add(ord(char))\n    # read the first string and convert it to a list of characters\n    char_list = list(string)\n    # remove the characters from the list of characters to be removed\n    for char in char_list:\n        if ord(char) in remove_chars:\n            char_list.remove(char)\n    # convert the list of characters back to a string\n    result = ''.join(char_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = list(string)\n    for char in string:\n        if char not in char_list:\n            char_list.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n\n    # Check if the length of the unique set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        # if all elements of the array are unique, the function returns True\n        return True\n    else:\n        # otherwise, the function returns False\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set()\n\n    # Iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n\n    # Check if there are any duplicate elements in the set\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create an empty dictionary to store the indices of the elements in the array\n    indexdict = {}\n    \n    # Loop through the array of integers\n    for i in range(len(arraynums)):\n        # Check if the element is already in the dictionary\n        if arraynums[i] in indexdict:\n            # If the element is already in the dictionary, return True since there is a duplicate element\n            return True\n        else:\n            # If the element is not in the dictionary, add it to the dictionary with the current index\n            indexdict[arraynums[i]] = i\n    \n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create an empty dictionary to store unique numbers and their frequency\n    unique_nums = {}\n\n    # loop through the array and add each number to the dictionary\n    for num in arraynums:\n        if num not in unique_nums:\n            unique_nums[num] = 1\n        else:\n            unique_nums[num] += 1\n\n    # loop through the dictionary to find any duplicate numbers\n    for num in unique_nums:\n        if unique_nums[num] > 1:\n            return True\n\n    # if no duplicate numbers were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for num in arraynums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # check if any element has a count greater than 1\n    for count in count_dict.values():\n        if count > 1:\n            return True\n    \n    # if no duplicate element is found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique values of the array\n    unique_values = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the array\n    if len(unique_values) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the count of each element in the array\n    element_count = {}\n\n    # Iterate through the array and increment the count of each element in the dictionary\n    for num in arraynums:\n        if num in element_count:\n            element_count[num] += 1\n        else:\n            element_count[num] = 1\n\n    # Iterate through the dictionary and check if there is any element with a count greater than 1\n    for key, value in element_count.items():\n        if value > 1:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    # create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # check if the length of the unique set is the same as the length of the array\n    return len(unique_set) == len(arraynums)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 0: \n        return False\n    elif x == 0:\n        return True\n    else: \n        if x % 3 == 0: \n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x == 3 or x == 5 or x == 7 or x == 9:\n        return True\n    elif x % 3 == 0 or x % 5 == 0 or x % 7 == 0 or x % 9 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2:\n        return True\n    elif x % 2 == 0:\n        return False\n    else:\n        if (x - 1) % 6 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100 or x > 999: \n        return False\n    elif x % 10 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the set of numbers that are woodball\n    woodball_set = {1, 4, 7}\n    # Check if x is in the woodball set\n    if x in woodball_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%2==0 and x%5==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 8:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 4 or x == 5 or x == 8 or x == 10 or x == 15 or x == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Define the range of possible woodball numbers\n    woodball_range = range(1, 50)\n    \n    # Check if the given number is in the woodball range\n    if x in woodball_range:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    return int(num) < int(reversed_num) * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # converting the input number to a string to reverse it\n    rev_num = str(num)[::-1]\n    # converting the reverse number back to an integer and subtracting it from the original number\n    if int(num) - int(rev_num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    if reversed_num < 2 * num:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the given number\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    return abs(rev_num - num) <= 2 * (abs(num) // 2)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # find the reverse of the number\n    rev_num = int(num_str[::-1])\n    # calculate the difference between the original number and twice its reverse\n    diff = abs(num - (rev_num*2))\n    # return True if the difference is zero, otherwise False\n    if diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    reverse //= 2\n    return reverse == num - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to a number\n    rev_num = int(rev_str)\n    # Check if the reversed number is one less than twice the original number\n    if rev_num + 1 < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    rev_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n\n    # Check if the original number is one less than twice its reverse\n    if num == rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if reverse < 2 * num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num - reverse + 1"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sorting the given list in descending order\n    arr.sort(reverse=True)\n\n    # Initializing the maximum number to be 0\n    max_num = 0\n\n    # Looping through each digit of the list\n    for digit in arr:\n        # Adding the digit to the maximum number\n        max_num += digit\n\n        # If the maximum number becomes greater than 9, it means that the current digit is the start of a new number\n        if max_num > 9:\n            # Resetting the maximum number\n            max_num = 0\n\n    # Returning the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(2**n):\n        num = 0\n        for j in range(n):\n            if i & (1<<j):\n                num += arr[j]\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize the largest number and its length to zero\n    max_num = 0\n    max_len = 0\n\n    # Loop through all possible combinations of the digits\n    for i in range(1, 10):\n        for j in range(1, 10):\n            for k in range(1, 10):\n                for l in range(1, 10):\n                    for m in range(1, 10):\n                        for n in range(1, 10):\n                            for o in range(1, 10):\n\n                                # Check if the current combination is valid\n                                if i + j + k + l + m + n + o!= 10:\n                                    continue\n\n                                # Calculate the current number and check if it's greater than the current largest\n                                num = i * 100000000 + j * 10000000 + k * 1000000 + l * 100000 + m * 10000 + n * 1000 + o\n                                if num > max_num:\n                                    max_num = num\n                                    max_len = 10\n\n                                # Calculate the length of the current number and check if it's greater than the current longest\n                                length = len(str(num))\n                                if length > max_len:\n                                    max_len = length\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i]*(10**(len(arr)-i-1))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    \n    max_num = 0\n    for i in range(1, 10) :\n        count = 0\n        for j in range(len(arr)) :\n            if arr[j] == i :\n                count += 1\n        if count == 1 :\n            max_num = i\n            break\n        else :\n            max_num = 0\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #sort the digits in the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    #initialize the maximum number to 0\n    max_num = 0\n    #iterate through the sorted array\n    for digit in sorted_arr:\n        #multiply the maximum number by 10 and add the current digit to it\n        max_num = max_num * 10 + digit\n        #update the maximum number if the maximum number formed so far is greater than the current maximum number\n        if max_num > max_num:\n            max_num = max_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize variables\n    max_num = 0\n    cur_num = 0\n\n    # Loop through the digits\n    for digit in arr : \n\n        # Check if the current number can be formed with the current digit\n        if cur_num + digit <= 9 and cur_num + digit > max_num : \n            max_num = cur_num + digit\n        \n        # Update the current number\n        cur_num = cur_num * 10 + digit\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    \n    # Initialize max_num to 0\n    max_num = 0\n    \n    # Iterate through the list of digits\n    for num in arr :\n        \n        # Convert the digit to an integer\n        num = int(num)\n        \n        # Calculate the sum of digits in the number\n        sum_of_digits = sum([int(digit) for digit in str(num)])\n        \n        # If the sum of digits is greater than max_num, update max_num\n        if sum_of_digits > max_num :\n            max_num = sum_of_digits\n    \n    # Return the largest number that can be formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)) :\n        for j in range(i+1,len(arr)+1) :\n            num = 0\n            for k in range(i,j) :\n                num += arr[k]\n            if num > max_num :\n                max_num = num\n                \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # To sort the list of digits in descending order, we can use the sorted() function\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # The largest number can be formed by concatenating the digits in the sorted array\n    max_num = int(''.join(map(str, sorted_arr)))\n    \n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0: \n        return False \n    elif x < 0 and y < 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    \"\"\"\n    # check if both integers have the same sign\n    if x > 0 and y > 0 or x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs,\n    otherwise False.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if both the numbers have the same sign\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x*y < 0:\n        return \"The given two integers have opposite sign.\"\n    else:\n        return \"The given two integers have same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns a boolean value indicating whether they have opposite signs or not.\n    \"\"\"\n    return (x < 0 and y < 0) or (x > 0 and y > 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # check if the signs of the two numbers are opposite\n    if x * y < 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n    \"\"\"\n    if (x < 0 and y >= 0) or (x >= 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x, y):\n    if x == 0 or y == 0:\n        return \"Both numbers are zero\"\n    if x * y < 0:\n        return \"Both numbers have opposite sign\"\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    num = 1\n    while num <= n:\n        if num**2 + num**3 == 0:\n            return True\n        num += 1\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 0\n    while i*i + i*i*3 + i*i*5 + i*i*7 < n:\n        i += 1\n    return i*i + i*i*3 + i*i*5 + i*i*7\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (10**(n//2) + n)**2\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 0:\n        return \"Invalid input. n must be a non-negative integer.\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    else:\n        for i in range(2, n+1):\n            if is_octagonal(i) + is_octagonal(n-i) == n:\n                return is_octagonal(i)\n        return \"There does not exist an octagonal number with this value of n.\"\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n**2) - 3 * n + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is an octagonal number,\n    False otherwise.\n    \"\"\"\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the input is a square number\n    square_root = int(n ** 0.5)\n    if square_root ** 2!= n:\n        return False\n\n    # Check if the input is an octagonal number\n    is_octagon = True\n    for i in range(1, square_root + 1):\n        if n % (10 * i ** 2)!= 0:\n            is_octagon = False\n            break\n    if is_octagon:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    while b <= n:\n        a = a + b\n        b = 3 * a - 1\n    return a\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    def helper(m, n):\n        if n == 0:\n            return m\n        return helper(m * 2 + 1, n - 1)\n\n    return helper(1, n // 2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # first, find the 2x2 grid with the largest value (a1)\n    a1 = 1\n    while a1 * a1 <= n:\n        a1 += 1\n\n    # then, calculate the value of the nth octagonal number\n    nth_octagonal = a1 * (2 * a1 - 1)\n\n    return nth_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (10*n*n - 1) // 8"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    sub_count = defaultdict(int)\n\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub = s[i:j+1]\n            if sum([int(x) for x in sub]) == len(sub):\n                count += 1\n                sub_count[sub] += 1\n\n    return count, sub_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    for i in range(len(s)):\n        digit_count[int(s[i])] += 1\n\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            total_digit_sum = sum(int(digit) for digit in substring)\n            if total_digit_sum == len(substring):\n                count += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    # create a defaultdict to store the counts of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # check if the substring has sum of digits equal to its length\n            digits_sum = sum([int(digit) for digit in s[i:j]])\n            if digits_sum == len(s):\n                # add the count of this substring to the count_dict\n                count_dict[j] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[i] += sum(int(digit) for digit in s[i])\n        if count[i] == len(s[i]):\n            count[i] += 1\n            \n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with sum of digits equal to their length\n    substrings = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Extract the substring from s\n            substring = s[i:j]\n            # Check if the substring contains digits only\n            if substring.isdigit():\n                # Calculate the sum of digits in the substring and store the count of substrings in the dictionary\n                substrings[sum(int(digit) for digit in substring)] += 1\n\n    # Return the count of substrings with sum of digits equal to their length\n    return sum(substrings.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # Iterate through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum(int(d) for d in s[i:j+1]) == len(s[i:j+1]):\n                # Increment the count of substrings with the given sum\n                count[sum(int(d) for d in s[i:j+1])] += 1\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    substrings = defaultdict(int)\n    for i in range(n):\n        substrings[i] = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            substrings[j] += substrings[i]\n    count = 0\n    for i in range(n):\n        count += substrings[i]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the count of substrings with the given conditions\n    substring_count = defaultdict(int)\n\n    # iterate through each character in the string\n    for i in range(len(s)):\n        # check if the substring has a sum of digits equal to its length\n        substring_count[s[i]] += 1\n        substring_count[s[i]] += sum(int(digit) for digit in str(s[i]))\n\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize the dictionary to store the count of substrings with the given sum of digits\n    substrings = defaultdict(int)\n\n    # Iterate over all the substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring\n            substring = s[i:j]\n\n            # Calculate the sum of digits in the substring\n            sum_digits = sum(int(digit) for digit in substring)\n\n            # Check if the sum of digits is equal to the length of the substring\n            if sum_digits == len(substring):\n                # Increment the count of substrings with the given sum of digits\n                substrings[sum_digits] += 1\n\n    # Return the count of substrings\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub = s[i:j+1]\n            count[sum(int(d) for d in sub)] += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list `xs` as input and returns the smallest number in the list.\n    '''\n    # Initialize the smallest number variable to the first element of the list\n    smallest = xs[0]\n    # Iterate over the rest of the elements of the list\n    for x in xs[1:]:\n        # If the current element is smaller than the smallest number, update the smallest number variable\n        if x < smallest:\n            smallest = x\n    # Return the smallest number found in the list\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a Python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list of tuples in ascending order\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to store the maximum and minimum difference\n    max_diff = float('-inf')\n    min_diff = float('inf')\n\n    # Iterate over the list of tuples\n    for i in range(len(sorted_list) - 1):\n        # Calculate the difference between the current and next tuples\n        diff = sorted_list[i+1][0] - sorted_list[i][0]\n\n        # Update the maximum and minimum differences\n        if diff > max_diff:\n            max_diff = diff\n        elif diff < min_diff:\n            min_diff = diff\n\n    # Return the maximum difference between available pairs\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i][1]-test_list[j][1]) > max_diff:\n                max_diff = abs(test_list[i][1]-test_list[j][1])\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    \n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if j < len(test_list)-1 and test_list[j][1] > test_list[j+1][1]:\n                continue\n            \n            diff = test_list[i][1] - test_list[j][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = max(test_list[i][j], test_list[j][i]) - min(test_list[i][j], test_list[j][i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # initialize variables to keep track of the maximum and minimum values in the list\n    max_diff = float('-inf')\n    min_val = float('inf')\n\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # calculate the difference between the current value and the next value in the list\n        diff = test_list[i][1] - test_list[i+1][1]\n\n        # update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n        # update the minimum value if the current value is smaller\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    This function finds the maximum difference between available pairs in the given tuple list.\n    \n    Parameters:\n    test_list (tuple list): A list of tuples, where each tuple contains two integers.\n    \n    Returns:\n    int: The maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Initialize variables\n    max_diff = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Iterate through the remaining tuples\n        for j in range(i+1, len(test_list)):\n            # Calculate the difference between the current pair\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            # Update the maximum difference if necessary\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i][1] - test_list[j][1]))\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0]-test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    \n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Sorts a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    # Base case: if the list is empty or has only one element, return it as is\n    if len(data_list) == 0 or len(data_list) == 1:\n        return data_list\n    \n    # Recursive case: otherwise, add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_list(lst):\n        if not lst:\n            return []\n        elif isinstance(lst, list):\n            return flatten_list(lst[0]) + flatten_list(lst[1:])\n        else:\n            return [lst]\n\n    def sum_flattened_list(lst):\n        if not lst:\n            return 0\n        else:\n            return lst[0] + sum_flattened_list(lst[1:])\n\n    flattened_list = flatten_list(data_list)\n    return sum_flattened_list(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flat_list = []\n        for item in data_list:\n            flat_list.extend(recursive_list_sum(item))\n        return flat_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        result = []\n        for item in lst:\n            if type(item) == list:\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: if the list has at least one element,\n    # flatten the first element and call the function on the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Helper function to flatten a list recursively\n    def flatten(data_list, result):\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item, result)\n        else:\n            result.append(data_list)\n\n    # Flatten the list recursively\n    flattened_list = []\n    flatten(data_list, flattened_list)\n\n    # Sum all the elements in the flattened list\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        total = 0\n        for item in data_list:\n            total += recursive_list_sum(item)\n        return total\n    else:\n        return data_list"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the count of ways to partition the set of Bell numbers\n    ways = [0] * (n+1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n+1):\n        ways[i] = ways[i-1] + ways[i-2]\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Bell numbers are defined as the number of ways to partition a set of n elements into two disjoint subsets of equal size\n    # We can calculate the number of ways to partition a set of Bell numbers by counting the number of partitions of the set\n    # into two disjoint subsets of size 1, 2, 3,... up to n\n\n    # To count the number of partitions of the set into two disjoint subsets of size 1, 2, 3,... up to n, we need to count the number of \n    # subsets that are made of only one element. In other words, we can use the binomial coefficient formula to calculate this.\n    \n    # The binomial coefficient formula for k! over n! is: (n choose k) / (k! * (n - k)!)\n\n    # We can use this formula to calculate the number of ways to partition a set of Bell numbers into two disjoint subsets of size 1, 2, 3,... up to n\n\n    # To calculate the number of ways to partition a set of Bell numbers into two disjoint subsets of size 1, 2, 3,... up to n, we can multiply \n    # together the binomial coefficients for the number of ways to partition a set of Bell numbers into two disjoint subsets of size 1, 2, 3,... \n    # up to n-1 and a subset of size 1, 2, 3,... up to the number of elements in the first subset.\n\n    # Therefore, the number of ways to partition a set of Bell numbers into two disjoint subsets of size 1, 2, 3,... up to n is:\n\n    # P(n) = P(n-1) * C(n, 1) * C(n, n-1)\n\n    # where P(n) is the number of ways to partition a set of n elements into two disjoint subsets of equal size, C(n, k) is the binomial \n    # coefficient for the number of ways to partition a set of n elements into two disjoint subsets of size 1, 2, 3,..., k, and \n    # C(n, n-k) is the binomial coefficient for the number of ways to partition a set of n elements into two disjoint subsets of size 1, 2, 3,..., \n    # n-k.\n\n    # Let's write a Python function to calculate the number of ways to partition a set of Bell numbers into two disjoint subsets of size 1, 2, 3,... up to n:\n\n    def partition_bell_numbers(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 2\n        else:\n            return partition_bell_numbers(n-1) * (n * (n-1)) // 2\n\n    # Let's test the function:\n\n    print(partition_bell_numbers(10)) # Output: 1300800"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize the sum of Bell numbers\n    sum_Bell = 0\n\n    # Iterate through the range of Bell numbers\n    for i in range(1, n+1):\n\n        # Calculate the sum of Bell numbers up to i\n        sum_Bell += (i*i)\n\n        # If the sum of Bell numbers up to i is greater than n, break the loop\n        if sum_Bell > n:\n            break\n\n    # Calculate the number of ways to partition the set of Bell numbers\n    return sum_Bell"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 1:  \n        return 0\n    elif n == 1:  \n        return 1\n    else:  \n        return (2 * n) + bell_number(n-1)\n\nprint(bell_number(5))   # Output: 15"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize a list to store the count of ways for each value of n\n    ways = [0] * (n + 1)\n    # Base case for n = 0 and n = 1\n    ways[0] = 1\n    ways[1] = 1\n    # Iterate through all values of n from 2 to n\n    for i in range(2, n + 1):\n        # Compute the number of ways to partition the set of Bell numbers\n        # with i elements\n        ways[i] = ways[i - 1] + ways[i - 2]\n    # Return the total count of ways to partition the set of Bell numbers\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return bell_number(n // 2) * bell_number(n // 2)\n    else:\n        return bell_number(n - 1) * bell_number(n - 1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition to 1\n    ways = 1\n    \n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # If n is a power of 2, set the number of ways to partition to n\n        ways = n\n        \n    # If n is not a power of 2, iterate through all numbers between 0 and n-1\n    else:\n        for i in range(n):\n            # Check if i is a power of 2\n            if i & (i-1) == 0:\n                # If i is a power of 2, add the number of ways to partition to the number of ways to partition to i\n                ways += ways * i\n            else:\n                # If i is not a power of 2, multiply the number of ways to partition to i with the number of ways to partition to (i-1)\n                ways *= (i-1)\n    \n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The upper bound for the Bell numbers.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    # Initialize a dictionary to store the number of ways to partition each set of Bell numbers\n    ways = {}\n    \n    # Initialize the first set of Bell numbers\n    bell = [1]\n    # The first set is always a partition\n    ways[tuple(bell)] = 1\n    \n    # Iterate over the upper bound for Bell numbers\n    for i in range(2, n+1):\n        # Add all possible partitions of the current set of Bell numbers\n        for partition in ways:\n            # Create a new partition by appending the current Bell number\n            new_partition = partition + [i]\n            # Increment the count of the new partition\n            ways[new_partition] = ways.get(new_partition, 0) + ways.get(partition, 0)\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways[(n,)]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    if n == 0:\n        return 1\n\n    if n == 1:\n        return 1\n\n    bell = 1\n    for i in range(2, n+1):\n        bell *= i\n        bell //= i\n\n    return bell"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    # Initialize the bell number of 0, 1, and n\n    bell = [1, 1, 1]\n\n    # Compute the bell number of each integer between 2 and n\n    for i in range(2, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n\n    # Return the nth bell number\n    return bell[n]"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        return is_Monotonic(A[1:])\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    if len(A) < 3:\n        return True\n    \n    if A[0] == A[-1]:\n        return is_Monotonic(A[1:-1])\n    \n    if A[0] < A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    \n    if A[0] > A[-1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] <= A[-1]:\n        return all(A[i] <= A[i+1] for i in range(len(A)-1))\n    else:\n        return all(A[i] >= A[i+1] for i in range(len(A)-1))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # Initialize variables for keeping track of the previous and current elements\n    prev = A[0]\n    curr = A[1]\n    \n    # Check if the array is monotonic based on the sign of the first and last elements\n    if curr * prev >= 0: \n        for i in range(2, len(A)): \n            # Check if the current element is smaller than the previous element\n            if curr * A[i] <= 0: \n                return False\n            \n            # Update the previous element and the current element\n            prev = curr\n            curr = A[i]\n    \n    # If the last element is zero, we can't check the direction of the array\n    if A[-1] == 0: \n        return True\n    \n    # Check if the array is monotonic based on the sign of the first and last elements\n    if curr * A[-1] <= 0: \n        return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # Initialize variables for the first and last elements\n    first = A[0]\n    last = A[-1]\n\n    # Check if the array is monotonic in the positive direction\n    positive_monotonic = True\n    for i in range(1, len(A) - 1):\n        if A[i] >= A[i - 1] and A[i] >= A[i + 1]:\n            positive_monotonic = False\n            break\n        elif A[i] > A[i - 1]:\n            positive_monotonic = True\n\n    # Check if the array is monotonic in the negative direction\n    negative_monotonic = True\n    for i in range(1, len(A) - 1):\n        if A[i] <= A[i - 1] and A[i] <= A[i + 1]:\n            negative_monotonic = False\n            break\n        elif A[i] < A[i - 1]:\n            negative_monotonic = True\n\n    # Check if both monotony types are the same\n    return positive_monotonic == negative_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] >= A[1]:\n        if A[-1] <= A[-2]:\n            return True\n        else:\n            return False\n    else:\n        if A[-1] <= A[-2]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2:\n        return True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize the previous element and a flag to check if the array is monotonic or not\n    prev = A[0]\n    is_monotonic = True\n    \n    # Iterate over the array and check if the current element is monotonic\n    for i in range(1, len(A)):\n        if A[i] <= prev:\n            is_monotonic = False\n            break\n        prev = A[i]\n    \n    return is_monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    if A[0] <= A[1]: \n        for i in range(1, len(A)): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array has only one element\n    if len(A) == 1: \n        return True\n\n    # Check if all the elements are the same\n    if A[0] == A[-1]: \n        return True\n\n    # Check if the array is monotonic\n    if A[1] >= A[0]: \n        for i in range(1, len(A)-1): \n            if A[i] <= A[i-1]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)-1): \n            if A[i] >= A[i-1]: \n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) > len(s):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    for i in l:\n        if i in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return l in s"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)):\n        if s[0] == l[i]:\n            if is_sublist(l[i+1:], s[1:]):\n                return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all tuples have equal length, and False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in Input]\n    return all(len(t) == lengths[0] for t in Input)"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if all the tuples have the same number of elements\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        if len(Input[i])!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # Check whether all tuples have equal length or not\n    for tup in Input:\n        if len(tup)!= len(Input[0]):\n            return False\n\n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # initializing a variable to keep track of the number of tuples in the list\n    count = 0\n    \n    # iterating over the list of tuples\n    for tup in Input:\n        # checking if the length of each tuple is equal or not\n        if len(tup) == len(Input[0]):\n            # incrementing the count variable if all the tuples have equal length\n            count += 1\n    \n    # checking if all the tuples have equal length or not\n    if count == len(Input):\n        # printing a message if all the tuples have equal length\n        print(\"All the tuples have equal length.\")\n    else:\n        # printing a message if any of the tuples have different length\n        print(\"Some of the tuples have different length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # checking if the list of tuples is empty or not\n    if not Input:\n        return \"The list is empty\"\n    \n    # checking if all the tuples have equal length or not\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return \"The tuples have different length\"\n    \n    return \"All the tuples have equal length\""
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    gap = len(nums) // 2  # initialize gap\n    swapped = True  # initialize swapped\n\n    while swapped:\n        swapped = False  # reset swapped flag\n\n        for i in range(gap):\n            # if current element is greater than next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True  # mark as swapped\n\n        gap //= 1  # reduce gap by a factor of 2\n\n        # if gap is reduced to 1 or is less than 1, the list is sorted\n        if gap < 1:\n            break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    \n    while gap > 1 or swapped:\n        if gap > 1:\n            gap = int(gap/1.3)\n            if gap < 1:\n                gap = 1\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] > nums[i-gap]:\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n                swapped = True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = gap // 10\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    swapped = True\n    gap = len(nums)\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap/1.3) if gap > 1 else 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # initialize variables\n    n = len(nums)\n    max_swaps = 0\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n                max_swaps += 1\n    \n    print(\"Sorted list is:\", nums)\n    print(\"Number of swaps:\", max_swaps)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    # initialize the gap and start swapping variables\n    gap = len(nums)\n    start_swapping = True\n\n    # while the gap is greater than 1 and start swapping is True\n    while gap > 1 and start_swapping:\n        start_swapping = False\n        # calculate the new gap value using a formula\n        gap = (gap * 10) // 13\n\n        # iterate through the list and swap adjacent elements if they are in the wrong order\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                start_swapping = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Start with a gap of size 1\n    gap = len(nums) // 2\n\n    while gap > 0:\n        # Sort the array using a single gap sort\n        for i in range(gap, len(nums)):\n            # Move the current element to its correct position\n            j = i\n            while j >= gap and nums[j] < nums[j-gap]:\n                # Swap the elements if they are in the wrong order\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                j -= gap\n            # Print the sorted array\n            print(nums)\n        # Decrease the gap\n        gap //= 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Sort a list of elements using the Comb sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    start = 0\n    end = n - 1\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        end -= 1\n        if end - start <= 1:\n            break\n        start += 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # define a function to swap elements in the list\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a function to determine if the list is sorted\n    def is_sorted(nums):\n        for i in range(n - 1):\n            if nums[i] > nums[i + 1]:\n                return False\n        return True\n\n    # start the sorting process\n    i = 1\n    while not is_sorted(nums):\n        # iterate through the list n - i elements at a time\n        for j in range(0, n - i):\n            # if the current element is greater than the next element, swap them\n            if nums[j] > nums[j + 1]:\n                swap(j, j + 1)\n        # increment i until the list is sorted\n        i += 1"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef isPerfectSquare(n):\n    return math.sqrt(n) == int(math.sqrt(n))\n\ndef dif_Square(n):\n    if isPerfectSquare(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Find the square root of the given number\n    root = n ** 0.5\n\n    # Check whether the given number can be represented as the difference of two squares or not\n    if root ** 2 == n:\n        return True\n    else:\n        # Check whether the given number can be represented as the difference of two squares or not\n        if n % root == 0 and root ** 2 % n == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # If the number is less than 1, it cannot be represented as a difference of two squares\n    if n < 1:\n        return False\n\n    # Find the square root of the number\n    sqrt_n = round(n ** 0.5)\n\n    # Check if the square root is a power of 2\n    if sqrt_n ** 2 == n:\n        return False\n\n    # Check if the difference between the square root and its integer part is a square\n    if (sqrt_n - int(sqrt_n)) ** 2 == n:\n        return True\n\n    # If the number cannot be represented as a difference of two squares, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = 0\n    y = 0\n    while n > 0:\n        x = x*10 + n % 10\n        n //= 10\n    while n > 0:\n        y = y*10 + n % 10\n        n //= 10\n    return x == y*y"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #check if the given number is a power of two \n    if n == 2 ** int(n ** 0.5): \n        return True \n    else: \n        #check for all possible differences of squares and check if n can be represented as one of them \n        for i in range(1, int(n ** 0.5) + 1): \n            j = int(n ** 0.5) - i \n            if i * i + j * j == n: \n                return True \n            elif j * j + i * i == n: \n                return True \n        return False "
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is a power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # Calculate the square of the number\n    def square(num):\n        return num * num\n\n    # Calculate the difference of squares\n    def diff_squares(num):\n        if is_power_of_two(num):\n            return 0\n        elif num % 4 == 0:\n            return square(num) - square(num//4) - square(num//2) + square(num//8)\n        else:\n            return square(num) - square(num//2) + square(num//4) - square(num//8)\n\n    # Check if the number can be represented as the difference of two squares or not\n    if diff_squares(n) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    #initialize the square of the given number\n    square = n*n\n    #check whether the square can be represented as the difference of two squares\n    while square >= 4:\n        if square % 4 == 0:\n            return True\n        else:\n            square = (square-2)//4\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sqrt_n = int(n**0.5)\n    for i in range(sqrt_n, 0, -1):\n        if n%i==0 and n//i==i**2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Take the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check whether the square of the square root is equal to the given number\n    if sqrt_n * sqrt_n == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is positive\n    if n < 0: \n        print(\"Number must be positive\") \n        return\n    # square the number and find its square root\n    square = n * n \n    root = square ** 0.5\n    # check if the given number is an integer multiple of its square root\n    if n % int(root)!= 0:\n        print(n, \"can be represented as the difference of two squares\") \n    else:\n        print(n, \"can't be represented as the difference of two squares\") "
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    n = len(colors)\n    if n!= len(patterns):\n        return False\n\n    for i in range(n):\n        if patterns[i]!= colors[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    # Initialize the pattern index\n    p_index = 0\n\n    # Loop through the colors\n    for i in range(len(colors)):\n        # Check if the current color matches the current pattern\n        if colors[i] == patterns[p_index]:\n            # If it does, increment the pattern index\n            p_index += 1\n            if p_index == len(patterns):\n                # If we reached the end of the pattern, return True\n                return True\n\n    # If we reach here, we didn't find a pattern that matches the colors\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    for i in range(len(colors)):\n        if colors[i] in patterns[i]:\n            sequence.append(colors[i])\n\n    for pattern in patterns:\n        if sequence!= pattern:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists as arguments, colors and patterns.\n    Colors is a list of integers representing the colors of each tile on the board.\n    Patterns is a list of lists where each sublist contains the sequence of colors for a tile.\n\n    The function returns True if the sequence of colors of each tile follows the sequence given in patterns,\n    and False otherwise.\n\n    For example, if colors = [1, 2, 3, 4, 5] and patterns = [[1, 2, 3], [2, 3, 4]], then the function\n    should return True because the first tile has colors 1, 2, and 3, which are in the first pattern [[1, 2, 3]],\n    while the second tile has colors 2, 3, and 4, which are in the second pattern [[2, 3, 4]].\n\n    If the function is unable to determine whether the sequence of colors of each tile follows the sequence\n    given in patterns, it should return None.\n\n    Note: The lengths of colors and patterns should be equal.\n    '''\n\n    if len(colors)!= len(patterns):\n        return None\n\n    for i in range(len(colors)):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    i = 0\n    while i < n:\n        if colors[i] in patterns[i]:\n            i += 1\n        else:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # check if all the colors in the colors array are present in the patterns array\n    for color in colors:\n        if color not in patterns:\n            return False\n\n    # check if there are any empty spaces in the patterns array\n    for pattern in patterns:\n        if pattern == \"\":\n            return False\n\n    # check if the patterns are of the same length\n    if len(patterns)!= len(colors):\n        return False\n\n    # check if the patterns are consecutive in the patterns array\n    for i in range(len(patterns)):\n        if patterns[i]!= patterns[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Initialize variables\n    count = 0\n    pattern = []\n\n    # Loop through the colors and patterns arrays\n    for i in range(len(colors)):\n        if colors[i] == pattern[0]:\n            pattern.append(colors[i])\n            count += 1\n        else:\n            pattern = [colors[i]]\n\n    # Check if all patterns have been used\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if the length of colors and patterns are same\n    if len(colors)!= len(patterns):\n        return False\n    \n    # check if all the colors are present in the patterns\n    for color in colors:\n        if color not in patterns:\n            return False\n    \n    # check if the patterns follow the sequence\n    for i in range(len(patterns)):\n        if patterns[i]!= (colors[i] + colors[i+1] + colors[i+2]):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    This function takes two lists as input: colors and patterns. The colors list contains the colors that are to be matched in the patterns list.\n    The patterns list contains a sequence of patterns that each match the corresponding color in the colors list.\n\n    The function returns True if it follows the sequence given in the patterns list, and False otherwise.\n    \"\"\"\n    # Define a helper function to check if a pattern is valid\n    def is_valid_pattern(pattern):\n        \"\"\"\n        This function takes a pattern as input and returns True if it is a valid pattern, and False otherwise.\n        A valid pattern is a string of length 2, where the first character is uppercase and the second character is lowercase.\n        \"\"\"\n        # Check if the pattern is a string with exactly 2 characters and if the first character is uppercase and the second character is lowercase\n        if len(pattern)!= 2:\n            return False\n        if not pattern[0].isupper():\n            return False\n        if not pattern[1].islower():\n            return False\n        return True\n    \n    # Check if the length of the colors list is the same as the length of the patterns list\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Iterate over the colors list and check if each pattern is valid\n    for i in range(len(colors)):\n        if not is_valid_pattern(patterns[i]):\n            return False\n    \n    # If all the patterns are valid, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # iterate through the colors and patterns arrays\n    for i in range(len(colors)):\n        # check if the current color matches the corresponding pattern\n        if colors[i] == patterns[i]:\n            # if it does, move on to the next color and pattern\n            continue\n        else:\n            # if it doesn't, return False\n            return False\n    # if the loop completes without returning False, it means the sequence is correct\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Filter out the tuples with non-divisible elements\n    divisible_tuples = [t for t in test_list if all(x % K == 0 for x in t)]\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    # create a new list to store tuples which have all elements divisible by K\n    result = []\n    # loop through each tuple in the input list\n    for i in range(len(test_list)):\n        # loop through each element of the current tuple\n        for j in range(len(test_list[i])):\n            # if the current element is not divisible by K, move on to the next iteration of the inner loop\n            if test_list[i][j] % K!= 0:\n                break\n            # if all elements in the current tuple are divisible by K, add it to the result list\n            elif j == len(test_list[i]) - 1:\n                result.append(test_list[i])\n                break\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] % K == 0 and test_list[j][i] % K == 0:\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(t[0], t[1]) for t in test_list if all(t[i] % K == 0 for i in range(2))]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    filtered_tuples = []\n    for tuple in test_list:\n        all_elements_divisible_by_K = all(True for element in tuple if element % K == 0)\n        if all_elements_divisible_by_K:\n            filtered_tuples.append(tuple)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a set to keep track of the indices of the current tuples\n    current_set = set()\n    # initialize the result list\n    result = []\n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # if the current tuple is already in the result list, continue\n        if i in current_set:\n            continue\n        # initialize a counter for the number of elements in the current tuple\n        count = 0\n        # loop through the tuple and increment the counter if the element is divisible by k\n        for j in test_list[i]:\n            if j % K == 0:\n                count += 1\n        # if all elements in the current tuple are divisible by k, add the index to the result list and mark it as a current tuple\n        if count == len(test_list[i]):\n            current_set.add(i)\n            result.append(i)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create an empty list to store the tuples that meet the condition\n    result = []\n    # loop through the list of tuples\n    for tup in test_list:\n        # check if all the elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # add the tuple to the result list\n            result.append(tup)\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    # Check whether the number is divisible by 11 or not\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    '''\n    This function checks whether a given number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is divisible by 11 else False.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    This function checks whether a given number is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n\n    # Loop through each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            # If the length is odd, return True\n            return True\n\n    # If the loop completes without finding an odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as an input and returns True if the length of the word is odd, and False otherwise.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    This function takes a string as input and returns a boolean value True or False, indicating whether the length of the word is odd or not.\n    '''\n    word_list = s.split()  # Split the string into a list of words\n    \n    for word in word_list:  # Iterate over each word in the list\n        if len(word) % 2!= 0:  # Check if the length of the word is odd\n            return True\n    \n    return False  # If no odd length word is found, return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"Even length\"\n        else:\n            return \"Odd length\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns True if the length of the word is odd, False otherwise.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # iterate over the words\n    for word in words:\n        # get the length of the word\n        length = len(word)\n        # check if the length of the word is odd\n        if length % 2 == 1:\n            # return True if the length of the word is odd\n            return True\n    # if we have gone through the whole list of words and haven't found any odd length, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} has even length.\")\n        else:\n            print(f\"{word} has odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(word, \"is an odd length\")\n        else:\n            print(word, \"is an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the string to lowercase to avoid case sensitive comparison\n    s = s.lower()\n    # Initialize a counter for the number of odd characters in the word\n    odd_count = 0\n    # Iterate through the characters in the word\n    for char in s:\n        # If the character is an odd number, increment the counter\n        if ord(char) % 2!= 0:\n            odd_count += 1\n    # Check if the length of the word is odd or even\n    if odd_count == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    # Split the string into words using whitespace as a separator\n    words = s.split()\n    # Iterate over each word in the list and calculate its length\n    for word in words:\n        if len(word) % 2 == 1:\n            print(\"The length of the word is odd\")\n        else:\n            print(\"The length of the word is even\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: return 1 for n = 0 and 1 for n = 1\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    \n    # Define the first two tetrahedral numbers\n    t1 = n * (n - 1) // 2\n    t2 = (3 * n ** 2) - (3 * n) + 1\n    \n    # Iterate through the rest of the tetrahedral numbers\n    for i in range(2, n + 1):\n        # Calculate the current tetrahedral number\n        tn = t1 + i * (t2 - t1)\n        \n        # Check if it is greater than the nth tetrahedral number\n        if tn > n * (n - 1) // 2:\n            return tn\n    \n    # If we make it here, the nth tetrahedral number must be greater than or equal to n\n    return -1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the formula for tetrahedral numbers\n    tetrahedral_formula = (1 + 8*n**2 + 24*n**3) / 6\n    \n    # Calculate the nth tetrahedral number\n    nth_tetrahedral = int(tetrahedral_formula)\n    \n    # Return the nth tetrahedral number\n    return nth_tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    if n == 1:\n        return 4\n    else:\n        return 2 * n * (n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return 4 * n * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the function recursively\n    def tetrahedral_number_recursive(n, a=1, b=1, c=1, d=0):\n        if n == 0:\n            return 1\n        else:\n            return a + b + c + d + tetrahedral_number_recursive(n-1, b+c, a+d, a+b)\n\n    # Call the function with the given argument\n    return tetrahedral_number_recursive(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. n must be a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4*n**2 - 6*n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # The first tetrahedral number is 1\n    if n == 1:\n        return 1\n    # Otherwise, the nth tetrahedral number is the sum of the (n-1)th and (n-2)th tetrahedral numbers\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Base case: if n is 0 or 1, the tetrahedral number is 0\n    if n <= 1:\n        return 0\n    \n    # Recursive case: compute the tetrahedral number recursively\n    else:\n        return 4 * n * (n + 1) / 3 - n * (n + 1) // 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    for i in range(n):\n        a, b, c, d = b, c, d, a + b + c + d\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a += i*i*i\n    return a"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ASCII_value = 97 #initializing the ASCII value of a to be 97\n    \n    #looping through each character in the string\n    for char in strr:\n        #adding the ASCII value of the current character to the ASCII value of a\n        ASCII_value += ord(char)\n        \n        #checking if the ASCII value of a is greater than 25\n        if ASCII_value > 25:\n            #if it is, resetting it to 0\n            ASCII_value = 97\n            \n    #converting the ASCII value to the corresponding character and returning it\n    return chr(ASCII_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the result string\n    result = ''\n    # Loop through each character of the string\n    for char in strr:\n        # Convert the character to an integer\n        ascii_value = ord(char)\n        # Add the ASCII value to the result string modulo 26\n        result += chr((ascii_value + 26) % 26)\n    # Return the result string\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for char in strr:\n        char_val += ord(char)\n    char_val %= 26\n    if char_val < 0:\n        char_val += 26\n    return chr(char_val)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str_length = len(strr)\n    char_sum = 0\n    for i in range(str_length):\n        char_sum += ord(strr[i])\n    return chr((char_sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n\n    char_value %= 26\n    return chr(65 + char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the sum of ASCII values of the characters of the string to 0\n    char_sum = 0\n    # Loop through each character of the string and add its ASCII value to the sum\n    for i in strr:\n        char_sum += ord(i)\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr((char_sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    return chr((ascii_sum % 26) + 65)\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [2, 1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] * 2)\n        else:\n            sequence.append(sequence[-1] + 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    count = 2\n    while count < n:\n        sequence.append(sequence[-1] + sequence[-2])\n        count += 1\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35, 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 43, 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    # initialize the sequence with 1\n    sequence = [1]\n    # loop n-1 times\n    for i in range(1, n):\n        # for each iteration, append the sum of the previous two numbers in the sequence\n        sequence.append(sequence[i-1] + sequence[i-2])\n    # return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 0\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    while len(sequence) < n:\n        sequence.append(sum(sequence[-2:]))\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the sequence\n    sequence = [1]\n\n    # Loop through the sequence until n is reached\n    while len(sequence) < n:\n        # Generate the next sequence\n        new_sequence = [sequence[-1] + sequence[-2], sequence[-1] * 3]\n\n        # Check if the new sequence contains a 0, which means it has lost a cell\n        if 0 in new_sequence:\n            # Remove the 0 from the sequence and continue to the next iteration\n            sequence.remove(0)\n        else:\n            # Append the new sequence to the sequence list\n            sequence += new_sequence\n\n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 0]\n    for i in range(2, n+1):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, "
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r**3\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in a radius value and returns the surface area of a sphere with that radius.\n    '''\n    area = (4/3)*math.pi*r**3\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4/3) * math.pi * r ** 3\n    return surface_area\n\nprint(surfacearea_sphere(1)) # Output: 42.83720231004367"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n\n    # calculate the surface area using formula\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Find the distance from the center of the hexagon to the nth side\n    distance = (2 * n) + 1\n    \n    # The centered hexagonal number is the distance from the center of the hexagon to the nth side\n    return distance"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 8\n    while a <= n:\n        print(a)\n        a += b\n        b -= 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the nth centered hexagonal number\n    centered_hexagonal = (n - 1) // 2\n    return 2 * centered_hexagonal + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n and returns the nth centered hexagonal number.\n\n    The centered hexagonal number is the sum of the centered triangular numbers.\n\n    centered_hexagonal_number(5) = 4 + 10 = 14\n    centered_hexagonal_number(10) = 6 + 18 + 30 = 42\n    centered_hexagonal_number(20) = 10 + 40 + 100 = 142\n    '''\n\n    def centered_triangular_number(n):\n        '''\n        This function takes an integer n and returns the nth centered triangular number.\n        '''\n        return (n * (n + 1)) // 2\n\n    return centered_triangular_number(n) + n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 25\n    elif n == 4:\n        return 125\n    elif n == 5:\n        return 625\n    \n    # Recursive case\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2) + centered_hexagonal_number(n-3)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 0\n    b = 1\n    while b <= n:\n        print(a, end=' ')\n        a += b\n        b += 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first three centered hexagonal numbers\n    first_centered_hexagonal = 1\n    second_centered_hexagonal = 11\n    third_centered_hexagonal = 21\n    # Loop through the first n centered hexagonal numbers\n    for i in range(3, n+1):\n        # Calculate the centered hexagonal number\n        centered_hexagonal = first_centered_hexagonal + (second_centered_hexagonal - first_centered_hexagonal) // 2\n        # Update the values for the next iteration\n        first_centered_hexagonal = second_centered_hexagonal\n        second_centered_hexagonal = centered_hexagonal\n        third_centered_hexagonal = third_centered_hexagonal + (centered_hexagonal - second_centered_hexagonal) // 2\n    return centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 7\n    else:\n        result = centered_hexagonal_number(n - 1) + centered_hexagonal_number(n - 2)\n        return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_helper(n):\n        if n == 1:\n            return 1\n        else:\n            return centered_hexagonal_helper(n-1) + centered_hexagonal_helper(n-2) + centered_hexagonal_helper(n-3)\n    \n    return centered_hexagonal_helper(n)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Use a dictionary comprehension to merge the dictionaries\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Create a new empty dictionary to store the merged dictionaries\n    merged_dict = {}\n\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists, update the value with the value from the first dictionary\n            merged_dict[key] = dict1[key]\n        else:\n            # If the key does not exist, add it to the merged dictionary with the value from the first dictionary\n            merged_dict[key] = dict1[key]\n\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists, update the value with the value from the second dictionary\n            merged_dict[key] = dict2[key]\n        else:\n            # If the key does not exist, add it to the merged dictionary with the value from the second dictionary\n            merged_dict[key] = dict2[key]\n\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If the key already exists, update the value with the value from the third dictionary\n            merged_dict[key] = dict3[key]\n        else:\n            # If the key does not exist, add it to the merged dictionary with the value from the third dictionary\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], (list, ct.Counter)):\n                merged_dict[key].append(value)\n            elif isinstance(value, (list, ct.Counter)):\n                merged_dict[key] = value + merged_dict[key]\n            else:\n                merged_dict[key] = value, value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n        else:\n            if isinstance(merged_dict[key], (list, ct.Counter)):\n                merged_dict[key].append(value)\n            elif isinstance(value, (list, ct.Counter)):\n                merged_dict[key] = value + merged_dict[key]\n            else:\n                merged_dict[key] = value, value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the keys and values from all three input dictionaries.\n\n    Args:\n    dict1 (dict): The first dictionary to be merged.\n    dict2 (dict): The second dictionary to be merged.\n    dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n    dict: A single dictionary that contains all the keys and values from all three input dictionaries.\n\n    \"\"\"\n\n    # Combine all three dictionaries into one dictionary\n    combined_dict = {**dict1, **dict2, **dict3}\n\n    return combined_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    # Use the collections.Counter function to count the frequency of each element in the list\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    # Return the dictionary with the frequency of each element in the list\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = collections.defaultdict(int)\n\n    for num in lst:\n        freq_dict[num] += 1\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    set_list = set(list1)\n\n    # Use a dictionary to store the frequency of each element\n    freq_dict = collections.Counter(set_list)\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter(list1)\n\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def freq_count(lst):\n    # Use a dictionary to keep track of the frequency of each element\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = collections.Counter(lst)\n    return dict(count)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    freq_dict = collections.defaultdict(int)\n\n    for item in list1:\n        freq_dict[item] += 1\n\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize the minimum difference to a large number\n    min_diff = float('inf')\n\n    # Loop through each number between 0 and N\n    for num in range(N + 1):\n\n        # Calculate the difference between the current number and N\n        diff = abs(num - N)\n\n        # Check if this difference is smaller than the current minimum difference\n        if diff < min_diff:\n\n            # Update the minimum difference\n            min_diff = diff\n\n    # Return the closest smaller number than N\n    return N - min_diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = 1\n    max_num = N\n\n    while True:\n        mid_num = (min_num + max_num) // 2\n\n        if mid_num >= N:\n            max_num = mid_num - 1\n        elif mid_num <= N:\n            min_num = mid_num + 1\n        else:\n            return mid_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for num in range(1, N+1):\n        if num < N:\n            if abs(num - N) < abs(closest - N):\n                closest = num\n        elif num > N:\n            if abs(num - N) < abs(smallest - N):\n                smallest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    def get_closest_smaller_number(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 1\n        if n % 2 == 0:\n            return 2\n        else:\n            return 1\n\n    def get_distance(n1, n2):\n        diff = abs(n1 - n2)\n        return diff * (diff + 1) // 2\n\n    n1, n2 = 1, 2\n    smallest_distance = get_distance(n1, n2)\n    closest_smaller_number = n1\n\n    while n2 <= N:\n        n1, n2 = n2, n2 + 1\n        distance = get_distance(n1, n2)\n        if distance < smallest_distance:\n            smallest_distance = distance\n            closest_smaller_number = n1\n\n    return closest_smaller_number\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    closest = N\n    while True:\n        closest_prev = closest\n        closest *= 2\n        if closest_prev == closest - 1:\n            break\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    if N == 0:\n        return -1\n    \n    min_diff = float('inf')\n    closest = N\n    for i in range(N-1, -1, -1):\n        diff = abs(i - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Convert input to integer\n    N = int(N)\n    \n    # Initialize variables to keep track of the smallest and largest numbers\n    smallest = N\n    largest = N\n    \n    # Loop through the list of numbers from 1 to N\n    for i in range(1, N+1):\n        # Check if the current number is smaller than the current smallest number\n        if i < smallest:\n            # If it is, update the smallest number\n            smallest = i\n        # Check if the current number is larger than the current largest number\n        elif i > largest:\n            # If it is, update the largest number\n            largest = i\n            \n    # Calculate the difference between the largest and smallest numbers\n    diff = largest - smallest\n    \n    # If the difference between the largest and smallest numbers is odd, return the smallest number\n    if diff % 2 == 1:\n        return smallest\n    # If the difference between the largest and smallest numbers is even, return the average of the smallest and largest numbers\n    else:\n        return (smallest + largest) / 2"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest_num = N\n    smallest_diff = float('inf')\n\n    for i in range(1, N):\n        diff = abs(i - N)\n\n        if diff < smallest_diff:\n            smallest_diff = diff\n            smallest_num = i\n\n    return smallest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num_list = []\n    for i in range(1, N+1):\n        num_list.append(i)\n    min_diff = abs(N-num_list[0])\n    min_num = num_list[0]\n    for num in num_list:\n        diff = abs(N-num)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(N, 1, -1):\n        if i % 2 == 0:\n            closest = i\n        else:\n            break\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize a variable to store the length of the longest word\n    max_len = 0\n    \n    # Loop through each element in the list\n    for word in list1:\n        # Convert the word to lowercase\n        word = word.lower()\n        \n        # If the length of the word is greater than the current maximum length, update the max_len variable\n        if len(word) > max_len:\n            max_len = len(word)\n            \n    # Return the maximum length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    max_len = 0\n    max_word = \"\"\n    \n    # iterate through the list and find the length of the longest word\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    \n    # return the length of the longest word\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n            longest_word = word\n    return longest_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if sub_str in item:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n**2 % 11 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n == 0 or n == 1 or n == 2:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((n + 1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: # even\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 1:\n        if n % 2 == 0:\n            for i in range(2, n//2 + 1):\n                if n % i == 0:\n                    return False\n            return True\n        else:\n            for i in range(2, n//2):\n                if n % i == 0:\n                    return False\n            return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is undulating\")\n    else:\n        print(f\"{n} is not undulating\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    if n % 2 == 0: # if n is even, it is not undulating\n        return False\n    else: # if n is odd, it is undulating\n        for i in range(3, int(n**0.5)+1, 2): # iterate through odd numbers from 3 to the square root of n\n            if n % i == 0:\n                return False # if n is divisible by any odd number from 3 to the square root of n, it is not undulating\n        return True # if none of the odd numbers from 3 to the square root of n divide n, it is undulating"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # Check if the number is less than 5\n    if n < 5:\n        return False\n    \n    # Check if the number is divisible by 5\n    if n % 5 == 0:\n        return True\n    \n    # If the above conditions are not met, the number is not undulating\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    \"\"\"\n    This function calculates the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    min_index = 0\n    min_value = test_list[0][1]\n\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    # Sort the list based on the second value of the tuples\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    minimum_second_value = float('inf')\n    for index, value in enumerate(test_list):\n        if value[1] < minimum_second_value:\n            minimum_index = index\n            minimum_second_value = value[1]\n    return minimum_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, return the index of the first tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: itemgetter(1)(test_list[i]))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    # Initialize variables to keep track of smallest list length and the first list\n    min_length = float('inf')\n    smallest_list = None\n\n    # Iterate over each list in the input list of lists\n    for i in lst:\n        # If the current list is shorter than the smallest list or it is the smallest list, update the variables\n        if len(i) < min_length or (len(i) == min_length and i < smallest_list):\n            min_length = len(i)\n            smallest_list = i\n\n    # Return the length of the smallest list\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 10000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = len(lst[0]) # assuming all lists in lst are of equal length\n\n    for sub_lst in lst:\n        if len(sub_lst) < min_length:\n            min_length = len(sub_lst)\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes in a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    smallest_length = None\n    for sublist in lst:\n        if smallest_length is None or len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')  # initialize minimum length to infinity\n    min_list = None  # initialize minimum list to none\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    \n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = lst[0][0]\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(2, n+1):\n            if n % i == 0:\n                count += 1\n        return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop from 1 to the square root of n\n    for i in range(1, int(n ** 0.5) + 1):\n        # If n is divisible by i\n        if n % i == 0:\n            # Increment the count variable by 1\n            count += 1\n    \n    # Return the final count value\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n\n    # create an empty dictionary to store the frequency of each element in the list\n    freq_dict = {}\n\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function on the list and update the frequency dictionary\n        if isinstance(element, list):\n            element_freq = frequency_lists(element)\n            for key, value in element_freq.items():\n                freq_dict[key] = value\n        # if the element is not a list, update the frequency dictionary\n        else:\n            freq_dict[element] = freq_dict.get(element, 0) + 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists,\n    returned in a dictionary.\n    \"\"\"\n    # Flatten the list of lists\n    flattened_list = [num for sublist in list1 for num in sublist]\n    # Count the frequency of each element in the flattened list\n    frequency_dict = {}\n    for num in flattened_list:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency\n    freq = {}\n\n    # Loop through each element in the list\n    for i in list1:\n        # If the element is a list, recursively call the function on the list\n        if isinstance(i, list):\n            for j in i:\n                # If the element is already in the dictionary, increment its frequency\n                if j in freq:\n                    freq[j] += 1\n                # If the element is not in the dictionary, add it with a frequency of 1\n                else:\n                    freq[j] = 1\n        # If the element is not a list, add it to the dictionary with a frequency of 1\n        else:\n            if i in freq:\n                freq[i] += 1\n            else:\n                freq[i] = 1\n\n    # Return the dictionary with the frequency of each element\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Loop through each element in the flattened list and update its frequency in the dictionary\n    for item in flattened_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # initialize an empty dictionary\n    freq_dict = {}\n    # loop through each item in the list\n    for item in list1:\n        # if the item is a list, recursively call the function on it and add the results to the dictionary\n        if isinstance(item, list):\n            nested_freq = frequency_lists(item)\n            for key, value in nested_freq.items():\n                if key in freq_dict:\n                    freq_dict[key] += value\n                else:\n                    freq_dict[key] = value\n        # if the item is not a list, add it to the dictionary with a value of 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequencies\n    freq_dict = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        # If the item is already in the dictionary, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # If the item is not in the dictionary yet, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    \n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # If the decimal number is 0, return 0\n    if n == 0:\n        return '0'\n\n    # Initialize the binary string with the least significant digit\n    binary_str = str(n % 2)\n\n    # Convert the binary string to its base 10 representation and add 1 to it\n    decimal_str = str(bin(n + 1)[2:])\n\n    # Add leading zeros to the decimal string to ensure the same length as the binary string\n    decimal_str = decimal_str.zfill(len(binary_str))\n\n    # Return the binary string\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            remainder = n % 2\n            binary = str(remainder) + binary\n            n = n // 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n        n: an integer representing the decimal number to convert.\n\n    Returns:\n        A string representing the binary representation of the input decimal number, with no leading zeros.\n    \"\"\"\n\n    # Initialize an empty list to store the binary digits\n    binary = []\n\n    # While the number is greater than 0, convert the rightmost digit to binary and add it to the list\n    while n > 0:\n        remainder = n % 2\n        binary.append(remainder)\n        n = n // 2\n\n    # Reverse the list to get the correct binary representation\n    binary.reverse()\n\n    # Convert the list of binary digits to a string and remove any leading zeros\n    binary_str = \"\".join(map(str, binary))\n    binary_str = binary_str.lstrip('0')\n\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    if n == 0:\n        return \"0\"\n    else:\n        binary = \"\"\n        while n > 0:\n            binary = str(n % 2) + binary\n            n //= 2\n        return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # Convert the decimal number to a binary string\n    binary_str = bin(n)[2:]\n\n    # Add leading zeros if necessary\n    while len(binary_str) < len(str(n)):\n        binary_str = '0' + binary_str\n\n    return binary_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    num_str = str(num)\n\n    # Convert the string to a list of digits\n    num_list = [int(digit) for digit in num_str]\n\n    # Find the next smallest palindrome\n    is_palindrome = True\n    i = 0\n    while i < len(num_list) - 1 and is_palindrome:\n        if num_list[i] == num_list[-i-1]:\n            is_palindrome = False\n        else:\n            i += 1\n\n    # Increment the last digit of the palindrome until it becomes less than the input number\n    while is_palindrome:\n        i -= 1\n        num_list[i] += 1\n        is_palindrome = True\n        for digit in num_list:\n            if digit > num_list[-i-1]:\n                is_palindrome = False\n                break\n\n    # Convert the list of digits back to a string\n    next_num_str = ''.join(str(digit) for digit in num_list)\n\n    # Convert the string to an integer\n    next_num = int(next_num_str)\n\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Returns True if a given integer is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the given integer.\n    \"\"\"\n    # Find the smallest palindrome greater than or equal to num\n    min_palindrome = num - 1\n    while not is_palindrome(min_palindrome):\n        min_palindrome -= 1\n\n    # Find the largest palindrome less than or equal to the next smallest palindrome\n    max_palindrome = min_palindrome + 1\n    while not is_palindrome(max_palindrome):\n        max_palindrome += 1\n\n    return max_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        \"\"\"\n        Check if a given number is a palindrome.\n        \"\"\"\n        return str(n) == str(n)[::-1]\n\n    def is_palindrome_greater_than(n):\n        \"\"\"\n        Check if a given number is a palindrome greater than a given number.\n        \"\"\"\n        return is_palindrome(n + 1) and n + 1 < sys.maxsize\n\n    for i in range(num, -1, -1):\n        if is_palindrome_greater_than(i):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the input number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Returns the next smallest palindrome of the input number.\n    \"\"\"\n    n = num\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    rev_num_str = num_str[::-1]\n\n    # iterate over the reversed string and check if the substring is a palindrome\n    for i in range(len(rev_num_str)):\n        sub_str = rev_num_str[:i+1]\n        if sub_str == sub_str[::-1]:\n            # if the substring is a palindrome, add 1 to the result and return it as an integer\n            return int(rev_num_str[:i+1]) + 1\n\n    # if no palindrome is found, return the original number\n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_valid_palindrome(n):\n        return n >= 10 and is_palindrome(n)\n\n    def next_valid_palindrome(n):\n        i = n\n        while i >= 10:\n            i -= 10\n        return i * 10 + 9\n\n    def next_smallest_palindrome(num):\n        if num < 10:\n            return num + 10\n        elif num < 100:\n            return next_valid_palindrome(num)\n        elif is_valid_palindrome(num):\n            return num\n        else:\n            while True:\n                num = next_valid_palindrome(num)\n                if is_valid_palindrome(num):\n                    return num\n\n    return next_smallest_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if is_palindrome(num):\n            return num\n        else:\n            num += 1\n            \ndef is_palindrome(num):\n    '''\n    Check if a given integer is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    \"\"\"\n    Returns True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, return the next smallest number greater than the number itself\n        return num + 1\n\n    # If it's not a palindrome, find the smallest palindrome greater than the number itself\n    for i in range(num+1, int(num**0.5)+1):\n        if is_palindrome(i):\n            return i - 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string and reverse it\n    reversed_num = num_str[::-1]\n    # Initialize a boolean variable to check if the integer is a palindrome or not\n    is_palindrome = True\n    # Iterate through the characters of the reversed string\n    for i in range(len(reversed_num)):\n        # If any character is not equal to its corresponding character in the original integer, the integer is not a palindrome\n        if reversed_num[i]!= num_str[i]:\n            is_palindrome = False\n            break\n    # If the integer is a palindrome, increment it by 1\n    if is_palindrome:\n        next_num = int(num_str) + 1\n    # If the integer is not a palindrome, return -1\n    else:\n        next_num = -1\n    # Return the next smallest palindrome of the original integer\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize the smallest palindrome to be the number itself\n    smallest_palindrome = num\n    # Iterate over all possible palindromes\n    for i in range(len(num_str) - 1, -1, -1):\n        # Convert the current number to a string\n        current_num_str = num_str[:i + 1]\n        # Check if the current number is a palindrome\n        if current_num_str == current_num_str[::-1]:\n            # If it is, update the smallest palindrome\n            if int(current_num_str) < int(smallest_palindrome):\n                smallest_palindrome = current_num_str\n    # Return the smallest palindrome\n    return int(smallest_palindrome)\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left_half = arr[:n//2]\n        right_half = arr[n//2:]\n        if k % 2 == 1:\n            return kth_element(left_half, k//2)\n        else:\n            return (kth_element(left_half, k//2-1) + kth_element(right_half, k//2)) // 2"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = [x for x in arr[1:] if x > arr[0]]\n        right = [x for x in arr[1:] if x < arr[0]]\n        if len(left) == k - 1:\n            return left[len(left) - 1]\n        else:\n            return kth_element(left, k) + 1 + len(left)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    elif k == 1:\n        return arr[0]\n    elif k == n:\n        return arr[n-1]\n    else:\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right-left)//2\n            if mid == k-1:\n                return arr[mid-1]\n            elif mid < k-1:\n                left = mid + 1\n            else:\n                right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is a positive integer\n    if not isinstance(k, int) or k <= 0:\n        raise ValueError('k must be a positive integer')\n    \n    # Find the length of the array\n    n = len(arr)\n\n    # Check if k is less than or equal to n\n    if k > n:\n        raise IndexError('k is greater than the length of the array')\n\n    # Initialize the index of the kth element to be None\n    index = None\n\n    # Initialize a variable to keep track of the current index\n    current_index = 1\n\n    # Loop through the array from the first element to the kth element\n    while current_index <= k:\n        # Increment the current index\n        current_index += 1\n\n        # Check if the current index is equal to the kth element\n        if current_index == k:\n            # Set the index of the kth element to the current index\n            index = current_index\n            break\n\n        # If the current index is greater than the kth element,\n        # skip the elements after the kth element\n        if current_index > k:\n            current_index += n - k\n\n    # Return the index of the kth element\n    return index"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if array is empty\n    if len(arr) == 0:\n        return None\n    \n    # Find the middle element of the array\n    mid = len(arr) // 2\n    \n    # If the kth element is at the middle of the array, return it\n    if k == mid+1:\n        return arr[k-1]\n    \n    # If k is greater than the length of the array, return None\n    elif k > len(arr):\n        return None\n    \n    # If k is less than the length of the array, check if it exists in the left half or the right half\n    elif k < mid+1:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if k is less than 1 or greater than the length of the array\n    if k < 1 or k > len(arr):\n        return None\n    # check if k is equal to 1\n    elif k == 1:\n        return arr[0]\n    # check if k is equal to the length of the array\n    elif k == len(arr):\n        return arr[-1]\n    # find the index of the element to be found\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    count = 0\n    for i in range(1, len(arr)+1):\n        count += arr[i-1]\n        if count >= k:\n            return i"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        return \"Invalid input\"\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = n - 1\n        while left <= right:\n            pivot_index = left + (right - left) // 2\n            if pivot_index == k - 1:\n                return arr[pivot_index]\n            elif pivot_index < k - 1:\n                left = pivot_index + 1\n            else:\n                right = pivot_index - 1"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        else:\n            result += word[i].upper()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    components = word.split('_')\n    result = components[0]\n    for i in range(1, len(components)):\n        result += components[i].capitalize()\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = [word.capitalize() for word in words]\n    # Join the words with underscores as separator\n    camel_case_str = '_'.join(camel_case)\n    return camel_case_str"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif i > 0:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word into words separated by underscores\n    words = word.split('_')\n    \n    # capitalize the first letter of each word\n    camel_words = [word.capitalize() for word in words]\n    \n    # join the words back together with underscores\n    return '_'.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # convert snake case to camel case by capitalizing the first letter of each word\n    camel_word = word.capitalize()\n    # loop through each character in the camel case word and convert to lowercase\n    for i in range(len(camel_word)):\n        if camel_word[i] == '_':\n            camel_word = camel_word[:i] + camel_word[i+1:].lower() + camel_word[i+1:]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    # split the word into words using underscores as the delimiter\n    words = word.split('_')\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back into a single string with the first letter capitalized\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first word\n    words[0] = words[0][0].upper() + words[0][1:]\n    # Convert the rest of the words to camel case\n    camel_word = ''.join(w.capitalize() for w in words)\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].capitalize()\n    return camel_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "Therefore, the Eulerian number a(n, m) for n >= 0 and m >= 0 is 0."
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m).\n    '''\n    if n == 0 or m == 0:\n        return 0\n    else:\n        return n * m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through each value of n\n    for i in range(n+1):\n        # Calculate the sum of a(n, m)\n        sum_ab = (n+1)*(m+1)*(2*i-1)*(2*m-1)\n        sum_abc = (n+1)*(m+1)*(2*i+1)*(2*m-1)\n\n        # If the sum of a(n, m) is odd, increment the count\n        if sum_ab % 2!= 0 and sum_abc % 2!= 0:\n            count += 1\n\n    # Return the count of odd sums\n    return count"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j == n:\n                return i*j"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function calculates the Eulerian number a(n, m) by using dynamic programming.\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    a (int): The Eulerian number a(n, m).\n    '''\n\n    # Create a table to store the Laplacian matrix.\n    L = [[0 for j in range(n)] for i in range(n)]\n\n    # Calculate the Laplacian matrix using the adjacency matrix.\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                L[i][j] = m - 2 * sum([L[k][i] for k in range(n) if k!= i])\n            else:\n                L[i][j] = 2 * L[i][j-1] - L[i][j]\n\n    # Calculate the Eulerian number a(n, m) using the Laplacian matrix.\n    a = L[0][0]\n\n    for i in range(1, n):\n        a = a * (i + 1) * (m - i) // (i * (i + 1))\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def count_odd_digits(num):\n        '''\n        Count the number of odd digits in a given number.\n        '''\n        count = 0\n        while num > 0:\n            count += num % 10\n            num //= 10\n        return count\n\n    def is_prime(num):\n        '''\n        Determine if a given number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_eulerian_number(n, m):\n        '''\n        Find the Eulerian number of a given number using the given conditions.\n        '''\n        count = 0\n        for i in range(1, m + 1):\n            num = (n * i * i) % (m * m)\n            if is_prime(num):\n                count += 1\n                if count == n:\n                    return i\n        return None\n\n    return find_eulerian_number(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # function to calculate the factorial of a number\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n    \n    # function to calculate the number of distinct paths\n    def distinct_paths(n, m):\n        if n == 0 or m == 0:\n            return 1\n        elif n == 1 or m == 1:\n            return n\n        else:\n            return distinct_paths(n-1, m) * distinct_paths(n, m-1)\n    \n    # calculate the total number of paths\n    num_paths = factorial(n+m-2) / (factorial(n-1) * factorial(m-1))\n    \n    # calculate the Eulerian number a(n, m)\n    a_nm = num_paths / distinct_paths(n, m)\n    \n    return a_nm"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = (n + m - 1) / 2 * (n + 1) / 2 \n    return a "
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        return (-1)**(n-1) * (n-m+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    a = 0\n    for i in range(n + 1):\n        a = (a + i) % m\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through each sublist of the input list\n    for sublist in input_list:\n        # convert the sublist to a set to remove duplicate elements\n        sorted_set = set(sorted(sublist))\n        # convert the sorted set back to a list\n        sorted_list = sorted(sorted_set)\n        # replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Convert each sublist to a set to remove duplicates\n        sublist = set(sublist)\n        # Convert the sublist back to a list and sort it\n        sublist = sorted(list(sublist))\n        # Convert the sorted sublist back to a list and append it to the original list\n        input_list[input_list.index(sublist)] = list(sublist)"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # use the `sorted()` function to sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    count = 0   \n    for i in lst:   \n        if i == True:   \n            count += 1   \n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    return test_tup + test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for item in test_tup:\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the given list to a tuple\n    new_list = tuple(test_list)\n    # append the new list to the given tuple\n    new_tuple = test_tup + (new_list,)\n    return new_tuple"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    for item in test_list:\n        test_tup = test_tup + (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    test_tup += test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Check if the given list is a list and if the given tuple is a tuple\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        # Append the given list to the given tuple\n        test_tup += test_list\n        return test_tup\n    else:\n        # Raise an exception if either argument is not a list or tuple\n        raise TypeError('The given arguments must be a list and a tuple.')"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine all three lists into a single list\n    combined_list = num1 + num2 + num3\n    \n    # Convert the combined list to a max heap (heapq.heapify() is used)\n    heapq.heapify(combined_list)\n    \n    # Extract and return the elements from the max heap\n    return [heapq.heappop(combined_list) for i in range(len(combined_list))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists as input and returns a single sorted list.\n    '''\n    # create a new empty list to store the final sorted list\n    result = []\n    \n    # merge the three lists into a single list using heapq module\n    heapq.heapify(num1)\n    heapq.heappush(result, heapq.heappop(num1))\n    heapq.heappush(result, heapq.heappop(num1))\n    heapq.heappush(result, heapq.heappop(num1))\n    heapq.heappush(result, heapq.heappop(num1))\n    heapq.heappush(result, heapq.heappop(num1))\n    \n    heapq.heapify(num2)\n    heapq.heappush(result, heapq.heappop(num2))\n    heapq.heappush(result, heapq.heappop(num2))\n    heapq.heappush(result, heapq.heappop(num2))\n    heapq.heappush(result, heapq.heappop(num2))\n    heapq.heappush(result, heapq.heappop(num2))\n    \n    heapq.heapify(num3)\n    heapq.heappush(result, heapq.heappop(num3))\n    heapq.heappush(result, heapq.heappop(num3))\n    heapq.heappush(result, heapq.heappop(num3))\n    heapq.heappush(result, heapq.heappop(num3))\n    heapq.heappush(result, heapq.heappop(num3))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists using heapq.merge\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three input lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Convert the combined list into a min heap\n    heapq.heapify(merged_list)\n    \n    # Convert the min heap back into a sorted list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n        \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Use heapq to sort the list in ascending order\n    heapq.heapify(merged_list)\n    \n    # Convert the sorted list back to a list and return it\n    return list(heapq.nlargest(len(merged_list), merged_list))"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into a single list\n    merged_list = num1 + num2 + num3\n\n    # Convert the list to a heap and sort it\n    heapq.heapify(merged_list)\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Initialize the three lists to be merged\n    sorted_list = []\n    \n    # Merge the first two lists\n    for i in range(len(num1)):\n        if num1[i] <= num2[i]:\n            sorted_list.append(num1[i])\n            break\n        else:\n            sorted_list.append(num2[i])\n            \n    # Merge the remaining elements of the first list with the second list\n    for i in range(len(num2), len(num1) + len(num2)):\n        sorted_list.append(num1[i - len(num2)])\n        \n    # Merge the third list with the sorted list\n    for i in range(len(num3)):\n        sorted_list.append(num3[i])\n        \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge the three sorted lists using heapq\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    heap1 = []\n    heap2 = []\n    heap3 = []\n\n    # Push the elements of the first list onto the heap\n    for num in num1:\n        heapq.heappush(heap1, num)\n\n    # Push the elements of the second list onto the heap\n    for num in num2:\n        heapq.heappush(heap2, num)\n\n    # Push the elements of the third list onto the heap\n    for num in num3:\n        heapq.heappush(heap3, num)\n\n    # Merge the heaps and extract the elements in sorted order\n    result = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        else:\n            result.append(heapq.heappop(heap2))\n        if heapq.heappop(heap1) < heapq.heappop(heap2):\n            result.append(heapq.heappop(heap1))\n        else:\n            result.append(heapq.heappop(heap2))\n\n    # Add the remaining elements of the heaps to the result\n    while heap1:\n        result.append(heapq.heappop(heap1))\n    while heap2:\n        result.append(heapq.heappop(heap2))\n    while heap3:\n        result.append(heapq.heappop(heap3))\n\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists\n    merged_list = sorted(num1 + num2 + num3)\n    return merged_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    This function takes a binary string s, which is the input and a positive integer n, which is the number of times to rotate it.\n    The function returns the number of odd numbers in the rotated binary string.\n\n    Example:\n    >>> odd_Equivalent(\"101101\", 3)\n    4\n\n    >>> odd_Equivalent(\"1111\", 2)\n    1\n\n    >>> odd_Equivalent(\"111\", 3)\n    0\n    \"\"\"\n    n = n % len(s)\n    rotated = s[-n:] + s[:-n]\n    count = 0\n    for digit in rotated:\n        if int(digit) % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): The binary string to be rotated.\n    n (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The number of odd numbers in the rotated binary string after rotating the string n times.\n    \"\"\"\n\n    # Initialize a counter for odd numbers and initialize the rotated string\n    odd_count = 0\n    rotated_s = \"\"\n\n    # Loop through each character in the binary string\n    for c in s:\n        # If the character is an odd number, increment the odd count and add it to the rotated string\n        if c == \"1\":\n            odd_count += 1\n            rotated_s += c\n        else:\n            rotated_s += \"0\"\n\n    # Loop n times and rotate the binary string\n    for i in range(n):\n        # Create a new rotated string with the last character at the beginning\n        new_rotated_s = rotated_s[-1] + rotated_s[:-1]\n        # Reset the rotated string to the new value\n        rotated_s = new_rotated_s\n\n    # Return the number of odd numbers in the rotated string\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    # initialize an empty list to store the odd numbers\n    odd_list = []\n    # create a binary string of the input string s\n    binary_string = bin(int(s, 10))[2:]\n    # loop through each character in the binary string\n    for i in binary_string:\n        # check if the character is odd\n        if int(i) % 2 == 1:\n            # if it is, append it to the odd_list\n            odd_list.append(int(i))\n    # rotate the odd_list the given number of times\n    for i in range(n):\n        odd_list.append(odd_list.pop(0))\n    # count the number of odd numbers in the rotated list\n    odd_count = len(odd_list)\n    # return the result\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n    # Check if the input is valid\n    if not s.isalnum():\n        raise ValueError(\"Input must be a valid binary string\")\n    # Check if the input is odd length\n    if len(s) % 2 == 0:\n        raise ValueError(\"Input must be an odd length binary string\")\n    # Check if the number of rotations is valid\n    if not isinstance(n, int) or n < 0:\n        raise TypeError(\"Number of rotations must be a non-negative integer\")\n    \n    # Initialize variables\n    count = 0\n    temp = s[::-1]\n    \n    # Iterate over the number of rotations\n    for i in range(n):\n        # Check if the binary string has an odd length after rotating\n        if len(temp) % 2 == 0:\n            raise ValueError(\"Input must be an odd length binary string\")\n        # Find the number of odd values in the binary string\n        count += sum(temp.count(str(i)) % 2 for i in range(2))\n        # Rotate the binary string by 1 bit to the left\n        temp = temp[:1] + temp[2:]\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    rotation = 0\n    # Iterate over the binary string s\n    for i in range(len(s)):\n        # If the current character is odd, increment count and reset the rotation counter\n        if int(s[i]) % 2!= 0:\n            count += 1\n            rotation = 0\n        # Increment the rotation counter\n        rotation += 1\n        # If the rotation counter exceeds n, break out of the loop\n        if rotation > n:\n            break\n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '0':\n            odd_count += 1\n        i += 1\n        if n > 0:\n            n -= 1\n            s = s[1:] + '0'\n        else:\n            n += 1\n            s = s[1:] + '1'\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n): \n        s = s[-1] + s[:-1] \n        if int(s, 2) % 2 == 1: \n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        s = s[-1]+s[:-1]\n        count = sum(1 for x in s if x == '1')\n        result += count*2\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    count = 0\n    s = s[::-1] # reverse the string\n    for i in range(n):\n        if int(s[-1]) % 2!= 0: # check if last digit is odd\n            count += 1 # increment count if last digit is odd\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    s (str): the binary string to rotate\n    n (int): the number of times to rotate the string\n\n    Returns:\n    int: the number of odd numbers in the rotated string\n    \"\"\"\n    # initialize a count of odd numbers to zero\n    count = 0\n    # convert the string to a list of characters\n    s = list(s)\n    # rotate the list of characters n times\n    s = s[n:] + s[:n]\n    # iterate over the rotated list of characters\n    for c in s:\n        # if the character is an odd digit, increment the count\n        if int(c) % 2 == 1:\n            count += 1\n    # return the count of odd numbers\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # create an empty set to store common elements\n    common_set = set()\n    # iterate through all nested lists\n    for lst in nestedlist:\n        # iterate through all elements in the current list\n        for elem in lst:\n            # add the element to the common set if it is not already there\n            if elem not in common_set:\n                common_set.add(elem)\n    # convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j] and nestedlist[j] in nestedlist[i]:\n                common.append(nestedlist[i])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    if not nestedlist:\n        return []\n\n    common_list = []\n\n    for i in nestedlist:\n        if isinstance(i, list):\n            common_list += common_in_nested_lists(i)\n        else:\n            common_list.append(i)\n\n    return list(set(common_list))\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for item in nestedlist:\n        for other_item in item:\n            if other_item in common_elements:\n                continue\n            else:\n                common_elements.append(other_item)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0])):\n                if nestedlist[i][j] == nestedlist[0][k] and nestedlist[j][k] == nestedlist[0][k]:\n                    if (nestedlist[i][j] not in common) and (nestedlist[j][k] not in common):\n                        common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[0])):\n                if nestedlist[i][j] == nestedlist[0][k] and nestedlist[j][k] == nestedlist[0][k]:\n                    common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_set = set()\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] not in common_set:\n                common_set.add(nestedlist[i][j])\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Loop through each nested list\n    for lst in nestedlist:\n        # Loop through each element in the nested list\n        for elem in lst:\n            # If the element is already in the common set, add it to the result set\n            if elem in common:\n                common.add(elem)\n    \n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n\n    for list1 in nestedlist:\n        for list2 in nestedlist:\n            if list1 == list2:\n                continue\n            for element in list1:\n                if element in list2:\n                    common_elements.append(element)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return None\n    common = set(nestedlist[0])\n    for item in nestedlist[1:]:\n        common &= set(item)\n    return list(common)\n"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # remove any non-numeric characters from the input string\n    text = ''.join(e for e in text if e.isdigit())\n\n    # if the cleaned string is empty, return False\n    if not text:\n        return False\n\n    # convert the cleaned string to an integer and return True\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for dict_ in list1:\n        if len(dict_)!= 0:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # initialize an empty integer to hold the sum of the tuple elements\n    result = 0\n    \n    # iterate over each element in the tuple\n    for num in nums:\n        # add the current element to the result\n        result += num\n        \n    # return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums, index=0, result=0):\n    if index == len(nums):\n        return result\n    else:\n        result += nums[index]\n        return tuple_to_int(nums, index+1, result)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Initialize empty list to store converted elements\n    float_list = []\n    # Iterate through each list in the input list of lists\n    for sub_list in test_list:\n        # Iterate through each element in the sub_list\n        for element in sub_list:\n            # If the element can be converted to a float, append it to the float_list\n            if isinstance(element, (int, float)):\n                float_list.append(float(element))\n    # Return the float_list\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, (int, float, complex)):\n                element = float(element)\n            elif isinstance(element, str):\n                try:\n                    element = float(element)\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n                result.append(test_list[i][j])\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                float(element)\n            except ValueError:\n                pass\n            else:\n                row[row.index(element)] = float(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through the list of lists\n    for sublist in test_list:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element can be converted to a float, convert it to a float and add it to a new list\n            if isinstance(element, (int, float)):\n                new_list.append(float(element))"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[sublist.index(item)] = float(item)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float_list.append(float(element))\n            except ValueError:\n                pass\n    return float_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # convert the string to a list of characters\n    char_list = list(string)\n    # initialize an empty list to store the words\n    word_list = []\n    # loop through each character in the list\n    for char in char_list:\n        # if the current character is a space, add the current word to the list and reset the current word\n        if char =='':\n            word_list.append(''.join(char_list[:char_list.index(char)]))\n            char_list = char_list[char_list.index(char)+1:]\n    # add the last word to the list\n    word_list.append(''.join(char_list))\n    # return the list of words\n    return word_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string by space and return as a list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return -1\n\n    # Initialize two pointers, one for the first element and one for the second element.\n    # We will compare the elements pointed by the two pointers.\n    i = 0\n    j = 1\n\n    while j < n:\n        # If the first element is greater than the second element, then swap them.\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n\n            # If the first element is equal to the second element, then move the\n            # second pointer to the next element.\n            if arr[i] == arr[j]:\n                j += 1\n\n        # If the first element is less than the second element, then move the\n        # first pointer to the next element.\n        else:\n            i += 1\n\n    # Now the second pointer will be pointing to the element that appears only once.\n    return arr[j]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    This function takes an array as input and returns the element that appears only once in the array.\n    \"\"\"\n    # Traverse through the array and check if the element is present only once.\n    for i in range(len(arr)):\n        # If the element is not present in the next i+1 elements, return the element.\n        if arr[i]!= arr[i+1] and arr[i] in arr[i+1:]:\n            return arr[i]\n    \n    # If no element is found, return None.\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n    for i in range(len(arr)):\n        if unique_element == arr[i]:\n            return arr[i]\n        elif arr[i] not in unique_element:\n            unique_element = [arr[i]]\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    for i in range(len(arr)):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            return arr[i]\n    \n    return \"There is no element in the array that appears only once.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    for num in arr:\n        if count[num] == 1:\n            return num\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary and find the element that appears only once\n    for key, value in freq.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1] and (unique_element is None or arr[i]!= unique_element):\n            unique_element = arr[i]\n            break\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a set to keep track of the elements we've seen so far\n    seen = set()\n    \n    # Loop over the array and add each element to the set\n    for num in arr:\n        seen.add(num)\n    \n    # Return the first element in the set (which is the element that appears only once)\n    return next(iter(seen))"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the count variable and the element variable\n    count = 1\n    element = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n        # If the current element is equal to the element from the previous iteration, increment the count\n        if arr[i] == element:\n            count += 1\n        # If the count becomes 1, the current element is the only element that appears only once in the array\n        else:\n            if count == 1:\n                return element\n            # If the count is greater than 1, set the count to 1 and continue with the next iteration\n            count = 1\n            element = arr[i]\n\n    # If the loop completes without finding a unique element, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -10000000000000000000000000000000000000000000000000000000000000\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Parameters:\n    lst (list): a list of tuples containing numbers.\n\n    Returns:\n    int: the maximum absolute product between numbers in pairs of tuples within the list.\n\n    Example:\n    >>> max_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5)])\n    24\n    \"\"\"\n\n    # Initialize the maximum absolute product to zero\n    max_product = 0\n\n    # Iterate over each pair of tuples in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Calculate the absolute product of the numbers in each tuple\n            product = abs(lst[i][0] * lst[j][1])\n\n            # Update the maximum absolute product if necessary\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf') # initialize the maximum product to negative infinity\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_tuple = None\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = abs(list1[i][0] * list1[j][1])\n            if current_product > max_product:\n                max_product = current_product\n                max_tuple = (list1[i], list1[j])\n\n    return max_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to keep track of the maximum absolute product and the product of the minimum and maximum values\n    max_abs_prod = float('-inf')\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # Check if the current tuple is of length 2 and the first element is less than the second element\n        if len(tup) == 2 and tup[0] < tup[1]:\n            # Calculate the absolute value of the product of the current minimum and maximum values and update max_abs_prod if necessary\n            curr_prod = abs(tup[0] * tup[1])\n            if curr_prod > max_abs_prod:\n                max_abs_prod = curr_prod\n\n            # Update the minimum and maximum values if necessary\n            if tup[0] < min_val:\n                min_val = tup[0]\n            if tup[1] > max_val:\n                max_val = tup[1]\n\n    return max_abs_prod"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product\n    between numbers in pairs of tuples within the list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # Calculate the absolute difference between the two numbers\n            diff = abs(lst[i][0] - lst[j][0])\n            # Update the maximum product if the new product is greater\n            if diff > max_product:\n                max_product = diff\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair = (list1[i], list1[j])\n            product = max(abs(pair[0]), abs(pair[1]))\n            if product > max_product:\n                max_product = product\n                max_pair = pair\n    return max_product, max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples and finds the maximum absolute product between numbers in pairs of tuples within the list.\n\n    Args:\n        list1: A list of tuples.\n\n    Returns:\n        The maximum absolute product between numbers in pairs of tuples within the list.\n\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0]*list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    Check if a number is amicable to any number from 1 to itself.\n    '''\n    for i in range(1, num + 1):\n        if is_perfect_square(i) and num % i == 0:\n            return False\n    return True\n\ndef is_perfect_square(num):\n    '''\n    Check if a number is a perfect square.\n    '''\n    return int(num ** 0.5) ** 2 == num"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    # Initialize variables to store the sum and the count of amicable numbers\n    sum_amicable = 0\n    count_amicable = 0\n    \n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable or not\n        if num!= sum_amicable(num) and num!= sum_amicable(sum_amicable(num)):\n            # If the number is amicable, add it to the sum and increment the count\n            sum_amicable += num\n            count_amicable += 1\n    \n    # Return the sum of the amicable numbers and the count of amicable numbers\n    return sum_amicable, count_amicable\n\ndef sum_amicable_numbers_list(limit):\n    # Initialize variables to store the sum and the count of amicable numbers\n    sum_amicable = []\n    count_amicable = []\n    \n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable or not\n        if num!= sum_amicable_numbers(num) and num!= sum_amicable_numbers(sum_amicable_numbers(num)):\n            # If the number is amicable, add it to the sum and increment the count\n            sum_amicable.append(num)\n            count_amicable.append(1)\n    \n    # Return the sum of the amicable numbers and the count of amicable numbers as a list\n    return sum_amicable, count_amicable\n\ndef sum_amicable_numbers_set(limit):\n    # Initialize variables to store the sum and the count of amicable numbers\n    sum_amicable = set()\n    count_amicable = set()\n    \n    # Loop through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable or not\n        if num!= sum_amicable_numbers(num) and num!= sum_amicable_numbers(sum_amicable_numbers(num)):\n            # If the number is amicable, add it to the sum and increment the count\n            sum_amicable.add(num)\n            count_amicable.add(1)\n    \n    # Return the sum of the amicable numbers and the count of amicable numbers as a set\n    return sum_amicable, count_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(2, limit+1):\n        if i in [j for j in range(2, limit//2+1) if i%j==0]:\n            if i+j == limit:\n                sum_amicable += i\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        for j in range(i, limit + 1):\n            if is_prime(i) and is_prime(j) and i!= j:\n                if i + j == limit and i!= j:\n                    amicable_numbers.append(i)\n                    amicable_numbers.append(j)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # Define a function to check if a number is amicable or not\n    def is_amicable(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the sum variable to 0\n    total = 0\n\n    # Loop through each number from 1 to the specified limit\n    for num in range(1, limit + 1):\n        # Check if the number is amicable\n        if is_amicable(num) and is_amicable(sum(divisors(num))):\n            # Add the number to the total sum\n            total += num\n\n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    '''\n    Check if a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Find the sum of all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit):\n        if is_prime(num) and is_prime(limit - num):\n            amicable_numbers.append((num, limit - num))\n\n    amicable_numbers_set = set(amicable_numbers)\n\n    total_sum = 0\n    for num, other_num in amicable_numbers_set:\n        if num!= other_num and num + other_num == limit:\n            total_sum += num + other_num\n\n    return total_sum\n\ndef main():\n    limit = int(input(\"Enter the limit: \"))\n    print(\"The sum of amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    # define a list to store the amicable numbers\n    amicable_numbers = []\n    # loop through numbers from 1 to limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if is_amicable(num):\n            amicable_numbers.append(num)\n    # return the sum of all the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    # check if num is amicable by dividing it by its proper divisors\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0:\n            if num // i!= i:\n                return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    # iterate through all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    # return the sum of all amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(number):\n    '''\n    Write a function to check if a given number is amicable or not.\n    '''\n    # check if the number is divisible by any number between 1 and the square root of the given number\n    for i in range(1, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    # if the number is not divisible by any number between 1 and the square root of the given number, then it is amicable\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if a number is an amicable number or not.\n    \"\"\"\n    if num < 10:\n        return False\n    sum = 0\n    for i in range(1, num):\n        if num % i == 0:\n            sum += i\n            if i!= num // i:\n                sum -= num // i\n    if sum == num:\n        return True\n    return False\n\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable_number(num):\n            amicable_sum += num\n    return amicable_sum\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i < limit // 2:\n            if i + 1 == sum(divisors(i)):\n                amicable_sum += i\n        if i > limit // 2:\n            if i - 1 == sum(divisors(i)):\n                amicable_sum += i\n    return amicable_sum\n\n\ndef divisors(num):\n    div = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            div.append(i)\n    return div"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the magnitude of the complex number\n    magnitude = cmath.sqrt(a**2 + b**2)\n    # Calculate the angle of the complex number\n    angle = cmath.phase(cmath.rect(a, b))\n    # Return the angle in degrees\n    return angle * 180.0 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    c = a + bj * cmath.phase(a + bj * cmath.phase(a))\n    angle = cmath.phase(c)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Converting the given complex number to polar form\n    r = cmath.sqrt(a**2+b**2)\n    phi = cmath.phase(a+b*1j)\n\n    # Converting the angle from radians to degrees\n    degrees = cmath.phase(phi)*180/cmath.pi\n\n    # Printing the angle in degrees\n    print(\"The angle of the complex number is:\", degrees, \"degrees\")\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a, b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function calculates the angle of a complex number.\n\n    :param a: The real part of the complex number.\n    :type a: float or int\n    :param b: The imaginary part of the complex number.\n    :type b: float or int\n    :return: The angle of the complex number in radians.\n    :rtype: float\n    \"\"\"\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex conjugate of the complex number\n    c = a + bj\n    \n    # Calculate the angle of the complex number using the arccosine function\n    angle = cmath.phase(c)\n    \n    # Convert the angle to degrees and round it to two decimal places\n    angle = round(angle * 180 / cmath.pi, 2)\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    complex_number = a + bj * cmath.pi / 180  # convert degrees to radians\n    angle = round(cmath.phase(complex_number), 2)  # get angle in degrees\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns their angle in degrees.\n    '''\n    angle = cmath.phase(a+b) * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(complex(a, b))\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    zeros = 0\n    ones = 0\n    max_diff = 0\n\n    # Iterate through the binary string\n    for char in string:\n        # If the character is 0, increment zeros count\n        if char == '0':\n            zeros += 1\n        # If the character is 1, increment ones count\n        else:\n            ones += 1\n        # Calculate the difference between the numbers of zeros and ones\n        diff = abs(zeros - ones)\n        # Update the max_diff if the current difference is greater than max_diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    max_diff = 0\n    diff = 0\n    for i in range(len(string)-1):\n        if string[i] == '0' and string[i+1] == '1':\n            diff += 1\n        elif string[i] == '1' and string[i+1] == '0':\n            diff -= 1\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize count of 0s and 1s for the string\n    zeros = 0\n    ones = 0\n    # Iterate through each character in the string\n    for char in string:\n        # If the character is a 0, increment count of 0s\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment count of 1s\n        elif char == '1':\n            ones += 1\n        # If the character is neither a 0 nor a 1, reset count of 0s and 1s\n        else:\n            zeros = 0\n            ones = 0\n    # Initialize maximum difference to the smallest possible difference\n    max_diff = 2**31 - 1\n    # Iterate through each possible sub-string of the binary string\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            # Calculate the number of 0s and 1s in the sub-string\n            count = zeros - ones\n            # Calculate the difference between the counts in the sub-string and the total count\n            diff = abs(count - len(string))\n            # Update the maximum difference if the difference is greater than the current maximum\n            if diff > max_diff:\n                max_diff = diff\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    \n    for i in range(n):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        \n        diff = abs(count0 - count1)\n        max_diff = max(max_diff, diff)\n        \n        if count0 == n or count1 == n:\n            break\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0 \n    count_1 = 0 \n    max_diff = 0 \n    for i in range(len(string)): \n        if string[i] == '0': \n            count_0 += 1 \n        else: \n            count_1 += 1 \n        if count_0 > count_1: \n            count_0 = 0 \n            count_1 = 1 \n        else: \n            count_1 = 0 \n            count_0 = 1 \n        diff = abs(count_0 - count_1) \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    n = len(string)\n    diff = 0\n    for i in range(n):\n        if string[i] == '0':\n            diff += 1\n        else:\n            diff = 0\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string) - 1):\n        sub_string = string[i:i+2]\n        if sub_string.count('0') > sub_string.count('1'):\n            max_diff = max(max_diff, abs(sub_string.count('0') - sub_string.count('1')))\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    if not string:\n        return 0\n\n    count0 = 0\n    count1 = 0\n    max_length = 0\n\n    for char in string:\n        if char == '0':\n            count0 += 1\n        elif char == '1':\n            count1 += 1\n\n        if count0 > count1:\n            max_length = max(max_length, count0)\n        else:\n            max_length = max(max_length, count1)\n\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize maximum difference and length of sub-string\n    max_diff = 0\n    sub_string = 0\n    \n    # Iterate through each character in the binary string\n    for i in range(len(string)):\n        # If the current character is a 0, increment the sub-string length and reset the sub-string count to 0\n        if string[i] == '0':\n            sub_string += 1\n        else:\n            sub_string = 0\n        \n        # Find the difference between the sub-string length and the maximum sub-string length\n        diff = i - sub_string\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n        diff = abs(count_ones - count_zeros)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    common_divisors = []\n\n    for i in range(1, a + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    # Calculate the sum of common divisors of a and b\n    sum_divisors = 0\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers a and b as input and returns the sum of their common divisors.\n    \"\"\"\n    # initialize a dictionary to store the factors of each number\n    factors = {}\n\n    # find the factors of a and b\n    for num in [a, b]:\n        for i in range(1, num + 1):\n            if num % i == 0:\n                if i in factors:\n                    factors[i] += 1\n                else:\n                    factors[i] = 1\n\n    # find the common factors of both a and b\n    common_factors = set(factors.keys()) & set(factors.keys())\n\n    # calculate the sum of common factors\n    sum_common = sum(common_factors)\n\n    return sum_common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisors(n1, n2):\n        '''\n        Find the common divisors of two numbers.\n        '''\n        divisors = []\n        for i in range(1, n1 + 1):\n            if n1 % i == 0 and n2 % i == 0:\n                divisors.append(i)\n        return divisors\n    \n    divisors_a = common_divisors(a, b)\n    divisors_b = common_divisors(b, a)\n    return sum(divisors_a) + sum(divisors_b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # create a list of all common divisors of a and b\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    \n    # add up all common divisors\n    total = 0\n    for i in divisors:\n        total += i\n    \n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        This function returns a list of all the common divisors of the given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_of_divisors(a, b):\n        \"\"\"\n        This function calculates the sum of common divisors of two given numbers.\n        \"\"\"\n        divisors_a = common_divisors(a)\n        divisors_b = common_divisors(b)\n        common_divisors_set = set(divisors_a) & set(divisors_b)\n        return sum(common_divisors_set)\n\n    return sum_of_divisors(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1,a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    common_divisors = []\n\n    #finding all the common divisors of a and b\n    for i in range(1,b+1):\n        if(b % i == 0 and a % i == 0):\n            common_divisors.append(i)\n\n    #finding the sum of common divisors\n    sum_common_divisors = sum(common_divisors)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find all common divisors of the two numbers\n    common_divisors = set(divisor for divisor in range(1, min(a, b) + 1) if a % divisor == 0 and b % divisor == 0)\n    # Calculate the sum of the common divisors\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sum_of_common_divisors(a, b):\n    return sum(lcm(a, i) for i in range(1, a+1) if lcm(a, i) % b == 0)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = 0\n    while y!= 0:\n        carry = x & y\n        product = product + (x ^ y)\n        x = carry << 1\n        y = y >> 1\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    product = x * y\n    return product"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(result)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x, y+1):\n        result += i\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        # Calculate the carry\n        carry = x & y\n        \n        # Shift x to the right by 1\n        x >>= 1\n        \n        # Add the carry to the result\n        result += carry\n        \n        # Shift y to the left by 1\n        y <<= 1\n        \n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    product = x * y\n    return product"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [word for word in words if len(word) > n] # filter words that are longer than n characters\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    :param n: The maximum length of a word that we want to find.\n    :param words: A list of words to search through.\n    :return: A list of words that are longer than n characters.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Split the string into a list of words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words_list = []\n    # Iterate over each word in the list\n    for word in words:\n        # Check if the length of the word is longer than n characters\n        if len(word) > n:\n            # Add the long word to the list\n            long_words_list.append(word)\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    This function takes in two parameters: n (the maximum number of characters allowed in a word) and words (a list of words).\n    It then returns a list of words that are longer than n characters from the original list of words.\n    \"\"\"\n\n    # create an empty list to store the long words\n    long_list = []\n\n    # loop through each word in the original list\n    for word in words:\n        # check if the length of the word is longer than n\n        if len(word) > n:\n            # add the word to the long list\n            long_list.append(word)\n\n    # return the long list\n    return long_list"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    for i in range(rows):\n        for j in range(cols):\n            if i == j or i+j == rows-1 or j+i == cols-1:\n                continue\n            elif my_matrix[i][j]!= rows*cols-i-j:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n    for i in range(n):\n        row_sum = 0\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n        if row_sum not in magic_sum_dict:\n            return False\n        magic_sum_dict[row_sum] += 1\n\n    col_sum_dict = {}\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += my_matrix[i][j]\n        if col_sum not in col_sum_dict:\n            return False\n        col_sum_dict[col_sum] += 1\n\n    for i in range(n):\n        for j in range(n):\n            if my_matrix[i][j] in [1, n] and (i == j or i+j == n-1):\n                continue\n            if my_matrix[i][j] in [1, n] and (i+j == 0 or i+j == n-1):\n                continue\n            if my_matrix[i][j] in [1, n] and (i == n-j-1 or i+n-j == n-1):\n                continue\n            if my_matrix[i][j] in [1, n] and (i+n-j == 0 or i+n-j == n-1):\n                continue\n\n            square_sum = my_matrix[i][j] + my_matrix[j][i] + my_matrix[i][n-j-1] + my_matrix[n-j-1][i]\n            if square_sum not in magic_sum_dict:\n                return False\n            magic_sum_dict[square_sum] += 1\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check the dimensions of the matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the diagonal sum is equal to the sum of the remaining elements\n    remaining_sum = sum(row[i] for row in my_matrix for i in range(len(row)))\n    if diagonal_sum == remaining_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(my_matrix[i]) for i in range(len(my_matrix))]\n    \n    # Calculate the diagonal sums\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    \n    # Check if the row sums, column sums, and diagonal sums are all equal\n    if row_sums == col_sums == diag_sum1 == diag_sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has the correct dimensions\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if all rows, columns, and diagonals are magic squares\n    for row in my_matrix:\n        if row == sorted(row)!= sorted(row)[::-1]:\n            return False\n    for col in range(len(my_matrix)):\n        if my_matrix[col] == sorted(my_matrix[col])!= sorted(my_matrix[col])[::-1]:\n            return False\n    if my_matrix == sorted(my_matrix)!= sorted(my_matrix)[::-1]:\n        return False\n\n    # If all checks pass, the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    my_matrix (list of lists): a matrix of integers\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n\n    Example:\n    magic_square_test([[8, 1, 6], [3, 5, 7], [4, 9, 2]]) # True\n    magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) # False\n    \"\"\"\n\n    # calculate the sum of the rows\n    row_sums = [sum(row) for row in my_matrix]\n\n    # calculate the sum of the columns\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n\n    # calculate the sum of the 2x2 squares\n    square_sums = [sum(row[i:i+3] for row in my_matrix) for i in range(0, len(my_matrix[0]), 3)]\n\n    # check if the sums are equal\n    if row_sums == col_sums == square_sums:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Calculate the sum of the diagonal elements of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n\n    # Check if the diagonal sum is equal to the sum of the matrix elements\n    if diagonal_sum == sum(row[i] for row in my_matrix for i in range(len(row))):\n        # Check if the matrix is a magic square\n        for row in my_matrix:\n            for i in range(len(row)-1):\n                if row[i] == row[i+1]:\n                    return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(set(my_matrix)):\n        return False\n    row_sums = sum(row)\n    col_sums = [sum(row[i] for row in my_matrix) for i in range(len(my_matrix[0]))]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    diag_sum2 = sum(my_matrix[i][len(my_matrix)-1-i] for i in range(len(my_matrix)))\n    return row_sums == col_sums == diag_sum1 == diag_sum2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix has the same number of rows and columns\n    n = len(my_matrix)\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Calculate the sum of the off-diagonal elements\n    off_diagonal_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                off_diagonal_sum += my_matrix[i][j]\n    \n    # Return True if the sum of the diagonal elements is equal to the sum of the off-diagonal elements\n    return diagonal_sum == off_diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the rows and columns\n    row_sum = sum(sum(row) for row in my_matrix)\n    col_sum = sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix)))\n\n    # Check if the sum of the rows and columns is the same as the sum of the matrix\n    if row_sum!= col_sum or col_sum!= sum(sum(my_matrix[i][j] for j in range(len(my_matrix))) for i in range(len(my_matrix))):\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= i + j + 1:\n                return False\n\n    return True\n"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = None\n    max_count = 0\n    for num, count in freq.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_item = None\n    max_freq = 0\n\n    for num in nums:\n        freq[num] += 1\n\n    for num, count in freq.items():\n        if count > max_freq:\n            max_item = num\n            max_freq = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a defaultdict to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # loop through the list and increment the frequency of each item in the freq_dict\n    for num in nums:\n        freq_dict[num] += 1\n\n    # find the item with maximum frequency in the freq_dict and return it\n    max_item = None\n    max_freq = 0\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    max_freq = max(count.values())\n    max_item = None\n    for item, freq in count.items():\n        if freq == max_freq:\n            max_item = item\n            break\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Initialize a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n\n    # Iterate through the list and increment the frequency count for each item\n    for num in nums:\n        freq_dict[num] += 1\n\n    # Find the item with the maximum frequency count and return it\n    max_count = max(freq_dict.values())\n    for item, count in freq_dict.items():\n        if count == max_count:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count_dict[num] += 1\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    new_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels_list:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    new_str = ''\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_vowels = ''\n    for char in string:\n        if char.lower() in vowels:\n            reversed_vowels += char.lower()\n    return reversed_vowels"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    result = []\n    for char in str1:\n        if char in vowels_set:\n            result.append(char)\n    result.reverse()\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_set = set(vowels)\n    result = []\n    for char in str1:\n        if char in vowels_set:\n            result.append(char)\n    return ''.join(reversed(result))"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for char in string:\n        if char.lower() in vowels:\n            vowel_reverse = char + vowel_reverse\n        else:\n            vowel_reverse = vowel_reverse + char\n    return vowel_reverse"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_reversed_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_reversed_str += char.lower()\n    return vowel_reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels_list = list(vowels)\n    str1_list = list(str1)\n    result_list = []\n    for i in range(len(str1_list) - 1, -1, -1):\n        if str1_list[i] in vowels_list:\n            result_list.append(str1_list[i])\n    result = \"\".join(result_list)\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # join the elements of the tuple using a comma as a separator\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativesum = 0\n    for num in nums:\n        if num < 0:\n            negativesum += num\n    return negativesum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) + (2 * n * (n - 1) ** 2) // 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((2 * n) - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * hexagonal_num(n - 1) - 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # base case\n    if n == 0:\n        return 0\n\n    # calculate the sum of the first n squares\n    first_n_squares = sum([i**2 for i in range(1, n+1)])\n\n    # calculate the number of hexagonal numbers\n    num_hexagons = (first_n_squares + 2*n) // 6\n\n    # return the nth hexagonal number\n    return num_hexagons"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    else:\n        return (6 * hexagonal_num(n-1)) + hexagonal_num(n-2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*(n+1)*(n+1)\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagonal_list = []\n    for i in range(1, n+1):\n        hexagonal_list.append(2*i**2 - 1)\n    return hexagonal_list\n"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    \"\"\"\n    Given an array of integers, returns the ratio of zeroes to non-zeroes.\n\n    :param nums: array of integers\n    :return: float representing the ratio of zeroes to non-zeroes\n    \"\"\"\n    # Initialize counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate over the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[zero_count.index(num)] += 1\n    non_zero_count = sum(nums)\n    return non_zero_count/sum(zero_count)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it iterable\n    nums = list(nums)\n    # Initialize the count of non-zeroes and zeroes to 0\n    zero_count = 0\n    non_zero_count = 0\n    # Loop through the list of integers\n    for num in nums:\n        # If the integer is zero, increment the count of zeroes\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_ratio = zero_count / non_zero_count\n    # Return the ratio as a float\n    return float(zero_ratio)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return num_zeroes / num_non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an array of zeros\n    zeros = array('i', [0]*len(nums))\n    \n    # iterate through the array and count the number of zeros\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1\n    \n    # calculate the ratio of zeros to non-zeroes\n    non_zeros = len(nums) - sum(zeros)\n    ratio = zeros[0] / non_zeros\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for num in arr:\n        if num == 0:\n            count += 1\n    non_zeroes = len(nums) - count\n    if non_zeroes == 0:\n        return 0\n    return count / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize a counter for the number of zeroes\n    zero_count = 0\n\n    # Iterate over the array\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            # Increment the counter\n            zero_count += 1\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_count / len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list to make it mutable\n    nums = list(nums)\n    # Initialize a counter for zeroes and a counter for non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # Loop through the list of integers\n    for num in nums:\n        # If the integer is zero, increment the zero counter\n        if num == 0:\n            zero_count += 1\n        # Otherwise, increment the non-zero counter\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0 for _ in range(len(nums))])\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(0) + 1] += 1\n    non_zeros = len(nums) - zeros.count(0)\n    if non_zeros == 0:\n        return 1\n    return zeros[0] / non_zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zero_count[nums.index(num)] += 1\n    non_zero_count = len(nums) - sum(zero_count)\n    ratio = zero_count[0] / non_zero_count\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return False\n\n    # Check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if the number can be represented as sum of non-zero powers of 2\n    is_power_of_two = True\n    power_of_two = 2\n    while is_power_of_two:\n        if n & power_of_two!= 0:\n            return False\n        if power_of_two == n - 1:\n            return True\n        power_of_two <<= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 0\n    while n > 0:\n        if n & 1:\n            return False\n        n >>= 1\n        i += 1\n    if i == 0:\n        return True\n    return (1 << i) == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    \n    # check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # check if the number is a sum of powers of 2\n    for i in range(1, 32):\n        if n & (1 << i)!= 0:\n            if n - (1 << i) < 0:\n                return False\n            elif is_Sum_Of_Powers_Of_Two(n - (1 << i)):\n                return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the count of non-zero digits in the number\n    count = 0\n\n    # Iterate through the digits of the number and count the non-zero digits\n    while n > 0:\n        if n % 10!= 0:\n            count += 1\n        n //= 10\n\n    # Check if the count of non-zero digits is odd or even\n    if count % 2 == 0:\n        # If the count is even, the number can be represented as sum of non-zero powers of 2\n        return True\n    else:\n        # If the count is odd, the number cannot be represented as sum of non-zero powers of 2\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2: \n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n/i == 2**i or n/i == 2**(i+1):\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power_of_two = 1\n    while power_of_two <= n:\n        if n == power_of_two * power_of_two:\n            return True\n        power_of_two *= 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # If the number is 0, it can be represented as 0 or 1\n    if n == 0:\n        return True, \"0 or 1\"\n    elif n == 1:\n        return True, \"1\"\n    # If the number is 2, it can be represented as 1 or 2\n    elif n == 2:\n        return True, \"1 or 2\"\n    # If the number is odd, it can be represented as 1+2^n-1\n    elif n % 2!= 0:\n        power = 1\n        while n - power > 0:\n            power *= 2\n        return True, \"1 + 2^{} - 1\".format(power)\n    # If the number is even, it can be represented as 2^n-1 or 2^n\n    elif n % 2 == 0:\n        power = 0\n        while (n + power) % 2 == 0:\n            power += 1\n        return True, \"2^{} - 1 or 2^{}\".format(power, power)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n\n    # check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # calculate the sum of non-zero powers of 2\n    sum_of_powers = 0\n    num = 2\n    while num <= n:\n        if n % num == 0:\n            sum_of_powers += num\n        num *= 2\n\n    # check if the sum of non-zero powers of 2 is equal to n\n    return sum_of_powers == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i == 0:\n            count += 1\n            while n%i == 0:\n                n //= i\n    return count == 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n = 3 * n + 1\n            count += 1\n    return count == 1"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159265358979323846264338327950288\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    print(f\"The circumference of a circle with radius {r} is {circumference:.2f}\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r  # pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.141592653589793\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for sublist in test_list:\n        for item in sublist:\n            result.add(item)\n    return list(result)\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = []\n    for item in test_list:\n        if isinstance(item, list):\n            numbers.extend(item)\n        else:\n            numbers.append(item)\n    return set(numbers)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        flattened.extend(sublist)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        for subitem in item:\n            flattened_list.append(subitem)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # Traverse through all elements of the list\n    for i in range(n):\n\n        # Find the largest element in remaining unsorted array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the current element with the largest element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the remaining unsorted array\n        for j in range(i, n-1, -1):\n            nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        result = []\n        i = j = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    def sort_inner(nums):\n        n = len(nums)\n        for i in range(n):\n            # find the maximum element in the unsorted part\n            max_idx = i\n            for j in range(i+1, n):\n                if nums[j] > nums[max_idx]:\n                    max_idx = j\n            # swap the maximum element with the last element of the unsorted part\n            nums[i], nums[max_idx] = nums[max_idx], nums[i]\n            # reverse the unsorted part\n            for j in range(i, n-1, -1):\n                nums[i], nums[j] = nums[j], nums[i]\n        return nums\n    \n    # perform multiple iterations of pancake sort\n    for _ in range(len(nums)-1, 0, -1):\n        nums = sort_inner(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    # Helper function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Helper function to reverse the first k elements of the list\n    def reverse(nums, k):\n        start = 0\n        end = k - 1\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    # Helper function to calculate the maximum pancake size\n    def max_pancake_size(nums, k):\n        size = 0\n        for i in range(1, k + 1):\n            if nums[i - 1] <= nums[i]:\n                size = i\n                break\n        return size\n\n    # Main function to sort the list of elements using the Pancake Sort algorithm\n    def pancake_sort_helper(nums, k):\n        if k <= 1:\n            return nums\n\n        # Choose the maximum pancake size\n        pancake_size = max_pancake_size(nums, k)\n\n        # Reverse the first pancake_size elements\n        reverse(nums, pancake_size)\n\n        # Sort the remaining elements\n        pancake_sort_helper(nums, k - pancake_size)\n\n    # Call the main function to sort the list of elements\n    pancake_sort_helper(nums, len(nums))\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    def helper(nums, n):\n        # create a copy of the list to avoid modifying the original list\n        nums_copy = nums[:]\n        # for each element in the sorted part of the list\n        for i in range(n - 1):\n            # find the index of the largest element in the unsorted part of the list\n            max_index = i\n            for j in range(i + 1, n):\n                if nums_copy[j] > nums_copy[max_index]:\n                    max_index = j\n            # swap the largest element with the first element of the unsorted part of the list\n            nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n        return nums_copy\n\n    # sort the list using the helper function\n    nums_sorted = helper(nums, len(nums))\n    # return the sorted list\n    return nums_sorted"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def get_max_heap(nums):\n        max_heap = []\n        heapify(nums, max_heap)\n        return max_heap\n    \n    def heapify(nums, max_heap):\n        \"\"\"\n        Build max heap from nums.\n        \"\"\"\n        for i in range(len(nums)):\n            max_heap.append(nums[i])\n            nums[i] = nums[0]\n            nums = nums[1:]\n            sift_down(nums, max_heap, 0, len(nums) - 1)\n    \n    def sift_down(nums, max_heap, start, end):\n        \"\"\"\n        Maintain max heap property by moving the largest element to the end.\n        \"\"\"\n        max_index = start\n        for i in range(start + 1, end + 1):\n            if nums[i] > max_heap[max_index]:\n                max_index = i\n        if max_index!= start:\n            nums[start], nums[max_index] = nums[max_index], nums[start]\n            sift_down(nums, max_heap, start, max_index)\n    \n    max_heap = get_max_heap(nums)\n    while max_heap!= nums:\n        max_heap.pop()\n        nums.append(max_heap.pop())\n        max_heap = get_max_heap(nums)\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the pancake of maximum length from i to max_idx\n        pancake_reverse(nums, i, max_idx)\n\n\ndef pancake_reverse(nums, start, end):\n    '''\n    Reverse the pancake of maximum length from start to end.\n    '''\n    while start < end:\n        nums[start], nums[end] = nums[end], nums[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Create a copy of the list to avoid modifying the original\n    nums_copy = nums.copy()\n\n    # Loop through the list in reverse order\n    for i in range(len(nums_copy) - 1, 0, -1):\n        # Find the maximum element in the list up to the i-th element\n        max_index = 0\n        for j in range(1, i + 1):\n            if nums_copy[j] > nums_copy[max_index]:\n                max_index = j\n        # Swap the maximum element with the i-th element\n        nums_copy[i], nums_copy[max_index] = nums_copy[max_index], nums_copy[i]\n\n    return nums_copy"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    def sort_helper(nums):\n        for i in range(len(nums)):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n\n    for i in range(len(nums)-1, 0, -1):\n        sort_helper(nums[:i])\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    n = len(nums)\n    # Perform pancake sort\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the i-th element\n        swap(nums, i, max_idx)\n\n        # Reverse the remaining elements of the list\n        start = i + 1\n        end = n - 1\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n        # Reverse the unsorted part of the list\n        start = i + 1\n        end = n - 1\n        while start < end:\n            swap(nums, start, end)\n            start += 1\n            end -= 1\n\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and returns the number of items that are identical in the same position of each list.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0 \n    for i in Input: \n        if type(i) == list: \n            count += 1 \n    return count "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    # initialize variables for min and max values\n    min_val = arr[0]\n    max_val = arr[0]\n    # loop through the array\n    for i in range(1, len(arr)):\n        # check if the current element is smaller than the min value\n        if arr[i] < min_val:\n            min_val = arr[i]\n        # check if the current element is larger than the max value\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    # return the absolute difference between the max and min values\n    return abs(max_val - min_val)"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # calculate the maximum difference between any two elements\n    max_diff = abs(arr[-1] - arr[0])\n\n    # calculate the maximum difference between any two adjacent elements\n    for i in range(1, len(arr) - 1):\n        diff = abs(arr[i] - arr[i-1])\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort() # sort the array in ascending order\n    max_diff = abs(arr[1]-arr[0]) # find the difference between the first and second elements\n    for i in range(2,len(arr)): # iterate through the rest of the array\n        diff = abs(arr[i]-arr[i-1]) # find the difference between current element and previous element\n        max_diff = max(max_diff,diff) # update the maximum difference\n    return max_diff # return the maximum difference"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the maximum absolute difference to the first element\n    max_diff = abs(arr[1] - arr[0])\n\n    # Iterate through the remaining elements in the array\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update the maximum absolute difference if the current difference is greater\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes a list as an argument and returns the maximum difference between any two elements in the list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = None\n    y = None\n    # iterate through integers from 0 to n\n    for i in range(n):\n        # calculate the value of x and y that satisfy the equation\n        x = (-b + (a * i)) // a\n        y = (-b - (a * i)) // a\n        # check if the solution satisfies the equation\n        if a * x + b * y == n:\n            return (x, y)\n    # if no solution is found, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the discriminant\n    disc = b**2 - 4*a*n\n\n    # Check if the discriminant is positive or negative\n    if disc < 0:\n        return None\n\n    # Find the two roots\n    root1 = (-b + disc**0.5) / (2*a)\n    root2 = (-b - disc**0.5) / (2*a)\n\n    # Return the two roots as a tuple\n    return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n//a+1):\n        y = n//a*x - x*b\n        if y % a == 0:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n    \n    x = (-n + b) / a\n    y = (-n - b) / a\n    \n    if x % 1 == 0 and y % 1 == 0:\n        return (int(x), int(y))\n    \n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if (a + b * i) == n:\n            return (i, 1)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the value of x\n    x = (n - b) / a\n\n    # Calculate the value of y\n    y = (n - a * x) / b\n\n    # Check if x and y satisfy the equation\n    if a * x + b * y == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n, -1, -1):\n        if a * i + b * n == n:\n            x = i\n            y = n // i\n            break\n    if x is None:\n        return None\n    else:\n        return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(1, n // a + 1):\n        if (a * i * i + b * i) == n:\n            return (i, i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None\n\n    if b == 0:\n        return (int(-n / a), 0)\n\n    if a > 0:\n        x0 = -n / a\n        x1 = (b - n) / a\n        x2 = (b + n) / a\n    else:\n        x0 = (b - n) / a\n        x1 = (b + n) / a\n        x2 = -n / a\n\n    y0 = 0\n    y1 = x0 * a + y0\n    y2 = x2 * a + y0\n\n    if x0 == x1 == x2:\n        return (int(x0), int(y0))\n    elif x0 == x1 or x0 == x2 or x1 == x2:\n        return None\n    else:\n        return (int(x0), int(y0), int(x1), int(y1), int(x2), int(y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Initialize two variables to keep track of the potential solutions\n    x1 = 0\n    x2 = 0\n\n    # Loop through the possible values of x\n    while x1 <= n:\n        # Calculate the potential solution y\n        y = a * x1 + b * x2\n\n        # Check if the potential solution is correct\n        if y == n:\n            # If the solution is correct, return the tuple (x1, x2)\n            return (x1, x2)\n\n        # Increment x2 by 1\n        x2 += 1\n\n    # If no solution is found, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Loop through each element of the first list\n    for i in range(len(list1)):\n        # Check if the element is present in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the first list\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Create a new list to store the elements in list1 that are not present in list2\n    new_list = [element for element in list1 if element not in list2]\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new empty list to store the final result\n    result = []\n    # iterate over the elements of the first list\n    for elem in list1:\n        # if the element is not present in the second list, add it to the result list\n        if elem not in list2:\n            result.append(elem)\n    # return the final result list\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a new list to store the elements from the original list that are not present in the second list\n    result = [x for x in list1 if x not in list2]\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Iterate over the first list\n    for i in range(len(list1)):\n        # Check if the current element is present in the second list\n        if list1[i] in list2:\n            # If it is, remove it from the first list\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # Initialize the sum and the index\n    sum_i = 0\n    i = 0\n\n    # Iterate until i reaches n // 2\n    while i < n // 2:\n        # Add the sum of i and the sum of n - i to the sum\n        sum_i += n - i\n        i += 1\n\n    # Return the final sum\n    return sum_i"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(0, n//2):\n        total += n - 2*i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n // 2):\n        s += (n - 2*i)\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 3:\n        return 0\n    \n    total = 0\n    for i in range(n // 2):\n        total += (n - 2 * i)\n    \n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total_sum = 0\n    i = 0\n    while i < n//2:\n        total_sum += n - 2*i\n        i += 1\n    return total_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the side length of the polygon\n    side_length = s / l\n    \n    # Calculate the area of the polygon\n    area = l * (side_length ** 2) / (4 * tan(pi / l))\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Convert angle from degrees to radians\n    angle = pi/180\n    \n    # Calculate the area using the formula for the area of a regular polygon\n    area = 0.5 * s * (tan(angle*360/l) ** 2)\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((i * 2 * pi) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the area using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan(i * 2 * pi / l)\n    return area / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan((i*2*pi)/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s*l**2)/(4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(i * pi / l)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Compute the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_sum += i\n\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def get_divisors(num):\n        divs = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divs.append(i)\n                if i!= num/i:\n                    divs.append(num/i)\n        return divs\n    \n    def sum_divisors(divs):\n        return sum(divs)\n    \n    div1 = get_divisors(n)\n    div2 = get_divisors(m)\n    \n    if sum_divisors(div1) == sum_divisors(div2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    divisors_sum = sum(range(1, n+1))\n\n    # Check if the sum of the divisors is the same as n\n    if divisors_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Get the divisors of n\n    divisors = [i for i in range(1, n+1) if n % i == 0]\n\n    # Calculate the sum of the divisors\n    div_sum = sum(divisors)\n\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum(range(1, n+1))\n    # Calculate the sum of the divisors of the result of n*n\n    div_sum_sq = sum(range(1, n*n+1))\n    # Compare the two sums\n    if div_sum == div_sum_sq:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) > 2:\n        return False\n    if len(divisors) == 2 and sum(divisors) == n:\n        return True\n    if len(divisors) == 2 and sum(divisors)!= n:\n        return False\n    return divisors"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # find the divisor sum of the first integer\n    d1 = sum(range(1, n+1))\n    \n    # find the divisor sum of the second integer\n    d2 = sum(range(1, n+1, 2))\n\n    # check if the two sums are the same\n    if d1 == d2:\n        print(f\"The sum of the divisors of {n} is {d1}.\")\n    else:\n        print(f\"The sum of the divisors of {n} is different from the sum of the divisors of {n//2}.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to check if two numbers are equal or not\n    def are_equal(num1, num2):\n        return num1 == num2\n    \n    # Function to find the sum of divisors of a number\n    def sum_of_divisors(num):\n        sum = 0\n        for i in range(1, num + 1):\n            if num % i == 0:\n                sum += i\n        return sum\n    \n    # Function to find the sum of the divisors of two numbers\n    def sum_of_two_divisors(num1, num2):\n        sum1 = sum_of_divisors(num1)\n        sum2 = sum_of_divisors(num2)\n        return abs(sum1 - sum2)\n    \n    # Calculate the sum of the divisors of n and m\n    sum1 = sum_of_divisors(n)\n    sum2 = sum_of_divisors(m)\n    \n    # Calculate the sum of the two numbers and check if they are equal or not\n    sum_of_nums = sum_of_two_divisors(n, m)\n    if are_equal(sum1, sum_of_nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_of_n = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_of_n.add(i)\n    \n    sum_of_divisors = sum(divisors_of_n)\n    if len(divisors_of_n) == 2 and sum_of_divisors == n:\n        print(f\"The sum of the divisors of {n} is equal to {n}.\")\n    else:\n        print(f\"The sum of the divisors of {n} is not equal to {n}.\")\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n):\n    \"\"\"\n    This function determines if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # calculate the sum of the divisors of n\n    div_sum = sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n\n    # return True if the sum is the same as n, False otherwise\n    return div_sum == n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase to make case-insensitive comparisons\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to count the number of occurrences of each character\n    char_count = {}\n    \n    # Iterate over each character in the input string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary with a count of 1\n        if char.isalpha():\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n    \n    # Iterate over the English alphabet and count the number of occurrences of each character\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i, char in enumerate(alphabet):\n        if char in char_count:\n            char_count[char] += 1\n    \n    # Return the dictionary of character counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a vowel (case insensitive)\n        if char.lower() in ['a', 'e', 'i', 'o', 'u']:\n            # If the character is a vowel, add it to the dictionary with a count of 1\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Print the dictionary\n    print(char_count)"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is a vowel and its position in the alphabet matches its position in the string, increment the count\n        if char in 'aeiou':\n            if ord(char) == ord(str1[count]):\n                count += 1\n\n    # Return the count of vowels that occur at the same position as their letters in the English alphabet\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        if str1.lower()[i].isalpha():\n            count += str1.lower().count(str1.lower()[i])\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    # Initialize an empty dictionary to store the character counts\n    char_counts = {}\n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make it case-insensitive\n        char_lc = char.lower()\n        # If the character is not already in the dictionary, set its count to 1\n        if char_lc not in char_counts:\n            char_counts[char_lc] = 1\n        # If the character is already in the dictionary, increment its count by 1\n        else:\n            char_counts[char_lc] += 1\n    # Return the dictionary of character counts\n    return char_counts"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if str1.lower().find(alphabet[i].lower())!= -1:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for char in str1:\n        if char.lower() in english_alphabet:\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the string to lowercase\n    str1 = str1.lower()\n\n    # create a dictionary to store the count of characters at each position in the English alphabet\n    char_count = {}\n\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter\n        if char.isalpha():\n            # get the character's position in the English alphabet (a-z)\n            position = ord(char) - ord('a')\n            # check if the position exists in the dictionary\n            if position in char_count:\n                # increment the count if the position exists\n                char_count[position] += 1\n            else:\n                # add the position to the dictionary with a count of 1\n                char_count[position] = 1\n\n    # loop through the dictionary and print the count of characters at each position\n    for position in char_count:\n        print(chr(position + ord('a')), char_count[position])"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    # convert string to lowercase\n    str1 = str1.lower()\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in char_count:\n            # if it is, increment its count by 1\n            char_count[char] += 1\n        else:\n            # if it's not, add it to the dictionary with a count of 1\n            char_count[char] = 1\n    # initialize a counter to keep track of the total number of characters\n    total_chars = 0\n    # iterate through each character in the string again and count the occurrences\n    for char in str1:\n        # check if the character is in the dictionary\n        if char in char_count:\n            # if it is, increment its count by 1\n            total_chars += char_count[char]\n    # return the total number of characters\n    return total_chars"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Initialize an empty dictionary to store the count of each character\n    count_dict = {}\n    # Convert the input string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Loop through each character in the string\n    for char in str1:\n        # Check if the character is a vowel\n        if char in ['a', 'e', 'i', 'o', 'u', 'y']:\n            # If it is, check if the previous character is a vowel\n            if len(count_dict) == 0 or (count_dict and char!= list(count_dict.keys())[0]):\n                # If it is, add it to the dictionary with a count of 1\n                count_dict[char] = 1\n            else:\n                # If it isn't, increment the count of the previous character by 1\n                count_dict[list(count_dict.keys())[0]] += 1\n    # Return the count of each character\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_result = A[i] ^ A[j]\n            if xor_result % 2 == 0:\n                even_pair_count += 1\n\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 2*A[j]:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1,len(A)): \n            if (A[i]+A[j])%2 == 0: \n                count += 1 \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary and count the number of 1's\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    \n    # Return 2 raised to the power of count\n    return 2 ** count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n\n    # Find the next power of 2\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n\n    # Return the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    # Initialize the current power of 2\n    power_of_2 = 1\n    # Iterate through the binary representation\n    for bit in binary:\n        # If the bit is 1, then multiply the power of 2 by 2\n        if bit == '1':\n            power_of_2 *= 2\n        # If the bit is 0, then we can move to the next power of 2\n        else:\n            break\n    # Return the next power of 2 greater than or equal to n\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # set initial value\n    power = 1\n\n    # loop while power is less than or equal to n\n    while power <= n:\n        # increment power\n        power *= 2\n\n    # return result\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # find the power of 2 that is greater than or equal to n\n        power_of_2 = 1\n        while power_of_2 < n:\n            power_of_2 <<= 1\n        return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the smallest power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the smallest power of 2 greater than or equal to n.\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n    # Return the smallest power of 2 greater than or equal to n.\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 0\n    while n % 2 == 0:\n        n /= 2\n    return 2**floor(log2(n+1))\n\nprint(next_power_of_2(256))  # Output: 512\nprint(next_power_of_2(4))    # Output: 4\nprint(next_power_of_2(1))    # Output: 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    '''\n    This function takes an integer as input and returns the smallest power of 2 \n    greater than or equal to the input.\n    '''\n    # The binary representation of n in a string format\n    binary_rep = bin(n)[2:]\n    # Initialize the power of 2 to 1\n    power = 1\n    # Iterate through the binary representation of n, starting from the rightmost bit\n    for i in range(len(binary_rep)-1, -1, -1):\n        # If the rightmost bit is 1, then multiply the power of 2 by 2\n        if binary_rep[i] == '1':\n            power *= 2\n        # If the rightmost bit is 0, then the power of 2 remains the same\n        else:\n            break\n    # Return the power of 2 as an integer\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power <<= 1\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes in a list and a number as inputs, and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for item in a:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if i == x: \n            count += 1 \n    return count "
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += i\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize the sum variable to 0\n    total = 0\n    # loop through the list from index m to n\n    for i in range(m, n+1):\n        # add each number in the list to the sum variable\n        total += list1[i-1]\n    # return the sum of numbers in the specified range\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Check if the indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n\n    # Calculate the sum of numbers in the range\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total_sum += i\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n\n    sum_list = []\n    for i in range(m, n+1):\n        if i in list1:\n            sum_list.append(list1[i])\n    return sum(sum_list)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize the sum variable to zero\n    sum_list = 0\n\n    # Loop through the list from the first index to the second index\n    for i in range(m, n+1):\n        # Check if the current index is within the range of the list\n        if i >= 0 and i < len(list1):\n            # Add the current element of the list to the sum variable\n            sum_list += list1[i]\n\n    # Return the sum of the numbers in the specified range\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_val += list1.index(i)\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    total = 0\n    for i in range(m, n+1):\n        if i in list1:\n            total += list1.index(i)\n    return total"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    circumference = 5 * a\n    return circumference"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n\na = float(input(\"Enter the length of one side of the pentagon: \"))\n\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the semi-perimeter of the pentagon using the formula 5/2 * a\n    semi_perimeter = 5/2 * a\n\n    # Calculate the area of the pentagon using the formula (5/2) * a^2\n    area = (5/2) * a**2\n\n    # Calculate the diagonal of the pentagon using the Pythagorean theorem\n    diagonal = math.sqrt(3) * a\n\n    # Find the circumference of the pentagon using the formula 5 * diagonal\n    circumference = 5 * diagonal\n\n    # Calculate the perimeter of the pentagon by adding up the semi-perimeter, the area, and the circumference\n    total_perimeter = semi_perimeter + area + circumference\n\n    return total_perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='s' and s[i-1] == 't' and s[i+1] == 'd':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' and s[1:3] == 'td':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    std_count = 0\n    std_index = s.find('std')\n    while std_index!= -1:\n        std_count += 1\n        std_index = s.find('std', std_index+1)\n    return std_count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])  # get the first element's data type\n    for element in test_tuple:\n        if type(element)!= data_type:  # if element has different data type than the first one\n            return False  # return False if any element has different data type\n    return True  # return True if all elements have the same data type"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    \n    for i in range(1, len(test_tuple)):\n        if not isinstance(test_tuple[0], type(test_tuple[i])):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    first_elem = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    first_elem_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= first_elem_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    if not isinstance(test_tuple, tuple):\n        return False\n    else:\n        for i in range(len(test_tuple)):\n            if not isinstance(test_tuple[i], type(test_tuple[0])):\n                return False\n        return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        types.append(type(element))\n    if len(set(types)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n\n    # Iterate over the remaining elements in the tuple\n    for element in test_tuple[1:]:\n        # Check if the data type of the current element is same as the first element\n        if type(element)!= data_type:\n            return False\n\n    # If all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n    return len(data_types) == 1"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count >= n/2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize a counter variable to keep track of the occurrences of the element x\n    count = 0\n    \n    # Iterate through the array and count the occurrences of x\n    for num in arr:\n        if num == x:\n            count += 1\n            \n    # Check if the count is greater than or equal to n/2\n    if count >= n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    # Calculate the frequency of x in arr\n    freq = 0\n    for num in arr:\n        if num == x:\n            freq += 1\n    \n    # If x occurs more than n/2 times in arr, return True\n    if freq > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n        if count > n/2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n\n    while i < n:\n        if arr[i] == x:\n            count += 1\n        i += 1\n\n    return count > n // 2"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Create a new empty string to store the result\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if (len(str) - str.index(char)) % 2 == 0:\n            # If the character has an odd index, add it to the result string\n            result += char\n    # Return the result string\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters with odd index values of a given string.\n    \"\"\"\n    return ''.join([string[i] for i in range(len(string)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return \"\".join([chr(ord(c) - 1) if (i % 2 == 0) else c for i, c in enumerate(str)])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    str = str.lower()\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join(filter(lambda x: x % 2 == 0, str))"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] if i % 2 == 0 else '' for i in range(len(str))])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Initialize an empty string to store the final string\n    final_str = \"\"\n    \n    # Loop through each character of the string\n    for i in range(len(str)):\n        # If the index of the current character is odd, append it to the final string\n        if i % 2!= 0:\n            final_str += str[i]\n    \n    # Return the final string\n    return final_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function takes a string as input and returns the string with the odd index characters removed.\n    \"\"\"\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if len(result) % 2 == 0:\n            # If it is, append the character to the result string\n            result += char\n        else:\n            # If it isn't, ignore it\n            pass\n            \n    # Return the result string\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    if n < 0 or l < 0 or r < 0:\n        return \"Invalid input\"\n\n    # Initialize all the bits as set\n    count = 0\n    for i in range(n):\n        count += 2**i\n\n    # Check if all the bits are set in the given range\n    if count <= (2**l + 2**r - 1):\n        return \"All the bits are set in the given range\"\n    else:\n        return \"Not all the bits are set in the given range\""
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Convert the given range to a binary string\n    range_binary = bin(r)[2:]\n\n    # Convert the given number to binary string\n    number_binary = bin(n)[2:]\n\n    # Check whether all the bits in the number are set in the range or not\n    for i in range(len(number_binary)):\n        if int(number_binary[i]) == 0 and range_binary[i] == '1':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    return (1 << n) - 1 >= r - l"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # To check whether all bits are set or not, we need to check whether all the bits of the range l to r are set or not.\n    # We can use bitwise XOR operator to check whether all bits are unset or not.\n    # To check whether all the bits of the range l to r are set or not, we need to iterate over all the bits of n between l and r and check whether the bit is set or not.\n    # If the bit is set, then the range l to r is not all bits unset. If all bits are unset, then the function will return True.\n    # If the bit is not set, then we can continue to the next bit.\n\n    # Initialize a variable called 'unset_bits' to 0 which will keep track of the number of unset bits.\n    unset_bits = 0\n\n    # Iterate over all the bits of n between l and r.\n    for i in range(l, r + 1):\n        # Check whether the i-th bit of n is set or not. If it is set, then increment the 'unset_bits' variable by 1.\n        if n & (1 << i):\n            unset_bits += 1\n        # If the i-th bit of n is not set, then we can continue to the next bit.\n\n    # If all the bits of the range l to r are unset, then the function will return True.\n    if unset_bits == 0:\n        return True\n    # If the range l to r is not all bits unset, then the function will return False.\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n    mask = 2**l-1 # Set the mask to the bits set in the given range\n    # Check whether the leftmost bit of n is set\n    if (n & mask)!= mask:\n        return False\n    # Check whether all the remaining bits are unset in the range\n    for i in range(l, r+1):\n        if (n & (2**i-1))!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Convert the given range to a binary string\n    binary_str = bin(n)[2:]\n\n    # Check if all the bits are set in the range\n    all_bits_set = True\n    for i in range(l, r + 1):\n        if int(binary_str[i]) == 0:\n            all_bits_set = False\n            break\n\n    return all_bits_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range into a bitwise representation\n    range_bits = bin(l)[2:].zfill(r-l+1)\n    # Iterate through the bits of the given number and check if all the bits are unset\n    for bit in bin(n)[2:]:\n        if bit == '1':\n            if bit in range_bits:\n                range_bits.remove(bit)\n            else:\n                return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range into binary string format\n    bin_str = bin(r)[2:].zfill(n)\n    bin_str = bin_str.zfill(n)[-n:]\n\n    # Check if all the bits are unset in the given range\n    for i in range(n):\n        if bin_str[i] == '0':\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n\n    # Calculate the range of bits that are set in the given range\n    range_bits = n & ((1 << (r - l + 1)) - 1)\n\n    # Check whether all the bits are unset in the given range or not\n    if range_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Check if all bits in the given range are set to 1\n    for i in range(l, r+1):\n        # Check if the bit i is set to 0\n        if n & (1 << i)!= 0:\n            return False\n\n    # If all the bits in the given range are set to 0, then the function will return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Count the number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    for num in arr[:n]:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    \n    # Re-arrange the array so that negative elements appear before positive ones\n    for i in range(n):\n        if i < neg_count:\n            arr[i] = -arr[i]\n        elif i < neg_count + pos_count:\n            arr[i] = arr[i - neg_count]\n        else:\n            arr[i] = -arr[i - neg_count - pos_count]\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_count = 0\n    pos_count = 0\n    neg_start = 0\n    pos_start = n\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n            if neg_count == 1:\n                neg_start = i\n        else:\n            pos_count += 1\n            if pos_count == 1:\n                pos_start = i\n    for i in range(pos_start, len(arr)):\n        if arr[i] < 0:\n            arr[neg_start], arr[i] = arr[i], arr[neg_start]\n            neg_start += 1\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers: one for positive elements and one for negative elements\n    i, j = 0, n - 1\n    \n    # Iterate over the input array\n    while i < j:\n        # Move the positive elements to the left until we find one that's greater than its current position\n        while i < j and arr[i] > 0:\n            i += 1\n        # Move the negative elements to the right until we find one that's less than its current position\n        while i < j and arr[j] < 0:\n            j -= 1\n        # Swap the two elements if they're in the wrong order\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    \n    # Return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0  # Initialize an index variable\n    j = 0  # Initialize a second index variable\n    neg = False  # Initialize a boolean variable to keep track of whether the current element is negative or positive\n\n    # Traverse the array\n    while i < len(arr):\n        if arr[i] < 0:  # If the current element is negative\n            if neg:  # If the previous element was also negative\n                j -= 1  # Move the second index one position to the left\n                neg = False  # Reset the boolean variable to indicate that the previous element is now positive\n            else:  # If the previous element was positive or zero\n                j += 1  # Move the second index one position to the right\n                neg = True  # Set the boolean variable to indicate that the current element is now negative\n        else:  # If the current element is positive or zero\n            if neg:  # If the previous element was also negative\n                j -= 1  # Move the second index one position to the left\n                neg = False  # Reset the boolean variable to indicate that the previous element is now positive\n            else:  # If the previous element was positive\n                j += 1  # Move the second index one position to the right\n                neg = True  # Set the boolean variable to indicate that the current element is now negative\n\n        i += 1  # Move the index one position to the right\n\n    # Copy the re-arranged portion of the array into a new array\n    new_arr = arr[:j] + arr[j:]\n\n    # Return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # first, sort the array in descending order\n    arr.sort(reverse=True)\n    \n    # create two empty lists to store the negative and positive elements\n    neg_list = []\n    pos_list = []\n    \n    # iterate through the sorted array and add the elements to the appropriate lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_list.append(arr[i])\n        else:\n            pos_list.append(arr[i])\n    \n    # add the remaining elements to the end of the arrays\n    for i in range(n, len(arr)):\n        neg_list.append(arr[i])\n    \n    # concatenate the lists and return the result\n    return neg_list + pos_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create a list to store positive elements\n    pos = []\n    # Create a list to store negative elements\n    neg = []\n    # Loop through the array\n    for i in arr:\n        # If the element is positive, append it to the pos list\n        if i >= 0:\n            pos.append(i)\n        # If the element is negative, append it to the neg list\n        else:\n            neg.append(i)\n    # Append the remaining elements from the array to the pos list\n    for i in arr[n:]:\n        pos.append(i)\n    # Concatenate the pos and neg lists to form the final array\n    result = neg + pos\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize negative and positive count\n    neg_count = 0\n    pos_count = 0\n    \n    # Iterate through the array and count the negative and positive elements\n    for num in arr:\n        if num < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n            \n    # If n is greater than the total number of elements, return the original array\n    if n > neg_count + pos_count:\n        return arr\n    \n    # Initialize the new array with the first n elements\n    new_arr = arr[:n]\n    \n    # Iterate through the remaining elements in the array\n    i = 0\n    for num in arr[n:]:\n        # If the element is negative, add it to the new array at the end\n        if num < 0:\n            new_arr.append(num)\n        # Otherwise, add it to the new array at the beginning\n        else:\n            new_arr.insert(0, num)\n            i += 1\n        \n        # If the count of negative elements has exceeded n, break out of the loop\n        if i >= neg_count:\n            break\n    \n    # Return the new array with the re-arranged elements\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    # Count the number of positive and negative elements\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    # Create two empty lists to store positive and negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # Separate the positive and negative elements from the original array\n    for i in range(n):\n        if arr[i] >= 0:\n            pos_arr.append(arr[i])\n        else:\n            neg_arr.append(arr[i])\n\n    # Combine the positive and negative elements in the desired order\n    for i in range(neg_count):\n        pos_arr.append(neg_arr.pop(0))\n\n    for i in range(pos_count):\n        neg_arr.append(pos_arr.pop(0))\n\n    # Add the remaining elements from the original array\n    for i in range(n, len(arr)):\n        neg_arr.append(arr[i])\n\n    # Print the re-arranged array\n    print(neg_arr + pos_arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Separate the elements into negative and positive\n    neg_arr = [x for x in arr[:n] if x < 0]\n    pos_arr = [x for x in arr[:n] if x >= 0]\n\n    # Sort the negative array in ascending order\n    neg_arr.sort()\n\n    # Reverse the order of negative and positive elements\n    neg_arr.reverse()\n    pos_arr.reverse()\n\n    # Combine the negative and positive arrays and return the result\n    return neg_arr + pos_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Find all the negative elements\n    negatives = []\n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(i)\n    \n    # Find all the positive elements\n    positives = []\n    for i in range(n, len(arr)):\n        if arr[i] > 0:\n            positives.append(i)\n    \n    # Combine the negative and positive elements into a single list\n    combined = negatives + positives\n    \n    # Shuffle the combined list using the Fisher-Yates algorithm\n    for i in range(len(combined)-1, 0, -1):\n        j = random.randint(0, i)\n        combined[i], combined[j] = combined[j], combined[i]\n    \n    # Insert the combined list into the original array\n    for i in range(n):\n        arr[i] = combined.pop(0)\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"\") # remove all blank spaces\n    return str1 + char # add the character to the end of the string"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\") + char"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Replace all the blank spaces with the specified character in the string\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i!= \" \":\n            str2 += i\n        else:\n            str2 += char\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    # Convert the string to a list of characters\n    str_list = list(str1)\n    \n    # Iterate over each character in the list\n    for i in range(len(str_list)):\n        # Check if the character is a blank space\n        if str_list[i] =='':\n            # Replace the blank space with the character\n            str_list[i] = char\n    \n    # Convert the list back to a string\n    result = ''.join(str_list)\n    \n    return result"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #replace blank spaces with the specified character\n    str1 = str1.replace(\" \",char)\n    #return the modified string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0] for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use heapq library to create a max heap of size n\n    max_heap = []\n    heapq.heapify(max_heap)\n    \n    # Fill the max heap with the first n elements of the list\n    for num in list1[:n]:\n        heapq.heappush(max_heap, num)\n    \n    # Fill the max heap with the remaining elements of the list\n    for num in list1[n:]:\n        # If the current element is greater than or equal to the smallest element in the max heap,\n        # remove the smallest element and push the current element to the heap\n        if num >= heapq.heappop(max_heap):\n            heapq.heappush(max_heap, num)\n    \n    # Return the list containing the n largest elements from the list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_nums = list(set(list1))\n    # create a min-heap of size n to store the n largest numbers\n    heap = []\n    # add the first n numbers from the list to the min-heap\n    for num in unique_nums[:n]:\n        heapq.heappush(heap, num)\n    # add the remaining numbers from the list to the min-heap\n    for num in unique_nums[n:]:\n        # if the heap size is less than n, we can add the number to it\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        # if the heap size is greater than n, we need to remove the smallest number from the heap to add the new number\n        else:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n    # return the n largest numbers in the heap\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # convert the list to a min heap\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n\n    # extract the n largest items and return them as a list\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # convert the list to a heapq, where the largest item has the highest priority\n    h = [heapq.heappushpop(heapq.heapify(list1), i) for i in list1]\n    # get the first n items from the heap\n    result = [h[0]]\n    # remove the first item from the heap\n    heapq.heappop(h)\n    # add the remaining items back to the heap\n    heapq.heapify(h)\n    return result + [heapq.heappushpop(h, i) for i in h]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list into a min heap\n    min_heap = [x for x in list1]\n    heapq.heapify(min_heap)\n    # extract the n largest elements and return them in a new list\n    return heapq.nlargest(n, min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap, list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*r*h)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r,h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n    \n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    lateral_area = 2 * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the area of the cylinder using Heron's formula\n    area = (2 * math.pi * r * r) + (2 * math.pi * r * h) + (2 * math.pi * h * h)\n    # Calculate the lateral surface area by subtracting the area of the cylinder from the surface of a sphere\n    lateral_surface_area = (4 * math.pi * r ** 2) - area\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Find the lateral surface area of a cylinder\n    lateral_surface_area = 2 * r * h * 3.14159\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula A = pi*(r^2 + h^2)\n    A = 2*3.14159*(r**2 + h**2)\n    # Return the result\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n\n    # calculate the lateral surface area of the cylinder using the formula\n    # lateral surface area = 2*pi*r^2\n    lateral_surface_area = 2*math.pi*r**2\n\n    # return the lateral surface area of the cylinder\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #Calculating lateral surface area using formula\n    LSA = 2*pi*r*h #radius and height variables\n    \n    return LSA"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    return (2*r**2*h) + (2*r*h**2) + (r**2*h**2)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * 3.14159 * r * h\n    print(\"The lateral surface area of a cylinder is:\", lateral_surface_area)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty list to store even bits \n    even_bits = []\n    # Iterate over each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the even_bits list\n        if int(bit) % 2 == 0:\n            even_bits.append(int(bit))\n    # Convert the list to an integer and return it\n    return int(\"\".join(map(str, even_bits)))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    for i in range(32):\n        if n & 1 == 0:\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize variable to store result\n    result = 0\n\n    # loop through each bit in the number\n    for i in range(32):\n        # check if current bit is even\n        if n & (1 << i):\n            # if even, set the corresponding bit in the result\n            result |= (1 << i)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number with all even bits set to 1.\n    even_bits_set = 0\n    # Loop through each bit in the binary representation of the input number.\n    for bit in bin(n)[2:]:\n        # If the current bit is an even bit (i.e., 0), set it to 1.\n        if bit == '0':\n            even_bits_set += 1\n        # If the current bit is an odd bit (i.e., 1), set it to 0.\n        else:\n            even_bits_set += 0\n    # Return the number with all even bits set to 1.\n    return even_bits_set"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result of bitwise AND operation\n    even_bits = 0\n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set the corresponding bit in the result\n        if bit == '1':\n            even_bits |= 1 << (len(bin(n)[2:]) - int(bit))\n    # Return the result of bitwise AND operation\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Create a binary string representation of the given number\n    binary_str = bin(n)[2:]\n    # Initialize an empty string to store the number with even bits set\n    even_bits_set_number = \"\"\n    # Iterate through each character in the binary string and set the corresponding bit to 1\n    for char in binary_str:\n        if char == \"1\":\n            even_bits_set_number += \"1\"\n        else:\n            even_bits_set_number += \"0\"\n    # Convert the binary string to an integer and return it\n    return int(even_bits_set_number, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n:\n        # get the last bit of the number\n        last_bit = n & 1\n        # set the last bit to 1 (even)\n        n |= (last_bit << 1)\n        # remove the last bit from the number\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the number of even bits\n    count = 0\n    \n    # Loop through the bits of the number\n    for i in range(32): \n        # Check if the current bit is even\n        if (n >> i) & 1: \n            # Set the even bit\n            n |= 1 << i\n            # Increment the count\n            count += 1\n    \n    # Return the updated number\n    return n, count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n & 0x55555555  # filter even bits with bitwise AND operator\n    return even_bits | 0xAAAAAAAA  # set all bits to 1 with bitwise OR operator"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set so that duplicates are automatically removed\n    unique_tuples = set(test_list)\n    \n    # Use the Counter function from the Counter module to count the occurrences of each unique tuple\n    counts = Counter(unique_tuples)\n    \n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Convert the Counter to a dictionary and return it\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # Create a Counter object from the test_list\n    counter = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    \n    # Use Counter to count the number of occurrences of each tuple in the set\n    count_dict = Counter(unique_tuples)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return Counter(test_list)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(str) - 1):\n        for j in range(i+1, len(str)):\n            if str[i:j+1].strip()!= '':\n                count += 1\n\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character of the string\n    for i in range(len(str)):\n\n        # Initialize the start and end index of the current substring\n        start = i\n        end = i\n\n        # Check if the current character is a space\n        while str[end]!='' and end < len(str) - 1:\n            end += 1\n\n        # If the end index is less than the length of the string, increment the count\n        if end < len(str):\n            count += end - start\n\n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring.strip()!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables to keep track of the count and current substring\n    count = 0\n    current_substring = ''\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is not a whitespace character,\n        # add it to the current substring and increment the count\n        if str[i] not in (' ', '\\n', '\\t', '\\r'):\n            current_substring += str[i]\n            count += 1\n        # If the current character is a whitespace character,\n        # reset the current substring and continue with the loop\n        else:\n            # If the current substring is not empty, count it\n            if current_substring:\n                count += 1\n            # Reset the current substring\n            current_substring = ''\n    \n    # If the current substring is not empty, count it\n    if current_substring:\n        count += 1\n\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    This function counts the number of non-empty substrings of a given string.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Check if the current character is not a space\n        if str[i]!='':\n            # Initialize a variable to store the length of the current substring\n            length = 0\n            # Initialize a variable to store the current index of the substring\n            start = i\n            # Initialize a variable to store the next index of the substring\n            end = i + 1\n            # Loop through each character in the remaining substring starting from the current index\n            while end < len(str):\n                # Check if the next character is a space\n                if str[end] =='':\n                    # Add 1 to the length of the current substring and move the start index to the next character\n                    length += 1\n                    start = end + 1\n                # If the next character is not a space, move the end index to the next character\n                else:\n                    end += 1\n            # If the length of the current substring is greater than 0, increment the count\n            if length > 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            substring = str[i:j]\n            if substring and len(substring.strip()) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(string):\n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n    # Loop through each character in the string\n    for i in range(len(string)):\n        # Check if the substring starting from the current character is non-empty\n        if string[i]!='' and string[i]!= '' and string[i:].find(' ') == -1:\n            count += 1\n    # Return the final count of non-empty substrings\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(2, m + 1):\n        for j in range(1, i // 2 + 1):\n            if j * 2 <= i < m:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        return all(x >= 2 * sequence[-1] < m for x in sequence)\n\n    def get_total_number_of_valid_sequences(start, end):\n        total = 0\n        current_sequence = [start]\n        for i in range(start + 1, end + 1):\n            if is_valid_sequence(current_sequence):\n                total += 1\n            current_sequence.append(i)\n        return total\n\n    return get_total_number_of_valid_sequences(2 * n, m)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(m, n, current_sum, current_length, total_sequences):\n        if current_sum > m:\n            return\n        if current_length == n:\n            total_sequences += 1\n            return\n        if current_sum + 2 * current_length <= m:\n            helper(m, n, current_sum + 2 * current_length, current_length + 1, total_sequences)\n        helper(m, n, current_sum, current_length, total_sequences)\n\n    total_sequences = 0\n    helper(m, n, 0, 1, total_sequences)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize a variable to store the number of possible sequences\n    total_sequences = 0\n\n    # Loop through all possible values of the last element\n    for i in range(1, m + 1):\n        # Initialize a variable to store the number of sequences of length n that start with the current element\n        current_sequences = 0\n\n        # Loop through all possible values of the next element\n        for j in range(2, i + 1):\n            # Check if the next element is in the range [i * 2, m]\n            if j >= i * 2 and j <= m:\n                # Increment the number of sequences of length n that start with the current element\n                current_sequences += 1\n\n        # Add the number of sequences of length n that start with the current element to the total number of sequences\n        total_sequences += current_sequences\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n, and returns the total number of possible sequences of length n\n    such that each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n    \"\"\"\n    count = 0\n    for i in range(2, m + 1):\n        for j in range(i, min(i * 2, m) + 1):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    def get_combinations(n, k):\n        if k > n:\n            return 1\n        else:\n            return get_combinations(n-1, k-1) + get_combinations(n-1, k)\n\n    def get_number_of_sequences(n):\n        if n == 1:\n            return 1\n        else:\n            return get_combinations(n, n)\n\n    def helper(m, n):\n        if n == 1:\n            return m\n        else:\n            seq = 0\n            for i in range(1, m//2+1):\n                if i*2 <= m and i*2 > i and i < m:\n                    seq += get_number_of_sequences(n-1)\n            return seq\n\n    return helper(m, n)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    count = 0\n    prev = 0\n    while prev <= m:\n        current = prev + 2\n        for i in range(1,n):\n            current += 2\n        if current <= m:\n            count += 1\n        prev = current\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in two positive integers m and n and returns the total number of possible sequences of length n that start with a positive integer greater than or equal to twice the previous element and end with an element less than or equal to m.\n    \"\"\"\n    count = 0\n    prev_num = 2 * (m + 1)  # initialize the previous element to twice the current element + 1\n    while prev_num <= m:\n        count += prev_num - 1\n        prev_num += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    def helper(current_length, current_sum):\n        if current_length == n:\n            return 1\n\n        count = 0\n        for i in range(1, m//2 + 1):\n            if current_sum + i <= m:\n                count += helper(current_length + 1, current_sum + i)\n\n        return count\n\n    return helper(0, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    # Initialize the variable to store the count\n    count = 0\n    # Initialize the variable to store the list of sequences\n    sequences = []\n    # Initialize the first sequence\n    current_sequence = [2*m]\n    # Initialize the variable to store the previous element\n    prev = 2*m\n    # Loop until we have found the nth sequence\n    for i in range(n):\n        # Create a new sequence by adding the current element to the current sequence\n        new_sequence = current_sequence + [prev]\n        # If the new sequence is valid, add it to the list of sequences\n        if all(new_sequence[j] >= 2*prev and new_sequence[j] <= m for j in range(1, len(new_sequence))):\n            sequences.append(new_sequence)\n        # Update the previous element and the current sequence\n        prev = current_sequence[-1]\n        current_sequence = new_sequence\n    # Return the count and the list of sequences\n    return count, sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2[0]\n        list2.pop(0)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the second list is not empty\n    if len(list2)!= 0:\n        # Get the length of the first list\n        length = len(list1)\n        # Get the last element of the first list\n        last_element = list1[length - 1]\n        # Replace the last element of the first list with the elements of the second list\n        list1[length - 1] = list2\n        # Return the modified first list\n        return list1\n    else:\n        # Raise an error if the second list is empty\n        raise ValueError(\"Second list is empty.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        new_list = list1[:-1] + list2\n        return replace_list(new_list, list1[-1:])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop() # remove the last element of the list1\n    list1.extend(list2) # add the elements of the list2 to the list1\n    return list1 # return the modified list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n\n    # Get the index of the last element in the first list\n    last_index = length - 1\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[last_index] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    :param string: The string to count the characters in.\n    :return: The total number of characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math  \n  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # check if the given number is a perfect square or not\n    if math.isqrt(N) * math.isqrt(N) == N:  \n        return N+1  \n    else:  \n        # if not, find the largest perfect square that is less than the given number\n        while True:  \n            N -= 1  \n            if math.isqrt(N) * math.isqrt(N) < N:  \n                return N  "
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # convert the number to a float and calculate its square root\n    sqrt_N = math.sqrt(N)\n    # initialize the next perfect square variable\n    next_sqrt_N = sqrt_N\n    \n    # loop until we find the next perfect square greater than sqrt_N\n    while True:\n        # calculate the square of the next perfect square\n        next_sqrt_N = sqrt_N + (sqrt_N**2 - N) / (2*sqrt_N)\n        # check if the square is greater than sqrt_N\n        if next_sqrt_N > sqrt_N:\n            break\n        # if not, update the next perfect square value\n        else:\n            # update the value of sqrt_N to be the new next perfect square\n            sqrt_N = next_sqrt_N\n    \n    return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n    # Check if N is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return math.sqrt(N) * math.sqrt(N)\n\n    # Find the largest perfect square less than or equal to N\n    i = int(math.sqrt(N))\n    while i * i > N:\n        i -= 1\n\n    # Find the next perfect square greater than i\n    j = i * i + 1\n    while j <= N:\n        if j == i * i:\n            i += 1\n            break\n        j += 1\n\n    # Calculate the next perfect square\n    k = i * i\n    while k < N:\n        if k == i * i:\n            i += 1\n            break\n        k += 1\n\n    return i * i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root_N = math.sqrt(N)\n    while True:\n        N = int(root_N + 1)\n        if is_perfect_square(N):\n            return N\n        root_N = math.sqrt(N)\n\ndef is_perfect_square(num):\n    return int(math.sqrt(num))**2 == num"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_Perfect_Square(N): \n    '''\n    This function finds the next perfect square greater than a given number. \n    '''\n    # Check if the given number is a perfect square\n    is_perfect_square = lambda x: x == int(x ** 0.5 + 0.5) ** 2\n    if is_perfect_square(N):\n        return N\n    else:\n        # Check if the given number is a perfect cube\n        is_perfect_cube = lambda x: x == int(x ** 0.5 + 0.5) ** 3\n        if is_perfect_cube(N):\n            return int(N ** 0.5 + 0.5) ** 3\n        else:\n            # Find the next perfect square or cube greater than N\n            next_square = next_Perfect_Square(int(N ** 0.5 + 0.5) ** 2)\n            if next_square > N:\n                return next_square\n            else:\n                next_cube = next_Perfect_Square(int(N ** 0.5 + 0.5) ** 3)\n                if next_cube > N:\n                    return next_cube\n                else:\n                    # If neither the next perfect square nor cube is greater than N, return N\n                    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #initialize variables\n    x = N\n    y = math.sqrt(x) + 1\n    \n    #while loop to find next perfect square\n    while y**2 <= x:\n        x = y**2\n        y = math.sqrt(x) + 1\n    \n    return int(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    num = N\n    while True:\n        num += 1\n        if math.isqrt(num) ** 2 == num:\n            return num\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        return int(sqrt_N+1)\n    else:\n        return int(sqrt_N)+1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n\n    A perfect square is a positive integer that is equal to the square of a perfect number. \n    In other words, the sum of the digits of a perfect number is equal to the sum of the digits of the square of that number.\n\n    For example, 6 is a perfect square because the sum of its digits is 6 + 6 = 12. \n    16 is a perfect square because the sum of its digits is 1 + 6 + 16 = 17.\n\n    So, for any given number N, we can check if it is a perfect square and find the next perfect square greater than it.\n    If N is not a perfect square, we just return N.\n\n    This function uses the square root function to find the next perfect square greater than N.\n\n    Parameters:\n    N: an integer\n    \"\"\"\n\n    # Check if N is a perfect square\n    is_perfect_square = lambda x: math.sqrt(x) == int(math.sqrt(x))\n\n    if is_perfect_square(N):\n        # Square root of N is an integer\n        root = int(math.sqrt(N))\n        # Check if root is a perfect square\n        while not is_perfect_square(root*root):\n            root += 1\n        # Return the next perfect square greater than root\n        return root*root\n    else:\n        # N is not a perfect square, return N\n        return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N <= 0:\n        return None\n    else:\n        i = 1\n        while True:\n            i += 1\n            square = i * i\n            if square > N:\n                return square"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize max_ending_here and min_ending_here\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    # Initialize max_so_far and min_so_far\n    max_so_far = max_ending_here\n    min_so_far = min_ending_here\n\n    # Iterate through the array\n    for i in range(1, n):\n        # If the element is greater than the current maximum, update both max and min\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        # If the element is less than the current maximum, update only the max\n        elif arr[i] < max_ending_here:\n            max_ending_here = max(arr[i], min_ending_here)\n\n        # If the element is greater than the current minimum, update both max and min\n        if arr[i] < min_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        # If the element is less than the current minimum, update only the min\n        elif arr[i] > min_ending_here:\n            min_ending_here = min(arr[i], max_ending_here)\n\n        # Update max_so_far and min_so_far\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the element is increasing, add it to the current sum\n        if arr[i] > arr[i-1]:\n            curr_sum += arr[i]\n        # If the element is decreasing, subtract it from the current sum\n        else:\n            curr_sum -= arr[i-1]\n        \n        # Update the maximum sum if the current sum is greater than the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n\n    # Initialize variables for the first and last element of the array\n    first = arr[0]\n    last = arr[-1]\n\n    # Initialize variables for the maximum sum and its subsequence\n    max_sum = first + last\n    bitonic_subsequence = [first, last]\n\n    # Loop through the array from the second element to the last element\n    for i in range(1, len(arr)-1):\n\n        # Check if the current element is increasing and the previous element is decreasing\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n\n            # Update the maximum sum if the current element is greater\n            if arr[i] + last > max_sum:\n                max_sum = arr[i] + last\n                bitonic_subsequence = [arr[i], last]\n\n            # If the current element is decreasing, update the maximum sum and add the current element to the subsequence\n            elif arr[i] + last == max_sum:\n                bitonic_subsequence.append(arr[i])\n\n        # If the current element is decreasing and the previous element is increasing, continue with the loop\n        else:\n            continue\n\n    return max_sum, bitonic_subsequence"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    # Initialize the first element of the dp array\n    dp[0] = arr[0]\n\n    # Initialize the second element of the dp array\n    if arr[1] > arr[0]:\n        dp[1] = arr[1] - arr[0]\n    else:\n        dp[1] = 0\n\n    # Initialize the third element of the dp array\n    if arr[2] > dp[1]:\n        dp[2] = arr[2] - dp[1]\n    elif arr[2] > dp[0]:\n        dp[2] = arr[2] - arr[0]\n\n    # Initialize the fourth element of the dp array\n    if arr[3] > dp[2]:\n        dp[3] = arr[3] - dp[2]\n    elif arr[3] > dp[1]:\n        dp[3] = arr[3] - dp[1]\n    elif arr[3] > dp[0]:\n        dp[3] = arr[3] - arr[0]\n\n    # Iterate through the rest of the elements in the array\n    for i in range(4, n):\n        # Update the value of the current element in the dp array\n        if arr[i] > arr[i - 1]:\n            dp[i] = arr[i] - arr[i - 1]\n        else:\n            dp[i] = 0\n\n        # Update the maximum sum\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    def is_bitonic(arr):\n        for i in range(len(arr) - 1):\n            if arr[i] < arr[i + 1] and arr[i + 1] < arr[i + 2]:\n                return True\n        return False\n\n    def bitonic_subsequence(arr):\n        subseq = []\n        prev_val = float('-inf')\n        for val in arr:\n            if val >= prev_val:\n                subseq.append(val)\n            else:\n                subseq = []\n                prev_val = val\n                subseq.append(val)\n            prev_val = val\n        return subseq\n\n    def is_valid_subseq(subseq):\n        prev_val = float('-inf')\n        for val in subseq:\n            if val < prev_val:\n                return False\n            prev_val = val\n        return True\n\n    def get_max_sum(subseq):\n        subseq.sort()\n        return subseq[-1] - subseq[0]\n\n    if is_bitonic(arr):\n        subseq = bitonic_subsequence(arr)\n        if is_valid_subseq(subseq):\n            max_sum = get_max_sum(subseq)\n        else:\n            max_sum = float('-inf')\n    else:\n        max_sum = float('-inf')\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    This function takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    The function returns the maximum sum of a bitonic subsequence.\n    \"\"\"\n    # Check if the array is empty or contains only one element\n    if len(arr) == 1:\n        return arr[0]\n    # Check if the array is already a bitonic subsequence\n    if max(arr) < min(arr) or min(arr) > max(arr):\n        return max(arr)\n    # Sort the array in ascending order\n    arr.sort()\n    # Initialize the maximum sum of the subsequence to 0\n    max_sum_subseq = 0\n    # Initialize the maximum sum of the entire array to 0\n    max_sum_arr = 0\n    # Iterate through the sorted array\n    for i in range(len(arr)):\n        # Check if the current element is increasing or decreasing\n        if i < len(arr) - 1 and arr[i] < arr[i+1]:\n            # Check if the subsequence sum is greater than the current element\n            if i + 1 < len(arr) and i + 2 < len(arr) and arr[i] + arr[i+1] + arr[i+2] > arr[i+1]:\n                # Update the maximum sum of the subsequence\n                max_sum_subseq = max(max_sum_subseq, arr[i] + arr[i+1] + arr[i+2])\n        # Check if the current element is increasing and the maximum sum of the subsequence is greater than the current element\n        if arr[i] < max_sum_subseq and arr[i] > max_sum_arr:\n            # Update the maximum sum of the entire array\n            max_sum_arr = arr[i]\n    return max_sum_arr"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # Initialize two pointers, one at the start of the array and one at the end\n    left, right = 0, len(arr) - 1\n    \n    # Initialize two variables, one to keep track of the current sum and another to keep track of the direction of the subsequence\n    current_sum, direction = 0, 0\n    \n    # Loop until the pointers meet in the middle of the array\n    while left < right:\n        \n        # If the current element is less than the next element, update the direction and subtract the next element from the current sum\n        if arr[left] < arr[right]:\n            direction = -1\n            current_sum -= arr[right]\n        # If the current element is greater than the next element, update the direction and add the next element to the current sum\n        else:\n            direction = 1\n            current_sum += arr[right]\n        \n        # Update the maximum sum if the current sum is greater than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # Move the pointers in the direction of the current subsequence\n        left += direction\n        right += direction\n    \n    # Return the maximum sum found\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Sort the array in non-increasing order\n    arr.sort()\n\n    # Initialize variables\n    max_sum = 0\n    current_sum = 0\n    increasing = True\n    decreasing = False\n\n    # Loop through the sorted array\n    for num in arr:\n        # Check if the number is increasing or decreasing\n        if increasing and num >= arr[0]:\n            increasing = False\n            decreasing = True\n        elif not increasing and num <= arr[0]:\n            increasing = True\n            decreasing = False\n\n        # Calculate the sum of the current subsequence\n        if increasing:\n            current_sum += num\n        elif decreasing:\n            current_sum -= num\n\n        # Update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    max_sum = float('-inf')\n    prev_sum = arr[0]\n\n    for i in range(1, n):\n        current_sum = arr[i]\n        if current_sum > prev_sum:\n            max_sum = max(max_sum, current_sum + prev_sum)\n        else:\n            max_sum = max(max_sum, prev_sum + current_sum)\n        prev_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # check if array is empty or contains only one element\n    if len(arr) < 2: \n        return arr[0] \n    \n    # initialize variables to store the maximum sum of increasing and decreasing subsequences\n    inc_max = dec_max = arr[0]\n    \n    # iterate through the array and update the maximum sum of increasing and decreasing subsequences\n    for i in range(1, len(arr)): \n        if arr[i] > arr[i-1]: # if the element is greater than the previous one\n            inc_max = max(inc_max + arr[i], arr[i]) # update the maximum sum of increasing subsequence\n        else: # if the element is less than or equal to the previous one\n            dec_max = max(dec_max + arr[i], arr[i]) # update the maximum sum of decreasing subsequence\n            \n    return max(inc_max, dec_max) # return the maximum sum of all subsequences"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Find the sign of the number\n    sign = -1 if number < 0 else 1\n    number = abs(number)\n\n    # Compute the square root using babylonian method\n    x = 1.0\n    for i in range(100):\n        x_previous = x\n        x = (x + number / x) / 2.0\n\n    return sign * x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x = 0.5\n    err = abs(x**2 - number)\n    \n    # Iterate until the error is below a certain threshold\n    while err > 0.00001:\n        x -= (number/x)\n        err = abs(x**2 - number)\n    \n    # Return the computed square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    previous_guess = None\n    while guess**2 > number:\n        if previous_guess is None:\n            return None\n        guess = (previous_guess + number/guess) / 2\n        previous_guess = guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while abs(guess**2 - number) > 0.0001:\n        guess = (guess + number/guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    previous_guess = guess\n    epsilon = 0.00001\n\n    while abs(guess*guess - number) >= epsilon:\n        previous_guess = guess\n        guess = (guess + number / guess) / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    This function computes square roots using the babylonian method.\n\n    Parameters:\n    number (int): The number for which to compute the square root.\n\n    Returns:\n    float: The square root of the given number.\n    \"\"\"\n    guess = number / 2.0\n    while abs(guess*guess - number) > 0.0001:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    guess = number / 2.0\n    epsilon = 1e-10\n    \n    # loop until the difference between the last two guesses is less than epsilon\n    while abs(guess**2 - number) > epsilon:\n        # update the guess\n        guess = (guess + number/guess) / 2.0\n        \n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Calculate the square root using the babylonian method\n    i = 1\n    while True:\n        x = number / (2 * i)\n        y = x + (x ** 2) / (2 * i)\n        if y == x:\n            break\n        i += 1\n    return i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        next_guess = (guess + number/guess) / 2\n        if abs(next_guess - guess) < 0.00001:\n            break\n        guess = next_guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Define a tolerance for the convergence of the algorithm\n    tolerance = 0.00001\n\n    # Initialize a variable to keep track of the iteration count\n    iteration = 0\n\n    # Initialize variables to keep track of the current guess and the last guess\n    guess = number / 2\n    last_guess = 0\n\n    # While the difference between the last guess and the current guess is greater than the tolerance\n    while abs(guess**2 - number) > tolerance:\n        # Update the last guess\n        last_guess = guess\n\n        # Update the current guess to be half of the sum of the last guess and the current number\n        guess = (last_guess + number/last_guess) / 2\n\n        # Increment the iteration count\n        iteration += 1\n\n    # Return the value of the current guess as the square root of the original number\n    return guess"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [1] * n\n\n    # Check for even length palindromes\n    for i in range(1, n//2+1):\n        if str[i-1] == str[i+i//2]:\n            dp[i] = 2\n\n    # Check for odd length palindromes\n    for i in range(n//2, -1, -1):\n        if str[i-1] == str[i+i//2]:\n            dp[i] = dp[i+1] + 2\n\n    # Find maximum length palindromic subsequence\n    max_len = 0\n    for i in range(n):\n        max_len = max(max_len, dp[i])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    # Create a 2D table to store lengths of subsequences\n    table = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # Fill the table in bottom up manner\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [1] * n\n    \n    # Find the length of the longest palindromic subsequence ending at i\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n    \n    return max(dp)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    if len(str) == 1:\n        return 1\n\n    lps_arr = [1] * len(str)\n    max_len = 1\n    start = 0\n\n    for i in range(1, len(str)):\n        if str[i] == str[i-1]:\n            lps_arr[i] = lps_arr[i-1] + 1\n            if lps_arr[i] > max_len:\n                max_len = lps_arr[i]\n                start = i-max_len\n        else:\n            lps_arr[i] = 1\n            if lps_arr[i] > max_len:\n                max_len = lps_arr[i]\n                start = i-max_len\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    # create a 2D table to store the length of the longest palindromic subsequence ending at each index\n    # dp[i][j] stores the length of the longest palindromic subsequence ending at index i and j\n    dp = [[0] * len(s) for _ in range(len(s))]\n    max_len = 0\n\n    # iterate over all possible pairs of indices\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the characters at i and j are the same\n            if s[i] == s[j]:\n                # if so, we can extend the palindromic subsequence by a single character\n                # and take the maximum of the length of the previous longest palindromic subsequence ending at i+1 and j,\n                # and the length of the previous longest palindromic subsequence ending at i and j+1\n                dp[i][j] = dp[i+1][j-1] + 2\n                max_len = max(max_len, dp[i][j])\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str): \n    # Create a table to store the length of longest palindromic subsequence for substrings of length i \n    table = [[0] * len(str) for _ in range(len(str) + 1)] \n  \n    # Fill the table in bottom-up manner \n    for i in range(1, len(str) + 1): \n        for j in range(i): \n            if str[j] == str[i - 1]: \n                table[i][j] = table[i - 1][j - 1] + 2 \n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) \n  \n    # Return the length of the longest palindromic subsequence \n    return table[-1][-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s): \n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in the given string s.\n    \"\"\"\n    n = len(s) \n    lps_length = 0 \n    for i in range(n): \n        # Calculate the LPS length for all prefixes of the string \n        # i.e., calculate LPS for all prefixes of the string s[0:i] \n        # and store the result in lps_length_i \n        lps_length_i = 1\n        j = i - 1\n        while j >= 0 and s[j] == s[i]: \n            lps_length_i += 1 \n            j -= 1 \n        # If the length of the LPS for the prefix s[0:i] is greater \n        # than the current LPS length, update the LPS length \n        if lps_length_i > lps_length: \n            lps_length = lps_length_i \n    return lps_length \n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    # create a 2D array to store lengths of longest palindromic subsequences for all prefixes of the string\n    dp = [[0 for j in range(len(str)+1)] for i in range(len(str)+1)]\n\n    # base case: if the length of the string is 1, then the length of the longest palindromic subsequence is 1\n    for i in range(1, len(str)+1):\n        dp[i][i] = 1\n\n    # fill the table using dynamic programming\n    for i in range(1, len(str)+1):\n        for j in range(1, len(str)+1):\n            if str[i-1] == str[j-1]:\n                # if current characters match, then length of longest palindromic subsequence is 2 more than the length of the subsequence to the left and the subsequence to the right\n                dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                # if current characters don't match, then length of longest palindromic subsequence is either 1 more than the length of the subsequence to the left or the subsequence to the right\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return dp[len(str)][len(str)]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    n = len(str)\n    # Create a table to store the length of LPS ending at each position\n    table = [[0] * n for _ in range(n)]\n\n    # Initialize LPS ending at index 0\n    for i in range(1, n):\n        if str[i] == str[i-1]:\n            table[i][i-1] = 2\n        else:\n            table[i][i-1] = 1\n\n    # Fill in the table for lengths 3, 4,..., n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    return table[0][n-1]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n*(n-1)/(2*n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 2:\n        raise ValueError('n must be greater than or equal to 2')\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0.0\n    for i in range(1, n):\n        result += 1.0 / i\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set for the first array, and check if each element is also in the second array.\n    intersection_set = set(array_nums1) & set(array_nums2)\n    # Convert the set to a list, and return it.\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set for array_nums1 to remove duplicates and then convert it back to a list\n    set_nums1 = list(set(array_nums1))\n    # create a set for array_nums2 to remove duplicates and then convert it back to a list\n    set_nums2 = list(set(array_nums2))\n    # create an empty set to store the intersection of the two sets\n    intersection = set()\n    # loop through each element in set_nums1 and check if it exists in set_nums2\n    for num in set_nums1:\n        if num in set_nums2:\n            intersection.add(num)\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    intersection = []\n\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # iterate through array_nums2 and add elements to the intersection if they have a frequency in array_nums1\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Initialize an empty set to store the intersection of the two arrays\n    intersection = set()\n\n    # Iterate through the first array and add each element to the set\n    for num in array_nums1:\n        intersection.add(num)\n\n    # Iterate through the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in intersection:\n            # If the element is in the set, add it to the result list\n            result.append(num)\n\n    # Return the result list as the intersection of the two arrays\n    return result"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store unique values from array_nums2\n    unique_nums2 = set(array_nums2)\n\n    # Create a set to store the intersection of array_nums1 and unique_nums2\n    intersection = array_nums1 & unique_nums2\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # creating a dictionary to store the elements of the arrays\n    dict_nums1 = {}\n    dict_nums2 = {}\n    for num in array_nums1:\n        dict_nums1[num] = True\n    for num in array_nums2:\n        dict_nums2[num] = True\n\n    # creating a set to store the intersection of the two arrays\n    intersection_set = set(dict_nums1) & set(dict_nums2)\n\n    # converting the set to a list and returning it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set for array_nums1 and array_nums2\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection_set = set(array_nums1) & set(array_nums2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Find the intersection of the two arrays using a dictionary\n    intersection = {}\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection[num] = True\n\n    # Find the intersection of the two arrays using set intersection\n    # intersection = set(array_nums1).intersection(set(array_nums2))\n\n    # Find the intersection of the two arrays using list comprehension\n    # intersection = [num for num in array_nums1 if num in array_nums2]\n\n    # Find the intersection of the two arrays using a for loop and set intersection\n    # intersection = set()\n    # for num in array_nums1:\n    #     if num in array_nums2 and num not in intersection:\n    #         intersection.add(num)\n\n    # Convert the intersection to a list and return it\n    return list(intersection.keys())"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Use a set to remove duplicates from array_nums1\n    unique_nums1 = set(array_nums1)\n    # Use a set to find the intersection of array_nums1 and array_nums2\n    intersection_nums = set(array_nums2).intersection(unique_nums1)\n    # Return the list of intersection numbers\n    return list(intersection_nums)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1\n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Loop through the list and insert the element at the beginning of each element\n    for i in range(len(list)):\n        list.insert(i, element)\n\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(lst, elem):\n    return [elem] + lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    # create a new empty list to store the modified list\n    modified_list = []\n    # loop through the original list and add each element to the new list with the inserted element\n    for i in list:\n        modified_list.append(element)\n        modified_list.append(i)\n    # return the modified list\n    return modified_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0,element)\n        result.insert(0,list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i, item in enumerate(list):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(item)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.insert(i, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        # Extract the real and imaginary parts of the complex number\n        real = number.real\n        imaginary = number.imag\n        \n        # Calculate the magnitude and angle of the complex number\n        magnitude = cmath.sqrt(real**2 + imaginary**2)\n        angle = cmath.phase(number)\n        \n        # Append the polar coordinate to the list of polar coordinates\n        polar_numbers.append((magnitude, angle))\n    \n    return polar_numbers"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        x, y = cmath.polar(num)\n        result.append((x, y))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of tuples containing the real and imaginary parts of each complex number in polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for number in numbers:\n        # Convert complex number to polar coordinates using cmath module\n        r = abs(number)\n        theta = cmath.phase(number)\n        # Append the polar coordinates to the list\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert the complex number to polar coordinates\n        real = num.real\n        imag = num.imag\n        angle = cmath.phase(num)\n        polar = (cmath.sqrt(real**2 + imag**2), angle)\n        print(polar)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n  \n    # loop through each complex number in the list\n    for num in numbers:  \n  \n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag  \n  \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)  \n  \n        # calculate the angle of the complex number\n        angle = cmath.phase(num)  \n  \n        # print the polar coordinates of the complex number\n        print(magnitude, angle)  \n  \n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        r = cmath.sqrt(num.real ** 2 + num.imag ** 2)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print('Real part:', real)\n        print('Imaginary part:', imag)\n        print('')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        modulus = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(complex(real, imag))\n        print(f\"({modulus}, {angle:.2f})\")"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            color_combinations.append((l[i], l[j]))\n    return color_combinations[:n]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = list(combinations_with_replacement(l, n))\n    return comb"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            if j - i == n:\n                combination = tuple(l[i:j])\n                combinations.append(combination)\n    return combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i:], n):\n            color_combinations.append(tuple(comb))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l[i], n):\n            color_combinations.append((i, tuple(comb)))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'blue', 'green', 'yellow', 'orange', 'purple']\n    for combo in combinations_with_replacement(colors, n):\n        print(tuple(combo))\n"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(combination) for combination in combinations_with_replacement(lst, n)]"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime or not.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    Helper function to check if a number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    num = 2\n    while num < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val = test_tup1[0]\n    for num in test_tup2:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    # Check if the two tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have equal lengths.\")\n        return\n    \n    # Initialize the result tuple\n    result = (0, 0)\n    \n    # Iterate over the tuples and find the maximum value\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result = (i+1, test_tup1[i])\n        else:\n            result = (i+1, test_tup2[i])\n    \n    # Return the maximum value as a tuple\n    return result"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = ()\n    \n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] > test_tup2[i]:\n            max_tuple += (test_tup1[i],)\n        else:\n            max_tuple += (test_tup2[i],)\n    \n    for i in range(len(test_tup1), len(test_tup2)):\n        max_tuple += (test_tup2[i],)\n        \n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initialize variables\n    max_tup1 = 0\n    max_tup2 = 0\n    \n    # loop through the tuples\n    for tup in [test_tup1, test_tup2]:\n        for elem in tup:\n            # check if the element is greater than the current max\n            if elem > max_tup1:\n                max_tup1 = elem\n            elif elem > max_tup2 and elem!= max_tup1:\n                max_tup2 = elem\n                \n    # return the tuple with the maximum elements\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return test_tup1\n            elif test_tup1[i] < test_tup2[i]:\n                return test_tup2\n            else:\n                continue\n        return test_tup1  # return either test_tup1 or test_tup2, whichever is longer"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tuple = None\n    if test_tup1 > test_tup2:\n        max_tuple = test_tup1\n    elif test_tup2 > test_tup1:\n        max_tuple = test_tup2\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    # start with the first prime number\n    i = 2\n\n    # iterate until the nth newman-shanks-williams prime is found\n    while i <= n:\n        # check if the current number is a newman-shanks-williams prime\n        if i > 2 and is_prime(i) and i % 3 == 1:\n            return i\n        i += 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize a flag variable\n    is_prime = False\n\n    # Initialize the number to check\n    num = 2\n\n    # Iterate until we find the nth newman\u2013shanks\u2013williams prime number\n    while num <= n:\n\n        # If the number is prime, check if it's the nth newman\u2013shanks\u2013williams prime number\n        if num == 2 or (num > 2 and num % 2 == 1 and num > 2 and num % 3 == 1):\n            is_prime = True\n\n        # If the flag variable is true, increment the number and reset the flag variable\n        if is_prime:\n            num += 2\n\n        # If the number is not prime, increment the number by 2\n        else:\n            num += 2\n\n    # If we didn't find the nth newman\u2013shanks\u2013williams prime number, return -1\n    if not is_prime:\n        return -1\n\n    # Otherwise, return the nth newman\u2013shanks\u2013williams prime number\n    else:\n        return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    count = 0\n    prime = 2\n    \n    # loop until we've found the nth newman-shanks-williams prime number\n    while count < n: \n        # check if the current prime number is a newman-shanks-williams prime\n        if all(prime % i!= 0 for i in range(2, int(prime ** 0.5) + 1)) and all(prime % i!= 0 for i in range(prime + 1, int(prime ** 0.5) + 1)): \n            count += 1\n        # increment the prime number by 1 and loop again\n        prime += 1\n    \n    # return the nth newman-shanks-williams prime number\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to store the count of primes found so far\n    count = 0\n    \n    # Loop through all the integers from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a newman\u2013shanks\u2013williams prime\n        if is_newman_prime(i):\n            # Increment the count of primes found so far\n            count += 1\n            # Check if we have found the nth prime number\n            if count == n:\n                return i\n    \n    # If we have reached this point, it means we have not found the nth prime number\n    return \"Unable to find the nth newman-shanks-williams prime number.\"\n\ndef is_newman_prime(n):\n    '''\n    Check if a given integer n is a newman\u2013shanks\u2013williams prime number.\n    '''\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    \n    # If we reach this point, n is a newman-shanks-williams prime number\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the count of primes found so far\n    count = 0\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 2\n    # Loop through each integer starting from 2\n    for i in range(2, n+1):\n        # Check if the current integer is prime\n        if is_prime(i):\n            # If it is, check if it's the nth newman\u2013shanks\u2013williams prime number\n            if i == newman_prime_nth(count):\n                # If it is, return the current prime number\n                return current_prime\n            # Otherwise, increment the count and move on to the next integer\n            else:\n                count += 1\n        # If the integer is not prime, increment the current prime number\n        else:\n            current_prime += 1\n    # If the loop completes without finding the nth newman\u2013shanks\u2013williams prime number, return None\n    return None\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime.\n    '''\n    # If the number is less than 2, it's not prime\n    if n < 2:\n        return False\n    # Loop through each integer starting from 2 and checking if it divides the number\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    # If the loop completes without finding a divisor, the number is prime\n    return True\n\n\ndef newman_prime_nth(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the count of primes found so far\n    count = 0\n    # Initialize a variable to keep track of the current prime number\n    current_prime = 2\n    # Loop through each integer starting from 2\n    for i in range(2, 1000000):\n        # Check if the current integer is prime\n        if is_prime(i):\n            # If it is, increment the count and move on to the next integer\n            count += 1\n            if count == n:\n                return i\n        # If the integer is not prime, increment the current prime number\n        else:\n            current_prime += 1\n    # If the loop completes without finding the nth newman\u2013shanks\u2013williams prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    def is_newman_prime(k):\n        \"\"\"\n        Check if a number is a Newman-Shanks-Williams prime number.\n        \"\"\"\n        if k < 2:\n            return False\n        for i in range(2, int(k**0.5)+1):\n            if k % i == 0:\n                return False\n        return True\n\n    def prime_factors(n):\n        \"\"\"\n        Get all prime factors of a number.\n        \"\"\"\n        factors = []\n        i = 2\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n\n    def next_prime(n):\n        \"\"\"\n        Find the next prime number.\n        \"\"\"\n        p = n + 1\n        while not is_newman_prime(p):\n            p += 1\n        return p\n\n    def newman_shanks_williams_prime(n):\n        \"\"\"\n        Find the nth Newman-Shanks-Williams prime number.\n        \"\"\"\n        prime = next_prime(2)\n        for i in range(n-1):\n            prime = next_prime(prime)\n        return prime\n\n    return newman_shanks_williams_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize count to 0\n    count = 0\n    \n    # loop through all numbers from 2 to n\n    for i in range(2, n+1): \n        # check if i is a newman-shanks-williams prime number\n        if i%2!= 0 and i!= 2: \n            # count number of prime factors of i\n            count += 0\n            \n            # check for factor of 3\n            if i%3 == 0: \n                count += 0\n            \n            # check for factor of 5\n            if i%5 == 0: \n                count += 0\n            \n            # check for factor of 7\n            if i%7 == 0: \n                count += 0\n            \n            # check for factor of 11\n            if i%11 == 0: \n                count += 0\n            \n            # check for factor of 13\n            if i%13 == 0: \n                count += 0\n            \n            # check for factor of 17\n            if i%17 == 0: \n                count += 0\n            \n            # check for factor of 19\n            if i%19 == 0: \n                count += 0\n            \n            # check for factor of 23\n            if i%23 == 0: \n                count += 0\n            \n            # check for factor of 29\n            if i%29 == 0: \n                count += 0\n            \n            # check for factor of 31\n            if i%31 == 0: \n                count += 0\n            \n            # check for factor of 37\n            if i%37 == 0: \n                count += 0\n            \n            # check for factor of 41\n            if i%41 == 0: \n                count += 0\n            \n            # check for factor of 43\n            if i%43 == 0: \n                count += 0\n            \n            # check for factor of 47\n            if i%47 == 0: \n                count += 0\n            \n            # check for factor of 53\n            if i%53 == 0: \n                count += 0\n            \n            # check for factor of 59\n            if i%59 == 0: \n                count += 0\n            \n            # check for factor of 61\n            if i%61 == 0: \n                count += 0\n            \n            # check for factor of 67\n            if i%67 == 0: \n                count += 0\n            \n            # check for factor of 71\n            if i%71 == 0: \n                count += 0\n            \n            # check for factor of 73\n            if i%73 == 0: \n                count += 0\n            \n            # check for factor of 79\n            if i%79 == 0: \n                count += 0\n            \n            # check for factor of 83\n            if i%83 == 0: \n                count += 0\n            \n            # check for factor of 89\n            if i%89 == 0: \n                count += 0\n            \n            # check for factor of 97\n            if i%97 == 0: \n                count += 0\n            \n            # check for factor of 101\n            if i%101 == 0: \n                count += 0\n            \n            # check for factor of 103\n            if i%103 == 0: \n                count += 0\n            \n            # check for factor of 107\n            if i%107 == 0: \n                count += 0\n            \n            # check for factor of 109\n            if i%109 == 0: \n                count += 0\n            \n            # check for factor of 113\n            if i%113 == 0: \n                count += 0\n            \n            # check for factor of 127\n            if i%127 == 0: \n                count += 0\n            \n            # check for factor of 131\n            if i%131 == 0: \n                count += 0\n            \n            # check for factor of 137\n            if i%137 == 0: \n                count += 0\n            \n            # check for factor of 139\n            if i%139 == 0: \n                count += 0\n            \n            # check for factor of 149\n            if i%149 == 0: \n                count += 0\n            \n            # check for factor of 151\n            if i%151 == 0: \n                count += 0\n            \n            # check for factor of 157\n            if i%157 == 0: \n                count += 0\n            \n            "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    p = 2 # Initialize the first prime number to 2\n    count = 0 # Initialize the count of primes to 0\n\n    # Loop until we have found the nth prime number\n    while count < n:\n        # Check if the current prime number is a newman-shanks-williams prime\n        is_prime = True\n        for i in range(2, int(p**0.5)+1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # If it is, update the p variable to the next prime number\n        p += 1\n\n    # Return the nth prime number\n    return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # The first few newman prime numbers are 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    # Starting with the 10th prime number\n    nth_prime = primes[n - 1]\n    # Finding the nth newman prime number\n    for i in range(n, 1, -1):\n        nth_prime = nth_prime + 2 * (i - 1)\n        if nth_prime in primes:\n            break\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Define the first newman-shanks-williams prime number\n    p = 2\n\n    # Define a counter for the number of newman-shanks-williams primes found\n    count = 0\n\n    # Loop until we have found the nth newman-shanks-williams prime number\n    while count < n:\n\n        # Check if p is a newman-shanks-williams prime\n        is_prime = True\n        for i in range(2, p):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n\n        # Increment p by 1\n        p += 1\n\n    # Return the nth newman-shanks-williams prime number\n    return p"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The number of elements in the tuples must be same\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n            test_tup2[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1, test_tup2"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length\")\n    result = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = result + (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result = result + (float('nan'),)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x/y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        except ZeroDivisionError:\n            result_tup += (float('nan'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n\n    # Perform element-wise division\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int):\n            result_tup.append(test_tup1[i] / test_tup2[i])\n        elif isinstance(test_tup1[i], float) and isinstance(test_tup2[i], float):\n            result_tup.append(test_tup1[i] / test_tup2[i])\n        else:\n            print(\"Error: Both the elements of the tuples must be integers or floats.\")\n            return\n\n    return tuple(result_tup)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if not isinstance(L, int) or L <= 0:\n        raise ValueError('L must be a positive integer')\n    \n    # Check if the length of the list is greater than L\n    if len(list1) <= L:\n        raise ValueError('The length of the list must be greater than L')\n    \n    # Split the list into two parts\n    list1_first = list1[:L]\n    list1_second = list1[L:]\n    \n    # Return the two parts in a tuple\n    return (list1_first, list1_second)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L > len(list1):\n        print(\"Error: Length of list is greater than L\")\n        return None\n    else:\n        part1 = list1[:L]\n        part2 = list1[L:]\n        return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts by finding the middle index\n    mid = len(list1) // 2\n    # Create a new list by slicing the first half of the original list\n    first_part = list1[:mid]\n    # Create a new list by slicing the second half of the original list\n    second_part = list1[mid:]\n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Initialize two empty lists for the first and second parts of the list\n    part1 = []\n    part2 = []\n\n    # Loop through the list\n    for i in range(len(list1)):\n        # If the length of the current part is less than L, add the element to the first part\n        if len(part1) < L:\n            part1.append(list1[i])\n        # If the length of the current part is equal to L, add the element to the second part and break the loop\n        else:\n            part2.append(list1[i])\n            break\n\n    # Return the resulting lists in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1)//2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) <= L:\n        return lst, []\n    else:\n        return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert height to feet and inches\n    h_feet = h_age // 30\n    h_inches = h_age % 30\n    \n    # Calculate age in dog's years\n    dog_years = 7 * h_feet + 2 * h_inches // 3 + 1\n    \n    # Return the result\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Age in hours\n    h = h_age\n    \n    # Calculate dog age in years\n    years = h / 12\n    \n    # Return age in years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    years = 7\n    years_old = 7 * h_age\n\n    return years_old"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog years.\n    \n    Args:\n    h_age: float\n        The human age in hours.\n        \n    Returns:\n    dog_age: float\n        The dog's age in dog years.\n    \"\"\"\n    dog_years = h_age / 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = h_age * 7\n    return dog_years\n"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    for i in range(0, n, step):\n        yield S[i:i+step]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) % step == 0:\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [S[i:i+step] for i in range(0, len(S), step)] + [S[-1]]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    i = 0\n    while i < len(S):\n        result.append(S[i:i+step])\n        i += step\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to store the resulting lists\n    result = []\n    \n    # loop through the list using a for loop\n    for i in range(0, len(S), step):\n        # create a new sublist with the specified step\n        sublist = S[i:i+step]\n        # append the sublist to the result list\n        result.append(sublist)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if n % step == 0:\n        return [S[i:i+step] for i in range(0, n, step)]\n    else:\n        return [S[i:i+step+1] for i in range(0, n, step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_lists = []\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if len(S) % step!= 0:\n        raise ValueError(\"Length of list must be divisible by step\")\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    print(\"The lateral surface area of a cube with side length\", l, \"is\", surface_area)\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of the cube by multiplying the side length by the number of faces (6)\n    area = l*6\n    \n    # Return the surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_area_cube(side):\n    '''\n    Write a function to find the surface area of a cube given its side length.\n    '''\n    surface_area = 6 * side ** 2\n    return surface_area\n\nWe can then use this function to calculate the lateral surface area of the cube:\n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = surface_area_cube(l)\n    lateral_surface = 6 * surface_area\n    return lateral_surface\n\nFinally, we can test the function with a side length of 5:\n\n>>> lateralsurface_cube(5)\n60"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # calculate the lateral surface area of the cube\n    surface_area = (6 * (l**2)) + (12 * l) + (8 * (l**2))\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(n):  \n        if i % 2!= 0:  \n            sum += i ** 2  \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to zero\n    total = 0\n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of the current odd natural number\n        square = i*i\n        # add the square to the total sum\n        total += square\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #initialize sum and counter variables\n    sum = 0\n    count = 1\n    \n    #loop through odd natural numbers\n    while count <= n:\n        #add the square of the current odd natural number to the sum\n        sum += count**2\n        \n        #increment the counter\n        count += 1\n    \n    #return the sum of the squares of the odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # initialize a variable to store the sum of squares of odd natural numbers\n    sum_of_squares = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum_of_squares variable\n        sum_of_squares += i**2\n\n    # return the sum_of_squares variable\n    return sum_of_squares"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    # Define the first three star numbers\n    first_three_star_nums = [1, 10, 100]\n\n    # If n is greater than the number of first three star numbers, use the next three star numbers\n    if n > len(first_three_star_nums):\n        n -= len(first_three_star_nums)\n        next_three_star_nums = [1000, 10000, 100000]\n    else:\n        next_three_star_nums = []\n\n    # Calculate then'th star number as the sum of then'th number from the first three star numbers and then'th number from the next three star numbers\n    star_num = first_three_star_nums[n-1] + next_three_star_nums[n-1]\n\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1 or n > 50:\n        return 'Invalid input. Please enter a number between 1 and 50.'\n    else:\n        num = 1\n        for i in range(n):\n            num *= 2\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n-1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the value of then'th star number to 0\n    nth_star_num = 0\n    \n    # Loop through each digit of then'th star number\n    for i in range(1, n+1):\n        # Add the value of the current digit to the nth_star_num\n        nth_star_num += i\n    \n    # Return the nth_star_num\n    return nth_star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 0\n    length = 1\n    # Loop through the range of numbers\n    for i in range(1, n+1):\n        # Print the number of spaces needed to align it with the right margin\n        print(\" \"*(length-len(str(i))), end=\"\")\n        # Print the number\n        print(i, end=\"\")\n        # Increment the number and length\n        num += i\n        length += 1\n        # Print a newline after every multiple of 10\n        if i % 10 == 0:\n            print()"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n*2) + \"*\" + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the first and second stars as 1\n    first_star = 1\n    second_star = 2\n\n    # Loop until we reach the desired number of stars\n    for i in range(2, n+1):\n        # Find the sum of the first and second stars\n        sum_star = first_star + second_star\n\n        # Update the first and second stars for the next iteration\n        first_star = second_star\n        second_star = sum_star\n\n    # Return the final value of the second star\n    return second_star"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return '*'\n    else:\n        return '*' + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        return str(n) + \"*\" + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the result\n    result = 1\n    # Loop n-1 times\n    for i in range(n-1):\n        # Calculate the sum of the previous n-i numbers\n        result += (i+1) * (2*n-i-1)\n    # Add the value of n-1 as the last term of the sum\n    result += n\n    return result"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # Convert the character to its ASCII code using ord() function and return it\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return 0"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value_map = {'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72, 'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80, 'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88, 'Y': 89, 'Z': 90, 'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    return ascii_value_map.get(k.upper(), None)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    k = k.upper()\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if len(k) == 1:\n        return ord(k)\n    else:\n        return ascii_value(k[1]) + (ord(k[0])-ord('A')+1)*26"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a character as input and returns its ascii value.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_at_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_at_even_index += arr[i]\n    return sum_even_at_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_pos = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even_pos += arr[i]\n                count += 1\n\n    return sum_even_pos, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            total_sum += arr[i]\n    return total_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n    \n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n                even_index = i\n    \n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    even_sum = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            if i % 2 == 0:\n                even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n    return sum_even, count"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            sum_even_powers += i**5\n        i += 1\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i ** 5 % 2 == 0:\n            sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i**5 % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1, n+1):\n        even_power_sum += (i*i*i*i*i)\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_even_powers = 0\n    for i in range(n):\n        sum_of_even_powers += (i+1)**5\n    return sum_of_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_power = 0\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_of_power += i ** 5\n            count += 1\n    return sum_of_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    for i in range(1, n+1):\n        sum_even_power += i ** 5\n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # initialize sum variable\n    sum = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2): \n        sum += i**5\n\n    # return the sum\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # initialize an empty list to hold the rear elements\n    rear_list = []\n    # iterate over each tuple in the input list\n    for tup in test_list:\n        # append the rear element of the tuple to the rear_list\n        rear_list.append(tup[1])\n    # return the rear_list\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        rear = item[-1]\n        result.append(rear)\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tuple[0] for tuple in reversed(test_list)]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding elements of the two tuples\n        test_tup1[i] -= test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must be of equal length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the length of the tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    # loop through the tuples and subtract the elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    # return the updated tuple\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum_even_binomial += math.comb(n,i)\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Define the binomial coefficients\n    coeff = [1]\n    for i in range(1, n+1):\n        coeff.append( coeff[i-1] * i // (i+1) )\n\n    # Initialize the sum of even binomial coefficients\n    even_sum = 0\n\n    # Calculate the sum of even binomial coefficients\n    for i in range(2, n+1, 2):\n        even_sum += coeff[i-1]\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n and calculates the sum of the even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n < 0:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return None\n\n    # Initialize the sum of even index binomial coefficients to 0\n    even_sum = 0\n\n    # Iterate through the even indices of the binomial coefficients\n    for i in range(2, n+1, 2):\n        # Calculate the binomial coefficient of i, n-i, i\n        coeff = math.comb(n, i-1)\n        # Multiply by 2 to account for the even and odd indices\n        coeff *= 2\n        # Add the current binomial coefficient to the sum of even index binomial coefficients\n        even_sum += coeff\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(2, n + 1):\n        for j in range(2, i + 1):\n            sum_even += int(str(i) * (n - i + 1) // (i - j + 1) * (n - j + 1) // (j - 1))\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial = 0\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            even_binomial += math.comb(n, i)\n    return even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial = 0\n    for i in range(2, n+1):\n        sum_even_binomial += math.comb(n, i) * 2**i\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_binomial_coeffs = 0\n\n    # Initialize variables for the binomial coefficients\n    x = 0\n    y = 0\n\n    # Calculate the first binomial coefficient\n    x = 0\n    y = n // 2\n    sum_even_binomial_coeffs += (y * math.factorial(x)) // math.factorial(y)\n\n    # Calculate the second binomial coefficient\n    x = 1\n    y = n - y\n    sum_even_binomial_coeffs += (y * math.factorial(x)) // math.factorial(y)\n\n    # Loop through the even indices of the binomial coefficients\n    for i in range(2, n, 2):\n        # Calculate the next binomial coefficient\n        x = i - 1\n        y = n - i\n        sum_even_binomial_coeffs += (y * math.factorial(x)) // math.factorial(y)\n\n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n\n    # initialize sum to 0\n    sum = 0\n\n    # loop through even indices\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient using math.comb() function\n        coeff = math.comb(n, i)\n        # check if the coefficient is even\n        if coeff % 2 == 0:\n            # add the even coefficient to the sum\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize sum variable to 0\n    sum_even_binomial = 0\n    \n    # Loop through all even indices\n    for i in range(2, n+1, 2):\n        # Calculate binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        \n        # Check if the coefficient is even\n        if i % 2 == 0:\n            # Add the coefficient to the sum if it is even\n            sum_even_binomial += binomial_coeff\n    \n    return sum_even_binomial"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * (3.14159 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    pi = 3.141592653589793\n    volume = (1/3) * pi * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14*r**2*h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    area = 3.14159 * r * r\n    volume = area * h / 3.0\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159*r*r*h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula to calculate the volume of a cylinder\n    v = (1/3) * pi * r**2 * h\n    \n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    vol = (3.14159*r*r*h) / 3.0\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    V = 3.14159 * (r ** 2) * h\n    return V"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    This function takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create an empty list to store the filtered entries\n    filtered_list = []\n    # Loop through the dictionary keys and values\n    for key, value in dict.items():\n        # If the value is greater than or equal to n, add the entry to the filtered list\n        if value >= n:\n            filtered_list.append((key, value))\n    # Return the filtered list\n    return filtered_list"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup)-1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1 and test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        elif test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i, num in enumerate(test_tup):\n        if i == 0:\n            continue\n        if num == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Using formula for decagonal numbers: 1^2 + 2^2 + 3^2 +... + n^2 = n(n+1)(2n+1)/6\n    # Where n is the input number\n    \n    # Use 1st term to start\n    dec_num = 1\n    \n    # Loop until we reach the nth term\n    for i in range(2, n+1):\n        # Calculate the next term of the sequence\n        dec_num += i*(i+1)*(2*i+1) // 6\n    \n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    result = 0\n    row = 1\n    col = 1\n\n    while row <= n:\n        if col == 1 or col == n:\n            result += (row * (2 * row - 1)) // 2\n            row += 1\n        else:\n            col += 1\n\n    return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the variables\n    num = 1\n    dec = 1\n    \n    # loop n times\n    for i in range(n): \n        # add the value of num and the value of dec to get the value of the nth decagonal number\n        nth_decagonal = num + dec\n        \n        # increment the value of num\n        num += 1\n        \n        # add the value of the nth decagonal number to the value of dec\n        dec = nth_decagonal\n        \n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function returns the nth decagonal number.\n    '''\n    # Base case for n = 0, return 1\n    if n == 0:\n        return 1\n    \n    # Calculate the sum of the squares of the first n natural numbers\n    sum_of_squares = 1 + 4 + 9 + 16 +... + (n * (n + 1))\n    # Use the math module to find the square root of the sum of squares\n    square_root = int(sum_of_squares ** 0.5)\n    # Calculate the nth natural number by adding the sum of squares to the square root\n    nth_natural_number = square_root + 1\n    \n    return nth_natural_number"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # initialize the first three decagonal numbers\n    decagonal_numbers = [1, 6, 21]\n\n    # loop through the numbers and check if n is in the list\n    for i in range(3, n + 1):\n        # check if n is a decagonal number\n        if i == decagonal_numbers[i // 2] + decagonal_numbers[i // 2 - 1]:\n            return True\n        # check if n is a square number (n = 1^2 + 2^2 + 3^2)\n        elif i == decagonal_numbers[0] + decagonal_numbers[1] + i:\n            return True\n\n    return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return (n + 1) * (10 ** n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Function to check if a number is a decagonal number.\n    '''\n    # Function to find the decagonal number\n    def decagonal_num(n): \n        return n * (2 * n - 1) \n\n    # Check if the given number is a decagonal number\n    if n == decagonal_num(n): \n        return True \n    else: \n        return False "
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1,n+1):\n        dec = (i*i) + (2*i) + 1\n        print(dec)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def decagonal_helper(n, a, b, c):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return a + b + c\n\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        a = 1\n        b = 1\n        c = 2\n        result = decagonal_helper(n, a, b, c)\n        return result"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the nth row of the decagonal pyramid\n    row = 1\n    for i in range(1, n+1):\n        row = row + i\n    # Calculate the nth decagonal number\n    return (row**2 + (row-1)**2)/2"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    # Check if the list is empty\n    if len(dlist) == 0:\n        return (False, -1)\n    \n    # Check if the item is in the list\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    \n    # Item not found\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize the index to -1\n    index = -1\n    \n    # Iterate over the array\n    for i in range(len(dlist)):\n        # If the element is found, update the index and break out of the loop\n        if dlist[i] == item:\n            index = i\n            break\n    \n    # If the element is not found, return (-1, -1)\n    if index == -1:\n        return (-1, -1)\n    else:\n        # Return a tuple containing the index and the element\n        return (True, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for item in test_list:\n        if item not in unique_list:\n            unique_list.append(item)\n        else:\n            return False\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set of the unique elements in the list\n    unique_elements = set(test_list)\n    # check if the length of the set is equal to the length of the list\n    if len(unique_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # Using a set to remove duplicates from the list\n    unique_list = set(test_list)\n\n    # If the length of the set is equal to the length of the original list, all elements are unique\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists are not of equal length\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input, nums1 and nums2, and subtracts each element of nums2 from each element of nums1.\n    The result is then returned as a list.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n    \n    # Subtract the elements of the two lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns the\n    difference between the two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Both lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Convert the number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Count the frequency of each digit in the number\n    freq = {}\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to its value\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    # Initialize an empty dictionary to store digit frequencies\n    freq = {}\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # If all digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize frequency dictionary\n    freq = {}\n    \n    # loop through each digit in the number\n    for digit in str(n):\n        # if digit is already in dictionary, increment its count\n        if digit in freq:\n            freq[digit] += 1\n        # if digit is not in dictionary, add it with a count of 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the dictionary and check if its frequency is less than or equal to itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    \n    # if no false positives are found, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    # Convert the integer to a list of digits\n    digits = list(str(n))\n\n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each digit in the list\n    for digit in digits:\n        # Check if the digit is already in the dictionary\n        if digit in freq:\n            # If it is, increment its frequency\n            freq[digit] += 1\n        else:\n            # If it isn't, add it to the dictionary with a frequency of 1\n            freq[digit] = 1\n\n    # Loop through each digit in the list again\n    for digit in digits:\n        # Check if the digit's frequency is greater than or equal to its value\n        if freq[digit] >= digit:\n            # If it is, return False, as the integer is not valid\n            return False\n\n    # If we make it through the loop without returning False, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    freq = [0] * 10\n    for i in str(n):\n        freq[int(i)] += 1\n    for i in freq:\n        if i > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    count = [0] * 10  # create a list of 0s to store the frequency of each digit\n    for i in str(n):\n        count[int(i)] += 1\n\n    for i in count:\n        if i > 1:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = {}\n    for digit in digits:\n        freq[digit] = freq.get(digit, 0) + 1\n        \n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n        \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n\n    # Create a dictionary to store the frequency of each digit in the integer\n    digit_frequency = {}\n\n    # Loop through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        if digit in digit_frequency:\n            digit_frequency[digit] += 1\n        else:\n            digit_frequency[digit] = 1\n\n    # Loop through each digit in the dictionary and check if its frequency is less than or equal to itself\n    for digit in digit_frequency:\n        if digit_frequency[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    This function takes an integer as input and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(d) for d in str(n)]\n    freq = {}\n    for d in digits:\n        freq[d] = freq.get(d, 0) + 1\n    for d in digits:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, el):\n    '''\n    This function takes in a list and an element and checks if all elements in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == el:\n        return check_element(lst[1:], el)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    \n    if list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    # Check if all elements in the list are equal to the given element\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \"\"\"\n    pattern = r\"a.*b[0-2]?b\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[^b]*b.{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)\\1*[bB]\\1*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(b{2,3}))'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b(?=.*[b]{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The string contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The string does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b{2,3})')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile('a(?:b{2,3})')\n    return bool(pattern.search(text))"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # create a modified array by repeating the given array k times\n    modified_array = []\n    for i in range(k):\n        modified_array += a * n\n    \n    # find the maximum subarray sum in the modified array\n    max_sum = max_subarray_sum(modified_array)\n    \n    # calculate the largest sum of a contiguous array which is formed by repeating the given array k times\n    largest_sum = max_sum * n\n    \n    # return the largest sum of a contiguous array which is formed by repeating the given array k times\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    if k == 1:\n        max_sum = max(a)\n        return max_sum\n\n    modified_array = [a[i] for i in range(n)]\n\n    max_sum = max(modified_array)\n    max_sum_in_k_repeats = max_sum\n\n    for i in range(k - 1):\n        max_sum = max(max_sum + a[i], a[i])\n        max_sum_in_k_repeats = max(max_sum_in_k_repeats, max_sum)\n\n    return max_sum_in_k_repeats"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # initialize the maximum sum and the sum of the kth repetition of the array\n    max_sum = float('-inf')\n    sum_k = 0\n    # loop over the array and calculate the sum of the kth repetition\n    for i in range(n):\n        sum_k += a[i]\n        # if the sum of the kth repetition is greater than the maximum sum, update the maximum sum\n        if sum_k > max_sum:\n            max_sum = sum_k\n    # return the maximum sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # find the maximum sum of a single array\n    max_sum = max(sum(a[0:i+1]) for i in range(n))\n    \n    # create a list to store the sum of repeated arrays\n    repeated_array_sums = []\n    for i in range(k):\n        # find the sum of the i-th repeated array\n        repeated_array_sum = sum(a[0:i+1])\n        \n        # check if the sum is greater than the current maximum sum\n        if repeated_array_sum > max_sum:\n            max_sum = repeated_array_sum\n            \n        # append the sum of the i-th repeated array to the list\n        repeated_array_sums.append(repeated_array_sum)\n    \n    # return the maximum sum of repeated arrays\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize the maximum sum and the current sum as 0\n    max_sum = 0\n    current_sum = 0\n    \n    # iterate through the array k times\n    for i in range(k):\n        # calculate the sum of the i-th repeated array\n        repeated_sum = sum(a)\n        \n        # add the repeated sum to the current sum\n        current_sum += repeated_sum\n        \n        # update the maximum sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # create a new list of repeated array\n    repeated_array = []\n    for i in range(k):\n        repeated_array += a\n    \n    # calculate the maximum subarray sum with non-repeating array\n    max_subarray_sum = max(a)\n    for i in range(n):\n        subarray_sum = a[i]\n        for j in range(i+1, n):\n            subarray_sum += a[j]\n        if subarray_sum > max_subarray_sum:\n            max_subarray_sum = subarray_sum\n    \n    # calculate the maximum subarray sum with repeated array\n    max_repeated_subarray_sum = max(repeated_array)\n    for i in range(k):\n        for j in range(i+1, k):\n            repeated_subarray_sum = repeated_array[i] + repeated_array[j]\n            if repeated_subarray_sum > max_repeated_subarray_sum:\n                max_repeated_subarray_sum = repeated_subarray_sum\n    \n    return max(max_subarray_sum, max_repeated_subarray_sum)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    mod_arr = []\n    for i in range(k):\n        mod_arr.append(a[0])\n    for i in range(1, n):\n        mod_arr.append(a[i] * (k - 1) + a[i-1])\n\n    max_sum = max(mod_arr)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Calculate the sum of the original array\n    original_sum = sum(a)\n    # Initialize the maximum sum of the modified array\n    max_sum = original_sum\n    # Repeat the given array k times and calculate the sum of each repetition\n    for i in range(k):\n        new_array = a * i\n        new_array_sum = sum(new_array)\n        # Update the maximum sum of the modified array if the new sum is greater\n        if new_array_sum > max_sum:\n            max_sum = new_array_sum\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize a list of repeated array to store the sum of the original array\n    repeated_array = []\n    for i in range(k):\n        repeated_array.append(a)\n\n    # Initialize a variable to store the maximum sum of the repeated array\n    max_sum = float('-inf')\n\n    # Iterate over all possible combinations of the original array and the repeated array\n    for i in range(n):\n        for j in range(k):\n            # Add the original array to the current index in the repeated array\n            repeated_array[j][i] += a[i]\n\n            # Calculate the sum of the repeated array\n            current_sum = sum(repeated_array[j])\n\n            # If the sum is greater than the current maximum, update the maximum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = 0\n    max_sum = float('-inf')\n    for i in range(k):\n        total_sum += a[i]\n        max_sum = max(max_sum, total_sum)\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    count = 0\n    i = 2\n    while count < n:\n        if i % 2 == 0:\n            even_sum += i ** 2\n            count += 1\n        i += 1\n    return even_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        num = 2*i+1\n        sum += num**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(1, n+1, 2):\n        even_numbers.append(i)\n    square_sum = 0\n    for num in even_numbers:\n        square_sum += num**2\n    return square_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    count = 1\n    \n    while count <= n:\n        sum += count**2\n        count += 2\n        \n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = []\n        for item in sublist:\n            lengths.append(len(str(item)))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length not in max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for lst in list1:\n        lengths.append(len(lst))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        if length not in max_lengths:\n            max_lengths.append(length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = len(max(sublist, key=len))\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # if n is 1 or k is 1, there is only 1 way to paint the fence\n    if n == 1 or k == 1: \n        return 1\n\n    # if n is 0 or k is 0, there is no way to paint the fence\n    if n == 0 or k == 0: \n        return 0\n\n    # if n is greater than k, there is no way to paint the fence\n    if n > k: \n        return 0\n\n    # if n is even, there are two ways to paint the fence:\n    # - painting the first n/2 posts with the same color as the last post\n    # - painting the first n/2 posts with different colors than the last post\n    if n % 2 == 0: \n        return count_no_of_ways(n//2, k) + count_no_of_ways(n//2, k-1)\n\n    # if n is odd, there is one way to paint the fence:\n    # - painting the first (n-1) posts with the same color as the last post\n    return count_no_of_ways(n-1, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array to store the number of ways to paint the fence\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # Initialize the first row and the first column\n    for i in range(k + 1):\n        ways[0][i] = 1\n\n    # Fill the rest of the array\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if ways[i - 1][j] == 1 and ways[i - 1][j - 1] == 1:\n                ways[i][j] = ways[i - 1][j] + ways[i - 1][j - 1]\n            else:\n                ways[i][j] = ways[i - 1][j]\n\n    # Return the value in the bottom-right corner of the array\n    return ways[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    # Create a list to store the number of ways for each fence size\n    ways = [0]*(n+1)\n    # Base case - If the fence has only one post, it can be painted with any color\n    ways[1] = k\n    # Iterate through all possible fence sizes up to the given limit\n    for i in range(2, n+1):\n        # Iterate through all possible colors for the current fence size\n        for j in range(k):\n            # If the current color is the same as the previous color,\n            # then the previous fence size can be painted with this color\n            if j == 0 or j == k-1:\n                ways[i] += ways[i-1]\n            else:\n                # Otherwise, the previous fence size cannot be painted with this color\n                ways[i] += ways[i-1] - ways[i-2]\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(n-1):\n            count += count_no_of_ways(n-i-1, k)\n        count += count_no_of_ways(1, k-1)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a dictionary to store the count of ways to paint the fence with k colors\n    ways = {0: 1}\n    \n    # Loop through the range from 1 to n - 1\n    for i in range(1, n):\n        # Initialize a dictionary to store the count of ways to paint the fence with k colors using only i adjacent posts\n        ways_i = {0: 1}\n        \n        # Loop through the range from 1 to k - 1\n        for j in range(1, k + 1):\n            # Check if the current adjacent post has the same color as the previous adjacent post\n            if j == 1 or i == 1 or (i - 1) % 2 == 0:\n                # Add the count of ways to paint the fence with k colors using only i adjacent posts and the current adjacent post\n                ways_i[j] = ways_i.get(j - 1, 0) + ways.get(i, 0)\n            else:\n                # Add the count of ways to paint the fence with k colors using only i - 1 adjacent posts and the current adjacent post\n                ways_i[j] = ways_i.get(j - 1, 0) + ways.get(i - 1, 0)\n        \n        # Update the dictionary of ways to paint the fence with k colors using i adjacent posts\n        ways[i] = ways_i\n    \n    # Return the count of ways to paint the fence with k colors using all n adjacent posts\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    :param n: number of posts on the fence\n    :param k: number of colors on the fence\n    :return: number of ways of painting the fence\n    \"\"\"\n\n    # initialize a list of lists to store the number of ways for each color\n    # we will fill this list in a nested loop\n    ways = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base cases for the fence length\n    ways[0][0] = 1\n    ways[0][1] = 1\n\n    # fill the rest of the list using nested loops\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            ways[i][j] = ways[i][j - 1] + ways[i - 1][j]\n\n    # return the final value in the list\n    return ways[-1][-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    def is_adjacent(i, j, k):\n        if j == k - 1:\n            return i == 0 or (i > 0 and nums[i-1] == nums[i])\n        elif j == 0:\n            return i > 0 and nums[i-1] == nums[i]\n        else:\n            return nums[i-1] == nums[i] and nums[i] == nums[i+1]\n    \n    def get_adjacent_colors(i, j, nums):\n        if i == 0:\n            return [nums[j], nums[j+1]]\n        elif i > 0 and nums[i-1] == nums[i]:\n            return [nums[j], nums[j+1]]\n        else:\n            return [nums[j+1], nums[j]]\n    \n    def count_adjacent_ways(nums, k, start):\n        if start == n:\n            return 1\n        count = 0\n        for i in range(start, n):\n            if is_adjacent(start, i, k):\n                count += count_adjacent_ways(nums, k, i+1)\n        return count\n    \n    nums = [i for i in range(1, k+1)]\n    return count_adjacent_ways(nums, k, 1)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # If n is less than or equal to 0 or k is less than or equal to 0, then the number of ways is 0\n    if n <= 0 or k <= 0:\n        return 0\n\n    # Initialize the count of ways as 1\n    count = 1\n\n    # If n is greater than 2 and k is greater than or equal to 3, then there are at least 3 ways to paint the fence\n    if n > 2 and k >= 3:\n        # Initialize the count of ways as 0\n        count = 0\n\n        # Loop through the first n-1 posts\n        for i in range(n-1):\n            # Loop through the first k-2 colors\n            for j in range(k-2):\n                # If the current color is equal to the next color, then increment the count of ways\n                if i == j:\n                    count += 1\n\n        # Add the count of ways if n is less than k\n        if n < k:\n            count += 1\n\n        # Add the count of ways if n is equal to k\n        if n == k:\n            count += 1\n\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize a list to store the number of ways of painting the fence for each color\n    ways = [0] * k\n    \n    # Initialize a variable to store the number of ways of painting the fence for the first post\n    ways[0] = 1\n    \n    # Iterate through the remaining posts\n    for i in range(1, n):\n        # For each post, iterate through the previous colors and add the number of ways of painting the fence for each color\n        for j in range(k):\n            ways[j] += ways[j] * ways[k-j-1]\n            \n    # Return the final result\n    return ways[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the 2D array with 1s for first row and column\n    dp = [[1]*(k+1) for _ in range(n+1)]\n\n    # Fill in the remaining cells of the array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the cell contains only one post and one color, it is 1\n            if i == 1 or j == 1:\n                dp[i][j] = 1\n            # If the cell contains two posts and one color, it is dp[i-1][j]\n            elif j == 2:\n                dp[i][j] = dp[i-1][j]\n            # If the cell contains two or more posts and one color, it is the sum of dp[i-1][j-1] and dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n\n    # Return the final value in the array\n    return dp[n][k]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Check if m is zero\n    if m == 0:\n        print(\"Cannot divide by zero!\")\n        return\n\n    # Find the quotient of n and m\n    quotient = n // m\n\n    # Check if the remainder is 0\n    if quotient * m == n:\n        print(\"The quotient is:\", quotient)\n    else:\n        print(\"The quotient is:\", quotient, \"with remainder:\", n - quotient * m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    if quotient * m == n:\n        return quotient\n    else:\n        return find(n, m+1)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two integers n and m and returns their quotient, rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the sides\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = math.sqrt(w**2)\n    side3 = side1 + side2\n    \n    # Calculate the length of the third side\n    third_side = math.sqrt(side1**2 + side3**2)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the semi-perimeter of a right angled triangle\n    s = (w**2 + h**2)**0.5\n    \n    # Formula to find the area of a right angled triangle\n    A = (w * h) / 2\n    \n    # Formula to find the semi-perimeter of the triangle in the other direction\n    other_s = math.sqrt(s**2 - (w**2 + h**2))\n    \n    # Calculate the third side of the triangle\n    third_side = (A * other_s) / (s**2)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w**2 + h**2)**0.5 # calculating the semi-perimeter of the triangle\n    a = (w**2 + h**2 + s**2)**0.5 # calculating the semi-perimeter of the triangle using Heron's formula\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using the formula for the length of a right angled triangle\n    third_side = math.sqrt(w**2 + h**2)\n    \n    # Returning the value of the third side\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    This function finds the third side of a right angled triangle given the length of the\n    hypotenuse and the length of the other side.\n    \"\"\"\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the length of the other side\n    o = (math.sqrt(s**2 - w**2) if s >= w else 0)\n    \n    # Return the third side\n    return o"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # finding the hypotenuse\n    hypotenuse = math.sqrt(w**2 + h**2)\n\n    # finding the angle of the triangle\n    angle = math.degrees(math.acos((w/hypotenuse)**2))\n\n    # finding the other side of the triangle\n    other_side = math.sin(math.radians(angle)) * hypotenuse\n\n    # returning the other side of the triangle\n    return other_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    third = (w + h + side) / 2\n    return round(third, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w ** 2) + (h ** 2))\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Iterate over the list and find the maximum value\n    max_val = None\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"List is empty!\")\n        return None\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) > type(max_val):\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Loop through each element in the list\n    for val in listval:\n\n        # Check if the current value is greater than the maximum value\n        if val > max_val:\n\n            # Update the maximum value\n            max_val = val\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = None\n    for item in listval:\n        if max_num is None or item > max_num:\n            max_num = item\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize variables\n    max_val = None\n\n    # Iterate through the list\n    for val in listval:\n\n        # If the current value is greater than the current maximum value\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(lst):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not lst:\n        return None\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    divisor = 1\n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor = 1\n    divisor_sum = 0\n    while divisor <= number:\n        if number % divisor == 0:\n            divisor_sum += divisor\n        divisor += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    while divisor * divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Initialize a variable to store the sum of divisors\n    total = 0\n    # Loop through all numbers between 1 and the number itself\n    for i in range(1, number + 1):\n        # If the number is divisible by i, add it to the total\n        if number % i == 0:\n            total += i\n    # Return the sum of divisors\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Initialize the count of inversions to zero\n    count = 0\n    \n    # Iterate over the array from the second element to the last element\n    for i in range(1, len(arr)):\n        \n        # Initialize two pointers, one at the beginning and the other at the end of the sub-array\n        left = 0\n        right = i\n        \n        # While the left pointer is less than the right pointer, keep swapping elements and updating the count\n        while left < right:\n            # If the elements at the left and right pointers are not in order, increment the count\n            if arr[left] > arr[right]:\n                count += right - left\n                # Swap the elements at the left and right pointers\n                arr[left], arr[right] = arr[right], arr[left]\n                # Move the left pointer one position to the right and the right pointer one position to the left\n                left += 1\n                right -= 1\n            # If the elements at the left and right pointers are in order, move the left pointer one position to the right\n            else:\n                left += 1\n    \n    # Return the count of inversions\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Function to count inversions using merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        left = merge_sort(left)\n        right = merge_sort(right)\n        \n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        \n        result += left[i:]\n        result += right[j:]\n        \n        return result\n    \n    # Calling merge sort function to sort the array\n    sorted_arr = merge_sort(arr)\n    \n    # Counting inversions using two pointers\n    count = 0\n    i, j = 0, 1\n    \n    while i < len(sorted_arr) - 1 and j < len(sorted_arr):\n        if sorted_arr[i] > sorted_arr[j]:\n            count += len(sorted_arr) - i - 1\n            i += 1\n        else:\n            j += 1\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        # Count the number of elements greater than arr[i]\n        count += sum(1 for j in range(i+1, n) if arr[j] > arr[i])\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        # Find the smallest element in remaining unsorted part of the array\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        # Swap the smallest element with the first element of the current subarray\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n        # Count the inversions between the first element of the current subarray and the end of the array\n        inv_count += (n-i-1)\n        # Recursively count the inversions in the remaining subarray\n        inv_count += get_Inv_Count(arr[i+1:])\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0  # initialize count variable to 0\n    \n    # loop through each subarray of size 2\n    for i in range(n-1):\n        # loop through each subarray of size 1\n        for j in range(i+1, n):\n            # check if the two subarrays have any inversions\n            if is_inversion(arr, i, j):\n                count += j - i  # add the count of inversions\n    \n    return count  # return the final count of inversions\n\n\ndef is_inversion(arr, i, j): \n    '''\n    Check if the two subarrays starting from index i and j have any inversions.\n    '''\n    n = len(arr)\n    left = i\n    right = j\n    \n    # loop through the subarray and swap the elements\n    while left < right:\n        if arr[left] > arr[right]:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n        else:\n            left += 1\n            \n    return left - i  # return the count of inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # counting inversions using two pointers approach\n    # time complexity: O(n log n)\n    # space complexity: O(1)\n    n = len(arr)\n    left = 0\n    right = n - 1\n\n    while left < right:\n        # Find the index of the pivot element\n        pivot_index = partition(arr, left, right)\n        # Count inversions on the left side of the pivot\n        inv_count = pivot_index - left\n        # Count inversions on the right side of the pivot\n        left_inv_count = partition(arr, left, pivot_index) - left\n        right_inv_count = partition(arr, pivot_index + 1, right) - pivot_index - 1\n        # Merge the inversions on both sides of the pivot\n        inv_count += left_inv_count + right_inv_count\n        # Update the inversion count at the pivot element\n        arr[pivot_index] = left_inv_count + right_inv_count\n        # Update the inversion count at the left side of the pivot\n        left = left + inv_count\n        # Update the inversion count at the right side of the pivot\n        right = right - inv_count\n    return arr\n\n\ndef partition(arr, left, right):\n    \"\"\"\n    Partition the array around the given pivot.\n    \"\"\"\n    pivot = arr[right]\n    i = left - 1\n    for j in range(left, right):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[right] = arr[right], arr[i + 1]\n    return i + 1\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    # Create two empty lists for sorted and unsorted elements\n    sorted_arr = []\n    unsorted_arr = []\n\n    # Iterate through the array and append sorted and unsorted elements to the respective lists\n    for i in range(len(arr)):\n        if arr[i] < arr[0]:\n            sorted_arr.append(arr[i])\n        else:\n            unsorted_arr.append(arr[i])\n\n    # Use merge sort to merge the sorted and unsorted lists\n    merge_sort(sorted_arr)\n    merge_sort(unsorted_arr)\n\n    # Iterate through the sorted list and count inversions\n    inv_count = 0\n    i = j = k = 0\n    while i < len(sorted_arr) and j < len(unsorted_arr):\n        if sorted_arr[i] < unsorted_arr[j]:\n            inv_count += len(sorted_arr) - i\n            i += 1\n        else:\n            k += 1\n            j += 1\n\n    # Add any remaining elements in the unsorted list\n    inv_count += len(sorted_arr) + len(unsorted_arr) - 2 * k\n\n    return inv_count\n\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    i = j = 0\n    result = []\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    # Counting inversions using Merge Sort\n    def merge_sort(arr, low, high):\n        if low < high:\n            mid = (low + high) // 2\n            merge_sort(arr, low, mid)\n            merge_sort(arr, mid + 1, high)\n            inv_count = merge(arr, low, mid, high)\n        return inv_count\n    \n    def merge(arr, low, mid, high):\n        i = low\n        j = mid + 1\n        inv_count = 0\n        inv_index = low\n        inv_arr = []\n        while i <= mid and j <= high:\n            if arr[i] <= arr[j]:\n                inv_arr.append(arr[i])\n                i += 1\n            else:\n                inv_arr.append(arr[j])\n                j += 1\n                inv_count += (mid - i + 1)\n        while i <= mid:\n            inv_arr.append(arr[i])\n            i += 1\n        while j <= high:\n            inv_arr.append(arr[j])\n            j += 1\n        for i in range(len(inv_arr)):\n            arr[inv_index + i] = inv_arr[i]\n        return inv_count\n\n    inv_count = merge_sort(arr, 0, n - 1)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    The time complexity of this function is O(n log n), where n is the length of the array.\n    '''\n    \n    # Merge sort algorithm\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        \n        return merge(left, right)\n    \n    # Merge function\n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                \n        result += left[i:]\n        result += right[j:]\n        \n        return result\n    \n    # Count inversions\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    return count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to hold the flattened list\n    flattened_list = []\n\n    # loop through each element in the list1\n    for i in list1:\n        # if the element is another list, recursively call the flatten_list function on it\n        if type(i) == list:\n            flattened_list.extend(flatten_list(i))\n        # if the element is not a list, simply append it to the flattened_list\n        else:\n            flattened_list.append(i)\n\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    '''\n    This function takes a nested list as input and returns a flattened list.\n    '''\n    flattened_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened_lst.extend(flatten_list(item))\n        else:\n            flattened_lst.append(item)\n    return flattened_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == list:\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Create an empty list to store the flattened list\n    flattened_list = []\n\n    # Loop through each element in the input list\n    for element in list1:\n\n        # If the element is a list, recursively call the flatten_list function on it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n\n        # Otherwise, append the element to the flattened list\n        else:\n            flattened_list.append(element)\n\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        if item[0] =='sale':\n            max_dict[item[2]] += item[1]\n        elif item[0] =='return':\n            max_dict[item[2]] -= item[1]\n\n    max_agg = max(max_dict.values())\n    max_item = max(max_dict, key=max_dict.get)\n    return max_agg, max_item"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate.\n    '''\n    max_agg = defaultdict(int) # create an empty dictionary to store the maximum aggregate\n    for st, price in stdata: # iterate through the list of tuples\n        for i in range(len(st)): # iterate through each character in the string\n            max_agg[i] = max(max_agg[i], price) # update the max aggregate for each character\n    return max(max_agg.values()) # return the maximum aggregate value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item in the list\n    count_dict = defaultdict(int)\n    # iterate over the list of tuples\n    for item, count in stdata:\n        # update the count of the item in the count_dict\n        count_dict[item] += count\n    # initialize a variable to store the maximum aggregate\n    max_agg = 0\n    # iterate over the count_dict to find the maximum aggregate\n    for count in count_dict.values():\n        max_agg = max(max_agg, count)\n    # return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        if item[2] == '+':\n            max_aggr[item[0]] += int(item[1])\n        elif item[2] == '-':\n            max_aggr[item[0]] -= int(item[1])\n        else:\n            raise ValueError(\"Invalid operation\")\n    max_aggr = sorted(max_aggr.items(), key=lambda x: x[1], reverse=True)\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Convert the list of tuples into a dictionary\n    stdict = defaultdict(int)\n    for item in stdata:\n        stdict[item[0]] += item[1]\n\n    # Calculate the maximum aggregate\n    max_agg = max(stdict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(float)\n\n    # Iterate over each tuple in the list\n    for customer, amount in stdata:\n        # Add the amount to the max_aggs dictionary for the customer\n        max_aggs[customer] += amount\n\n    # Find the maximum aggregate from the max_aggs dictionary\n    max_agg = max(max_aggs.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    max_agg[0] = 0\n    for i, (product, price) in enumerate(stdata):\n        if price > max_agg[i]:\n            max_agg[i] = price\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n\n    for x in stdata:\n        max_dict[x[1]] += x[0]\n\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggr = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for st in stdata:\n        # Get the customer id and their aggregate\n        customer_id, aggregate = st\n\n        # Check if the current aggregate is greater than the maximum aggregate for the customer\n        if aggregate > max_aggr[customer_id]:\n            # Update the maximum aggregate for the customer\n            max_aggr[customer_id] = aggregate\n\n    # Return the maximum aggregate for each customer\n    return max_aggr"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and calculates the maximum aggregate from it.\n    '''\n    # Create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n    for item, price in stdata:\n        count_dict[item] += 1\n    \n    # Create a dictionary to store the price of each item in the list\n    price_dict = defaultdict(float)\n    for item, price in stdata:\n        price_dict[item] += price\n    \n    # Initialize variables to store the maximum aggregate and maximum items\n    max_agg = 0\n    max_items = []\n    \n    # Loop through the count and price dictionaries and find the maximum aggregate and maximum items\n    for item, count in count_dict.items():\n        agg = count * price_dict[item]\n        if agg > max_agg:\n            max_agg = agg\n            max_items = [item]\n        elif agg == max_agg:\n            max_items.append(item)\n    \n    # Return the maximum aggregate and maximum items\n    return max_agg, max_items"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    def is_valid_binary_seq(seq):\n        return sum(seq) % 2 == 0\n\n    def sum_of_bits(seq):\n        return sum(int(bit) for bit in seq)\n\n    count = 0\n    for i in range(2, n+1):\n        for seq in itertools.combinations('01', i):\n            if is_valid_binary_seq(seq) and sum_of_bits(seq[:n]) == sum_of_bits(seq[-n:]):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_seq = bin(i)[2:].zfill(n)\n        first_half = int(binary_seq[:n])\n        second_half = int(binary_seq[-n:])\n        if first_half == second_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i & j == i | j:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        first_half = binary_str[:n]\n        last_half = binary_str[-n:]\n        if int(first_half) == int(last_half):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    count = 0 \n    for i in range(2**n): \n        for j in range(2**n): \n            if i^j == 0: \n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        # check if sum of first n bits is same as sum of last n bits\n        sum_first = i % (2**(n-1))\n        sum_last = (i//(2**(n-1))) % 2\n        if sum_first == sum_last:\n            count += 1\n    return count\n\nn = 5 # length of binary sequence\nprint(count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        for j in range(2**n):\n            if i & j == 0:\n                seq1 = bin(i)[2:].zfill(n)\n                seq2 = bin(j)[2:].zfill(n)\n                if seq1 == seq2[::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n):\n        last_n_bits = bin(i)[2:].zfill(n)\n        first_n_bits = bin(i+2**n-1)[2:].zfill(n)\n        if int(first_n_bits) == int(last_n_bits):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        sum1 = sum([int(digit) for digit in bin(i)[2:].zfill(n)])\n        sum2 = sum([int(digit) for digit in bin(i)[-2:].zfill(n)])\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = i\n        sum2 = 0\n        for j in range(n):\n            sum2 += (i >> j) & 1\n        if sum1 == sum2:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth of the dictionary\n    depth = 0\n    # Loop through each key-value pair in the dictionary\n    for key, value in d.items():\n        # If the value is a dictionary, recursively call the function on that dictionary\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value))\n        # Increment the depth of the dictionary by 1 for each key-value pair encountered\n        depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            if depth == 1:\n                depth += 1\n            else:\n                depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    # Use a recursive function to calculate the depth\n    def recurse_depth(d, depth):\n        if isinstance(d, dict):\n            # Recursively find the depth of the dictionary's values\n            for value in d.values():\n                recurse_depth(value, depth+1)\n        else:\n            # Update the depth of the dictionary itself\n            depth += 1\n        return depth\n    \n    # Call the recursive function with an initial depth of 0\n    depth = recurse_depth(d, 0)\n    \n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for k,v in d.items():\n        if isinstance(v, dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        \n        if current_depth > max_depth:\n            max_depth = current_depth\n    \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize a variable to store the depth of the dictionary\n    depth = 0\n    \n    # loop through each key in the dictionary\n    for key in d:\n        # if the key is another dictionary, recursively call the function to find its depth\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]))\n        # if the key is a list, add 1 to the depth\n        elif isinstance(d[key], list):\n            depth += 1\n    \n    # return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        max_depth = max(1 + dict_depth(k) for k in d.keys())\n        return max_depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d, depth=0):\n    if isinstance(d, dict):\n        depth += 1\n        for key, value in d.items():\n            if isinstance(value, (dict, list)):\n                depth = dict_depth(value, depth)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the element at the index after rotations\n    element = arr[(index + rotations) % len(arr)]\n\n    # Find the element's index after rotations\n    element_index = (arr.index(element) + rotations) % len(arr)\n\n    # Find the range of elements that contain the element after rotations\n    range_start = element_index - ranges[element_index]\n    range_end = element_index + ranges[element_index]\n\n    # Find the element at the given index after rotations\n    result = arr[(range_start + index) % len(arr)]\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of range tuples, number of rotations, and an index as input and returns the element at the given index after rotations.\n    \n    Args:\n        arr: an array of integers\n        ranges: a list of tuples where each tuple contains the start and end indices of a range\n        rotations: an integer representing the number of rotations to perform\n        index: an integer representing the index at which we want to find the element after rotations\n        \n    Returns:\n        the element at the given index after rotations\n    \n    Examples:\n        find_Element([1, 2, 3, 4, 5, 6], [(0, 3), (4, 5)], 1, 2) # Returns 3 after 1 rotation\n        \n        find_Element([1, 2, 3, 4, 5, 6], [(0, 3), (4, 5)], 3, 1) # Raises an IndexError\n    \n    \"\"\"\n    def find_element_in_range(start, end, rotations, index):\n        \"\"\"\n        This function takes a start and end index and a rotation count and returns the element at the given index after rotations.\n        \n        Args:\n            start: an integer representing the starting index of the range\n            end: an integer representing the ending index of the range\n            rotations: an integer representing the number of rotations to perform\n            index: an integer representing the index at which we want to find the element after rotations\n            \n        Returns:\n            the element at the given index after rotations\n        \n        \"\"\"\n        if rotations == 1:\n            return arr[index]\n        elif rotations % 2 == 0:\n            return find_element_in_range(start, (start + end) // 2, rotations // 2, index)\n        else:\n            return find_element_in_range((start + end) // 2, end, rotations // 2, index)\n    \n    for start, end in ranges:\n        if start <= index <= end:\n            return find_element_in_range(start, end, rotations, index)\n    \n    raise IndexError(\"Index out of range\")"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in the given array, range of rotations and the index to be searched.\n    The function then finds the element at the given index after the number of rotations.\n\n    Args:\n        arr (list): A list of integers.\n        ranges (list): A list of tuples of integers representing the range of rotations.\n        rotations (int): The number of rotations to be applied to the array.\n        index (int): The index of the element to be searched.\n\n    Returns:\n        int: The element at the given index after the number of rotations.\n    \"\"\"\n\n    # Apply rotations to the array\n    for _ in range(rotations):\n        for i in range(len(arr) - 1, 0, -1):\n            j = i - 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Reverse the rotations\n    for _ in range(rotations):\n        for i in range(len(arr) - 1, 0, -1):\n            j = i - 1\n            arr[i], arr[j] = arr[j], arr[i]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if count == index:\n            return arr[i]\n        count += 1\n        if count == len(arr):\n            count = 0\n\n    for i in range(len(arr)):\n        for j in range(len(ranges)):\n            if count == index:\n                return arr[(i+ranges[j-1])%len(arr)]\n            count += 1\n            if count == len(arr):\n                count = 0\n    return -1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # initialize the result to the original element at the given index\n    result = arr[index]\n\n    # rotate the array by rotations number of times\n    for i in range(rotations):\n        # rotate the array by 1 position to the left\n        arr.append(arr.pop(0))\n\n    # iterate over the array and find the element at the given index after rotations\n    for i in range(len(arr)):\n        if i == index:\n            # if the current index is equal to the given index, return the result\n            result = arr[i]\n            break\n\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, the number of rotations, and an index.\n    It returns the element at the given index after the number of rotations.\n    \"\"\"\n    # Initialize the current index to the given index.\n    curr_index = index\n\n    # Iterate over the range list and rotate the current index until it reaches the desired index.\n    for i in range(rotations):\n        # Calculate the new index after rotation.\n        new_index = (curr_index + ranges[i]) % len(arr)\n        # Update the current index.\n        curr_index = new_index\n\n    # Return the element at the final index.\n    return arr[curr_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after rotating the given array by a given number of rotations.\n    :param arr: the given array\n    :param ranges: a list of tuples representing the ranges of values that can be rotated\n    :param rotations: the number of rotations to apply\n    :param index: the index at which the element needs to be found\n    :return: the element at the given index after rotating the array by the given number of rotations\n    \"\"\"\n    if rotations == 0:\n        return arr[index]\n    else:\n        # Find the range of values that can be rotated\n        rotatable_range = ranges[rotations - 1]\n        # Calculate the number of elements in the rotated range\n        rotatable_count = rotatable_range[1] - rotatable_range[0] + 1\n        # Calculate the new index after rotating\n        new_index = (index - rotatable_range[0]) % rotatable_count + rotatable_range[0]\n        # Call the function recursively with the new index\n        return find_Element(arr, ranges, rotations - 1, new_index)"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # Calculate the number of elements after rotations\n    num_elements = len(arr)\n    for r in ranges:\n        num_elements *= r\n    num_elements *= rotations\n    \n    # Calculate the index after rotations\n    count = 0\n    for i in range(num_elements):\n        count += 1\n        if count == index:\n            break\n    \n    # Find the element at the given index\n    element = arr[(count-1) % len(arr)]\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, a range of rotations and an index to find the element\n    after rotations.\n    \n    Input:\n    arr - an array of integers\n    ranges - a list of tuples representing the number of rotations to perform for each element\n    rotations - the number of rotations to perform\n    index - the index of the element to be found after rotations\n    \n    Output:\n    The element at the given index after rotations.\n    '''\n    # Loop through each element\n    for i in range(len(arr)):\n        # Loop through each rotation range for the current element\n        for j in range(len(ranges)):\n            # Calculate the number of rotations to perform for the current element and index\n            rotations_required = ranges[j][1] - ranges[j][0]\n            # Perform the required number of rotations\n            arr = perform_rotations(arr, rotations_required)\n        # Check if the current index matches the required index for the current element\n        if i == index:\n            # Return the element at the given index\n            return arr[index]\n    # If no element was found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, ranges of rotations, and an index as input.\n    The function finds the element at the given index after the specified number of rotations.\n    \"\"\"\n    # If index is out of range\n    if index < 0 or index >= len(arr):\n        return None\n    \n    # Calculate the rotation matrix\n    rotation_matrix = create_rotation_matrix(ranges)\n    \n    # Apply the rotations\n    for _ in range(rotations):\n        arr = apply_rotation(arr, rotation_matrix)\n    \n    # Return the element at the specified index after rotations\n    return arr[index]\n\n\ndef create_rotation_matrix(ranges):\n    \"\"\"\n    This function takes a list of ranges and creates a rotation matrix.\n    The rotation matrix is a 2D array where the i-th row represents the\n    rotation of the i-th element by the corresponding range.\n    \"\"\"\n    n = len(ranges)\n    matrix = [[1]]\n    for i in range(n):\n        matrix.append([1])\n        for j in range(n):\n            if i!= j:\n                matrix[-1][j] = ranges[j]\n                matrix[j][-1] = ranges[i]\n    return matrix\n\n\ndef apply_rotation(arr, matrix):\n    \"\"\"\n    This function takes an array and a rotation matrix and applies the rotation matrix to the array.\n    The function returns the array after the rotation.\n    \"\"\"\n    n = len(arr)\n    for _ in range(n):\n        for j in range(n):\n            arr[j] = rotate(arr[j], matrix[j])\n    return arr\n\n\ndef rotate(x, matrix):\n    \"\"\"\n    This function takes a number and a rotation matrix and applies the rotation matrix to the number.\n    The function returns the rotated number.\n    \"\"\"\n    n = len(matrix)\n    result = 0\n    for i in range(n):\n        result += matrix[i][0] * x\n        for j in range(1, n):\n            result += matrix[i][j] * (x % (matrix[i][j] * matrix[i][j]))\n        x //= matrix[i][j]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[0], matches[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = pattern.findall(words)\n    if len(matches) >= 2:\n        return matches[0], matches[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0].lower() == 'p']\n    if len(p_words) > 1:\n        return p_words[0], p_words[1]\n    elif len(p_words) == 1:\n        return p_words[0]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'p\\w+')\n    matches = pattern.findall(words)\n    if len(matches) < 2:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p[a-z]+')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Regular expression to match words starting with 'p'\n    pattern = re.compile(r'^p.*')\n    \n    # Iterate over the words in the list\n    for word in words:\n        # Check if the word matches the pattern\n        if pattern.match(word):\n            # Split the word into two parts and return them\n            return word.split(' ')\n    \n    # If no words starting with 'p' are found, return None\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p.*', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    matches = re.findall(pattern, words)\n    if len(matches) < 2:\n        return None\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'p[a-zA-Z]*'\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize the variables\n    max_sum = float('-inf')\n    current_sum = 0\n    current_subseq = [0]\n\n    # Iterate over the elements\n    for i in range(index, n):\n        # If the element is less than k, ignore it\n        if a[i] < k:\n            continue\n\n        # If the element is greater than or equal to k, update the sum\n        current_sum += a[i]\n\n        # If the current sum is greater than the current maximum sum, update the maximum sum and current subsequence\n        if current_sum > max_sum:\n            max_sum = current_sum\n            current_subseq = [i]\n        elif current_sum == max_sum:\n            current_subseq.append(i)\n\n    # If k is not present in the current subsequence, add it to the list\n    if k not in current_subseq:\n        current_subseq.append(n)\n\n    # Return the maximum sum of increasing subsequence from prefix until index and including k\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return a[index-1]\n\n    dp = [0] * (n+1)\n    max_sum = a[index-1]\n\n    for i in range(1, n+1):\n        if i < k:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = max(dp[i-1], dp[i-k] + a[i-1])\n\n        max_sum = max(max_sum, dp[i])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index >= n:\n        return 0\n    \n    if index == 0:\n        if k < 0 or k > n-1:\n            return 0\n        else:\n            return max(a[k], a[index])\n    \n    if a[index] < a[index-1]:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index] + max_sum_increasing_subseq(a, n, index-1, k-1))\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list 'a' of integers and its size 'n' as input. The index 'i' of the list is also passed as input. The function returns the maximum sum of increasing subsequence from prefix until ith index and including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        if i < index:\n            curr_sum += a[i]\n        if i == k:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum -= a[i]\n            continue\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    prefix_sum = 0\n    dp = [float('-inf')] * n\n\n    # Fill the dp array\n    for i in range(index, n):\n        dp[i] = prefix_sum + a[i]\n        if i > k:\n            dp[i] = max(dp[i], dp[i - 1])\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n        prefix_sum = max(prefix_sum, dp[i])\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize the maximum sum and the last index of the maximum sum\n    max_sum = a[0]\n    max_sum_index = 0\n\n    # Loop through the rest of the array\n    for i in range(1, n):\n        # If the current element is greater than the kth element and greater than the last element of the maximum sum subsequence, update the maximum sum\n        if a[i] > a[k] > a[max_sum_index]:\n            max_sum = a[i]\n            max_sum_index = i\n\n    # Initialize the maximum sum of the maximum sum subsequence from the kth element to the ith index\n    max_sum_subseq = 0\n    for i in range(k, index + 1):\n        if a[i] > a[i - 1]:\n            max_sum_subseq += a[i]\n\n    # Return the maximum sum of the maximum sum subsequence from the kth element to the ith index\n    return max_sum_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Also, is the function recursive or iterative? If recursive, how would you modify the function to make it iterative?"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize an empty list to store maximum sum of increasing subsequence\n    max_sum_list = []\n\n    # Initialize a variable to store the current maximum sum of increasing subsequence\n    current_sum = 0\n\n    # Initialize a variable to store the maximum sum of increasing subsequence till kth index\n    max_sum_till_k = 0\n\n    # Iterate through the given array\n    for i in range(n):\n\n        # If the given kth element is after the current index, add its value to the sum and update the maximum sum till k\n        if i == k - 1:\n            current_sum += a[i]\n            max_sum_till_k = max(max_sum_till_k, current_sum)\n            continue\n\n        # Initialize a variable to store the sum of increasing subsequence till the previous index\n        previous_sum = 0\n\n        # Iterate through the previous indexes till the current index\n        for j in range(index, i):\n\n            # Update the sum of increasing subsequence\n            previous_sum += a[j]\n\n            # Check if the sum of increasing subsequence till the previous index is greater than the current maximum sum of increasing subsequence till the previous index\n            if previous_sum > max_sum_list[i - 1]:\n                max_sum_list[i] = previous_sum\n\n        # Update the current sum of increasing subsequence\n        current_sum = max(current_sum, previous_sum + a[i])\n\n        # Update the maximum sum of increasing subsequence till the current index\n        max_sum_list[i] = max(max_sum_list[i], current_sum)\n\n    # Return the maximum sum of increasing subsequence till the ith index and also including the kth element\n    return max_sum_list[index] + max_sum_till_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    dp = [0] * n\n    dp[0] = a[0]\n    max_sum = a[0]\n    for i in range(1, n):\n        if a[i] > a[index]:\n            dp[i] = max(dp[i], dp[index] + a[i])\n        else:\n            dp[i] = a[i]\n        if i == k:\n            max_sum = max(max_sum, dp[i])\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        raise ValueError('k should be less than or equal to i')\n\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = a[0]\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n\n    max_sum = float('-inf')\n    for i in range(index + 1, k + 1):\n        max_sum = max(max_sum, prefix_sum[i])\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    :param tuplex: a tuple of integers\n    :param m: the number of rows in the colon\n    :param n: the number of columns in the colon\n    :return: a tuple of integers containing the colon of tuplex\n    '''\n    colons = []\n    for i in range(m):\n        col = []\n        for j in range(n):\n            col.append(tuplex[i*n+j])\n        colons.append(tuple(col))\n    return tuple(colons)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Check if the length of the tuple is less than or equal to m * n\n    if len(tuplex) > m * n:\n        return \"Error: tuple length exceeds limit\"\n    # Create a copy of the tuple\n    colontuple = deepcopy(tuplex)\n    # Split the tuple into blocks of length m\n    for i in range(len(colontuple) // m):\n        # Get the current block of length m\n        block = colontuple[i*m:i*m+m]\n        # Reverse the block\n        block.reverse()\n        # Add the reversed block to the colon\n        colontuple[i*m:i*m+m] = block\n    # Return the colonized tuple\n    return tuple(colontuple)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create a new list to store the colon\n    colon_lst = []\n\n    # Iterate over the rows of the colon\n    for i in range(m):\n        # Iterate over the columns of the colon\n        for j in range(n):\n            # Add the value of the cell to the colon list\n            colon_lst.append(tuplex_copy[i][j])\n\n    # Return the colon as a tuple\n    return tuple(colon_lst)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the number of tuples in the original tuple\n    num_tuples = len(tuplex)\n\n    # Calculate the number of elements in the colon\n    colon_size = n\n\n    # Set the indices for the first tuple in the colon\n    start_index = 0\n    end_index = min(colon_size, num_tuples)\n\n    # Set the index for the first element in the colon\n    colon_index = 0\n\n    # Loop through each tuple in the original tuple\n    for index in range(num_tuples):\n        # Get the tuple at the current index\n        tuple_at_index = new_tuplex[index]\n\n        # Loop through each element in the current tuple\n        for element_index in range(len(tuple_at_index)):\n            # Get the current element in the current tuple\n            current_element = tuple_at_index[element_index]\n\n            # If the current index is within the range of the colon, set the element in the colon\n            if end_index <= index:\n                new_tuplex[colon_index][element_index] = current_element\n                colon_index += 1\n\n            # If the current index is outside the range of the colon, skip the element\n            else:\n                pass\n\n        # If the current index is outside the range of the colon, add a new tuple to the colon\n        if end_index <= index:\n            new_tuplex.append([])\n            colon_index = 0\n\n        # Set the start and end indices for the next tuple in the colon\n        start_index = index + 1\n        end_index = min(colon_size, index + 1)\n\n    # If the number of elements in the colon is less than the original number of tuples, append any remaining tuples to the colon\n    if len(new_tuplex) < num_tuples:\n        for index in range(num_tuples - len(new_tuplex)):\n            new_tuplex.append([])\n\n    # Return the colon of the tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(len(new_tuplex)):\n        new_tuplex[i] = new_tuplex[i][:m] + (new_tuplex[i][m:m+n],) + new_tuplex[i][m+n:]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # split the tuple into two parts based on the values of m and n\n    left_part, right_part = tuplex_copy[:m], tuplex_copy[m:]\n\n    # create a new tuple with the left part followed by the colon and the right part\n    colon_tuplex = (left_part, (m, n)) + right_part\n\n    # return the new tuple\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of a given tuple\n    :param tuplex: A tuple to be colonized\n    :param m: The number of rows in the colon\n    :param n: The number of columns in the colon\n    :return: A colon of the given tuple\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    if len(tuplex)!= len(tuplex[0]):\n        raise ValueError(\"Input must be a square tuple\")\n\n    if m <= 0 or n <= 0:\n        raise ValueError(\"m and n must be positive integers\")\n\n    if m > len(tuplex) or n > len(tuplex[0]):\n        raise ValueError(\"m and n must be less than or equal to the number of elements in the tuple\")\n\n    # deepcopy to avoid modifying the original tuple\n    colonized = deepcopy(tuplex)\n\n    # slice the tuple into columns\n    colon_columns = [colonized[i::n] for i in range(n)]\n\n    # create the colon\n    colon = [tuple(column) for column in colon_columns]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # deep copy the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # get the index of the last element in the tuple\n    last_index = len(tuplex_copy) - 1\n    # loop from the last index to the first index\n    for i in range(last_index, -1, -1):\n        # get the current element of the tuple\n        curr_elem = tuplex_copy[i]\n        # check if the element is a tuple\n        if isinstance(curr_elem, tuple):\n            # loop from the last index of the tuple to the first index\n            for j in range(last_index, i, -1):\n                # get the current element of the tuple\n                curr_elem = tuplex_copy[j]\n                # add the current element to the colon list\n                colon_list.append(curr_elem)\n        # add the current element to the colon list\n        else:\n            colon_list.append(curr_elem)\n    # return the colon list\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the length of the tuple\n    length = len(tuplex_copy)\n\n    # Check if the length is greater than the number of rows\n    if length > m:\n        # Check if the number of columns is greater than 1\n        if n > 1:\n            # Calculate the number of columns in the colon\n            num_cols = length // m\n            # Calculate the remainder\n            remainder = length % m\n\n            # Create a new tuple with the correct number of columns\n            colon = tuple([tuplex_copy[i:i+num_cols] for i in range(0, length, num_cols)])\n\n            # Check if the length of the remainder is greater than 0\n            if remainder > 0:\n                # Append the last column of the colon to the tuple\n                colon += tuple([tuplex_copy[length-remainder:]])\n        else:\n            # Set the number of columns to 1\n            num_cols = 1\n            # Create a new tuple with the correct number of columns\n            colon = tuple([tuplex_copy[i:i+num_cols] for i in range(0, length, num_cols)])\n    else:\n        # Set the number of columns to 1\n        num_cols = 1\n        # Create a new tuple with the correct number of columns\n        colon = tuple([tuplex_copy[i:i+num_cols] for i in range(length)])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        if len(tuplex) == m:\n            if n == len(tuplex[0]):\n                return tuple(tuplex[i] for i in range(m))\n            else:\n                return None\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    def max_product_of_two(nums1, nums2):\n        \"\"\"\n        Helper function to find the maximum product of two elements.\n        \"\"\"\n        if nums1[0] > nums2[0]:\n            temp = nums1\n            nums1 = nums2\n            nums2 = temp\n        return max(nums1[0] * nums2[1], nums2[0] * nums1[1])\n\n    # Find the maximum product of the first list\n    max_product = max_product_of_two(nums1, nums2)\n\n    # Find the maximum product of the first list for each sublist\n    max_products = []\n    for i in range(len(nums1)):\n        max_products.append(max_product_of_two(nums1[:i+1], nums2))\n\n    # Find the indices of the N largest products\n    indices = sorted(range(len(max_products)), key=lambda i: max_products[i], reverse=True)[:N]\n\n    # Find the maximum products of the selected sublists\n    selected_products = []\n    for i in indices:\n        selected_products.append(max_products[i])\n\n    # Find the maximum product of the selected sublists\n    selected_max_product = 1\n    for p in selected_products:\n        selected_max_product *= p\n\n    return selected_max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize the maximum number of products and their values\n    max_products = 0\n    largest_product = 0\n    largest_product_1 = 0\n    largest_product_2 = 0\n\n    # Loop through each possible combination of two factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # Compare the product to the current largest product\n            if product > largest_product:\n                largest_product = product\n                largest_product_1 = nums1[i]\n                largest_product_2 = nums2[j]\n\n            # Check if we have found the desired number of products\n            if max_products == N:\n                break\n\n    # Return the largest product and the factors that generated it\n    return largest_product, largest_product_1, largest_product_2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two input lists must have the same length.\")\n\n    if N > len(nums1):\n        raise ValueError(\"The specified number of largest products must be less than or equal to the length of the first list.\")\n\n    largest_products = []\n\n    for i in range(len(nums1)):\n        largest_product = max(nums1[i], nums2[i])\n        for j in range(i + 1, len(nums1)):\n            factor1 = nums1[i] / largest_product\n            factor2 = nums2[j] / largest_product\n            largest_product *= factor1 * factor2\n            if len(largest_products) < N:\n                largest_products.append(largest_product)\n                if len(largest_products) == N:\n                    break\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    # Find the largest product of two factors\n    max_product1 = max(nums1) * max(nums2)\n    max_product2 = max(nums1) * min(nums2)\n\n    # Find the smallest product of three factors\n    min_product1 = min(nums1) * min(nums2)\n    min_product2 = min(nums1) * max(nums2)\n    min_product3 = max(nums1) * min(nums2)\n\n    # Find the largest product of N factors\n    max_product = max(max_product1, max_product2)\n    max_product = max(max_product, min_product1, min_product2, min_product3)\n\n    # Return the largest product of N factors\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    for i in range(N):\n        product1 = max(nums1[i], nums1[-i-1])\n        product2 = max(nums2[i], nums2[-i-1])\n        if product1 * product2 > max_product:\n            max_product = product1 * product2\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    product1 = 1\n    product2 = 1\n    for i in range(N):\n        product1 *= max(nums1[i], nums2[i])\n        product2 *= max(nums1[i], nums2[i])\n    return max(product1, product2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Calculate the product of the first N largest numbers from each list\n    for i in range(N):\n        products.append(nums1[i] * nums2[i])\n    # Return the maximum of the products\n    return max(products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the variables to store the largest products and the indices of the factors\n    max_product = float('-inf')\n    max_indices = []\n\n    # Loop through the two lists\n    for i in range(N):\n        # Compute the product of the ith largest factor from nums1 and the jth largest factor from nums2\n        product = nums1[i] * nums2[i]\n\n        # If the product is larger than the current maximum, update the maximum and the indices\n        if product > max_product:\n            max_product = product\n            max_indices = [i, i]\n        elif product == max_product:\n            max_indices.append(i)\n\n    # Return the indices of the largest products\n    return max_indices"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize variables\n    largest_products = []\n    smallest_nums1 = min(nums1)\n    largest_nums1 = max(nums1)\n    smallest_nums2 = min(nums2)\n    largest_nums2 = max(nums2)\n\n    # Calculate the range of products we want to consider\n    product_range = abs(largest_nums1 - smallest_nums1) * abs(largest_nums2 - smallest_nums2)\n    product_range = product_range // N\n\n    # Iterate through the input lists\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        for j in range(len(nums1)):\n            if j == i:\n                continue\n            product1 *= (nums1[j] - smallest_nums1) // (largest_nums1 - smallest_nums1 + 1)\n        for j in range(len(nums2)):\n            if j == i:\n                continue\n            product2 *= (nums2[j] - smallest_nums2) // (largest_nums2 - smallest_nums2 + 1)\n        if product1 > 0 and product2 > 0:\n            largest_product = max(product1, product2)\n            if largest_product > 0 and largest_product < product_range:\n                largest_products.append(largest_product)\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order of their length\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Calculate the products of the first N elements from both lists\n    products = [nums1[i] * nums2[i] for i in range(N)]\n    # Return the maximum value of the products\n    return max(products)"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the larger of them.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:   \n        return a   \n    else:   \n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    \"\"\"\n    This function takes two numbers as input and returns the maximum value.\n    \"\"\"\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of its characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit of a given number.\n\n    :param n: An integer\n    :return: A new integer that is the leftmost unset bit of the original number\n    \"\"\"\n\n    # Set all bits to 1 except the left most bit, which is set to 0\n    mask = ~(1 << n.bit_length())\n\n    # Return the new number with the left most unset bit set to 0\n    return n & mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function will set the left most unset bit in a given number.\n    '''\n    # Initialize variables\n    bit_set = 0  # To keep track of the number of set bits\n    left_most_unset_bit = 0  # To store the left most unset bit\n\n    # Loop through all the bits of the input number\n    for i in range(32):\n        # If the current bit is not set, increment the bit set count\n        if n & (1 << i) == 0:\n            bit_set += 1\n\n        # If the current bit is set and the left most unset bit is not yet found,\n        # set the left most unset bit to the current bit\n        elif bit_set == 0:\n            left_most_unset_bit = i\n            bit_set += 1\n\n    # Set the left most unset bit in the input number\n    n = n | (1 << left_most_unset_bit)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the index to the leftmost unset bit\n    index = 0\n\n    # Loop through all bits of the binary representation of n\n    while n & (1 << index):\n        index += 1\n\n    # Set the leftmost unset bit to 1\n    n |= 1 << index\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Set the left most unset bit in a binary number.\n    \"\"\"\n    # convert binary number to an integer\n    n = int(n, 2)\n    # set the leftmost unset bit to 1\n    n |= (1 << 31)\n    # convert the result back to binary\n    return format(n, 'b')"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize mask to zero\n    mask = 0\n    \n    # Iterate through each bit of the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the bit is unset\n        if (n & (1 << i)) == 0:\n            # Set the leftmost unset bit to 1\n            n |= (1 << i)\n            # Set the mask to 1 << i\n            mask = (1 << i)\n            # Break out of the loop\n            break\n            \n    # Return the updated n and mask\n    return (n, mask)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # find the position of the rightmost set bit\n    rightmost_set_bit = 31 - len(bin(n)[2:].lstrip('0'))\n    last_set_bit = bin(n)[2:].rfind('1')\n    \n    # shift n to the left by the position of the last set bit\n    n <<= last_set_bit\n    \n    # set the leftmost bit to 1\n    n |= 1\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to binary\n    binary = bin(n)[2:]\n    # Find the first unset bit and set it to 1\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            binary = binary[:i] + '1' + binary[i+1:]\n            break\n    # Convert the binary back to decimal\n    return int(binary, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the mask variable to 0x80000000.\n    mask = 0x80000000\n\n    # While the masked variable is not zero, \n    # shift it to the left by 1 bit and mask it.\n    while mask:\n        # Check if the masked variable is set to 1.\n        if n & mask:\n            # If the masked variable is set to 1, \n            # then unset the leftmost bit and break.\n            n = n ^ mask\n            break\n        # Shift the mask to the left by 1 bit.\n        mask = mask >> 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the rightmost set bit in the binary representation of n\n    r = 0\n    while n & (1 << r) == 0:\n        r += 1\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << r)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the leftmost unset bit\n    unset_bit = 1\n    while (n & unset_bit) == 0:\n        unset_bit <<= 1\n    return unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (1/3) * math.pi * r ** 2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function finds the volume of a cone with given base radius and height.\n    \"\"\"\n    vol = (1/3) * math.pi * (r**2) * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    # Calculate the volume\n    volume = math.pi * (r**2 + h**2) / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3)*math.pi*r**2*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone with a given radius and height.\n    \n    Args:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n    \n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    \n    # Calculate the area of the cone\n    area = math.pi * (r ** 2)\n    \n    # Calculate the volume of the cone\n    volume = (1/3) * area * h\n    \n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = math.pi * r ** 2 * h\n    return v"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n\n    # Find the highest power of 2 that is less than or equal to n\n    highest_pow_2 = 1\n    while highest_pow_2 <= n:\n        highest_pow_2 <<= 1\n\n    # Return the highest power of 2\n    return highest_pow_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    # initialize the highest power of 2\n    highest = 1\n\n    # loop through each power of 2\n    for i in range(1, n):\n        # check if the power of 2 is less than or equal to n\n        if i <= n:\n            # if it is, update the highest power of 2\n            if i > highest:\n                highest = i\n\n    # return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 to -1\n    highest_power = -1\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a power of 2\n        if i & (i-1) == 0:\n            # If it is, check if it is greater than the current highest power\n            if i > highest_power:\n                # If it is, update the highest power\n                highest_power = i\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if i & (i-1) == 0:\n            return i\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize max_power with the smallest possible power of 2\n    max_power = 1\n    \n    # Loop through all powers of 2 from 1 to n-1\n    while max_power < n:\n        max_power = max_power << 1\n    \n    # Return max_power\n    return max_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize the highest power of 2 found to be 1\n    highest = 1\n    \n    # Loop through all possible values of n until we find the highest power of 2 that is less than or equal to n\n    while highest <= n:\n        highest *= 2\n    \n    # Return the highest power of 2 found\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Find the binary representation of n.\n    binary = bin(n)[2:]\n    \n    # Convert binary to decimal.\n    decimal = int(binary, 2)\n    \n    # Loop through the bits of the binary representation.\n    for i in range(len(binary)):\n        # If a 1 is found, divide the decimal by 2.\n        if binary[i] == '1':\n            decimal /= 2\n        \n        # If a 0 is found, divide the decimal by 2.\n        else:\n            decimal = int(decimal/2)\n            \n    # Convert the decimal to binary and return the highest power of 2.\n    binary = bin(decimal)[2:]\n    for i in range(len(binary)):\n        if binary[i] == '1':\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest < n:\n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    highest = 1\n    while highest <= n: \n        highest <<= 1\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n > 1:\n        if n & (n-1) == 0:\n            return 1 << n - 1\n        n = n >> 1\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find the nth lucas number.\n    '''\n    # base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # recursive formula\n        lucas_n = find_lucas(n-1) + find_lucas(n-2)\n        return lucas_n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return None\n    # initialize lucas number\n    lucas = 2\n    # loop through n times\n    for i in range(2, n+1):\n        # calculate the next lucas number\n        next_lucas = (lucas ** 2) - (lucas ** 3)\n        # update lucas number\n        lucas = next_lucas\n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers in the sequence\n    prev = 0\n    curr = 1\n    \n    # Loop n-1 times to calculate the nth number in the sequence\n    for i in range(n-1):\n        # Update the previous and current numbers\n        prev = curr\n        curr = (prev + curr) % 2\n    \n    # Return the nth number in the sequence\n    return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the nth lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(elem) for elem in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for element in list_:\n        formatted_list.append(string.format(element))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes in any number of lists as arguments and converts them to a nested dictionary.\n    \"\"\"\n    if len(args) == 1:\n        return args[0]\n    else:\n        first_dict = args[0]\n        rest_dicts = convert_list_dictionary(*args[1:])\n        for key, value in rest_dicts.items():\n            first_dict[key] = value\n        return first_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    result = {}\n    \n    # iterate over each list\n    for i in range(len(l1)):\n        # append the current list to the nested dictionary\n        result[i] = {l1[i]: l2[i], l3[i]: l3[i]}\n    \n    # return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize an empty dictionary\n    nested_dict = {}\n    \n    # iterate through each list passed as an argument\n    for lst in args:\n        # iterate through each element in the list\n        for item in lst:\n            # split the key and value of the dictionary item\n            key, value = item.split(':')\n            \n            # if the current key is already in the dictionary, add a new item to the existing value\n            if key in nested_dict:\n                nested_dict[key].append(value)\n            else:\n                # if the current key is not in the dictionary, add a new key and value to the dictionary\n                nested_dict[key] = [value]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for item in l1:\n        result[item] = {}\n    for item in l2:\n        result[item]['value'] = item\n    for item in l3:\n        if item in result:\n            result[item]['count'] = item.count(item)\n        else:\n            result[item] = {'count': item.count(item)}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the final result\n    result = {}\n\n    # loop through each list\n    for i in range(len(l1)):\n        # create a new dictionary for each list\n        new_dict = {}\n\n        # loop through each element in the list\n        for j in range(len(l2[i])):\n            # add the element as key-value pair in the new dictionary\n            new_dict[l2[i][j]] = l3[i][j]\n\n        # add the new dictionary as a key-value pair in the result dictionary\n        result[l1[i]] = new_dict\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary to store the final result\n    final_dict = {}\n\n    # loop through each list and add its elements as keys to the final dictionary\n    for i in range(len(l1)):\n        final_dict[l1[i]] = l2[i]\n        final_dict[l1[i]][l3[i]] = l3[i]\n\n    # return the final dictionary\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Define the nested dictionary\n    result = {\n        'first_list': l1,\n       'second_list': l2,\n        'third_list': l3\n    }\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize empty dictionary to store the final result\n    result = {}\n\n    # Iterate over the input lists\n    for i in range(len(l1)):\n        # Create a key for the current list\n        key = l1[i]\n\n        # Check if the key already exists in the result dictionary\n        if key in result:\n            # If it does, append the current list to the existing value\n            result[key].append(l2[i])\n        else:\n            # If it doesn't, create a new value with the current list as its only element\n            result[key] = [l2[i]]\n\n    # Iterate over the input lists\n    for i in range(len(l3)):\n        # Create a key for the current list\n        key = l3[i]\n\n        # Check if the key already exists in the result dictionary\n        if key in result:\n            # If it does, append the current list to the existing value\n            result[key].append(l3[i])\n        else:\n            # If it doesn't, create a new value with the current list as its only element\n            result[key] = [l3[i]]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {list1[i]: list2[i] for list1, list2 in zip(lists, zip(*lists))}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the result\n    result = {}\n    \n    # Loop through the first list and create a nested dictionary for each element\n    for item in l1:\n        inner_dict = {}\n        for key, value in item.items():\n            inner_dict[key] = value\n        result[item[0]] = inner_dict\n    \n    # Loop through the second list and create a nested dictionary for each element\n    for item in l2:\n        inner_dict = {}\n        for key, value in item.items():\n            inner_dict[key] = value\n        result[item[0]] = result[item[0]] + inner_dict\n    \n    # Loop through the third list and create a nested dictionary for each element\n    for item in l3:\n        inner_dict = {}\n        for key, value in item.items():\n            inner_dict[key] = value\n        result[item[0]] = result[item[0]] + inner_dict\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    if n == 2:\n        return n+1\n\n    if n % 2 == 0:\n        return max(get_max_sum(n/2), get_max_sum(n/2+1))\n\n    else:\n        return max(get_max_sum(n/2), get_max_sum(n/2))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        max_sum = max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n        return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n == 1:\n            return n\n        else:\n            return max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def fibonacci(n):\n        '''\n        Recursive function to calculate Fibonacci numbers.\n        '''\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    \n    # Calculate the first n Fibonacci numbers\n    fib_numbers = [fibonacci(i) for i in range(n)]\n    \n    # Calculate the sum of the first n Fibonacci numbers\n    sum_fib = sum(fib_numbers)\n    \n    # Calculate the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    max_sum = max(sum_fib, n)\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    # Loop through all the elements of the input list\n    for element in input_list:\n        # If the length of the current element is greater than the current maximum, update the maximum length and corresponding list\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = [element]\n        elif len(element) == max_length:\n            # If the length of the current element is equal to the current maximum, add it to the list of elements with the maximum length\n            max_list.append(element)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(max(input_list, key=len))\n    result_list = []\n    for item in input_list:\n        if len(item) == max_length:\n            result_list.append(item)\n    return result_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    # Initialize two variables to store the maximum and minimum length of the list\n    max_length = 0\n    min_length = float('inf')\n    # Iterate over the list and update the max_length and min_length variables\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n        if length < min_length:\n            min_length = length\n    # Return the list with the maximum length\n    return [item for item in input_list if len(item) == max_length]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with maximum length.\n\n    Parameters:\n    input_list (list): A list of elements.\n\n    Returns:\n    list: The list with maximum length.\n\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    for element in input_list:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_list = element\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list)\n    longest_list = input_list\n\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            longest_list = input_list[i]\n\n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Find the list with the maximum length in a given list.\n    \"\"\"\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        # If the length is equal, the tuple contains no duplicates\n        return True\n    else:\n        # If the length is not equal, the tuple contains duplicates\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the tuple and check if it has only one element\n    return len(set(test_tup)) == 1"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Check if a given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    return len(set_tup) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if a tuple contains no duplicates.\n\n    Args:\n    test_tup (tuple): The tuple to check for duplicates.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    # Use a set to store the unique elements of the tuple\n    unique_set = set(test_tup)\n    # Check if the length of the unique set is equal to the length of the original tuple\n    return len(unique_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n\n    # Use a set to store unique values\n    unique_vals = set(test_tup)\n\n    # If the length of unique_vals is equal to the length of test_tup, there are no duplicates\n    if len(unique_vals) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns True if it contains no duplicates,\n    otherwise it returns False.\n    \"\"\"\n    # Convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n\n    # Check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Check if there are any duplicates in the tuple\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with count 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no character has count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store characters and their frequency\n    char_dict = {}\n\n    # iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    # iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n\n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in str1:\n        if not char in char_dict:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, update its frequency by 1\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the dictionary to find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(s: str) -> str:\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in s:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # Find the first non-repeating character in the string\n    for char in s:\n        if freq[char] == 1:\n            return char\n    \n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for key in char_dict:\n        return key"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {} # dictionary to keep count of characters in string\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1 # increment count if character is already in dictionary\n        else:\n            char_count[char] = 1 # add character to dictionary with count of 1\n        \n    for char in char_count:\n        if char_count[char] == 1: # check if count of character is 1\n            return char # return first non-repeating character\n    \n    return None # return None if no non-repeating character is found\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string) is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns the median of these three numbers.\n    '''\n\n    # Sorting the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Finding the middle index of the sorted array\n    middle_index = len(sorted_numbers) // 2\n\n    # If the middle index is odd, the median is the middle number\n    if len(sorted_numbers) % 2 == 1:\n        median = sorted_numbers[middle_index]\n    # If the middle index is even, the median is the average of the two middle numbers\n    else:\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a, b, c])\n    if len(sorted_list) % 2 == 0:\n        return (sorted_list[len(sorted_list)//2] + sorted_list[len(sorted_list)//2-1])/2\n    else:\n        return sorted_list[len(sorted_list)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2-1] + numbers[len(numbers)//2]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Determine the median\n    if len(numbers) % 2 == 0:  # If the length of the sorted list is even\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:  # If the length of the sorted list is odd\n        median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n\n    # Find the middle index of the sorted list\n    mid_index = len(num_list) // 2\n\n    # Return the median value based on the length of the list\n    if len(num_list) % 2 == 0:\n        # Return the average of the two middle values\n        return (num_list[mid_index - 1] + num_list[mid_index]) / 2\n    else:\n        # Return the middle value\n        return num_list[mid_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n    # find the middle index\n    mid = len(nums) // 2\n    # find the median\n    if len(nums) % 2 == 0:\n        # if the length of the list is even, return the average of the middle two numbers\n        return (nums[mid-1] + nums[mid]) / 2\n    else:\n        # if the length of the list is odd, return the middle number\n        return nums[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # First, sort the three numbers in ascending order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[2]\n\n    # If the third number is greater than the first two, swap them\n    if b > a:\n        a, b = b, a\n\n    # Calculate the median\n    if a == b:\n        median = a\n    else:\n        median = (a + b) / 2\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Find the middle two numbers\n    middle = len(sorted_list) // 2\n\n    # Find the median\n    if len(sorted_list) % 2 == 0:\n        median = (sorted_list[middle - 1] + sorted_list[middle]) / 2\n    else:\n        median = sorted_list[middle]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Finding the length of the sorted list\n    n = len(sorted_nums)\n\n    # Finding the median\n    if n % 2 == 0:\n        median = (sorted_nums[n//2-1] + sorted_nums[n//2])/2\n    else:\n        median = sorted_nums[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # find the midpoint of the sorted numbers\n    midpoint = len(sorted_numbers) // 2\n    \n    # if the midpoint is even, return the average of the two middle numbers\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[midpoint-1] + sorted_numbers[midpoint]) / 2\n    \n    # if the midpoint is odd, return the middle number\n    else:\n        return sorted_numbers[midpoint]"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        for digit in num_str:\n            digit_sum += int(digit)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(num)))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = 0\n        while num > 0:\n            sum_num += num % 10\n            num //= 10\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(int(digit) for digit in str(num))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # convert the number to string and split it into a list of digits\n        digits = [int(d) for d in str(num)]\n        # compute the sum of digits and append it to the result list\n        result.append(sum(digits))\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    # initialize an empty list to store the sum of digits for each number\n    sums = []\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string so that we can loop through its digits\n        num_str = str(num)\n        # initialize a variable to store the sum of digits for this number\n        num_sum = 0\n        # loop through each digit in the number and add it to the sum\n        for digit in num_str:\n            num_sum += int(digit)\n        # add the sum of digits for this number to the list of sums\n        sums.append(num_sum)\n    # return the list of sums of digits for each number\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total += digits_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(map(int, str(num)))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n\n    Args:\n        nums (list): A list of integers\n\n    Returns:\n        list: A list containing the sum of digits of each number in the input list.\n    \"\"\"\n    return [sum(map(int, str(num))) for num in nums]"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_value = 0\n    for i in range(len(test_tup1)):\n        xor_value ^= test_tup1[i] ^ test_tup2[i]\n    return xor_value"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = 0\n    for i in range(len(test_tup1)):\n        result |= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Iterate through the tuples and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the length of the tuples\n    length = len(test_tup1)\n    # initialize the result tuple with all zeros\n    result = (0,) * length\n    # iterate over the tuples and perform the bitwise xor operation\n    for i in range(length):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Calculate the length of the tuple(s)\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    # Check if the two tuples have the same length\n    if tup1_len!= tup2_len:\n        raise ValueError('Both tuples must have the same length')\n    # Initialize the result tuple with zeros\n    result_tup = (0,) * tup1_len\n    # Perform the bitwise xor operation across the tuples\n    for i in range(tup1_len):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the inputs are tuples\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise TypeError(\"Both inputs must be tuples\")\n    \n    # Check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length\")\n    \n    # Perform the bitwise xor operation across the tuples\n    xor_result = tuple(int(a) ^ int(b) for a, b in zip(test_tup1, test_tup2))\n    \n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize variables to store the resulting tuple\n    result_tup = ()\n    \n    # Iterate through the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform the mathematical xor operation between the corresponding elements of the tuples\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        \n        # Append the xor result to the result tuple\n        result_tup += (xor_result,)\n    \n    # Return the resulting tuple\n    return result_tup"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n\n    for item in test_list:\n        if item in unique_tuples:\n            unique_tuples.remove(item)\n        else:\n            unique_tuples.add(item)\n\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        key = tuple(sorted(item))\n        if key in freq:\n            freq[key] += 1\n        else:\n            freq[key] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple):\n            res_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            res_tup += (test_tup1[i] + test_tup2[i],)\n    return res_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Get the dimensions of both tuples\n    n1, m1 = len(test_tup1), len(test_tup1[0])\n    n2, m2 = len(test_tup2), len(test_tup2[0])\n    \n    # Check if the dimensions of the two tuples are same\n    if n1!= n2 or m1!= m2:\n        return \"The two tuples have different dimensions.\"\n    \n    # Initialize the resultant matrix with zeros\n    result_matrix = [[0 for j in range(m2)] for i in range(n1)]\n    \n    # Perform index wise addition of the two tuples\n    for i in range(n1):\n        for j in range(m2):\n            result_matrix[i][j] = test_tup1[i][j] + test_tup2[i][j]\n    \n    # Return the resultant matrix\n    return result_matrix"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Loop through the tuples to add their elements\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Loop through the first tuple and add the corresponding elements from both tuples\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] + test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    # check if the length of the first tuple is same as the length of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    # iterate over the tuples and add the elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples must have same number of elements\"\n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result.append(test_tup1[i] + test_tup2[i])\n        else:\n            result.append(None)\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # creating a list of tuples to hold the addition result\n    result_list = []\n\n    # iterating over the first tuple and adding its elements to the result_list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # converting the list of tuples to a tuple and returning it\n    return tuple(result_list)\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as inputs and returns their minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    This function takes in two numbers and returns the minimum of those two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    This function takes two numbers as input and returns the minimum of them.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"Element found in tuple.\")\n    else:\n        print(\"Element not found in tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuple1: \n        if i in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists within {tuple1}\")\n    else:\n        print(f\"{tuplex} does not exist within {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two parameters - a tuple to be searched for an element and a tuple of elements to search within. \n    The function returns True if the element exists in the tuple and False otherwise.\n    '''\n    # Loop through each element in the tuple\n    for element in tuple1:\n        # If the element exists in the tuple, return True\n        if element in tuplex:\n            return True\n    # If the loop completes without finding the element, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Check if the first tuple is a tuple, otherwise raise a TypeError\n    if not isinstance(tuplex, tuple):\n        raise TypeError('The first argument must be a tuple')\n    # Check if the second tuple is a tuple, otherwise raise a TypeError\n    if not isinstance(tuple1, tuple):\n        raise TypeError('The second argument must be a tuple')\n    # Check if the first tuple contains all the elements of the second tuple\n    for element in tuple1:\n        if element not in tuplex:\n            return False\n    return True"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    parity = x % 2\n    if parity == 0:\n        print(f'{x} is even')\n    else:\n        print(f'{x} is odd')"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0: \n        return \"The parity of the number {} is even.\".format(x) \n    else: \n        return \"The parity of the number {} is odd.\".format(x) "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x%2 == 0: \n        return \"Even\" \n    else: \n        return \"Odd\" "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n\n    # Check if the number is even or odd\n    if x % 2 == 0: \n        # If even, set the parity to odd\n        parity = 1\n    else: \n        # If odd, set the parity to even\n        parity = 0\n\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: # if x is even\n        parity = \"Even\" # set the parity to even\n    else: # if x is odd\n        parity = \"Odd\" # set the parity to odd\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    for i in range(1, x+1):\n        if x % i == 0:\n            parity += 1\n            if parity % 2!= 0:\n                return False\n    if parity % 2!= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # List of digits in the given number\n    digits = [int(d) for d in str(n)]\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    # Rearrange the digits\n    rearranged_digits = [digits[i] for i in range(len(digits))]\n    # Convert the list to a string and create an integer from it\n    next_bigger = int(''.join(str(d) for d in rearranged_digits))\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n    # reverse the digits and convert them back to a number\n    new_n = int(''.join(map(str, digits[::-1])))\n    # check if the new number is less than 10\n    if new_n < 10:\n        return new_n\n    # find the largest power of 10 that divides the new number\n    power = 1\n    while new_n >= 10**power:\n        power += 1\n    # create the new number by adding the digits raised to the power of the power of 10\n    new_digits = []\n    for digit in digits:\n        new_digits.append(digit**power)\n    new_n = int(''.join(map(str, new_digits)))\n    # check if the new number is less than 10\n    if new_n < 10:\n        return new_n\n    # if it's not less than 10, find the largest power of 10 that divides the new number\n    power = 1\n    while new_n >= 10**power:\n        power += 1\n    # create the new number by subtracting the digits raised to the power of the power of 10 and subtracting 1\n    new_digits = []\n    for digit in digits:\n        new_digits.append((digit**power) - 1)\n    new_n = int(''.join(map(str, new_digits)))\n    # check if the new number is less than 10\n    if new_n < 10:\n        return new_n\n    # if it's not less than 10, return the new number\n    return n\n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    max_digit = max(digits)\n\n    if max_digit == 9:\n        return 1000000000 + sum(digits)\n    elif max_digit == 8:\n        return 100000000 + sum(digits)\n    elif max_digit == 7:\n        return 10000000 + sum(digits)\n    elif max_digit == 6:\n        return 1000000 + sum(digits)\n    elif max_digit == 5:\n        return 100000 + sum(digits)\n    elif max_digit == 4:\n        return 10000 + sum(digits)\n    elif max_digit == 3:\n        return 1000 + sum(digits)\n    elif max_digit == 2:\n        return 100 + sum(digits)\n    elif max_digit == 1:\n        return 10 + sum(digits)\n    else:\n        return n + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # initialize the result and current number as the given number\n    result = n\n    current = n\n    \n    # loop until the current number becomes 1\n    while current > 1:\n        # find the largest power of 10 that is less than or equal to the current number\n        power = 1\n        while power * 10 <= current:\n            power += 1\n            \n        # find the corresponding number with the same power of 10\n        corresponding = current // power\n        \n        # create a list of digits for the corresponding number and swap the digits with the digits of the current number\n        digit_list = [int(digit) for digit in str(corresponding)]\n        digit_list.reverse()\n        for i in range(len(digit_list)):\n            digit_list[i] = current % 10\n            current //= 10\n        \n        # convert the list of digits back to a number\n        new_number = 0\n        for digit in digit_list:\n            new_number = new_number * 10 + digit\n        \n        # update the result if the new number is greater\n        if new_number > result:\n            result = new_number\n        \n        # update the current number with the new corresponding number\n        current = new_number\n    \n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # initialize a variable to store the next bigger number\n    next_bigger = 0\n    \n    # loop through each digit of the number\n    for i in range(len(str(n))):\n        # extract the digit at index i\n        digit = int(str(n)[i])\n        \n        # compute the next digit that is greater than the current digit\n        next_digit = digit + 1\n        \n        # if the next digit is greater than 9, subtract 9 from the next digit\n        if next_digit > 9:\n            next_digit -= 9\n        \n        # concatenate the current digit and the next digit into a string and convert it back to an integer\n        digit_str = str(digit) + str(next_digit)\n        next_bigger = int(digit_str)\n        \n        # if the next bigger number is greater than the original number, return it\n        if next_bigger > n:\n            return next_bigger\n    \n    # if no next bigger number is found, return the original number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Get the digits of the given number\n    digits = [int(digit) for digit in str(n)]\n\n    # Loop through the digits from right to left\n    for i in range(len(digits)-1, -1, -1):\n        # If the current digit is greater than 9, skip to the next digit\n        if digits[i] > 9:\n            continue\n\n        # If the current digit is greater than 1, move it to the left until it's less than or equal to 9\n        while digits[i] > 1:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n\n        # If the current digit is less than 10, move it to the right until it's greater than or equal to 10\n        while digits[i] < 10:\n            digits[i], digits[i+1] = digits[i+1], digits[i]\n\n        # Convert the list of digits back to an integer and return it\n        return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Initialize the new number as an empty string\n    new_num = ''\n    \n    # Iterate through the digits of the given number\n    for digit in num_str:\n        \n        # If the digit is 9 or greater, add 1 to it\n        if int(digit) >= 9:\n            new_num += str(int(digit) + 1)\n            \n        # If the digit is less than 9, add it to the new number as is\n        else:\n            new_num += digit\n            \n    # Convert the new number to an integer and return it\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n = n // 10\n\n    new_num = 0\n    while digits:\n        new_num = new_num * 10 + digits.pop(0)\n\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the input number into a string\n    num_str = str(n)\n    # Initialize the next bigger number as the input number\n    next_bigger = n\n    # Loop through each digit in the string\n    for i in range(len(num_str)):\n        # Get the current digit and its index\n        curr_digit = int(num_str[i])\n        curr_index = i\n        # Find the next bigger digit to the right of the current digit\n        for j in range(curr_index + 1, len(num_str)):\n            next_digit = int(num_str[j])\n            if next_digit > curr_digit:\n                # Swap the current and next digits\n                num_str[curr_index], num_str[j] = num_str[j], num_str[curr_index]\n                # Convert the string back to an integer and update the next bigger number\n                next_bigger = int(num_str)\n                break\n        # If there are no more digits to the right of the current digit, move on to the next digit\n        if j == len(num_str):\n            continue\n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    def swap_digits(num, i, j):\n        return (num // 10**i) * 10**(j) + (num % 10**(i+1)) * 10**(i) + num % 10**i\n    \n    # Convert the input number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Find the maximum digit length in the input number\n    max_digit_length = max([len(str(digit)) for digit in digits])\n    \n    # Find the next smallest number that has the same number of digits as the input number\n    next_bigger = int(''.join(map(str, sorted(digits, reverse=True))))\n    \n    # Rearrange the digits of the next bigger number to get the next bigger number\n    for i in range(max_digit_length-1, -1, -1):\n        digits[i] = swap_digits(next_bigger, i, i+1)\n    \n    # Convert the list of digits back to a string and return it\n    return int(''.join(map(str, digits)))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Define a custom heapq function for sorting elements based on their values\n    def compare(a, b):\n        return a[1] - b[1]\n\n    # Create a min heap of size k\n    min_heap = []\n\n    # Iterate through the first array\n    for i in range(len(nums1)):\n        # Check if the size of the min heap is less than k\n        if len(min_heap) < k:\n            # Insert the current element into the min heap\n            heapq.heappush(min_heap, (nums1[i], i))\n        else:\n            # If the size of the min heap is greater than or equal to k, compare the current element with the smallest element in the heap\n            if compare(nums1[i], min_heap[0]) < 0:\n                # If the current element is smaller than the smallest element in the heap, replace the smallest element with the current element\n                heapq.heapreplace(min_heap, (nums1[i], i))\n\n    # Create a list to store the k smallest pairs\n    pairs = []\n\n    # Iterate through the second array\n    for j in range(len(nums2)):\n        # Check if the size of the min heap is less than k\n        if len(min_heap) < k:\n            # Insert the current element into the min heap\n            heapq.heappush(min_heap, (nums2[j], j))\n        else:\n            # If the size of the min heap is greater than or equal to k, compare the current element with the smallest element in the heap\n            if compare(nums2[j], min_heap[0]) < 0:\n                # If the current element is smaller than the smallest element in the heap, replace the smallest element with the current element\n                heapq.heapreplace(min_heap, (nums2[j], j))\n\n        # If the size of the min heap is equal to k, add the smallest pair to the list of pairs\n        if len(min_heap) == k:\n            pairs.append((min_heap[0][0], nums2[min_heap[0][1]]))\n            heapq.heappop(min_heap)\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if len(heap) < k:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif heap[0][0] > nums1[i] + nums2[j]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n\n    return [heapq.heappop(heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the minimum element of the two arrays\n    min_heap = []\n    \n    # Iterate through the first array\n    for num in nums1:\n        # Append the minimum element of the two arrays to the min heap\n        heapq.heappush(min_heap, -num)\n        \n        # If the heap size exceeds k, pop the maximum element from the heap\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n    \n    # Initialize the result list and iterate through the second array\n    result = []\n    for num in nums2:\n        # If the minimum element in the min heap is greater than the current element, add the pair to the result list and pop the minimum element from the heap\n        if -num > min_heap[0]:\n            result.append((min_heap[0], num))\n            heapq.heappop(min_heap)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    \n    for num in nums1:\n        heapq.heappush(heap, num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n            \n    result = []\n    for _ in range(k):\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Convert the given lists to sets to remove duplicates\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    \n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n    \n    # Iterate through the first array and for each element, check if there is a corresponding element in the second array\n    # If there is, then create a tuple of the element from the first array and the element from the second array and add it to the heap\n    # If the size of the heap becomes greater than k, then extract the minimum element from the heap and discard it\n    # This ensures that we always have at most k smallest pairs\n    \n    for num1 in nums1_set:\n        if num1 in nums2_set:\n            pair = (num1, min(nums2_set))\n            heapq.heappush(min_heap, pair)\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n    \n    # Extract the k smallest pairs from the heap and return them as a list\n    return [pair[1] for pair in heapq.nsmallest(k, min_heap)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num in nums1 + nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            if num > -heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a heap to store the smallest k pairs\n    heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Find the number of pairs that can be formed with the given number in the second array\n        pairs = [x for x in nums2 if num1+x in nums2]\n        \n        # Sort the pairs in ascending order\n        pairs.sort()\n        \n        # Add the smallest k pairs to the heap\n        for i in range(k):\n            heapq.heappush(heap, pairs[i])\n        \n        # Remove the smallest k pairs from the heap\n        for i in range(k):\n            heapq.heappop(heap)\n    \n    # Return the k smallest pairs\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Combine the two arrays into one\n    nums = nums1 + nums2\n\n    # Sort the combined array in ascending order\n    nums.sort()\n\n    # Initialize an empty list to store the result\n    result = []\n\n    # Use a heap to keep track of the k smallest elements\n    heap = []\n\n    # Use a pointer i to iterate through the array\n    i = 0\n\n    # Use a pointer j to iterate through the array\n    j = 0\n\n    # Keep track of the number of pairs found so far\n    pairs = 0\n\n    # While there are still elements to be considered and we have not found k pairs\n    while i < len(nums) and j < len(nums) and pairs < k:\n        # If the sum of the elements at i and j is greater than the last element of the heap\n        if nums[i] + nums[j] > heapq.heappop(heap):\n            # Add the pair to the result list and add the smaller element to the heap\n            result.append([nums[i], nums[j]])\n            pairs += 1\n            # If we have found k pairs so far, return the result list\n            if pairs == k:\n                return result\n            # Add the larger element to the heap\n            heapq.heappush(heap, nums[j])\n            # Increment j\n            j += 1\n        # If the sum of the elements at i and j is less than or equal to the last element of the heap\n        else:\n            # Increment i\n            i += 1\n\n    # If we have found k pairs so far, return the result list\n    if pairs == k:\n        return result\n    # If not, return None\n    else:\n        return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of length k to store the smallest k elements\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Get the smallest k elements from the heap\n        heapq.heappushpop(min_heap, -num1)\n\n        # Iterate through the second array\n        for num2 in nums2:\n            # Calculate the sum of the smallest element and current elements\n            current_sum = -heapq.heappop(min_heap) + num1 + num2\n\n            # If the sum is less than 0, it means the current pair violates the constraints of the problem, so move on to the next pair\n            if current_sum < 0:\n                continue\n\n            # If the sum is equal to 0, it means we have found the k smallest pairs, so return them\n            if current_sum == 0:\n                return [(-num1, -num2), (-heapq.heappop(min_heap), -heapq.heappop(min_heap))]\n\n            # If the sum is greater than 0, add the current pair to the min heap\n            heapq.heappush(min_heap, -current_sum)\n\n            # If the size of the min heap is greater than k, remove the smallest element from the heap\n            if len(min_heap) > k:\n                heapq.heappushpop(min_heap, -heapq.heappop(min_heap))\n\n    # If we have not found the k smallest pairs, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the elements from nums1 and nums2.\n    min_heap = [(nums1[0], 0)]\n\n    # Initialize two variables to keep track of the number of pairs found so far and the minimum element from nums1.\n    count = 0\n    min_element = nums1[0]\n\n    # Iterate through nums2.\n    for num2 in nums2:\n        # If the heap size is less than k, insert the current element into the heap.\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (num2, 0))\n        # If the heap size is equal to k, pop the smallest element from the heap and update the minimum element if necessary.\n        else:\n            if num2 > min_heap[0][0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num2, 0))\n                min_element = min_heap[0][0]\n\n        # If the number of pairs found so far is less than k, compare the current element with the minimum element from nums1.\n        if count < k:\n            if num2 - min_element < min_heap[0][0] - num2:\n                count += 1\n\n    return count"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # initialize variables\n    min_product = float('inf')\n    min_pair = None\n\n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            # update the minimum product and corresponding pair if necessary\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n\n    # return the minimum product and pair\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n    # Loop through the list and update the minimum and maximum values\n    for num in list1:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    # Calculate the minimum product\n    min_product = min_val * max_val\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(lst):\n    # initialize a list to store the products of each pair of tuples\n    products = []\n    # loop over the list of tuples\n    for i in range(len(lst)):\n        # loop over the remaining tuples to find the product with the current tuple\n        for j in range(i+1, len(lst)):\n            # calculate the product of the current tuple with the remaining tuple\n            product = lst[i][0]*lst[j][1]\n            # add the product to the list of products\n            products.append(product)\n    # sort the list of products in ascending order\n    products.sort()\n    # return the minimum product\n    return products[0]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Find the minimum value in the list\n    min_val = min(list1)\n    \n    # Initialize a variable to store the minimum product\n    min_product = 1\n    \n    # Iterate through the list and find the minimum product between two pairs of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    min_product = float('inf')\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Sort the list of tuples in ascending order based on the second element of each tuple\n    list1.sort(key=lambda x: x[1])\n    \n    # Initialize variables for the minimum product and the index of the minimum product\n    min_product = list1[0][0]\n    min_index = 0\n    \n    # Loop through the list of tuples starting from the second element of the first tuple\n    for i in range(1, len(list1)):\n        # Check if the current tuple has a smaller product than the current minimum product\n        if list1[i][0] < min_product:\n            min_product = list1[i][0]\n            min_index = i\n    \n    # Return the minimum product and the index of the minimum product\n    return min_product, min_index"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product as infinite\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product if the new product is smaller\n            if product < min_product:\n                min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError(\"List should not be empty\")\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min_val:\n                min_val = listval[i]\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_num = None\n    for val in listval:\n        if min_num is None or val < min_num:\n            min_num = val\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_value = float('inf')\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to be the first element in the list\n    min_val = listval[0]\n    # Loop through the list to find the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        raise ValueError(\"Input must be a list\")\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None:\n            min_val = val\n        else:\n            if val < min_val:\n                min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], (int, float)):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval, key=len)\n    elif isinstance(listval[0], list):\n        return min_val(listval[0])\n    else:\n        return min_val(listval[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words based on underscores\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Convert the first letter of each word to uppercase and the rest to lowercase\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word[0].upper() + word[1:])\n\n    # Join the camel case words into a single string with no spaces\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case using regular expressions\n    pattern = re.compile('([a-z])([A-Z])')\n    word = pattern.sub(r'\\1_\\2', word)\n    return word.capitalize()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = re.findall(r'(\\w+)', word)\n    # Capitalize the first word and join the words with underscores\n    return ''.join(word.capitalize() for word in words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub(r'_','', word)\n    # Split the words by spaces\n    words = word.split()\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the words by camel case\n    return ''.join(camel_case_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with a capitalized first letter\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = re.findall(r'\\w+', word)\n    # Convert the first letter of each word to uppercase and the rest to lowercase\n    camel_case_word = ''.join(x.capitalize() for x in words)\n    # Return the camel case word\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words separated by underscores\n    words = word.split('_')\n    # Capitalize the first word and join the words with camel case\n    return words[0].capitalize() + ''.join(word.capitalize() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words using underscores as delimiter\n    words = re.findall(r'\\w+', word)\n    # capitalize the first letter of each word\n    camel_case_words = [word[0].upper() + word[1:] for word in words]\n    # join the words back into a string with camel case\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        else:\n            camel_case += word[i]\n        if i < len(word) - 1 and word[i+1].isupper():\n            camel_case += '_'\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif re.search('[_]', word[i]):\n            camel_case += '_'\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_list = []\n    for num in l:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as input and removes all odd numbers from it.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    This function takes a list as an input and returns a new list with all odd numbers removed.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    This function takes a list as input and removes all the odd numbers from it.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        # check if n is a valid integer\n        n = int(n)\n        \n        # check if list1 is a list of tuples\n        if isinstance(list1, list) and all(isinstance(tup, tuple) for tup in list1):\n            # check if n is within the range of list1\n            if n >= 1 and n <= len(list1):\n                # return the nth element of list1\n                return list1[n-1]\n            else:\n                raise IndexError('Index out of range')\n        else:\n            raise TypeError('Invalid input type')\n    except ValueError:\n        raise ValueError('Invalid input')"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    This function takes in a list of tuples and an integer `n` as input\n    and returns the nth element from the list.\n    \"\"\"\n    if len(list1) == 0 or n > len(list1):\n        raise ValueError(\"Invalid input: list1 should have at least one element and n should be <= len(list1)\")\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 1 or n > len(list1):\n        print(\"Invalid input. Please enter a value between 1 and\", len(list1))\n    else:\n        print(\"The\", n, \"element of the list is:\", list1[n-1][1])"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1[0]) == tuple:\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i]\n            else:\n                pass\n        return None\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except:\n        return \"Invalid input\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if not list1:\n        print(\"The list is empty\")\n        return\n    \n    # Extract the nth element from the list\n    nth_element = list1[n-1]\n    \n    # Print the nth element\n    print(\"The {}th element is: {}\".format(n, nth_element))"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set to store the values in list1\n    set1 = set(list1)\n    # loop through list2 and check if any value in set1 exists in list2\n    for item in list2:\n        if item in set1:\n            return True\n    # if no value in list2 exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # check if both lists are empty\n    if not list1 and not list2:\n        return False\n    # check if only one list is empty\n    elif not list1 or not list2:\n        return True\n    else:\n        # check if any value exists in both lists\n        for i in list1:\n            if i in list2:\n                return True\n        # if no value is found in both lists, return False\n        return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Use a set to remove duplicates from list1 and list2\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n    # Loop through the elements of list1\n    for element in list1:\n        # Check if element exists in list2\n        if element in list2:\n            # If element exists in both list1 and list2, return True\n            return True\n    # If no element exists in both list1 and list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if any value in list1 exists in list2\n    for val in list1:\n        if val in list2:\n            print(f\"Found {val} in {list2}\")\n            return True\n    # If no overlap, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two sequences as input and returns a boolean value indicating whether there is any value in the first sequence that is also present in the second sequence.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n    \n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max(max1 * max2, max2 * max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here * arr[i] - arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here * arr[i] - arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        if min_ending_here < 0:\n            min_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the given array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum product to be the first element\n    max_product = arr[0]\n\n    # Initialize the second maximum product to be the second element\n    second_max_product = arr[1]\n\n    # Initialize the index of the maximum product\n    index_max_product = 0\n\n    # Initialize the index of the second maximum product\n    index_second_max_product = 1\n\n    # Loop through the array starting from the third element\n    for i in range(2, len(arr)):\n\n        # Check if the current element is greater than the maximum product\n        if arr[i] > max_product:\n\n            # If yes, update the maximum product, second maximum product and their indices\n            max_product = arr[i]\n            second_max_product = arr[i - 1]\n            index_max_product = i\n            index_second_max_product = i - 1\n\n        # Check if the current element is greater than the second maximum product\n        elif arr[i] > second_max_product:\n\n            # If yes, update the second maximum product and its index\n            second_max_product = arr[i]\n            index_second_max_product = i\n\n    # Return the indices of the maximum and second maximum products\n    return index_max_product, index_second_max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Find the maximum product pair\n    max_product = float('-inf')\n    pair = None\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    # Print the maximum product pair\n    if pair:\n        print(\"The pair with the highest product is:\", pair)\n    else:\n        print(\"There is no pair with the highest product.\")"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return (max1, max2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the pair with the highest product\n    for i in range(len(arr) - 1):\n        if arr[i] * arr[i + 1] > arr[i + 2] * arr[i + 3]:\n            return arr[i], arr[i + 1]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize the maximum product and two pointers\n    max_product = arr[0] * arr[1]\n    left, right = 0, 1\n    \n    # Move the pointers towards the middle of the array\n    while right < len(arr):\n        # Update the maximum product if the current product is smaller than the previous max_product\n        if arr[left] * arr[right] < max_product:\n            max_product = arr[left] * arr[right]\n        # Move the pointers towards the middle\n        left += 1\n        right += 1\n    \n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    arr = sorted(arr)\n    max_product = 0\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n\n    return max_product\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[1]\n    min1 = arr[0]\n    min2 = arr[1]\n    \n    for i in range(2, len(arr)):\n        temp = max1\n        if arr[i] * max2 > temp * arr[i]:\n            max1 = arr[i]\n        else:\n            max1 = temp * arr[i]\n        \n        temp = max2\n        if arr[i] * min1 > temp * arr[i]:\n            max2 = arr[i]\n        else:\n            max2 = temp * arr[i]\n        \n        temp = min1\n        if arr[i] * max1 > temp * arr[i]:\n            min1 = arr[i]\n        else:\n            min1 = temp * arr[i]\n        \n        temp = min2\n        if arr[i] * max2 > temp * arr[i]:\n            min2 = arr[i]\n        else:\n            min2 = temp * arr[i]\n    \n    return [max1, max2]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples \n    where each tuple contains the common first element from the given list.\n    '''\n\n    # create an empty dictionary to store the common first element and its count\n    common_dict = {}\n\n    # loop through the list of tuples\n    for tup in Input: \n        # get the first element of the tuple\n        first = tup[0]\n\n        # check if the first element is already present in the dictionary\n        if first in common_dict: \n            # if yes, increment its count\n            common_dict[first] += 1\n        else: \n            # if not, add it to the dictionary with count 1\n            common_dict[first] = 1\n\n    # create an empty list to store the output tuples\n    output = []\n\n    # loop through the dictionary and get the tuples with common first element\n    for key, value in common_dict.items(): \n        # check if the count of the key is greater than 1\n        if value > 1: \n            # if yes, add the tuple with the common first element to the output list\n            output.append((key, value))\n\n    # return the output list\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common_elements.append(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for tuple in Input:\n        first_element = tuple[0]\n        if first_element not in common_first_element:\n            common_first_element.append(first_element)\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    This function will take a list of tuples and find the common first element in each tuple.\n    '''\n    common_first = []\n    for tup in Input:\n        first_element = tup[0]\n        if first_element not in common_first:\n            common_first.append(first_element)\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_elements = set()\n    for i in Input:\n        if i[0] not in unique_elements:\n            unique_elements.add(i[0])\n    return unique_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a dictionary to store common elements in each tuple\n    common = {}\n    # iterate over each tuple in the input list\n    for tup in Input:\n        # get the first element of the tuple\n        first = tup[0]\n        # check if the first element exists in the common dictionary\n        if first in common:\n            # if it does, append the second element of the tuple to the list\n            common[first].append(tup[1])\n        else:\n            # if it doesn't, create a new list and append the second element of the tuple to it\n            common[first] = [tup[1]]\n    # create a list of tuples containing the common elements and their occurrences\n    output = []\n    for key in common:\n        # iterate over each occurrence of the common element\n        for elem in common[key]:\n            # create a new tuple containing the common element and its occurrence\n            new_tup = (key, elem)\n            # add the new tuple to the output list\n            output.append(new_tup)\n    # sort the output list by first element in ascending order\n    output.sort(key=lambda x: x[0])\n    return output"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_elements = set()\n\n    # Iterate through the list of tuples\n    for t in Input:\n        # Find the first element in the tuple\n        first = t[0]\n        # If the first element is not already in the set of common elements, add it\n        if first not in common_elements:\n            common_elements.add(first)\n\n    # Convert the set of common elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = {}\n    for i in Input:\n        if i[0] in result:\n            result[i[0]].append(i)\n        else:\n            result[i[0]] = [i]\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    common_first = set()\n    for i in Input:\n        common_first.add(i[0])\n    return list(common_first)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Use a set to store the first element of each tuple\n    first_set = set([t[0] for t in Input])\n\n    # Use a list to store the result\n    result = []\n\n    # Iterate through the first set\n    for first in first_set:\n        # Use a set to store the common elements\n        common_set = set([t[0] for t in Input if t[0] == first])\n        # If the common set is not empty, append the first element to the result\n        if common_set:\n            result.append(first)\n\n    # Return the result\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0]) \n    max_elem = lst[0] \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    max_length = max(len(x) for x in lst)\n    for item in lst:\n        if len(item) == max_length:\n            return item"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = ''\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_elem = i\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = \"\"\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_element = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as an argument and returns the element whose length is maximum.\n    '''\n\n    # Initialize max_length to the length of the first element of the list\n    max_length = len(lst[0])\n\n    # Iterate through the rest of the list\n    for element in lst[1:]:\n        # Calculate the length of the current element\n        length = len(element)\n        # If the length of the current element is greater than max_length, update max_length\n        if length > max_length:\n            max_length = length\n\n    # Return the element whose length is maximum\n    return lst[lst.index(max(lst))][0]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_element = elem\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    total_sum *= len(list1)\n    print(\"The total sum multiplied by the length of the list is:\", total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(lst):\n    total = sum([round(x) for x in lst])\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # Round the numbers and calculate the total sum\n    total_sum = sum([round(x) for x in list1])\n    # Calculate the product of the length of the list and the total sum\n    total_product = len(list1) * total_sum\n    # Print the result\n    print(total_product)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    total_sum *= len(list1)\n    return total_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total_sum = 0\n    count = 0\n    i = 0\n    while count < n:\n        i += 1\n        total_sum += i**3\n        if i % 2 == 0:\n            count += 1\n    return total_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate cube of each even number\n        cube = i*i*i\n        # add cube to sum variable\n        sum += cube\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    \n    while i < n: \n        sum += i**3\n        i += 2\n    \n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        cube = i**3\n        sum_cubes += cube\n        count += 1\n        if count == 3:\n            count = 0\n        else:\n            continue\n    return sum_cubes\n\nn = 10\nresult = cube_Sum(n)\nprint(\"The cube sum of the first\", n, \"even natural numbers is:\", result)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            cube_sum += j**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_cube_sum = 0\n    for i in range(1, n+1, 2):\n        even_cube_sum += i**3\n    return even_cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize variables\n    count = 0\n    total = 0\n\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # compute the cube of i\n        cube_i = i ** 3\n\n        # increment the count\n        count += 1\n\n        # add the cube of i to the total\n        total += cube_i\n\n    # return the total sum of cubes\n    return total, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Concatenate each element of the tuple by the given delimiter.\n    '''\n    # initialize an empty list to store the concatenated elements\n    concatenated_list = []\n    \n    # iterate over each element of the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter and add it to the concatenated list\n        concatenated_list.append(str(element) + delimiter)\n    \n    # return the concatenated list\n    return concatenated_list"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    new_list = []\n    for item in test_tup:\n        new_list.append(str(item))\n    concatenated_string = delimiter.join(new_list)\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to store the concatenated string\n    result = \"\"\n    \n    # loop through each element of the tuple\n    for item in test_tup:\n        # concatenate the item to the result string with the delimiter\n        result += str(item) + \" \"\n    \n    # return the concatenated string\n    return result.strip()"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    This function concatenates each element of the tuple by the delimiter.\n    '''\n    # Loop through each element of the tuple\n    for i in range(len(test_tup)):\n        # If the delimiter is not already present, concatenate it and the next element\n        if test_tup[i]!= delimiter:\n            test_tup[i] = test_tup[i] + delimiter + test_tup[i+1]\n        # If the delimiter is already present, just concatenate the next element\n        else:\n            test_tup[i+1] = test_tup[i+1] + test_tup[i+1]\n    # Return the concatenated tuple\n    return test_tup"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for element in test_tup:\n        concatenated_str += str(element) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    -----------\n    test_tup: tuple\n        tuple of strings or integers to be concatenated.\n\n    delimiter: str, optional (default=' ')\n        delimiter to be used to concatenate the elements of the tuple.\n\n    Returns:\n    --------\n    str\n        concatenated string.\n\n    \"\"\"\n\n    concatenated_string = ''\n\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n\n    return concatenated_string.rstrip(delimiter)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = \"\"\n    for item in test_tup:\n        concatenated_str += str(item)\n    return concatenated_str"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current natural number\n        cube = i ** 3\n        # Add the cube to the sum\n        sum += cube\n        # Increment the count\n        count += 1\n\n    # Calculate the average of cubes\n    average = sum / count\n\n    # Return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # initialize the sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # find the cube of i\n        cube = i**3\n\n        # add the cube to the sum and increment the count\n        sum += cube\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the average\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(n):\n        sum += i**3\n        count += 1\n    average = sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    if n == 0:\n        return 0\n    else:\n        return (1/3) * find_Average_Of_Cube(n-1) + (1/3) * find_Average_Of_Cube(n-2)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initialize variables\n    total = 0\n    \n    # iterate through the first n natural numbers\n    for i in range(1, n+1):\n        total += i ** 3\n    \n    # calculate the average of the cubes\n    average = total / (n ** 2)\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    # Initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    # Iterate through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number\n        cube = i ** 3\n        # Add the cube to the sum\n        sum += cube\n        # Increment the count variable\n        count += 1\n\n    # Calculate the average of cubes and return it\n    return sum / count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Initialize sum and count to 0\n    sum = 0\n    count = 0\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the number and add it to the sum\n        sum += i**3\n        # Increment the count\n        count += 1\n    # Calculate the average of cubes and return it\n    return sum/count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [s[-1] for s in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # create an empty list to store the rear index elements\n    rear_index_elements = []\n    # loop through each string in the tuple\n    for string in test_tuple:\n        # extract the rear index element from the string\n        rear_index_element = string[-1]\n        # append the rear index element to the list\n        rear_index_elements.append(rear_index_element)\n    # return the list of rear index elements\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[len(string)-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_elements.append(test_tuple[i])\n        else:\n            rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(i-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_index_elements = []\n    for element in test_tuple:\n        rear_index_elements.append(element[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for string in test_tuple:\n        rear_index.append(string[-1])\n    return rear_index"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    replacement = r\"\\3-\\2-\\1\"\n    return re.sub(pattern, replacement, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use the re.sub() function to replace the matched pattern with the desired format\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n\n    # return the converted date\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_date = day + '-' + month + '-' + year\n        return new_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Define the regular expression pattern to match date in yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern in the date string and extract the groups\n    match = re.match(pattern, dt)\n    \n    # Convert the year, month, and day to dd-mm-yyyy format\n    new_dt = '{}-{}-{}'.format(match.group(3), match.group(2), match.group(1))\n    \n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Use the re.sub() function to replace the date format with dd-mm-yyyy format\n    dt = re.sub(pattern, lambda m: m.group(0)[6:4] + '-' + m.group(0)[4:2] + '-' + m.group(0)[2:0], dt)\n\n    # Return the new date in dd-mm-yyyy format\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Replace the '-' with '-'\n    dt = dt.replace('-', '-')\n    # Split the date string into year, month, and day\n    year, month, day = dt.split('-')\n    # Reverse the order of the day and month\n    month, day = day, month\n    # Join the reversed day and month with the year\n    new_date = f'{day}-{month}-{year}'\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    result = re.sub(regex, r'\\3-\\2-\\1', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern to match the date format in the input string\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Use the re.search() function to find all the matches in the input string\n    matches = re.findall(pattern, dt)\n\n    # If no matches are found, return the original input string\n    if not matches:\n        return dt\n\n    # Convert the first match from yyyy-mm-dd format to dd-mm-yyyy format\n    new_date = '-'.join(matches[0][::-1])\n\n    # Return the new date in dd-mm-yyyy format\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Split the date string into year, month, and day components\n    year, month, day = dt.split('-')\n    # Reverse the order of the components\n    day, month, year = year, month, day\n    # Join the components back together with dashes\n    new_date = '-'.join([year, month, day])\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[6:4] + '-' + dt[4:2] + '-' + dt[2:0]"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    \n    # Do increments of gap size until we reach the end of the list\n    for gap in range(n//2):\n        # Starting from the middle, move elements of size gap in steps of gap\n        for i in range(gap, n):\n            # Insert my_list[i] at its correct position in the sorted sequence\n            j = i\n            while j >= gap and my_list[j] > my_list[j-gap]:\n                my_list[j], my_list[j-gap] = my_list[j-gap], my_list[j]\n                j -= gap\n            # If gap is n/2, then there are no more elements of size gap to compare\n            # and we can stop the loop\n            if j < gap:\n                break"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Calculate the gap sequence\n    gap = len(my_list) // 2\n    while gap > 0:\n        # Move the gap to the next position\n        for i in range(gap, len(my_list)):\n            # Compare adjacent elements and swap if they are in the wrong order\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                # Swap elements\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        # Reduce the gap by half\n        gap = gap // 2\n    # Print the sorted array\n    print(my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest gap in the array\n    n = len(my_list)\n    gap = n // 2\n\n    # Do Insertion Sort on this gap size\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Finding the optimal gap\n    n = len(my_list)\n    gap = n//2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        \n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Find the largest power of 2 smaller than n\n    power = 1\n    while power < n:\n        power = 2 * power + 1\n    # Do shell sort for each power of 2 up to n\n    while power // 2 >= 1:\n        # Perform insertion sort for each gap of the current power of 2\n        for i in range(power // 2, n):\n            # Insert current element at its correct position in sorted part of the array\n            j = i\n            while j >= power // 2 and my_list[j] > my_list[j - power // 2]:\n                my_list[j], my_list[j - power // 2] = my_list[j - power // 2], my_list[j]\n                j -= power // 2\n        power //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    # Initialize gap, which is the increment between passes of the shell sort.\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to half of the previous gap.\n        gap = gap // 2\n        # Iterate over the array, comparing adjacent elements and swapping if necessary.\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                # Move elements of the array that are too large to the right of j to fill the gap.\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            # Insert temp at position j.\n            my_list[j] = temp"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    h = 1\n    while h < n//3:\n        h = 3*h + 1\n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j-h] > temp:\n                my_list[j] = my_list[j-h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the elementwise and tuples between the two tuples.\n    '''\n    return tuple(map(lambda x, y: x & y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with all False values\n    result_tup = (False, False, False, False)\n    # Iterate over each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from the two input tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # Perform the elementwise and operation and assign the result to the corresponding element of the result tuple\n        result_tup[i] = tup1_elem and tup2_elem\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [(x and y) for x, y in zip(test_tup1, test_tup2)]"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize an empty list to store the elementwise and tuples\n    result_list = []\n    # iterate over each element of both input tuples\n    for i in range(len(test_tup1)):\n        # add the element-wise and of the corresponding elements of the tuples to the list\n        result_list.append(test_tup1[i] & test_tup2[i])\n    # return the list of elementwise and tuples\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    - test_tup1: a tuple of integers\n    - test_tup2: a tuple of integers\n\n    Returns:\n    - tuple: a tuple of integers with the elementwise and tuples extracted from the input tuples.\n    \"\"\"\n\n    # Extract the element-wise and tuples from the two input tuples\n    and_tup = (test_tup1[i] & test_tup2[i] for i in range(len(test_tup1)))\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    # Initialize the result tuple\n    result_tup = ()\n\n    # Iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the i-th element from both tuples\n        elem1 = test_tup1[i]\n        elem2 = test_tup2[i]\n\n        # Calculate the element-wise and of the two elements\n        elem_and = elem1 & elem2\n\n        # Append the result to the result tuple\n        result_tup += (elem_and,)\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return None\n    elif len(test_tup1) == 0:\n        print(\"Error: The two tuples must not be empty.\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append((test_tup1[i] & test_tup2[i]))\n        return tuple(result)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive or negative\n    if discriminant > 0:\n        # Calculate the root of the discriminant\n        root = math.sqrt(discriminant)\n        \n        # Calculate the directrix\n        directrix = (-b + root) / (2*a)\n        \n        # Return the directrix\n        return directrix\n    else:\n        # If the discriminant is negative, the directrix is on the line\n        return \"The directrix is on the line\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        return (-b)/(2*a)\n    else:\n        return (-b + discriminant**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Calculate the directrix\n    if disc > 0:\n        x1 = (-b + disc**0.5)/(2*a)\n        x2 = (-b - disc**0.5)/(2*a)\n        directrix = (x1 + x2)/2\n    elif disc == 0:\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n        directrix = x1\n    else:\n        directrix = None\n\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    \n    if delta > 0: \n        x1 = (-b + delta**(1/2))/(2*a)\n        x2 = (-b - delta**(1/2))/(2*a)\n        return x1, x2\n    elif delta == 0: \n        x1 = x2 = -b/(2*a)\n        return x1, x2\n    else: \n        print(\"The equation of the parabola does not have a real root\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = (b**2) - (4*a*c)\n    if discriminant < 0:\n        return \"There is no directrix\"\n    elif discriminant == 0:\n        x = -b/2/a\n        return f\"The directrix is {x}\"\n    else:\n        x1 = (-b + discriminant**0.5)/2/a\n        x2 = (-b - discriminant**0.5)/2/a\n        return f\"The directrix is {x1}, and {x2}\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    determinant = b**2 - 4*a*c\n    if determinant < 0:\n        print(\"No real root\")\n    elif determinant == 0:\n        print(\"There is one real root\", -b/(2*a))\n    else:\n        root1 = (-b + determinant**0.5)/(2*a)\n        root2 = (-b - determinant**0.5)/(2*a)\n        print(\"There are two real roots\", root1, \"and\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        return root1, root2\n    \n    elif discriminant == 0:\n        root = -b/(2*a)\n        return root\n    \n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a == 0:\n        return None\n    \n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    \n    x1 = (-b + delta ** 0.5) / (2 * a)\n    x2 = (-b - delta ** 0.5) / (2 * a)\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant < 0:\n        print(\"No real root.\")\n        return\n    \n    directrix = (-b + discriminant**0.5)/(2*a)\n    \n    print(\"The directrix is:\", directrix)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    root1 = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    root2 = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n\n    x = (-b + root1) / (2*a)\n    y1 = a * x**2 + b * x + c\n    y2 = a * x**2 + b * x + c\n\n    return root1, root2, x, y1, y2"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # create a set of elements in list1\n    set1 = set(list1)\n\n    # loop through list2 and check if it's in set1\n    for elem in list2:\n        if elem in set1:\n            return True\n\n    # if no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the first list\n    count1 = {}\n    for element in list1:\n        if element in count1:\n            count1[element] += 1\n        else:\n            count1[element] = 1\n\n    # Create a dictionary to store the count of each element in the second list\n    count2 = {}\n    for element in list2:\n        if element in count2:\n            count2[element] += 1\n        else:\n            count2[element] = 1\n\n    # Check if there is at least one common element between the two lists\n    for element in count1:\n        if element in count2 and count1[element] > 0 and count2[element] > 0:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Loop through each element in the first list\n    for element in list1:\n        # If the element is in the second list, return True\n        if element in list2:\n            return True\n    \n    # If we make it through the loop without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Check if both lists are not empty\n    if not list1 or not list2:\n        return False\n\n    # Initialize a set to store the common elements of the lists\n    common_set = set()\n\n    # Iterate through the first list and add all the elements to the set\n    for element in list1:\n        common_set.add(element)\n\n    # Iterate through the second list and add all the elements to the set\n    for element in list2:\n        if element in common_set:\n            return True\n\n    # If no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the base of each half\n    base1_half = base1 / 2\n    base2_half = base2 / 2\n\n    # Calculate the total area of both halves\n    total_area = 0.5 * base1_half * height + 0.5 * base2_half * height\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * area / total_area\n\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    base_smaller = min(base1, base2)\n    area_smaller = 0.5 * base_smaller * height\n    \n    area_bigger = area - area_smaller\n    half_bigger = height / 2\n    \n    median = (area_smaller + area_bigger + half_bigger) / 3\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the height of the trapezium using the formula\n    h = 2 * (base1 / 2) * (height / base1)\n    \n    # Calculate the area of the trapezium using the formula\n    A = (1 / 2) * (base1 + h) * (height + h)\n    \n    # Use the trapezoidal rule to find the median length of the trapezium\n    median = 0.5 * (A + (base2 + height) * (h / 2))\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2 * height\n    base_length = 0.5 * (base1 + base2)\n\n    if area > base_length:\n        upper_median = 0.5 * (base_length + height)\n        lower_median = 0.5 * (base_length - height)\n    else:\n        upper_median = 0.5 * (base_length + base2)\n        lower_median = 0.5 * (base_length - base2)\n\n    trapezium_median = upper_median - lower_median\n\n    return trapezium_median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the base of the trapezium\n    base = (base1 + base2) / 2\n    \n    # Calculate the length of the half of the trapezium\n    half_height = height / 2\n    \n    # Calculate the length of the area of the trapezium\n    area = 0.5 * base * half_height\n    \n    # Calculate the length of the median of the trapezium\n    median = 0.5 * base * (1 + (1 / 2 * area))\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium using the formula: A = 0.5 * base * height\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the lengths of the sides of the trapezium using the formula: s = 0.5 * base * h\n    s1 = 0.5 * base1 * height\n    s2 = 0.5 * base2 * height\n    \n    # Calculate the length of the trapezium using the formula: L = (b1 + b2) + h\n    L = base1 + base2 + height\n    \n    # Calculate the length of the shorter side of the trapezium\n    if s1 < s2:\n        shorter = s1\n    else:\n        shorter = s2\n    \n    # Calculate the area of the shorter side of the trapezium using the formula: A1 = 0.5 * shorter * height\n    area1 = 0.5 * shorter * height\n    \n    # Calculate the area of the longer side of the trapezium using the formula: A2 = 0.5 * (L - shorter) * height\n    area2 = 0.5 * (L - shorter) * height\n    \n    # Calculate the sum of the areas of the two halves of the trapezium\n    area_sum = area1 + area2\n    \n    # Calculate the length of the median of the trapezium using the formula: median = 0.5 * (s1 + s2)\n    median = 0.5 * (s1 + s2)\n    \n    # Calculate the length of the median line of the trapezium using the formula: median_line = 0.5 * area_sum\n    median_line = 0.5 * area_sum\n    \n    # Calculate the distance from the center of the trapezium to the median line\n    distance = abs(L - 0.5 * area_sum)\n    \n    # Calculate the length of the central part of the trapezium using the formula: central_part = 0.5 * area_sum - distance\n    central_part = 0.5 * area_sum - distance\n    \n    # Return the median length of the trapezium as the mean of the median of the shorter and longer sides and the median line\n    return 0.5 * (median + median_line)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the sum of the three bases and the height\n    total = base1 + base2 + height\n\n    # Calculate the sum of the squares of the two bases and the height\n    total_square = base1**2 + base2**2 + height**2\n\n    # Calculate the difference between the total square and the square of the sum of the two bases\n    difference = total_square - 2 * total + (base1 + base2)**2\n\n    # Calculate the length of the trapezium\n    trapezium_length = 0.5 * (base1 + base2)\n\n    # Calculate the first quartile length\n    quartile1_length = difference / 4\n\n    # Calculate the second quartile length\n    quartile2_length = difference / 4 + trapezium_length\n\n    # Return the median length as the average of the first and second quartile lengths\n    return 0.5 * (quartile1_length + quartile2_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * base2\n    base1_half_height = base1 * height / 2\n    base2_half_height = base2 * height / 2\n    trapezium_half_height = 0.5 * height\n\n    # Calculate the area of the trapezium\n    area = 0.5 * (base1 + base2) * trapezium_half_height\n\n    # Calculate the area of the trapezium that lies below the half of the base\n    area_below = area - 0.5 * (base1 + base2) * trapezium_half_height\n\n    # Calculate the area of the trapezium that lies above the half of the base\n    area_above = 0.5 * (area_below - base1)\n\n    # Calculate the total area of the trapezium\n    total_area = area + area_above\n\n    # Calculate the median length of the trapezium\n    median_length = 0.5 * total_area / (0.5 * base1 + 0.5 * base2)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    base_diff = abs(base1 - base2)\n    left_edge = 0.5 * base_diff\n    right_edge = 0.5 * (base1 + base2)\n    left_trapezium_area = 0.5 * (left_edge ** 2)\n    right_trapezium_area = 0.5 * (right_edge ** 2)\n    trapezium_area = left_trapezium_area + right_trapezium_area\n    median_area = 0.5 * (area + trapezium_area)\n    median = 2 * area / median_area\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Formula to find the length of the trapezium\n    area = 0.5 * base1 * base2\n    trapezium_length = 2 * area\n    # Calculate the areas of the two triangles formed by the trapezium\n    triangle1_area = 0.5 * base1 * height\n    triangle2_area = 0.5 * base2 * height\n    # Calculate the medians of the two triangles\n    median1 = max(triangle1_area, triangle2_area)\n    median2 = min(triangle1_area, triangle2_area)\n    # Calculate the median length of the trapezium\n    median_trapezium = (median1 + median2) / 2\n    # Return the median length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in arr:\n        if i > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes an array and a number as input and returns True if the number is greater than all the elements of the array, False otherwise.\n    '''\n    for element in arr:\n        if element > number:\n            return False\n    return True"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(\"The number is greater than\", arr[i])\n            return True\n    print(\"The number is not greater than any element in the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes two arguments: an array and a number. It checks whether the entered number is greater than the elements of the array and returns True or False accordingly.\n    '''\n    if len(arr) > 0:\n        if number > arr[0]:\n            return True\n        else:\n            for i in range(1, len(arr)):\n                if arr[i] > number:\n                    return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # Check whether the entered number is greater than the first element of the array\n    if number > arr[0]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num > number:\n            return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        print('Match found at index', match.start())\n        print('Pattern found:', match.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a{1,}b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"(?i)\\ba\\b.*b\\b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a+b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a(?=b+)\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=[b]*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.{1,}b'\n    return re.search(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # To get the last digit of a number, we need to find its remainder when divided by 10.\n    # For example, for 123, the remainder when divided by 10 is 3, so the last digit is 3.\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    # Get the last digit of the given number using modulus operator\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of that number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # To find the last digit of a number we need to divide it by 10 and take the remainder of the division.\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list of integers as input and returns a new list containing the negative numbers of the input list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Returns a new list with only the negative numbers from the input list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    '''\n    return [x for x in lst if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as an argument and returns a new list with all the negative numbers in the original list.\n    '''\n    new_list = []\n    for i in lst:\n        if i < 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isdigit() and int(x) % 2 == 0, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(string):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isdigit() or (char.isalpha() and char.isupper()):\n            new_string += char\n    return new_string"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Create an empty string to store the new string\n    new_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2 == 1:\n            # If it's odd, add it to the new string\n            new_str += char\n    # Return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            odd_str += str(int(char) % 2)\n        elif char.isalpha():\n            odd_str += char.lower()\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isalnum():\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if char.isdigit() and int(char)%2!=0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    left_list = []\n    right_list = []\n    for tup in test_list:\n        left_list.append(tup[0])\n        right_list.append(tup[1])\n    return len(left_list) + len(right_list) - len(set(left_list).intersection(set(right_list)))"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    seen = set()\n\n    for i, item in enumerate(test_list):\n        if item in seen:\n            if (test_list[i-1], item) not in seen:\n                bidirectional_count += 1\n        else:\n            seen.add(item)\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    # Initialize variables to keep track of the count and the set of seen tuples\n    count = 0\n    seen = set()\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Convert the tuple to a string for comparison\n        str_tup = str(tup)\n        # If the string representation of the tuple is already in the set, increment the count\n        if str_tup in seen:\n            count += 1\n        # Otherwise, add the string representation to the set of seen tuples\n        else:\n            seen.add(str_tup)\n\n    # Return the count of bidirectional tuple pairs\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i:j+1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n\n    Input:\n    - test_list: A list of tuples.\n\n    Output:\n    - A tuple with the number of bidirectional tuple pairs.\n\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i], test_list[j]) in test_list[j:i] or (test_list[j], test_list[i]) in test_list[:i]:\n                    bidirectional_count += 1\n\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][2:] or (test_list[j][0], test_list[i][1]) in test_list[i][2:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            count += 1\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initializing the sum variable to zero\n    sum = 0\n    \n    # Looping through each element in the list\n    for i in L:\n        # Adding the element to the sum variable\n        sum += i\n        \n    # Returning the sum\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result += L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        if num % 10 == 0:\n            total = total + num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            result -= num\n        else:\n            result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers to a string and then convert it back to an integer\n    return int(str(L[0]) + ''.join(str(x) for x in L[1:]))"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for num in L:\n        if isinstance(num, int):\n            sum += num\n        else:\n            raise TypeError('List should contain only integers')\n    return sum"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Remove punctuations and convert to lowercase\n    text = re.sub(r'[^\\w\\s]', '', text).lower()\n\n    # Split the text into words\n    words = text.split()\n\n    # Initialize variables to store adverbs and their positions\n    adverbs = []\n    position = []\n\n    # Iterate through each word in the sentence\n    for i, word in enumerate(words):\n        \n        # Check if the word is an adverb\n        if word.endswith('ing') or word.endswith('ed') or word.endswith('ingly') or word.endswith('ly'):\n            \n            # If it is, append its position to the list of adverbs\n            adverbs.append(i)\n\n    # If there are adverbs, return them along with their positions\n    if len(adverbs) > 0:\n        return adverbs, position\n    else:\n        return None, None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression to find adverbs\n    adverb_pattern = re.compile(r'\\b(also|also\\s+)?(also|also\\s+)?(also|also\\s+)?\\b(but|but\\s+)?(but|but\\s+)?(but|but\\s+)?\\b(but|but\\s+)?\\b')\n\n    # Find all adverbs in the given sentence\n    adverbs = re.findall(adverb_pattern, text)\n\n    # Check if adverbs are present and find their positions\n    if adverbs:\n        # Find the first adverb in the list\n        first_adverb = adverbs[0]\n\n        # Find all the positions of the first adverb in the text\n        first_adverb_positions = re.findall(r'\\b\\w+\\b', text)\n\n        # Find the index of the first adverb in the text\n        first_adverb_index = first_adverb_positions.index(first_adverb)\n\n        # Return the first adverb and its index in the text\n        return first_adverb, first_adverb_index\n    else:\n        # If no adverbs are found, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'(?<![\\w\\s])(\\b(also|also\\s+also|but|but\\s+but|either|either\\s+or|further|further\\s+further|however|however\\s+however|just|just\\s+just|neither|neither\\s+nor|nor|nor\\s+nor|not|not\\s+not|nevertheless|nevertheless\\s+nevertheless|once\\s+once|only|only\\s+only|so\\s+so|so\\s+so|still|still\\s+still|such\\s+such|such\\s+such|then|then\\s+then|too|too\\s+too|very|very\\s+very|wasn\\t|wasn\\t\\s|weren\\t|weren\\t\\s|wouldn\\t|wouldn\\t\\s)(?![\\w\\s]))'\n\n    # Find all matches using the regular expression pattern\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Loop through the matches and store the adverbs and their positions\n    adverbs = []\n    positions = []\n    for match in matches:\n        adverb = match.group().lower()\n        position = match.start()\n        adverbs.append(adverb)\n        positions.append(position)\n\n    # Return a dictionary containing the adverbs and their positions\n    return {adverb: position for adverb, position in zip(adverbs, positions)}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the sentence into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Initialize variables for the first adverb and its position\n    first_adverb = None\n    first_position = None\n    \n    # Iterate over the words and find the first adverb\n    for i, word in enumerate(words):\n        # Look for adverbs that start with 'a', 'an', 'the', or 'a'\n        if word.lower() in ['a', 'an', 'the']:\n            # Check if this is the first adverb seen so far\n            if first_adverb is None:\n                # Save the adverb and its position\n                first_adverb = word\n                first_position = i\n    \n    # If there was no adverb found, return None\n    if first_adverb is None:\n        return None\n    \n    # Return a list of tuples containing the first adverb and its position\n    return [(first_adverb, first_position)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs = re.findall(r'\\b\\w*adv\\w*\\b', text)\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expressions to match adverbs and their positions in the sentence\n    pattern_adverb = r'\\b\\w*able\\b|\\b\\w*ablest\\b|\\b\\w*abruptly\\b|\\b\\w*abruptly\\b|\\b\\w*accomplished\\b|\\b\\w*accustomed\\b|\\b\\w*accustomedly\\b|\\b\\w*adventurous\\b|\\b\\w*adventurously\\b|\\b\\w*agitated\\b|\\b\\w*alert\\b|\\b\\w*ambitious\\b|\\b\\w*ambitiously\\b|\\b\\w*amusing\\b|\\b\\w*angry\\b|\\b\\w*annoyed\\b|\\b\\w*annoying\\b|\\b\\w*anxious\\b|\\b\\w*anxiously\\b|\\b\\w*apprehensive\\b|\\b\\w*arrogant\\b|\\b\\w*ashamed\\b|\\b\\w*ashamedly\\b|\\b\\w*assured\\b|\\b\\w*astonished\\b|\\b\\w*awe-stricken\\b|\\b\\w*awkward\\b|\\b\\w*awkwardly\\b|\\b\\w*awesome\\b|\\b\\w*badly\\b|\\b\\w*banal\\b|\\b\\w*barely\\b|\\b\\w*barefoot\\b|\\b\\w*barbarous\\b|\\b\\w*bashful\\b|\\b\\w*bawdy\\b|\\b\\w*beautiful\\b|\\b\\w*beautifully\\b|\\b\\w*belated\\b|\\b\\w*belligerent\\b|\\b\\w*blessed\\b|\\b\\w*blissful\\b|\\b\\w*blissfully\\b|\\b\\w*bored\\b|\\b\\w*bravado\\b|\\b\\w*brave\\b|\\b\\w*bright\\b|\\b\\w*brightly\\b|\\b\\w*brilliant\\b|\\b\\w*brilliantly\\b|\\b\\w*broken\\b|\\b\\w*burned\\b|\\b\\w*busy\\b|\\b\\w*calm\\b|\\b\\w*calmly\\b|\\b\\w*careful\\b|\\b\\w*carefully\\b|\\b\\w*cautious\\b|\\b\\w*cautiously\\b|\\b\\w*charming\\b|\\b\\w*charmingly\\b|\\b\\w*cheerful\\b|\\b\\w*cheerfully\\b|\\b\\w*chilly\\b|\\b\\w*circumstantial\\b|\\b\\w*clear-sighted\\b|\\b\\w*clever\\b|\\b\\w*cleverly\\b|\\b\\w*cloudy\\b|\\b\\w*clumsy\\b|\\b\\w*clumsyly\\b|\\b\\w*coherent\\b|\\b\\w*colorful\\b|\\b\\w*compassionate\\b|\\b\\w*compassionately\\b|\\b\\w*competent\\b|\\b\\w*confident\\b|\\b\\w*confidently\\b|\\b\\w*congenial\\b|\\b\\w*conscious\\b|\\b\\w*consciously\\b|\\b\\w*conservative\\b|\\b\\w*content\\b|\\b\\w*contented\\b|\\b\\w*cool\\b|\\b\\w*cooler\\b|\\b\\w*coolly\\b|\\b\\w*courageous\\b|\\b\\w*courageously\\b|\\b\\w*courteous\\b|\\b\\w*courteously\\b|\\b\\w*crazy\\b|\\b\\w*crazy-eyed\\b|\\b\\w*crazy-fast\\b|\\b\\w*creepy\\b|\\b\\w*crisp\\b|\\b\\w*crisply\\b|\\b\\w*crisp-cut\\b|\\"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern for detecting adverbs\n    pattern = r'(?i)\\b((?:out|still|quickly|slowly|finally|just|again|alone|quietly|so|hardly|little|still|quickly|slowly|finally|just|again|alone|quietly|so|hardly|little)s?|never|nevertheless|neither|nobody|nothing|nowhere|nowhere-but-nowhere|none|nothing-but-nothing|nowhere-at-all|nothing-at-all|nowhere-except-nowhere|nothing-except-nothing|nowhere-except-nowhere-except-nowhere|nothing-except-nothing-except-nothing)\\b'\n\n    # Use the regular expression pattern to find all the adverbs in the sentence\n    adverbs = re.findall(pattern, text)\n\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs):\n        print(f\"{adv} found at position {i+1}\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern to match adverbs\n    pattern = r'\\b(\\w+)\\s*(?:in|at|on|by|on|for|with|by)\\s*(?:\\w+)?\\b'\n    \n    # Use the regular expression pattern to find all adverbs in the sentence\n    matches = re.findall(pattern, text)\n    \n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through all matches and add them to the adverbs list\n    for match in matches:\n        adverbs.append((match[0], text.index(match[0])))\n    \n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: x[1])\n    \n    # Return the sorted list of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regex pattern to match adverbs\n    pattern = r'\\b(also|also-|alternatively|alternatively-|also-like|also-so|also-then|also-when|also-where|also-while|also-with|alternatively|alternatively-|alternatively-like|alternatively-so|alternatively-then|alternatively-when|alternatively-where|alternatively-while|alternatively-with|also|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-while|also-with|also-like|also-so|also-then|also-when|also-where|also-"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adv[.]?[.]?\\b', text)\n    # Check if any adverbs were found\n    if not adverbs:\n        return 'No adverbs found.'\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: text.find(x))\n    # Print the adverbs and their positions\n    for i, adv in enumerate(adverbs):\n        print(f'{i+1}. {adv} is at position {text.find(adv)+1}.')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l**2  # Formula to find surface area of a cube\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2 # calculating the surface area of the cube"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = array('i', [0])  # Initialize the count array with zero\n\n    for num in nums:\n        if num > 0:\n            count.append(count[-1] + 1)  # Increment the count if the number is positive\n\n    num_positive = len(nums) - count[-1]  # Calculate the number of positive numbers\n\n    return num_positive / len(nums)  # Return the ration of positive numbers"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    pos_count = 0\n    total_count = len(nums)\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n\n    pos_ratio = pos_count / total_count\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i', [0, 0, 0, 0, 0, 0, 0, 0, 0])\n    for num in nums:\n        if num > 0:\n            positives[num] += 1\n    for i in range(1, len(positives)):\n        positives[i] += positives[i-1]\n    positive_sum = positives[len(positives)-1]\n    for num in nums:\n        if num > 0:\n            positives[num] -= 1\n    positive_ratio = 0\n    for i in range(1, len(positives)):\n        positive_ratio += positives[i] * (len(positives)-i)\n    return positive_ratio / positive_sum"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n\n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n\n    # Create an array to store the positive numbers\n    pos_nums = array('i')\n\n    # Loop through each number in the array\n    for num in nums:\n        # If the number is positive, add it to the array\n        if num > 0:\n            pos_nums.append(num)\n\n    # Find the total count of positive numbers in the array\n    total_count = len(pos_nums)\n\n    # Find the positive ratio and return it as a float\n    pos_ratio = float(len(pos_nums)) / len(nums)\n\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Find the length of the array\n    n = len(nums)\n\n    # Initialize the counters for positive and negative numbers\n    positive = 0\n    negative = 0\n\n    # Iterate through the array and count the numbers\n    for num in nums:\n        if num > 0:\n            positive += 1\n        else:\n            negative += 1\n\n    # Calculate the ration of positive numbers\n    ratio = positive / (positive + negative)\n\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store the positive numbers\n    pos_nums = array('i')\n\n    # Iterate through the array of numbers\n    for num in nums:\n        # If the number is positive, append it to the positive array\n        if num > 0:\n            pos_nums.append(num)\n\n    # Calculate the ration of positive numbers\n    if len(pos_nums) == 0:\n        return 0\n    else:\n        return float(sum(pos_nums))/len(pos_nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n\n    # Create an array to store the absolute values of the numbers\n    abs_nums = array('i', [abs(num) for num in nums])\n\n    # Count the number of positive numbers\n    positive_count = sum([1 for num in abs_nums if num > 0])\n\n    # Find the ration of positive numbers\n    ration = positive_count / len(abs_nums)\n\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_numbers = array('i', [num for num in nums if num > 0])\n    total_numbers = len(nums)\n    positive_ratio = positive_numbers.itemsize / total_numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n\n    return count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > largest_neg:\n            largest_neg = num\n    return largest_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the largest negative number in the list.\n    \"\"\"\n    max_num = lst[0]\n    for num in lst:\n        if num < 0 and num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    largest = -999999999\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes a list as an argument and returns the largest negative number in the list.\n    '''\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -1 # initialize the max number as -1\n    \n    # loop through the list and find the largest negative number\n    for num in list1:\n        if num < 0: # if the number is negative\n            if num > max_num: # if the number is greater than the current max number\n                max_num = num # update the max number\n    \n    return max_num # return the max number\n"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function finds the largest negative number from a list of integers.\n    \"\"\"\n    neg_max = lst[0]\n    for num in lst:\n        if num < 0 and num > neg_max:\n            neg_max = num\n    return neg_max"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(lst):\n    '''\n    This function takes in a list as input and returns the largest negative number in the list.\n    '''\n    max_neg = -float('inf')\n    for num in lst:\n        if num < 0:\n            max_neg = max(max_neg, num)\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for i in lst:\n        if i < 0 and i > max_neg:\n            max_neg = i\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and a number K as input and\n    returns a list of trimmed tuples.\n\n    The trimmed tuples are created by removing the first K elements from each tuple.\n\n    Example:\n    test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n    K = 2\n    trimmed_list = trim_tuple(test_list, K)\n    print(trimmed_list) # Output: [(2, 3), (5, 6), (8, 9)]\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[K:]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple(test_list[i][:K]))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n        test_list[i] = tuple(test_list[i][j] for j in range(len(test_list[i])) if j % K!= 0)\n        test_list[i] = tuple(test_list[i])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the list\n    for i, tup in enumerate(test_list):\n        # Trim the tuple by k if the tuple has at least k elements\n        if len(tup) >= K:\n            # Create a new tuple with the trimmed elements\n            trimmed_tup = tup[:K]\n            # Append the trimmed tuple to the list\n            trimmed_list.append(trimmed_tup)\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store the trimmed tuples\n    new_list = []\n    # loop through each tuple in the given list\n    for tup in test_list:\n        # if the length of the tuple is greater than k, truncate the tuple\n        if len(tup) > K:\n            tup = tup[:K]\n        # add the trimmed tuple to the new list\n        new_list.append(tup)\n    # return the new list of trimmed tuples\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize empty list to store trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Check if the value is greater than k\n            if val > K:\n                # Remove the value from the tuple\n                tup.remove(val)\n                # Exit the inner loop since the value is no longer needed\n                break\n        # If all values in the tuple are less than or equal to k, add the tuple to the trimmed list\n        if len(tup) > 0:\n            trimmed_list.append(tup)\n    \n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize result tuple with length of the first tuple\n    result_tup = tuple([0] * len(test_tup1))\n\n    # loop through each element in both tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n\n    # return result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the multiplication of corresponding elements of the tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a set to remove duplicates\n    unique_tup = set(tup)\n\n    # Create a Counter object to count the occurrence of each element in the list\n    counter = Counter(lst)\n\n    # Create a new list to store the count of each element in the tuple\n    count_list = []\n\n    # Iterate over each element in the unique_tup\n    for element in unique_tup:\n        # If the element is in the counter object, add its count to the count_list\n        if element in counter:\n            count_list.append(counter[element])\n\n    # Return the count_list\n    return count_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Using Counter function from collections to count the number of occurence of each element in the tuple\n    count = Counter(tup)\n    \n    # Counting the number of elements in the tuple that are present in the list\n    count_lst = sum(1 for x in lst if x in tup)\n    \n    # Returning the count of elements present in the tuple and list\n    return count, count_lst"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup:\n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    count_dict = Counter(count_dict)\n    \n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n    \n    result = [(k, v) for k, v in count_dict.items()]\n    result.sort(key=lambda x: x[1], reverse=True)\n    \n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup: \n        count_dict[item] = count_dict.get(item, 0) + 1\n    \n    for item in lst: \n        count_dict[item] = count_dict.get(item, 0) - 1\n    \n    return Counter(count_dict)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes in a tuple and a list as input. It then uses the Counter class from the collections module to count the occurrence of all elements in the tuple in the list. \n    The function returns a dictionary with the count of each element in the tuple in the list.\n    '''\n    count = Counter(tup)\n    count_dict = {k:v for k,v in count.items()}\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter function from collections module to count the occurrence of all elements in list\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n    \n    # Print the count of each element in the tuple\n    for key, value in count.items():\n        print(key, value)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary \n    containing the count of each element in the list.\n    '''\n    count_dict = {}\n    for item in lst:\n        if item in tup:\n            count_dict[item] = count_dict.get(item, 0) + 1\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary containing the count of each element in the list.\n    '''\n    count_dict = Counter(tup)\n    for key, value in count_dict.items():\n        if key in lst:\n            count_dict[key] += 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert tuple elements to set for easy count\n    tup_set = set(tup)\n    \n    # convert list elements to set for easy count\n    lst_set = set(lst)\n    \n    # count the occurrence of each element in the tuple and list\n    count_tup = Counter(tup_set)\n    count_lst = Counter(lst_set)\n    \n    # combine the two counts\n    count_tup_lst = count_tup.copy()\n    count_tup_lst.update(count_lst)\n    \n    return count_tup_lst\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    count_lst = []\n    for key, value in count.items():\n        if key in lst:\n            count_lst.append((key, value))\n    return count_lst"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Loop through the list of numbers\n    for num in nums:\n        # Calculate the cube of the number and store it back in the list\n        nums[nums.index(num)] = num ** 3\n    return nums"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 1\n    s = 0\n    for i in range(n+1):\n        if i == 0 or i == n:\n            s += 1/i\n        else:\n            p *= i\n            s += p/(i+2)\n    return s"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = [1, 1, 2, 2, 4, 4, 7, 7, 12, 12, 19, 19, 28, 28, 39, 39, 52, 52, 67, 67, 84, 84, 103, 103, 124, 124, 147, 147, 172, 172, 199, 199, 228, 228, 259, 259, 292, 292, 327, 327, 364, 364, 403, 403, 444, 444, 487, 487, 532, 532, 579, 579, 628, 628, 679, 679, 732, 732, 787, 787, 844, 844, 903, 903, 964, 964, 1027, 1027, 1092, 1092, 1159, 1159, 1228, 1228, 1299, 1299, 1372, 1372, 1447, 1447, 1524, 1524, 1603, 1603, 1684, 1684, 1767, 1767, 1852, 1852, 1939, 1939, 2028, 2028, 2119, 2119, 2212, 2212, 2307, 2307, 2404, 2404, 2503, 2503, 2604, 2604, 2707, 2707, 2812, 2812, 2919, 2919, 3028, 3028, 3139, 3139, 3252, 3252, 3367, 3367, 3484, 3484, 3603, 3603, 3724, 3724, 3847, 3847, 3972, 3972, 4099, 4099, 4228, 4228, 4359, 4359, 4492, 4492, 4627, 4627, 4764, 4764, 4903, 4903, 5044, 5044, 5187, 5187, 5332, 5332, 5479, 5479, 5628, 5628, 5779, 5779, 5932, 5932, 6087, 6087, 6244, 6244, 6403, 6403, 6564, 6564, 6727, 6727, 6892, 6892, 7059, 7059, 7228, 7228, 7399, 7399, 7572, 7572, 7747, "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize variables\n    perrin_sum = 0\n    limit = n**2\n    \n    # Calculate sum of perrin numbers using nested for loop\n    for i in range(1, limit+1):\n        if i % 3 == 0 or i % 5 == 0:\n            perrin_sum += i\n    \n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perrin_sum(n):\n    '''\n    This function calculates the sum of perrin numbers.\n    '''\n    # initialize the sum of perrin numbers\n    sum_perrin = 0\n\n    # loop through the range of numbers\n    for i in range(1, n+1):\n        # calculate the perrin number\n        perrin = (i * (3**i)) // 2\n\n        # add the perrin number to the sum\n        sum_perrin += perrin\n\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    for i in range(1, n+1):\n        p += i\n    return p\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(n): \n        if i % 2 == 0: \n            sum += i \n    return sum \n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i**3\n    return sum_perrin"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size as input and returns a list of extracted strings.\n    '''\n    extracted_strings = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            extracted_strings.append(str_list[i][:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n\n    Parameters:\n    str_list (list): A list of string values.\n    l (int): The size of the string values to extract.\n\n    Returns:\n    A list of strings of length l extracted from str_list.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes in a list of strings and a specified length as input.\n    It returns a new list containing the specified length strings from the original list.\n    '''\n    new_list = []\n    for string in str_list:\n        if len(string) == l:\n            new_list.append(string)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and an integer value as input. It extracts the specified size of strings from the list and returns them as a new list.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a list of size specified strings.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size as input and returns a list of the specified size of strings.\n    \"\"\"\n    return [str[i:i+size] for i in range(0, len(str), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extracts a specified number of string values from a list of string values.\n    \"\"\"\n    return [str_list[i:i+size] for i in range(0, len(str_list), size)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n    '''\n    result = []\n    for s in str_list:\n        if len(s) > size:\n            result.append(s[:size])\n        else:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, length):\n    \"\"\"\n    This function takes a list of strings and the length of strings to extract.\n    It returns a list of extracted strings.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:length])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n\n    # Use the regular expression pattern to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text1)\n\n    # Return the modified string\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function will remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    # remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount < actual_cost: \n        return sale_amount - actual_cost\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if actual_cost < sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = actual_cost - sale_amount\n    if loss > 0:\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n    if n > 2:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_evens = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_evens += i\n    return sum_of_evens"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and n % i == 0:\n            even_factors += i\n\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    even_factors = []\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is divisible by 2\n        if i % 2 == 0:\n            even_factors.append(i)\n\n    # Calculate the sum of even factors\n    even_sum = sum(even_factors)\n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    This function takes a number as an input and returns the sum of the even factors of the number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n            \n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumOfFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize a variable to store the sum of even factors\n    total = 0\n    \n    # loop through all numbers from 2 to n-1\n    for i in range(2, n):\n        # check if i is even and divisible by n\n        if i % 2 == 0 and i % n == 0:\n            # add i to the sum of even factors\n            total += i\n    \n    # return the total sum of even factors\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    \n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    This function finds the sum of even factors of a number.\n    '''\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1): \n        if n % i == 0: \n            if i % 2 == 0: \n                sum += i \n    return sum "
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define a regular expression pattern for matching a word containing 'z'\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    monthnum = int(monthnum2)\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum in [4, 6, 9, 11]:\n        if monthnum % 2 == 0:\n            return False\n        else:\n            return True\n    elif monthnum == 2:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"31 days\"\n    elif monthnum2 in [4, 6, 9, 11]:\n        return \"30 days\"\n    elif monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return \"29 days\"\n        else:\n            return \"28 days\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum2, \"contains 31 days.\")\n    else:\n        print(monthnum2, \"does not contain 31 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1,13):\n        if monthnum2 == 2 and is_leap_year(2021):\n            return True\n        elif monthnum2 in monthnum:\n            return True\n    return False\n\ndef is_leap_year(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 % 2 == 0:\n        if 29 in monthnum2:\n            return True\n        else:\n            return False\n    else:\n        if 28 in monthnum2:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        print(\"31 days\")\n    elif monthnum2 in [4,6,9,11]:\n        print(\"30 days\")\n    else:\n        print(\"Error: Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum % 2 == 0 and monthnum % 100!= 0 or monthnum % 400 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop over each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string in place\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for i in range(len(stringlist)):\n        reversed_stringlist.append(stringlist[i][::-1])\n    return reversed_stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse each string in a given list of string values.\n    \"\"\"\n    return [x[::-1] for x in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Finding the length of the list\n    n = len(lst)\n    \n    # Finding the minimum length of sublist\n    min_length = n\n    \n    # Initializing the minimum sublist with the original list\n    min_sublist = lst\n    \n    # Iterating over all possible sublists\n    for i in range(n):\n        for j in range(i+1, n):\n            sublist = lst[i:j+1]\n            \n            # Updating the minimum length and sublist if a sublist with lesser length is found\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    \n    # Returning the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist having the minimum length.\n    '''\n    # Sorting the list in ascending order based on length of sublists.\n    lst.sort(key=len)\n    \n    # Iterating through the sorted list and finding the sublist with the minimum length.\n    for i in range(len(lst)):\n        if i == len(lst)-1 or len(lst[i]) < len(lst[i+1]):\n            return lst[i]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # initialize minimum length to infinity\n    min_len = float('inf')\n\n    # loop through the list\n    for i in range(len(lst)):\n\n        # loop through the remaining sublist from the current index to the end\n        for j in range(i+1, len(lst)):\n\n            # check if the sublist from i to j has a shorter length\n            if j - i + 1 < min_len:\n\n                # update the minimum length and the index of the minimum sublist\n                min_len = j - i + 1\n                min_sublist = lst[i:j+1]\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf') # initialize minimum length to infinity\n    min_sublist = None # initialize minimum sublist to none\n    \n    for sublist in lst: # iterate over all sublists\n        if len(sublist) < min_len: # check if sublist has a shorter length than current minimum length\n            min_len = len(sublist) # update minimum length\n            min_sublist = sublist # update minimum sublist\n    \n    return min_sublist # return minimum sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_len = 999999999\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    sublist = lst\n    min_length = len(lst)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < min_length:\n                sublist = lst[i:j+1]\n                min_length = len(lst[i:j+1])\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    This function takes the length and width of a rectangle as input and returns the area of the rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Calculate the area of a rectangle.\n\n    Args:\n    - l: a positive number representing the length of the rectangle\n    - b: a positive number representing the width of the rectangle\n\n    Returns:\n    - the area of the rectangle, as a float\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Removes all uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'(?i)\\b[A-Z]+\\b')\n    \n    # Find all matches using the pattern in the string\n    matches = pattern.findall(string)\n    \n    # Loop through each match and remove it from the string\n    for match in matches:\n        string = string.replace(match, '')\n    \n    # Return the modified string\n    return string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Find all the uppercase substrings in the given string\n    uppercase_substrings = pattern.findall(str1)\n\n    # Replace all the uppercase substrings in the string with spaces\n    for i in uppercase_substrings:\n        str1 = str1.replace(i,'')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expressions to find all uppercase substrings in the string\n    pattern = re.compile(r'[A-Z]+')\n    matches = pattern.findall(str1)\n\n    # Iterate over each match and remove it from the string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove all uppercase substrings using regex\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    # return the modified string\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # use regex to match uppercase substrings\n    uppercase_substrings = re.findall(r'[A-Z][a-z]*', str1)\n    # loop over each uppercase substring and remove it from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert all the characters to lowercase\n    str1 = str1.lower()\n    # Create a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Find all the uppercase substrings in the string\n    uppercase_substrings = pattern.findall(str1)\n    # Replace all uppercase substrings with spaces in the string\n    for uppercase in uppercase_substrings:\n        str1 = str1.replace(uppercase,'')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use a regular expression to match uppercase substrings\n    uppercase_regex = re.compile('[A-Z]+')\n    # Use a list comprehension to remove the substrings\n    result = [char for char in str1 if not uppercase_regex.search(char)]\n    # Convert the list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Split the string into a list of words\n    words = str1.split()\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Loop through the words and append lowercase words to the result list\n    for word in words:\n        if not any(char.isupper() for char in word):\n            result.append(word)\n    \n    # Convert the result list back into a string and return it\n    return''.join(result)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # define a regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]\\w+\\b'\n    # replace all uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_element = []\n    for sublist in lst:\n        first_element.append(sublist[0])\n    return first_element"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for lst in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst:\n        print(i[0])"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n\n    Parameters:\n    str (str): The string to count the upper case characters.\n\n    Returns:\n    int: The number of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Initialize count variable to 0\n    count = 0\n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the count variable\n            count += 1\n    # Return the count of uppercase characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    count = 0\n    for i in string:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def generate_combinations(lst, k):\n        if k == 1:\n            for i in range(len(lst)):\n                yield [lst[i]]\n        else:\n            for i in range(len(lst)):\n                for combo in generate_combinations(lst[:i] + lst[i+1:], k-1):\n                    yield [lst[i]] + combo\n\n    for combo in generate_combinations(list1, len(list1)):\n        print(combo)"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize a list to store all combinations\n    combinations = []\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n\n        # Create a new list to store the remaining elements of the list\n        remaining_list = list1[:i] + list1[i+1:]\n\n        # Loop through each remaining element\n        for j in range(len(remaining_list)):\n\n            # Create a tuple of the combination\n            combination = (list1[i], remaining_list[j])\n\n            # Add the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n    \"\"\"\n    for i in range(1, len(lst)+1):\n        for j in range(len(lst)):\n            yield lst[j:j+i]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combination = list1[i:j]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(len(list1)-i):\n            result.append(list1[j:j+i+1])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()  # sort the list to get all possible combinations\n    result = []\n    for i in range(len(list1)):\n        if i > 0 and list1[i] == list1[i-1]:  # if the current element is equal to the previous one, ignore it\n            continue\n        for j in range(i+1, len(list1)+1):\n            if i+j-1 == len(list1):  # if the sum of first i elements and the sum of last j-i+1 elements is equal to the length of the list, add them to the result\n                result.append(list1[i:i+j])\n                break\n            elif i+j-1 < len(list1) and list1[i+j-1] == list1[i+j-2]:  # if the sum of first i elements and the sum of last j-i+1 elements is less than the length of the list and the current element is equal to the previous one, ignore it and continue searching for the next combination\n                continue\n            else:\n                result.append(list1[i:i+j])\n                break\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            result.append(list1[j:j+i])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            combination = []\n            for k in range(j, j + i):\n                combination.append(list1[k])\n            result.append(combination)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        if current_product > max_product:\n            max_product = current_product\n        if current_product < 0:\n            current_product = 1\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    max_ending_here = max(arr[0], max_ending_here*arr[0])\n    max_ending_here = max(arr[-1], max_ending_here*arr[-1])\n    for i in range(1, len(arr)-1):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_ending_here = max(arr[len(arr)-i-1], max_ending_here*arr[len(arr)-i-1])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = 1\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of a given array.\n\n    Args:\n    - arr (list): The array to find the maximum product subarray of.\n\n    Returns:\n    - int: The maximum product subarray.\n\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_ending_here = max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes in a dictionary and n as parameters and checks if all the values are same.\n    '''\n    values = set(dict.values())  # creating a set of all the values in the dictionary\n    \n    if len(values) == 1:  # if there is only one value in the set, it means all the values are same\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all values are same in the dictionary\n    if all(dict.values() == [dict[key] for key in dict]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the dictionary has n items\n    if len(dict)!= n:\n        return False\n    \n    # Get the first item of the dictionary\n    first_value = dict.popitem()[1]\n    \n    # Check if all items of the dictionary have the same value\n    for value in dict.values():\n        if value!= first_value:\n            return False\n    \n    # All items have the same value, so return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function checks if all values are same in a dictionary.\n\n    Parameters:\n        dict (dict): A dictionary.\n        n (int): The number of keys in the dictionary.\n\n    Returns:\n        bool: True if all values are same in the dictionary, otherwise False.\n    \"\"\"\n    if n == 0:\n        return True\n    if n == 1:\n        return len(set(dict.values())) == 1\n    for key in dict:\n        if key in dict.keys()[:n-1]:\n            if dict[key]!= dict[dict.keys()[:n-1].index(key)]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return \"Dictionary is empty\"\n\n    first_value = list(dict.values())[0]\n\n    for value in dict.values():\n        if value!= first_value:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all values are same in the dictionary\n    if all(value == dict[list(dict.keys())[0]] for value in dict.values()):\n        print(\"All values are same in the dictionary.\")\n    else:\n        print(\"Some values are different in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function checks if all values are same in a dictionary.\n\n    Parameters:\n        dict (dict): The dictionary to be checked.\n        n (int): The value to be checked.\n\n    Returns:\n        bool: True if all values are same in the dictionary, else False.\n    \"\"\"\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    values = set()\n    for value in dict.values():\n        values.add(value)\n    return len(values) == 1"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) < n:\n        return False\n    else:\n        for value in dict.values():\n            if value!= dict[value]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict:\n        if len(set(dict[key])) == 1:\n            return True\n    return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k,v in dict1.items() if v!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key in list(dict1.keys()):\n        if not dict1[key]:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n    arr: A list of integers.\n\n    Returns:\n    The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    \"\"\"\n    n = len(arr)\n    # Initialize variables to keep track of current subsequence and maximum product\n    current_subsequence = [1]\n    max_product = current_subsequence[0]\n    for i in range(1, n):\n        # If the current element is smaller than the last element in the subsequence, add it to the subsequence and update the maximum product\n        if arr[i] < arr[i - 1]:\n            current_subsequence.append(arr[i])\n            max_product = max(max_product, current_subsequence[-1] * current_subsequence[-2])\n        # If the current element is greater than the last element in the subsequence, remove the last element from the subsequence and update the maximum product\n        else:\n            while i < n - 1 and arr[i] >= arr[i + 1]:\n                current_subsequence.pop()\n                i -= 1\n            if i < n - 1:\n                current_subsequence[-1] = arr[i]\n                max_product = max(max_product, current_subsequence[-1] * current_subsequence[-2])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    # create a new array to store the product of the subsequence of each element\n    prod_arr = [1] * n\n    # create a new array to store the subsequence of each element\n    subseq_arr = [1] * n\n\n    # calculate the product of the entire array and store it in the first element of the product array\n    prod_arr[0] = arr[0]\n\n    # initialize the maximum product to be the product of the entire array\n    max_prod = prod_arr[0]\n\n    # iterate through the array from index 1 to n-1\n    for i in range(1, n):\n        # calculate the product of the subsequence of the current element and the subsequence of the previous element\n        prod_arr[i] = arr[i] * (arr[i] * subseq_arr[i-1])\n\n        # update the maximum product if the current product is greater than the current maximum product\n        if prod_arr[i] > max_prod:\n            max_prod = prod_arr[i]\n\n        # update the subsequence of the current element\n        if i > 0:\n            subseq_arr[i] = prod_arr[i] / prod_arr[i-1]\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n <= 1:\n        return arr[0] if n > 0 else 1\n    \n    dp = [1] * n\n    max_so_far = dp[0]\n    max_ending_here = 1\n    \n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_ending_here *= arr[i]\n            dp[i] = max(max_ending_here, max_so_far)\n            max_so_far = max(max_so_far, max_ending_here)\n        else:\n            max_ending_here = 1\n            dp[i] = max_so_far\n            \n    return max(dp)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return 0\n\n    min_num = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            min_num, max_product = max_product, min_num\n\n        min_num = min(min_num, arr[i])\n        max_product = max(max_product, arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    max_val = arr[0]\n    min_val = arr[0]\n    for i in range(1, n):\n        dp[i][0] = arr[i]\n        if arr[i] < 0:\n            dp[i][0] = 0\n        for j in range(1, n):\n            if arr[j] > arr[i]:\n                dp[i][j] = max(dp[i][j-1] * arr[j], arr[i])\n                if dp[i][j] > max_val:\n                    max_val = dp[i][j]\n            elif arr[j] < arr[i]:\n                dp[i][j] = min(dp[i][j-1] * arr[j], arr[i])\n                if dp[i][j] < min_val:\n                    min_val = dp[i][j]\n            else:\n                dp[i][j] = dp[i][j-1]\n    return max_val"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_prod = float('-inf')\n    max_sum = 0\n\n    for i in range(1, n):\n        max_sum = max(max_sum, arr[i])\n        max_prod = max(max_prod, max_sum * arr[i])\n\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return 0\n\n    # Initialize the maximum product and the maximum subsequence\n    max_product = float('-inf')\n    max_subsequence = float('-inf')\n\n    # Initialize the two variables to keep track of the current subsequence and its product\n    current_subsequence = 1\n    current_product = arr[0]\n\n    # Loop through the array and update the current subsequence and its product\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            current_subsequence += 1\n            current_product *= arr[i]\n        else:\n            if current_product > max_product:\n                max_product = current_product\n            current_subsequence = 1\n            current_product = arr[i]\n\n    # Update the maximum product if the current subsequence is greater\n    if current_product > max_product:\n        max_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Initialize two pointers, one at the beginning and another at the end\n    left = 0\n    right = n - 1\n\n    # Initialize a variable to store the maximum product\n    max_product = float('-inf')\n\n    # Traverse the array from left to right\n    while left < right:\n        # Calculate the product of the numbers in the subsequence from left to right\n        product = arr[left] * arr[right]\n\n        # Update the maximum product if the new product is greater\n        if product > max_product:\n            max_product = product\n\n        # If the current number is greater than the left number, then we need to shift the left pointer to the right\n        if arr[left] < arr[left + 1]:\n            left += 1\n        else:\n            # If the current number is less than the right number, then we need to shift the right pointer to the left\n            right -= 1\n\n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        raise ValueError(\"Tuple must have at least two elements\")\n    else:\n        pairwise_sum = 0\n        for i in range(len(test_tup)-1):\n            pairwise_sum += test_tup[i] + test_tup[i+1]\n        return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i + 1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n\n    sum_lst = []\n    for i in range(len(test_tup) - 1):\n        sum_lst.append(test_tup[i] + test_tup[i+1])\n    return sum_lst"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] + test_tup[i+1])\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    result = test_tup[0]\n    for i in range(1, len(test_tup)-1):\n        result += test_tup[i+1]\n    result += test_tup[-1]\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    n = len(test_tup)\n    result = 0\n    for i in range(n-1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize variables to store the sum of neighboring elements\n    prev_sum = 0\n    curr_sum = 0\n    \n    # loop through the tuple elements and add the pairwise sum\n    for i in range(len(test_tup)-1):\n        curr_sum = test_tup[i] + test_tup[i+1]\n        prev_sum += curr_sum\n    \n    return prev_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    if len(test_tup) < 2:\n        return \"The tuple must have at least two elements.\"\n\n    return sum(test_tup[i:i+2] for i in range(len(test_tup)-1))"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # initialize the product variable as 1\n    product = 1\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # multiply the current element by the product and add the result to the product variable\n        product = (product * arr[i]) % n\n    # return the result\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        if product >= n:\n            product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    # Find the product of the array modulo n\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    \n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Find the product of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product*num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result *= i\n        result %= n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i]+1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    # Check if the length of the list is less than 2 or not\n    if len(l) < 2: \n        return False\n\n    # Initialize the first and second elements of the list\n    prev = l[0]\n    curr = l[1]\n\n    # Iterate over the rest of the list\n    for i in range(2, len(l)): \n        # Check if the current element is equal to the previous element + 1\n        if curr == prev + 1: \n            return True\n        else: \n            prev = curr\n            curr = l[i]\n\n    # If the loop ends without returning True, there are no consecutive numbers in the list\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3: \n        return \"The list should have at least three elements to be consecutive\"\n    elif l[0] == l[1] == l[2]:\n        return \"The list contains only consecutive numbers\"\n    else:\n        for i in range(len(l)-1): \n            if l[i+1]!= l[i]+1: \n                return \"The list contains non-consecutive numbers\"\n        return \"The list contains consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l) - 1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    for i in range(len(l)-1):\n        if l[i] == l[i+1] - 1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Find the intersection of the two lists using set intersection\n    intersection = set(test_list1) & set(test_list2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Merge the two tuple lists into a single list\n    merged_list = test_list1 + test_list2\n\n    # Convert the merged list into a set to get unique elements\n    unique_elements = set(merged_list)\n\n    # Create an empty set to store the intersection of unique elements\n    intersection_set = set()\n\n    # Iterate through the unique elements to find their intersection with the original lists\n    for element in unique_elements:\n        if element in test_list1 and element in test_list2:\n            intersection_set.add(element)\n\n    # Convert the intersection set back into a tuple list and return it\n    return tuple(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_elements = []\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2 and tuple1 not in common_elements:\n                common_elements.append(tuple1)\n    return common_elements"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for t1 in test_list1:\n        if t1 in test_list2 and t1 not in intersection:\n            intersection.append(t1)\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create an empty set to store the unique elements of both lists\n    unique_set = set()\n    \n    # iterate through the first list and add each element to the set\n    for element in test_list1:\n        unique_set.add(element)\n    \n    # iterate through the second list and check if the element is present in the set\n    for element in test_list2:\n        if element in unique_set:\n            # if the element is present, add it to the result list\n            result.append(element)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # initialize an empty set to store the common tuples\n    common_tuples = set()\n    \n    # iterate through each tuple in the first list\n    for tup1 in test_list1:\n        # iterate through each tuple in the second list\n        for tup2 in test_list2:\n            # check if the two tuples have the same elements in the same order\n            if tup1 == tup2:\n                # add the common tuple to the set of common tuples\n                common_tuples.add(tup1)\n                break # exit the inner loop as there is only one match\n            \n    # convert the set of common tuples to a list and return it\n    return list(common_tuples)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Check if both lists are of the same length\n    if len(test_list1)!= len(test_list2):\n        print(\"Error: Both lists must have the same length.\")\n        return None\n    \n    # Create a set from each list to get unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the sets using the intersection() method\n    intersection_set = set1.intersection(set2)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Find the intersection of the two lists\n    intersection = set(test_list1) & set(test_list2)\n    # Sort the intersection list in ascending order\n    intersection = sorted(intersection)\n    # Convert the sorted intersection list to a tuple\n    intersection_tuple = tuple(intersection)\n    return intersection_tuple"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the common elements\n    common_set = set()\n    \n    # Iterate through the first list\n    for i in test_list1:\n        # Check if the current element is in the second list\n        if i in test_list2:\n            # Add the common element to the set\n            common_set.add(i)\n    \n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert the test lists to sets to remove duplicates and sort them\n    test_list1 = sorted(set(test_list1))\n    test_list2 = sorted(set(test_list2))\n    \n    # Initialize an empty set to store the common elements\n    common_elements = set()\n    \n    # Loop through the elements of the first list and check if each element is also in the second list\n    for element in test_list1:\n        if element in test_list2:\n            common_elements.add(element)\n    \n    # Convert the common elements set to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    :param str1: The string in which the characters need to be replaced.\n    :param ch: The character to be replaced.\n    :param newch: The new character that needs to be replaced with.\n    :return: The modified string with the specified character replaced.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n        str1 (str): A string to be modified.\n        ch (str): The character to be replaced.\n        newch (str): The new character to replace ch with.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # If the character matches the old character, replace it with the new character\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the characters replaced\n    new_str = str1.replace(ch, newch)\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (str): The original string.\n    ch (str): The character to be replaced.\n    newch (str): The new character to replace the original character.\n\n    Returns:\n    str: The modified string with the replacements.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n    str1 (string): The string in which the character needs to be replaced.\n    ch (char): The character to be replaced.\n    newch (char): The new character that needs to be replaced with.\n\n    Returns:\n    string: The modified string with the character replaced.\n    \"\"\"\n\n    # Loop through each character in the string\n    for i in range(len(str1)):\n        # Check if the current character is the same as the character to be replaced\n        if str1[i] == ch:\n            # Replace the character with the new character\n            str1 = str1[:i] + newch + str1[i+1:]\n\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Use the Counter() function to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the dictionary by value using the sorted() function\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1])\n\n    # Create a new dictionary with the sorted values\n    sorted_counter = {k: v for k, v in sorted_dict}\n\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Count the frequency of each value in the dictionary\n    count_dict = Counter(dict1.values())\n    \n    # Sort the dictionary based on the values\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: count_dict[x[1]]))\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n\n    # Counter object to count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n\n    # Sort the counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Sort the dictionary by value\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_dict)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # convert the dictionary to a Counter object\n    counter = Counter(dict1)\n\n    # sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n\n    # convert the sorted Counter object back to a dictionary\n    result = dict(sorted_counter)\n\n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n\n    # Find the sum of the smallest and largest values\n    return nums[0] + nums[1]"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    \n    # Find the sum of the largest and smallest values\n    largest = nums[0]\n    smallest = nums[-1]\n    result = largest + smallest\n    \n    return result"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum value in the array\n    max_val = max(nums)\n    # find the minimum value in the array\n    min_val = min(nums)\n    # return the sum of the maximum and minimum value\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    \n    min_num = nums[0]\n    max_num = nums[0]\n    \n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if len(nums) < 2:\n        return None\n\n    # Find the largest and smallest values in the array\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    # Calculate the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase, and False otherwise.\n    '''\n    for char in string:\n        if char.isupper():\n            return False\n    return True"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is all lowercase or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are lowercase, False otherwise.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = r'\\b[a-z]+\\b'\n\n    # use re.sub() function to replace lowercase substrings with empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    # Define the regex pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z][a-z0-9]*\\b')\n\n    # Remove all substrings that match the pattern from the string\n    string = pattern.sub('', string)\n\n    # Return the modified string\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # find all lowercase substrings in the given string\n    lower_substrings = re.findall('[a-z]+', str1)\n    \n    # iterate over the substrings and remove them from the string\n    for substring in lower_substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function takes a string as input and returns a modified string with all lowercase substrings removed.\n    \"\"\"\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n\n    # Use the regular expression pattern to find all lowercase substrings in the string\n    matches = re.findall(pattern, string)\n\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n\n    # Return the modified string with all lowercase substrings removed\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the string\n    str1 = re.sub(r'(?i)[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to match lowercase substrings and split the string into list\n    substrings = re.findall(r'[a-z]+', string)\n    # Create a set to store unique lowercase substrings\n    unique_substrings = set(substrings)\n    # Convert set back to list and join into a string\n    result = ''.join(unique_substrings)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    lowercase_pattern = re.compile(r'[a-z]+')\n    cleaned_string = lowercase_pattern.sub('', string)\n    return cleaned_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    This function removes all lowercase substrings from a given string.\n    \"\"\"\n    pattern = r'\\b[a-z]+\\b'  # pattern to match lowercase substrings\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function takes a string as input and removes all lowercase substrings from it.\n    '''\n    str1 = re.sub(r'[a-z]', '', str1)\n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # To check if the input is an integer or not\n    if not isinstance(n, int):\n        return \"The input is not an integer.\"\n    else:\n        # To check if the number is positive or not\n        if n < 0:\n            return \"The input is a negative number.\"\n        else:\n            # To find the first digit of a given number\n            first_digit = n % 10\n            # To return the first digit\n            return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Using string method to find the first digit\n    first_digit = str(n)[0]\n    # Returning the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Check if the input is a positive integer\n    if type(n)!= int or n < 0:\n        print(\"Error: Input should be a positive integer.\")\n        return None\n    else:\n        # Convert the input number to a string\n        str_n = str(n)\n        # Return the first character of the string\n        return str_n[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to string\n    str_num = str(n)\n    # get the first digit of the string\n    first_digit = str_num[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    This function takes a number as an argument and returns its first digit.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string to get its digits\n    num_str = str(n)\n    \n    # get the first digit of the string\n    first_digit = num_str[0]\n    \n    # convert the first digit to an integer and return it\n    return int(first_digit)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the given number to a string\n    num_str = str(n)\n    # extract the first digit from the string\n    first_digit = num_str[0]\n    # return the first digit as an integer\n    return int(first_digit)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and returns a new list containing only the odd integers.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0: # checks if the number is odd using modulo operator\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    diff = sum_cubes - sum_natural\n\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # function to calculate the sum of cubes of first n natural numbers\n    def sum_of_cubes(n):\n        sum = 0\n        for i in range(n):\n            sum += i*i*i\n        return sum\n\n    # function to calculate the sum of first n natural numbers\n    def sum_of_natural_numbers(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n\n    # calculate the difference between the sums of cubes and natural numbers\n    result = sum_of_cubes(n) - sum_of_natural_numbers(n)\n\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # initializing the sum of cubes of first n natural numbers and sum of first n natural numbers\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    \n    # calculating the sum of cubes of first n natural numbers\n    for i in range(n):\n        sum_of_cubes += i**3\n    \n    # calculating the sum of first n natural numbers\n    for i in range(n):\n        sum_of_natural_numbers += i\n    \n    # finding the difference between sum of cubes and sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural_numbers\n    \n    # printing the difference\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is:\", difference)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        \"\"\"\n        Function to calculate the sum of cubes of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i ** 3\n        return sum\n    \n    # function to calculate the sum of the first n natural numbers\n    def sum_natural(n):\n        \"\"\"\n        Function to calculate the sum of the first n natural numbers.\n        \"\"\"\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    # calculating the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    sum_cubes_sum_natural = sum_cubes(n) - sum_natural(n)\n    \n    # returning the difference\n    return sum_cubes_sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    first_n_cubes = sum([i**3 for i in range(1, n+1)])\n    first_n = sum(range(1, n+1))\n    return first_n_cubes - first_n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes_sum = sum(i**3 for i in range(1, n+1))\n    natural_sum = sum(range(1, n+1))\n    return cubes_sum - natural_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # sum of the cubes of the first n natural numbers\n    cubes = n * (n + 1) * (2 * n + 1) / 6\n    \n    # sum of the first n natural numbers\n    sum_of_first_n = n * (n + 1) // 2\n    \n    # difference between the two sums\n    difference = abs(cubes - sum_of_first_n)\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_natural = sum(range(1, n+1))\n    difference = sum_of_cubes - sum_of_natural\n    return difference\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        xor_sum = 0\n        for j in range(i,N):\n            xor_sum ^= A[j]\n            if xor_sum % 2!= 0:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    count = 0\n\n    for i in range(N):\n        xor = A[i] ^ A[N-i-1]\n        if xor % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes in an array A of size N and returns the number of odd pairs in the array.\n    '''\n    odd_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                odd_count += 1\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes an array A of N integers and returns the count of pairs whose xor value is odd.\n    \"\"\"\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through each pair of elements\n    for i in range(N):\n        for j in range(i+1, N):\n            # XOR the elements and check if the result is odd\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N-1):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N-1) : \n        for j in range(i+2,N) : \n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1 : \n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor%2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A and an integer N as input.\n    It returns the number of odd pairs in the list A.\n    \n    The xor operation is used to calculate the xor value of a pair. \n    If the xor value is odd, then it is an odd pair.\n    \"\"\"\n\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(i, N):\n            xor ^= A[j]\n        if xor % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        new_string += chr(ord(char.lower()) + (26 - (ord(char.lower()) - ord('a')) % 26))\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([x.swapcase() if x.isalpha() else x for x in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([char.upper() if char.islower() else char.lower() for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    diff = abs(n1 - n2)\n    total = 0\n    \n    while diff > 0:\n        digit = diff % 10\n        total += digit ** 2\n        diff = diff // 10\n        \n    return total"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n    \n    # initialize the sum of differences\n    diff_sum = 0\n    \n    # iterate over each digit in both numbers\n    for i in range(max(len(num1), len(num2))):\n        diff = abs(num1[i] - num2[i])\n        diff_sum += diff\n    \n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    num1 = str(n1)\n    num2 = str(n2)\n    distance = 0\n    for i in range(len(num1)):\n        distance += abs(int(num1[i]) - int(num2[i]))\n    return distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of their digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two lists of digits\n    digit_diff = [(n1_digits[i] - n2_digits[i]) for i in range(len(n1_digits))]\n\n    # Calculate the sum of the per-digit differences\n    sum_diff = sum(digit_diff)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Create lists to store each digit of each number\n    num1_digits = [int(d) for d in str(n1)]\n    num2_digits = [int(d) for d in str(n2)]\n\n    # Find the distance between the numbers by comparing each digit of both numbers\n    digit_distance = 0\n    for i in range(len(num1_digits)):\n        digit_distance += abs(num1_digits[i] - num2_digits[i])\n\n    return digit_distance"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    \"\"\"\n    # create an empty list to store the per-digit difference\n    digit_diff = []\n    # loop through each digit in n1 and n2\n    for i in range(10):\n        # calculate the difference between each digit in n1 and n2\n        digit_diff.append(abs(n1 % 10 - n2 % 10))\n        # shift the integer by 1 to get the next digit\n        n1 //= 10\n        n2 //= 10\n    # return the sum of the per-digit difference\n    return sum(digit_diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    n1_digits = [int(digit) for digit in str(n1)]\n    n2_digits = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the per-digit difference\n    per_digit_diff = sum(abs(n1_digit - n2_digit) for n1_digit, n2_digit in zip(n1_digits, n2_digits))\n\n    # Return the sum of the per-digit difference\n    return per_digit_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    # Get the number of digits in n1 and n2\n    num_digits = len(str(n1))\n    \n    # Initialize a variable to store the sum of per-digit differences\n    sum_diff = 0\n    \n    # Loop through each digit in n1 and n2 and calculate the difference\n    for i in range(num_digits):\n        diff = n1 % 10 - n2 % 10\n        sum_diff += abs(diff)\n        n1 //= 10\n        n2 //= 10\n        \n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to strings\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Initialize the sum\n    sum_diff = 0\n    # Loop through each digit in n1 and n2\n    for i in range(len(n1_str)):\n        # Convert the digit to integers\n        digit_n1 = int(n1_str[i])\n        digit_n2 = int(n2_str[i])\n        # Calculate the difference\n        diff = abs(digit_n1 - digit_n2)\n        # Add the difference to the sum\n        sum_diff += diff\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        d1 = n1 // 10 ** i % 10\n        d2 = n2 // 10 ** i % 10\n        diff += abs(d1 - d2)\n    return diff"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    max_ending_here = 0\n    for i in range(size):\n        current_sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], current_sum)\n        max_sum = max(max_sum, max_ending_here)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the maximum sum of a subarray of size size in the given list a.\n    \"\"\"\n    if size > len(a):\n        return None\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate over the list\n    for i in range(len(a) - size + 1):\n        # Add each element of the subarray to the current sum\n        for j in range(size):\n            current_sum += a[i+j]\n\n        # Update the maximum sum if the current sum is larger than the previous maximum sum\n        max_sum = max(max_sum, current_sum)\n\n        # Reset the current sum to zero at the end of each subarray\n        current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n        else:\n            if current_sum < 0:\n                current_sum = 0\n            elif current_sum > max_sum:\n                max_sum = current_sum\n                start = i\n                current_sum = 0\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n\n    max_sum = a[0]\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_ending_here = 0\n\n    for i in range(size):\n        curr_sum += a[i]\n        max_ending_here = max(max_ending_here + a[i], curr_sum)\n        max_sum = max(max_sum, max_ending_here)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if i > 0:\n            curr_sum -= a[i-size]\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize variables to keep track of the maximum sum and its start index\n    max_sum = float('-inf')\n    start_index = 0\n\n    # Iterate through the list and calculate the sum of the sublists\n    for i in range(size, len(a)):\n        current_sum = a[i] + max_sum\n\n        # If the current sum is greater than the maximum sum, update the maximum sum and its start index\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    # Return the maximum sum and its start index\n    return max_sum, start_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    if size > len(a):\n        size = len(a)\n\n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Traverse through the list and add the current element to the sum\n    for i in range(size):\n        curr_sum += a[i]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if curr_sum < 0:\n            curr_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine both tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Use set() to remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n    # Sort the unique list in ascending order\n    unique_list.sort()\n    # Print the sorted unique list\n    print(unique_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # concatenate the two tuples\n    union_tup = test_tup1 + test_tup2\n    # remove duplicates from the union tuple\n    union_tup = list(set(union_tup))\n    # sort the union tuple in ascending order\n    union_tup.sort()\n    # print the union tuple\n    print(union_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a set of all elements in the two tuples\n    all_elements = set(test_tup1 + test_tup2)\n    \n    # Convert the set back to a sorted list\n    union = sorted(list(all_elements))\n    \n    # Output the sorted union\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using the set() function to convert the tuples into sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Using the union() method to find the union of the sets\n    union_set = set1.union(set2)\n    \n    # Using the sorted() function to sort the union set in ascending order and store it in a list\n    sorted_list = sorted(union_set)\n    \n    # Using the print() function to output the sorted union list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Check if the input tuples are of same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The input tuples should have same length\")\n        return\n    \n    # Create an empty set to store the unique elements of the input tuples\n    unique_set = set()\n    \n    # Add elements of the first tuple to the set\n    for elem in test_tup1:\n        unique_set.add(elem)\n    \n    # Add elements of the second tuple to the set\n    for elem in test_tup2:\n        unique_set.add(elem)\n    \n    # Convert the set to a list and sort the list\n    sorted_list = sorted(list(unique_set))\n    \n    # Print the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_set = set(union_list)\n    sorted_union_list = sorted(union_set)\n    return sorted_union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # find the union of the two tuples by adding their elements\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set back to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    # output the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = test_tup1.union(test_tup2)\n    sorted_union = sorted(union_set)\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert the tuples to lists to make operations easier\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n\n    # Find the union of the two lists\n    union_list = list1 + list2\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Convert the sorted list back to a tuple\n    union_tup = tuple(union_list)\n\n    # Return the sorted union tuple\n    return union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two lists of tuples\n    union_list = list(set(test_tup1 + test_tup2))\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    max_length = 1\n    current_length = 1\n\n    for i in range(3, n+1):\n        if lst[i-1] == lst[i-2]:\n            current_length += 1\n        else:\n            current_length = 1\n\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists in a given list of lists.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 1\n    \n    # Loop through the list\n    for i in range(len(lst)):\n        # Check if the current element is smaller than the previous element\n        if lst[i] < lst[i-1]:\n            # If it is, update the current length and reset the max length if necessary\n            current_length += 1\n            if current_length > max_length:\n                max_length = current_length\n        # If the current element is not smaller, reset the current length to 1\n        else:\n            current_length = 1\n    \n    # Return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the maximum length of any sublist.\n    '''\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    longest_length = 1\n    current_length = 1\n\n    # Iterate over each element in the list\n    for i in range(1, len(lst)):\n\n        # If the current element is the same as the next element, increment the current length\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            # If the current length is greater than the longest length, update the longest length\n            if current_length > longest_length:\n                longest_length = current_length\n            # Reset the current length\n            current_length = 1\n\n    # If the current length is greater than the longest length, update the longest length\n    if current_length > longest_length:\n        longest_length = current_length\n\n    # Return the longest length\n    return longest_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    lengths = []\n    for i in range(len(lst)):\n        sublist = lst[i]\n        for j in range(i, len(lst)):\n            sublist += lst[j]\n            lengths.append(len(sublist))\n        max_length = max(max_length, max(lengths))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n        current_length += 1\n        # if the current element is equal to the next element, increment the current length\n        if lst[i] == lst[i+1]:\n            current_length += 1\n        # if the current length is greater than the maximum length, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    \n    for num in lst:\n        if num == lst[-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n            \n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            length = 1\n        else:\n            if lst[i] > lst[i-1]:\n                length += 1\n            else:\n                length = 1\n    return length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    values = re.findall(pattern, text)\n    return values\n\ntext = \"The quick brown fox jumped over the lazy dog.\"\nvalues = extract_values(text)\nprint(values)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")([^\\\"]+)(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r\"(?<=')\\w+\\b|(?<=\\\")\\w+\\b\") # finds all words between single or double quotes\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n\n    # Define a regular expression pattern for matching values between quotation marks\n    pattern = r'(?<=\")\\w+(?:(?<!\\\\)\"|(?<=\\\\)\".)*(?=\\\\\")'\n\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # Combine the matches into a single string and return it\n    return ''.join(matches)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quoted values\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and return the values as a list\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(?:(?!\\1).)*?(?=\\1)'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'(?<!\\\\)\"(.*?)\"')\n    return [match.group(1) for match in pattern.finditer(text)]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\\\".*?\\\"' # matches any string between quotes\n    matches = re.findall(pattern, text) # finds all matches of pattern in text\n    return matches\n\ntext = \"This is a string with a value between double quotes: \\\"Hello, World!\\\"\"\nvalues = extract_values(text)\nprint(values) # Output: ['Hello, World!']"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The number of pairs of elements in the list.\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize variables to store the count and the sum of the pairs\n    count = 0\n    current_sum = 0\n    # Iterate over the sorted array\n    for i in range(n - 1):\n        # If the current element is equal to the next element, update the count and the sum of the pairs\n        if arr[i] == arr[i+1]:\n            count += 1\n            current_sum += arr[i] + arr[i+1]\n    # Return the count of the possible unordered pairs and the sum of the pairs\n    return count, current_sum"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # Initialize a counter to keep track of the number of pairs\n    count = 0\n\n    # Iterate through the dictionary and count the number of pairs\n    for i in freq:\n        for j in freq:\n            if i!= j:\n                count += freq[i] * freq[j]\n\n    # Return the count of pairs\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    # initialize count to 0\n    count = 0\n\n    # loop through all possible pairs of indices\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the elements at i and j are different\n            if arr[i]!= arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of characters in the string.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # initialize an empty list to store the characters of the string\n    characters = []\n\n    # iterate through each character in the string\n    for char in word:\n        # add the character to the list of characters\n        characters.append(char)\n\n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n\n    # Initialize an empty list to store the characters\n    char_list = []\n\n    # Loop through each character in the string\n    for char in word:\n        # Append the character to the list\n        char_list.append(char)\n\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Define an empty list to store characters\n    characters = []\n\n    # Iterate over each character in the string\n    for char in word:\n        # Append each character to the list\n        characters.append(char)\n\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    This function takes a string as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert it back to an integer to get the sum of its digits\n    return int(str(n).replace(' ', ''))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a string and then split it into a list of characters\n    digits_list = list(str(n))\n    # initialize a variable to store the sum of the digits\n    total_sum = 0\n    # iterate through the list of characters and add the numeric value of each character to the total sum\n    for digit in digits_list:\n        total_sum += int(digit)\n    # return the total sum of the digits\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through each digit of the number and add it to the sum variable\n    while n > 0:\n        sum += n % 10\n        # remove the last digit of the number and repeat the process\n        n = n // 10\n    # return the final sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    sum = 0\n    while n > 0:\n        digit = n % 10  # get the last digit of the number\n        sum += digit  # add the digit to the sum\n        n //= 10  # remove the last digit from the number\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit\n        n = n // 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    n = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through the digits of the integer and add them to the sum\n    for digit in n:\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string to get its digits\n    digits = str(n)\n    # initialize a variable to store the sum of the digits\n    sum_of_digits = 0\n    # iterate over each digit in the string and add it to the sum\n    for digit in digits:\n        sum_of_digits += int(digit)\n    # return the sum of the digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(lst):\n    '''\n    Check whether a given list is sorted or not.\n    '''\n    n = len(lst)\n    for i in range(n-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) <= 1:\n        return True\n    \n    # check if the first and last element are the same\n    if list1[0] == list1[-1]:\n        return False\n    \n    # check if the list is sorted\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is already sorted\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return True\n    \n    # check if the list contains only one element\n    if len(list1) == 1:\n        return True\n    \n    # check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is sorted in ascending order\n    if sorted(list1) == list1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist using the sort() method\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list of lists\n    for sublist in list1:\n        # sort the sublist using the built-in sort function\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to remove duplicates\n    unique_nums = set(nums)\n    # convert the set back to a list\n    result = list(unique_nums)\n    # return the result\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # create a set to store unique numbers\n    unique_set = set()\n    \n    # iterate through each list in the list of lists and add each unique number to the set\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in unique_set:\n                unique_set.add(nums[i][j])\n    \n    # convert the set back to a list and return it\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n\n    # Iterate through each list in the nums parameter\n    for num_list in nums:\n        # Iterate through each number in the current list\n        for num in num_list:\n            # If the current number is not already in the dictionary, add it\n            if num not in unique_nums:\n                unique_nums[num] = True\n\n    # Convert the dictionary back to a list and return it\n    return list(unique_nums.keys())"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    unique_product = 1\n    for num in unique_numbers:\n        unique_product *= num\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function calculates the product of the unique numbers in a given list.\n\n    Parameters:\n    list_data (list): A list of integers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n    \"\"\"\n\n    unique_nums = list(set(list_data)) # get unique numbers\n    product = 1 # initialize product to 1\n    for num in unique_nums: # iterate over unique numbers\n        product *= num # multiply product by each number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = list(set(list_data))\n    prod = 1\n    for num in unique_nums:\n        prod *= num\n    return prod"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set of unique numbers from the list\n    unique_nums = set(list_data)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # Find unique numbers in the list\n    product = 1\n    for num in unique_numbers:\n        product *= num  # Multiply each unique number with the product so far\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    \n    for num in unique_list:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = list(set(list_data)) # find the unique numbers in the list\n    product = 1 # set the product to 1 initially\n    for num in unique_nums: # loop through the unique numbers\n        product *= num # multiply the current product by the unique number\n    return product # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set to store the unique numbers in the list\n    unique_numbers = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)  # create a set to store the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number  # multiply the product by each unique number\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*pi*r*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Computes the surface area of a cylinder with a given radius r and height h.\n\n    Args:\n    r (float): the radius of the cylinder.\n    h (float): the height of the cylinder.\n\n    Returns:\n    float: the surface area of the cylinder, expressed in square units.\n    \"\"\"\n    # calculate the surface area using the formula:\n    # A = 2*pi*r^2 + 2*pi*h*r\n    # where pi = 3.14159\n    import math\n    pi = math.pi\n    area = 2 * pi * r**2 + 2 * pi * h * r\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder using the formula:\n    # A = \u03c0r^2 + 2\u03c0rh\n    surface_area = 3.14159 * r**2 + 2 * 3.14159 * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*(r**2 + h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h + 2 * 3.14 * r * r"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h + 2*math.pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*r + 2*3.14*r*h + 2*3.14*(r*r+h*h)"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    def binary_search(arr, subarr):\n        '''\n        Perform a binary search on the list to find the index of the first occurrence of the subarray.\n        '''\n        left, right = 0, len(arr) - len(subarr)\n\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid:mid+len(subarr)] == subarr:\n                return mid\n            elif arr[mid:mid+len(subarr)] < subarr:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n        return -1\n\n    # Find the first occurrence of the subarray in the list\n    index = binary_search(A, B)\n\n    # If the subarray is found, check if it is a sublist of the entire list\n    if index!= -1:\n        return (index == 0 or A[index-1] == B[0]) and (index + len(B) == len(A) or A[index+len(B)] == B[-1])\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    This function takes two lists A and B and returns True if A is a sublist of B else False.\n    '''\n    # Find the length of the shorter list\n    n = len(A)\n    m = len(B)\n    # Check if the second list is a sublist of the first list\n    if m > n:\n        return False\n    # Initialize a variable to store the index of the first element of B in A\n    i = 0\n    # Initialize a variable to store the number of elements that match in both lists\n    count = 0\n    # Traverse through the first list\n    while i < n:\n        # If the current element of B is present in the first list, increment the count and move the index of B in A\n        if A[i] == B[count]:\n            count += 1\n            i += 1\n        # If the count becomes greater than or equal to m, return True\n        elif count >= m:\n            return True\n    # If the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(lst, sub_lst):\n    \"\"\"\n    Check whether a list is a sublist of another list or not.\n\n    Parameters:\n    lst (list): The main list.\n    sub_lst (list): The sublist to be checked.\n\n    Returns:\n    bool: True if sub_lst is a sublist of lst, False otherwise.\n    \"\"\"\n    if len(lst) < len(sub_lst):\n        return False\n    for i in range(len(lst) - len(sub_lst) + 1):\n        if lst[i:i+len(sub_lst)] == sub_lst:\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A == B:\n        return True\n\n    if len(A) < len(B):\n        return False\n\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not A:\n        return True\n    \n    for i in range(len(B)):\n        if B[i] in A:\n            A.remove(B[i])\n        else:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    # If B is sublist of A, then return True\n    if B in A:\n        return True\n    # Else, check if B is sublist of any element of A\n    for i in range(len(A)):\n        if B in A[:i]:\n            return True\n    # If B is not sublist of any element of A, then return False\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)): \n        if B[i] in A: \n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if A is a sublist of B\n    for i in range(len(B)):\n        if B[i:i+len(A)] == A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #if the list is empty return true\n    if len(A) == 0:\n        return True\n    \n    #initialize variables\n    i = 0\n    j = 0\n    \n    #iterate through A and check if it is a sublist of B\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n            \n    #if the sublist is found return True\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    num = n\n    while num > 0:\n        factorial *= num % 10\n        num //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    \n    # Initialize a variable to store the last digit\n    last_digit = 0\n    \n    # Iterate over each character in the string\n    for char in num_str:\n        # Convert the character to an integer\n        char_int = int(char)\n        \n        # Multiply the last digit with the current character\n        last_digit = last_digit * char_int\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # loop through the factorial of n\n    for i in range(1, n+1):\n        # find the last digit of the factorial\n        temp_last_digit = 0\n        while i:\n            temp_last_digit += i % 10\n            i //= 10\n        \n        # check if the last digit is greater than the last_digit variable\n        if temp_last_digit > last_digit:\n            last_digit = temp_last_digit\n    \n    # return the last_digit variable\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Find the factorial of the given number\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n        \n    # Extract the last digit of the factorial and return it\n    last_digit = int(str(fact)[-1])\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    #take the last digit of factorial of n\n    last_digit = int(str(n)[-1])\n\n    #return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize the result variable\n    result = 0\n    # Find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    # Extract the last digit of the factorial\n    result = int(factorial % 10)\n    # Return the result\n    return result"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    #convert the number to string\n    n = str(n)\n\n    #find the length of the string\n    length = len(n)\n\n    #find the last digit of the factorial\n    factorial = 1\n    for i in range(1, length+1):\n        factorial *= int(n[-i])\n\n    #find the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Combine all three lists into one big list\n    interleaved_list = list1 + list2 + list3\n    # Convert the interleaved list into a string and return it\n    return ''.join(interleaved_list)"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    for i in range(len(list1)):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Create an empty list to store the final interleaved list\n    interleaved_list = []\n\n    # Find the length of each list and store it in a variable\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n\n    # Loop through each item in each list and append it to the interleaved_list\n    for i in range(max(length1, length2, length3)):\n        # Check if the i-th item exists in list1, list2 and list3\n        if i < length1:\n            interleaved_list.append(list1[i])\n        elif i < length1 + length2:\n            interleaved_list.append(list2[i - length1])\n        else:\n            interleaved_list.append(list3[i - length1 - length2])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError('All lists should have the same length.')\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Iterate through each list\n    for i in range(len(list1)):\n        # Append the i-th element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the i-th element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the i-th element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = j = 0\n    while i < len(list1) and j < len(list2) and j < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[j])\n        i += 1\n        j += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(min(len(list1), len(list2), len(list3))):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Set up a list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Loop through each element of the first tuple\n    for element in test_tup1:\n        # If the element is not in the second tuple, add it to the list\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Compare each element of the two tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # If the elements are different, add them to the dissimilar list\n        if element1!= element2:\n            dissimilar_list.append(element1)\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.append(element)\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through the tuples to find the dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # If the elements are not equal, add them to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # iterate through each element of the first tuple\n    for item1 in test_tup1:\n        # check if the element exists in the second tuple\n        if item1 not in test_tup2:\n            # if not, add the element to a set to remove duplicates later\n            dissimilar_set.add(item1)\n    # convert the set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar.append(element)\n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar.append(element)\n    return dissimilar"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            if even_fnc(elem):\n                even_list.extend(elem)\n            else:\n                even_list.append(elem)\n        else:\n            even_list.append(elem)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_lst = []\n    for sub_lst in test_tuple:\n        for item in sub_lst:\n            if even_fnc(item):\n                even_lst.append(item)\n    return even_lst"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return [even_fnc(elem) for elem in test_tuple if len(elem) % 2 == 0]\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        '''Helper function to check if a value is even.'''\n        return x % 2 == 0\n\n    def remove_uneven(x):\n        '''Helper function to remove uneven elements.'''\n        return even_fnc(x)\n\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, (list, tuple)):\n            new_item = remove_uneven(item)\n            if isinstance(new_item, list):\n                new_item = tuple(new_item)\n        elif isinstance(item, set):\n            new_item = remove_uneven(item)\n            if isinstance(new_item, set):\n                new_item = tuple(new_item)\n        elif isinstance(item, frozenset):\n            new_item = remove_uneven(item)\n            if isinstance(new_item, frozenset):\n                new_item = tuple(new_item)\n        elif isinstance(item, dict):\n            new_item = {k: remove_uneven(v) for k, v in item.items()}\n        else:\n            new_item = remove_uneven(item)\n        new_tuple.append(new_item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_list.append(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                new_list.append(item)\n    return new_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            new_tuple.append(even_fnc(i))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for elem in test_tuple:\n        if not even_fnc(elem):\n            result.append(elem)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_list.append(even_fnc(item))\n        elif isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        elif isinstance(item, set):\n            even_list.append(even_fnc(list(item)))\n        else:\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def is_even(item):\n        return item % 2 == 0\n    \n    def flatten(lst):\n        return [item for sublist in lst for item in sublist]\n    \n    def is_valid_list(lst):\n        return all(isinstance(item, list) for item in lst)\n    \n    def process_nested_tuple(nested_tuple, even_fnc):\n        new_tuple = []\n        for sub_tuple in flatten(nested_tuple):\n            if is_valid_list(sub_tuple):\n                new_tuple.extend(even_nested_tuple(sub_tuple, even_fnc))\n            else:\n                new_tuple.append(even_fnc(sub_tuple))\n        return new_tuple\n    \n    def even_nested_tuple(nested_tuple, even_fnc):\n        return process_nested_tuple(nested_tuple, even_fnc)\n    \n    return process_nested_tuple(test_tuple, even_fnc)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(base, height):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    surface_area = (base * height) + (base * (height - 1)) + ((2 * base) * (height - 2))\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the base area using Heron's formula\n    base_area = (b*b)/2\n    \n    # Calculate the height area using Heron's formula\n    height_area = (s*s)/2\n    \n    # Add the two areas and return the result\n    return base_area + height_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the total area of the pyramid\n    area = b*s/2\n    \n    # calculate the perimeter of the pyramid\n    perimeter = 4*b + 4*s\n    \n    # calculate the surface area of the pyramid\n    surface_area = area + perimeter\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the surface area of the base of the pyramid using Heron's formula\n    base_area = 0.5 * b * b\n    \n    # Calculate the surface area of the top of the pyramid using Heron's formula\n    top_area = 0.5 * b * s\n    \n    # Calculate the total surface area of the pyramid\n    total_area = base_area + top_area\n    \n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*b*s/3\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * b * s + 6 * (b * b + s * s) + 2 * b"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2*b*s) + (2*b*s) + (4*b**2*s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = ((b**2) * (s**2)) + (2 * (b**2) * (s * ((b**2) - (s**2))))\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)/2\n    surface_area = 6*area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)*2 # base * height\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    # Initialize a list to store the catalan numbers\n    catalan_list = []\n\n    # Calculate the first two catalan numbers\n    catalan_list.append(1)\n    catalan_list.append(1)\n\n    # Calculate the remaining catalan numbers recursively\n    for i in range(2, n+1):\n        catalan_list.append(4*catalan_list[i-1] - 2*catalan_list[i-2])\n\n    # Return the nth catalan number\n    return catalan_list[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    # Initialize Catalan numbers\n    catalan = [1]\n    for i in range(1, n+1):\n        # Calculate the Catalan number\n        catalan.append(4*i*(n-i+1)/(i+1))\n\n    return catalan[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * num) * catalan_number(num - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return catalan_number(n-1) * (1-2*n+n**2)/n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*n+1) * catalan_number(n-1) / (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return (2 * n - 1) * catalan_number(n - 1) / n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number, which is defined as the number of\n    ways to place n discs of different sizes on a number line.\n    \"\"\"\n    # Initialize the catalan numbers for 0 and 1\n    catalan = [1, 1]\n    # Calculate the catalan numbers for the remaining values of n\n    for i in range(2, n+1):\n        catalan.append(2*catalan[i-1] - catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    '''\n    This function returns the nth catalan number using the formula:\n    C(n) = (n+1)!/(1!*2!*...*(n-1)!)\n    '''\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n        result /= (i-1)\n    return result"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    The Catalan number Cn is defined as the sum of the binomial coefficients CnC0 and CnC1 for n >= 2.\n    \"\"\"\n    if n < 2:\n        return 0\n    else:\n        return sum(binom(n, i) * binom(n-1, i) * (2*i+1) for i in range(n))\n\ndef binom(n, k):\n    \"\"\"\n    Returns the binomial coefficient Cnk.\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    else:\n        numer = 1\n        denom = 1\n        for i in range(k, 0, -1):\n            numer *= i\n            denom *= (n-i)\n        return numer // denom"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(ly|ll|le)\\b'\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    # Iterate over the matches and append the positions to the list\n    for match in matches:\n        start, end = match.span()\n        adverb_positions.append((start, end))\n    # Return the list of positions of the adverbs\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b([a-zA-Z]+ly)\\b'\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(f\"{match.start()}: {match.group(0)}\")\n        print(f\"Match: {match.group(1)}\")\n        print(f\"Position: {match.start()}\")\n    return None\n\ntext = \"Apple is looking at buying a new iPhone 12. It's the latest and shiniest phone in the market.\"\nfind_adverbs(text)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(ly|lys|lyse|lyst)\\b', text)\n    for i, adverb in enumerate(adverbs):\n        print(f'{adverb} found at index {i}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    return adverbs, [m.start() for m in re.finditer(r'\\bly\\b', text)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'(?<=ly)\\w+$', re.IGNORECASE)\n    # find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    # store the positions of the matches\n    positions = [m.start() for m in matches]\n    # return a list of tuples containing the adverb and its position in the text\n    return [(m, pos) for m, pos in zip(matches, positions) if m[-1].lower() == 'ly']"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(ly)\\b'\n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Create a list to store the positions of the adverbs found\n    positions = []\n    # Iterate over the matches and append the positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    # Return the list of positions of the adverbs found\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b(\\w+)(ly)\\b'\n    # Use the regular expression pattern to find all matches in the given text\n    matches = re.findall(pattern, text)\n    # Loop through the matches and print the positions and words of each adverb\n    for index, match in enumerate(matches):\n        print(f\"Position: {index+1}, Word: {match[0]}, Adverb: {match[1]}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all occurrences of the pattern \".*ly$\" in the given text\n    matches = re.findall(r'(.*ly)$', text)\n\n    # Initialize a list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate over the matches and append them to the adverbs list\n    for match in matches:\n        adverbs.append((match, text.find(match)))\n\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regular expression pattern for adverbs ending with ly\n    pattern = r'(?<=[^a-zA-Z])\\bly\\b'\n    \n    # find all matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    \n    # create an empty list to store the positions of the adverbs ending with ly\n    positions = []\n    \n    # iterate over all matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.find(match))\n    \n    # return the positions list as a tuple\n    return tuple(positions)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap to store the top n expensive items\n    min_heap = []\n    # Iterate through the items and add them to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n        # If the heap size exceeds n, remove the smallest item\n        while len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # Return the top n expensive items as a list\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Find the n most expensive items in a dataset.\n\n    Parameters:\n    items (list): A list of tuples, where each tuple contains an item and its price.\n    n (int): The number of items to find.\n\n    Returns:\n    list: A list of the n most expensive items in the dataset.\n    '''\n    heap = []\n    for item, price in items:\n        heapq.heappush(heap, (price, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item for price, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap of the n items with smallest price as the root\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # return the n most expensive items in the heap\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n representing the number of most expensive items to be returned.\n    It returns the n most expensive items in the dataset.\n    '''\n    # Create a heap (priority queue) to store the items and their prices\n    heap = []\n    for item, price in items:\n        # Add the item and its price to the heap\n        heapq.heappush(heap, (-price, item))\n        # If the heap has more than n elements, remove the smallest element\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Return the n most expensive items in the dataset\n    return [item for _, item in heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap with a maximum size of n\n    min_heap = []\n    heapq.heapify(min_heap)\n    \n    # Iterate through the items and add each to the min heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n    \n    # Create a new list to store the n most expensive items\n    n_expensive = []\n    \n    # Iterate through the min heap and add the n most expensive items to the new list\n    for _ in range(n):\n        n_expensive.append(heapq.heappop(min_heap))\n    \n    return n_expensive"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a minheap of size n to store the n most expensive items\n    min_heap = []\n    for item in items:\n        # If heap is full, remove the item with the lowest cost\n        if len(min_heap) == n:\n            heapq.heappop(min_heap)\n        # Add the item to the heap\n        heapq.heappush(min_heap, -item)\n    # Convert the heap to a list and return the n most expensive items\n    return [-heapq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappushpop(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # create a min heap of size n to store the n most expensive items\n    min_heap = []\n\n    # iterate through the items and add each item to the min heap if its price is less than or equal to the minimum price in the heap\n    for item in items:\n        if not min_heap or item[1] <= min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n\n        # if the heap size is greater than n, remove the smallest item from the heap\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # return the n most expensive items as a list of tuples (item_name, price)\n    return [(item[0], item[1]) for item in min_heap]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    split_list = l[:n] + [l[n]] + l[n+1:]\n    # Add the first part to the end of the list\n    l = split_list + l[:n]\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"List is too short to split at the nth element.\"\n    else:\n        mid = n // 2\n        return l[:mid] + l[mid:] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Create a new empty list to store the first part of the list\n    first_part = []\n    \n    # Loop through the list from the start to the nth eelment\n    for i in range(n):\n        # Append the element to the first part of the list\n        first_part.append(l[i])\n    \n    # Append the remaining elements to the end of the list\n    for i in range(n, len(l)):\n        l.append(l[i])\n    \n    # Concatenate the first part with the rest of the list\n    full_list = first_part + l\n    \n    # Return the new list\n    return full_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    else:\n        for i in range(n-1):\n            l.pop()\n        l.append(l.pop(0))\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n >= len(l):\n        print(\"Invalid input. Please enter a valid index.\")\n    else:\n        # Split the list at the nth element\n        new_list = l[:n] + [l[n]] + l[n+1:]\n        # Add the first part of the list to the end\n        result = l[:n] + new_list\n        print(\"The new list is:\", result)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        return \"Invalid index\"\n    else:\n        return [l[n:], l[:n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = n // 2\n    left_half = l[:mid]\n    right_half = l[mid:]\n    return right_half + left_half"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # split the list at nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # add part1 to part2\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if len(l) > n:\n        mid = n // 2\n        left_list = l[:mid]\n        right_list = l[mid:]\n        return left_list + right_list\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    This function takes a list and converts it into a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    # converting a list to a tuple using a tuple constructor\n    tup = tuple(listx)\n    return tup"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0  # special case for single-element list\n\n    min_val = min(nums)\n    max_val = max(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Empty List\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n            \n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the difference between the largest and smallest values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least two elements to find the difference between largest and smallest.\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    diff = max_num - min_num\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return None\n    else:\n        return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # get the maximum and minimum values from the list\n    max_num = max(nums)\n    min_num = min(nums)\n    # return the difference between the two values\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b + 1):\n        for j in range(i):\n            if i ** 2 == j ** 2:\n                perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        j = i*i\n        while j <= b:\n            squares.append(j)\n            j += i\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all numbers between a and b and check if they are perfect squares\n    for num in range(a, b+1):\n        # check if the square root of the number is an integer\n        if round(num ** 0.5) ** 2 == num:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize variables\n    n = 0\n    perfect_squares = []\n\n    # Loop through the numbers between a and b\n    while a <= b:\n        # If the number is a perfect square, add it to the list of perfect squares\n        if a ** 2 == b:\n            perfect_squares.append(a)\n        # Increment n and move on to the next number\n        n += 1\n        a += 1\n\n    # Return the list of perfect squares\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num_digits = len(str(i))\n        square = i * i\n        print(f\"{i} square is {square}\")\n        if num_digits == 1:\n            print(\"One digit perfect squares are:\")\n            for j in range(1, square+1):\n                square_with_j = i * i + j * j\n                if square_with_j == square:\n                    print(f\"Square {square_with_j} is {i}^2 + {j}^2\")\n        elif num_digits == 2:\n            print(\"Two digit perfect squares are:\")\n            for j in range(1, square+1):\n                square_with_j = i * i + j * j\n                if square_with_j == square:\n                    print(f\"Square {square_with_j} is {i}^2 + {j}^2\")\n                    square_with_j_plus_j = i * i + (j+1) * (j+1)\n                    if square_with_j_plus_j == square:\n                        print(f\"Square {square_with_j_plus_j} is {i}^2 + ({j+1})^2\")\n"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function finds all the perfect squares between a and b.\n    \n    Args:\n        a (int): The lower limit of the range.\n        b (int): The upper limit of the range.\n        \n    Returns:\n        A list of perfect squares between a and b.\n    \"\"\"\n    squares = []\n    for num in range(a, b+1):\n        if num == int(num**0.5)**2:\n            squares.append(num)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Loop through all the numbers between a and b and check if they are perfect squares\n    for num in range(a, b+1):\n        # Use the math module to check if the number is a perfect square\n        if num**0.5 == int(num**0.5):\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    while b > a:\n        b = (a + b) // 2\n        count += 1\n    return count"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # iterate from a to b (inclusive)\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        if num**0.5**2 == num:\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = abs(x)\n    phi = cmath.phase(x)\n    theta = cmath.acos(y / r)\n    if y < 0:\n        theta = 2 * cmath.pi - theta\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function converts polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    This function takes the radius r and angle theta as input and returns the\n    rectangular coordinates (x,y) as a tuple.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the polar coordinates of a point and returns the rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.atan2(y, x)\n    \n    return r, theta"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Args:\n        r (float): The magnitude of the complex number.\n        theta (complex): The angle of the complex number.\n\n    Returns:\n        tuple: A tuple containing the rectangular coordinates (x, y).\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle of the circle in radians.\n\n    Returns:\n    x (float): The horizontal component of the rectangular coordinates.\n    y (float): The vertical component of the rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n        r: float, radius of the point\n        theta: complex, angle of the point in radians\n\n    Returns:\n        x: float, x-coordinate of the point\n        y: float, y-coordinate of the point\n\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List must have at least two elements to swap.\")\n        return\n\n    # Swap the first and last elements in the list\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    # Print the new list\n    print(\"New List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return newList\n\n    last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = last\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_last_element = newList[1]\n    newList[1] = newList[-1]\n    newList[-1] = first_last_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    # use slicing to swap the first and last elements of the list\n    newList[:] = newList[::-1]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # Take the length of the list and check if it's greater than 1\n    if len(newList) > 1:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # Print the modified list\n        print(newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return None\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] # interchanging first and last elements\n    return newList # returning the updated list"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n\n    # Initialize variables\n    sum_of_products = 0\n    current_product = 1\n\n    # Calculate the sum of product of consecutive co-efficients\n    for i in range(1, k + 1):\n        current_product *= n - i + 1\n        sum_of_products += current_product\n\n    return sum_of_products"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < 0 or k < 0:\n        return \"Invalid input\"\n\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n, k):\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n\n    # Compute the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # Compute the factorial of n - k\n    factorial_n_minus_k = 1\n    for i in range(1, n-k+1):\n        factorial_n_minus_k *= i\n\n    # Compute the binomial coefficient using the formula: nCr = n! / (r! * (n-r)!)\n    nCr = factorial_n_minus_k // (factorial_k * factorial_n_minus_k)\n\n    # Compute the product of consecutive binomial coefficients using the formula: nCr * (n - k + 1) / k\n    product_of_consecutive_coeffs = nCr * (n - k + 1) // k\n\n    # Add the product of consecutive binomial coefficients to the sum\n    sum += product_of_consecutive_coeffs\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (i * (n - i + 1)) // k\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function takes two parameters, n and k, which are integers representing the values of n and k respectively.\n    It returns the sum of the product of consecutive binomial co-efficients of size k up to size n.\n\n    The binomial co-efficients are defined as:\n\n    C(n,k) = (n choose k) / k!\n\n    and the product of consecutive binomial co-efficients is defined as:\n\n    P(n) = C(n,0) * C(n,1) *... * C(n,k)\n\n    To find the sum of P(n), we need to sum up all the P(i) values where 0 <= i <= n.\n\n    The formula for the sum of the product of consecutive binomial co-efficients is:\n\n    S = P(n) - P(n-k)\n\n    where S is the sum of P(i) values up to size n.\n    '''\n\n    # Calculate the product of consecutive binomial co-efficients of size k up to size n\n    product = 1\n    for i in range(k,n+1):\n        product *= i\n\n    # Calculate the sum of the product of consecutive binomial co-efficients up to size n\n    sum_product = 0\n    for i in range(n+1):\n        sum_product += product\n\n    # Calculate the sum of P(i) values up to size n\n    sum_P = 0\n    for i in range(n+1):\n        sum_P += binomial_Coeff(n,i)\n\n    # Calculate the sum of P(i) values up to size n minus the sum of P(i) values up to size n minus k\n    sum_S = sum_P - sum_product\n\n    return sum_S"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    factorial_n = 1\n    factorial_k = 1\n    factorial_n_minus_k = 1\n\n    # Calculate factorial of n\n    for i in range(1, n+1):\n        factorial_n *= i\n\n    # Calculate factorial of k\n    for i in range(1, k+1):\n        factorial_k *= i\n\n    # Calculate factorial of (n-k)\n    for i in range(1, n-k+1):\n        factorial_n_minus_k *= i\n\n    # Calculate sum of product of consecutive binomial co-efficients\n    sum_product_coeff = factorial_n_minus_k // (factorial_k * factorial_n_minus_k)\n\n    return sum_product_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += ((1/i) * ((k+1)*((n-k+1)*i)/((n-1)*k)))**k\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return binomial_Coeff(n-1,k-1) + k*binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(\\d+)$', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$')\n    match = pattern.match(ip)\n    if match:\n        groups = match.groups()\n        if groups[0] == '0':\n            groups[0] = ''\n        if groups[1] == '0':\n            groups[1] = ''\n        if groups[2] == '0':\n            groups[2] = ''\n        if groups[3] == '0':\n            groups[3] = ''\n        return '.'.join(groups)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Regular expression pattern to match IPv4 addresses\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n\n    # Check if the input matches the pattern\n    if re.match(pattern, ip):\n        # Split the input string into parts separated by dots\n        parts = ip.split('.')\n\n        # Remove leading zeroes from each part\n        parts = [part.lstrip('0') for part in parts]\n\n        # Join the parts back into a string with dots\n        ip = '.'.join(parts)\n\n        # Check if the input string has been modified\n        if ip == ip.lower():\n            # Return the modified string if there are no more leading zeroes\n            return ip\n        else:\n            # Return the original string if there are still leading zeroes\n            return ip\n    else:\n        # Return the original string if it does not match the pattern\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.\\d+', '', ip)\n        return ip\n    else:\n        return 'Invalid IP address format.'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    \"\"\"\n    Write a function to remove leading zeroes from an ip address.\n    \"\"\"\n    ip = re.sub('^0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip = re.sub(r'^(0+)', '', ip)\n        return ip\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0|\\d+\\.0\\.0\\.0$', '', ip)\n    ip = re.sub(r'^\\d+\\.0\\.0$|^0\\.0\\.0\\.0$', '', ip)\n    ip = re.sub(r'^\\d+\\.0$|^0\\.0\\.0$|^0\\.0$|^0$', '', ip)\n    ip = re.sub(r'^0\\.0\\.0\\.0\\.0\\.0\\.0\\.0$', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Use regular expressions to match leading zeroes in the ip address\n    match = re.search(r'^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)', ip)\n    # If there are no matches, return the original ip address\n    if match is None:\n        return ip\n    # Extract the octets and remove the leading zeroes\n    octets = match.groups()\n    octets = [str(int(octet) - int(octet[0])) for octet in octets]\n    # Join the octets with dots and return the result\n    return '.'.join(octets)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each octet\n    ip_octets = re.split(r'\\.|\\:', ip)\n    for i in range(len(ip_octets)):\n        ip_octets[i] = re.sub(r'^\\b0+\\b', '', ip_octets[i])\n    # Join the remaining octets with colons\n    new_ip = '.'.join(ip_octets)\n    return new_ip"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        print(\"List must have at least two elements.\")\n        return None\n\n    even_index = None\n    odd_index = None\n\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n\n    if even_index is None or odd_index is None:\n        print(\"List must contain even and odd numbers.\")\n        return None\n\n    return list1[even_index] - list1[odd_index]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = -1\n    first_odd = -1\n    for num in list1:\n        if num % 2 == 0:\n            if first_even == -1:\n                first_even = num\n        else:\n            if first_odd == -1:\n                first_odd = num\n    if first_even == -1 or first_odd == -1:\n        return None\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    diff = even_count - odd_count\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = [x for x in list1 if x % 2 == 0][0]\n    odd_num = [x for x in list1 if x % 2!= 0][0]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0 and odd_num % 2 == 1:\n        return even_num - odd_num\n    else:\n        return 'The list does not contain an even and odd number'\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = None\n    first_odd = None\n    \n    # iterate over the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n            \n    # if there are no even or odd numbers in the list, return None\n    if first_even is None or first_odd is None:\n        return None\n    \n    # calculate the difference between the first even and first odd numbers and return it\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as an input and returns the difference of the first even and first odd number of the list.\n    If the list has an even number of elements, then the even element is used as the first even number.\n    If the list has an odd number of elements, then the odd element is used as the first odd number.\n    '''\n    if len(list1) % 2 == 0:\n        first_even = list1[0]\n        first_odd = list1[1]\n    else:\n        first_odd = list1[0]\n        first_even = list1[1]\n    \n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    \n    return even_num - odd_num"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    count = 0\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    i = j = 0\n\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            if str1[i] == '1':\n                i += 1\n                j -= 1\n            else:\n                j += 1\n                count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2):\n    # Convert both strings to lists of 0s and 1s\n    str1 = list(str1)\n    str2 = list(str2)\n    # Sort the lists\n    str1.sort()\n    str2.sort()\n    # Count the number of swaps required to convert str1 to str2\n    i = 0\n    j = 0\n    swaps = 0\n    while i < len(str1) and j < len(str2):\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        elif str1[i] < str2[j]:\n            swaps += len(str1) - i\n            i += 1\n        else:\n            swaps += len(str2) - j\n            j += 1\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\n    :param str1: first binary number represented as a string\n    :type str1: str\n    :param str2: second binary number represented as a string\n    :type str2: str\n    :return: minimum number of swaps required to convert the two binary numbers\n    :rtype: int\n    \"\"\"\n\n    # convert the binary strings to lists of integers\n    num1 = [int(x) for x in str1[::-1]]\n    num2 = [int(x) for x in str2[::-1]]\n\n    # convert lists of integers to lists of binary strings\n    binary1 = [str(x) for x in num1]\n    binary2 = [str(x) for x in num2]\n\n    # initialize variables to keep track of swaps made\n    swaps_made = 0\n\n    # iterate through the binary strings in reverse order\n    for i in range(len(binary1)):\n\n        # if the two numbers are not equal, increment the swap count and swap the numbers\n        if binary1[i]!= binary2[i]:\n            swaps_made += 1\n            binary1[i], binary2[i] = binary2[i], binary1[i]\n\n    # return the minimum number of swaps made\n    return swaps_made"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the given binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Calculate the difference between the two numbers\n    diff = num1 - num2\n    \n    # Initialize the minimum number of swaps to 0\n    min_swaps = 0\n    \n    # Iterate through each bit of the binary number\n    for i in range(32):\n        \n        # If the bit in the first binary string is 1 and the bit in the second binary string is 0,\n        # then we need to swap the bits\n        if ((num1 >> i) & 1) == 1 and ((num2 >> i) & 1) == 0:\n            min_swaps += 1\n            \n        # If the bit in the first binary string is 0 and the bit in the second binary string is 1,\n        # then we don't need to swap the bits\n        elif ((num1 >> i) & 1) == 0 and ((num2 >> i) & 1) == 1:\n            pass\n            \n        # If the bit in the first binary string is 0 and the bit in the second binary string is 0,\n        # then we don't need to swap the bits\n        else:\n            continue\n            \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    if len(str1)!= len(str2):\n        return \"Both strings should have the same length.\"\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # Swap the bits\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            swaps += 1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # convert the binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n    \n    # calculate the xor of the two integers\n    xor = int1 ^ int2\n    \n    # calculate the number of bits in the xor\n    bits = bin(xor)[2:].count('1')\n    \n    # calculate the number of swaps required\n    swaps = bits // 2\n    \n    # if there are an odd number of bits in the xor, add one swap\n    if bits % 2 == 1:\n        swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    swaps = 0\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            # Check if swapping at current position is possible\n            if (str1[i] == '1' and str2[i] == '0') or (str1[i] == '0' and str2[i] == '1'):\n                # Swap the characters and check if the swapped string is equal to the other string\n                if str1[i] == str1[i-1] and str2[i] == str2[i-1]:\n                    swaps += 1\n                    # Swap the characters if swapping at current position is not possible\n                    str1[i], str2[i] = str2[i], str1[i]\n                elif str1[i] == str1[i-1] and str2[i]!= str2[i-1]:\n                    str1[i], str2[i] = str2[i], str1[i]\n                elif str1[i]!= str1[i-1] and str2[i] == str2[i-1]:\n                    str1[i], str2[i] = str2[i], str1[i]\n                elif str1[i]!= str1[i-1] and str2[i]!= str2[i-1]:\n                    # If swapping at current position is not possible, break the loop\n                    break\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the input strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables to store the swaps required\n    swaps = 0\n    carry = 0\n\n    # Iterate through the digits of the binary numbers\n    for i in range(max(len(str1), len(str2))):\n        # Calculate the current sum and carry\n        current_sum = (num1 >> i) & 1 + (num2 >> i) & 1 + carry\n\n        # If the current sum is greater than 1, add 1 and set carry to 1\n        if current_sum > 1:\n            swaps += 1\n            carry = 1\n        else:\n            carry = 0\n\n    # If the final carry is 1, add 1 to the swaps\n    if carry == 1:\n        swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # create a dictionary to store frequency of each character in str1 and str2\n    freq1 = {}\n    freq2 = {}\n    for char in str1:\n        freq1[char] = freq1.get(char, 0) + 1\n    for char in str2:\n        freq2[char] = freq2.get(char, 0) + 1\n    \n    # iterate through each character in str1 and str2\n    swaps = 0\n    for char in str1:\n        # if the frequency of the character in str2 is greater than the frequency of the character in str1, swap the characters\n        if char in freq2 and freq2[char] > freq1.get(char, 0):\n            freq1[char], freq2[char] = freq2[char], freq1[char]\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    # Convert the input strings to lists of bits\n    bits1 = [int(bit) for bit in str1]\n    bits2 = [int(bit) for bit in str2]\n\n    # Find the length of the binary strings\n    n = len(bits1)\n\n    # Initialize the minimum number of swaps as infinity\n    min_swaps = float('inf')\n\n    # Find all possible swaps\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the bits are swapped\n            if bits1[i]!= bits2[j]:\n                # Swap the bits and find the minimum number of swaps\n                new_bits1 = bits1.copy()\n                new_bits1[i], new_bits1[j] = new_bits1[j], new_bits1[i]\n                new_bits2 = bits2.copy()\n                new_bits2[i], new_bits2[j] = new_bits2[j], new_bits2[i]\n                min_swaps = min(min_swaps, min_Swaps(str(new_bits1), str(new_bits2)))\n\n    # Return the minimum number of swaps\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tuple in tuple_list:\n        total_size += sys.getsizeof(tuple)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_in_bytes = 0\n    for element in tuple_list:\n        size_in_bytes += sys.getsizeof(element)\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Initialize the size of the tuple\n    size = 0\n    # Loop through the tuple elements\n    for item in tuple_list:\n        # Add the size of the element to the total size\n        size += sys.getsizeof(item)\n    # Return the total size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Initialize pointers for arr1 and arr2\n    i = 0\n    j = 0\n\n    # Initialize variables to store the elements\n    kth_element = None\n\n    # Loop until k elements are found\n    while k > 0:\n        # If arr1 is smaller, append the next element from arr1\n        if i == len(arr1):\n            kth_element = arr2[j]\n            break\n        # If arr2 is smaller, append the next element from arr2\n        elif j == len(arr2):\n            kth_element = arr1[i]\n            break\n        # Compare the first elements of both arrays\n        elif arr1[i] <= arr2[j]:\n            kth_element = arr1[i]\n            i += 1\n        else:\n            kth_element = arr2[j]\n            j += 1\n\n        # Decrement k to account for the current element\n        k -= 1\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) < k or len(arr2) < k:\n        return None\n    \n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    return arr1[i - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Get the length of the arrays\n    n1, n2 = len(arr1), len(arr2)\n\n    # Initialize the pointers\n    i, j = 0, 0\n\n    # Initialize the result\n    result = None\n\n    # Find the kth element\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if result is None or arr1[i] < result:\n                result = arr1[i]\n                k -= 1\n            i += 1\n        else:\n            if result is None or arr2[j] < result:\n                result = arr2[j]\n                k -= 1\n            j += 1\n\n    # If the result is still None, the kth element is not in either array\n    if result is None:\n        raise ValueError(\"kth element is not in either array\")\n\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:  # if arr1[i] == arr2[j]:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum of the two arrays\n    if n1 < n2:\n        min_arr = arr1\n        max_arr = arr2\n    else:\n        min_arr = arr2\n        max_arr = arr1\n\n    # Initialize the index of the first element in the smallest array\n    i = 0\n\n    # Initialize the index of the second element in the second array\n    j = 0\n\n    # Initialize the index of the kth element in the sorted array\n    k_index = 0\n\n    # Loop until we find the kth element\n    while k_index < k:\n        # If the index of the first element in the smallest array is less than the index of the second element in the second array,\n        # then move the index of the first element in the smallest array to the index of the second element in the second array\n        if i < n1 and j < n2 and min_arr[i] <= max_arr[j]:\n            k_index += 1\n            i += 1\n        # If the index of the second element in the second array is less than the index of the kth element in the sorted array,\n        # then move the index of the second element in the second array to the index of the kth element in the sorted array\n        else:\n            i += 1\n            j += 1\n\n    # Return the kth element\n    return max_arr[k_index-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = k = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr1[i], arr1[j] = arr1[j], arr1[i]\n            i += 1\n            k += 1\n        else:\n            arr2[j], arr2[i] = arr2[i], arr2[j]\n            j += 1\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if k == 1:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize two pointers to the left of the arrays\n    i = j = 0\n    # Initialize a variable to store the kth element\n    kth_element = None\n\n    # Compare the elements of the two arrays\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if kth_element is None or arr1[i] < kth_element:\n                kth_element = arr1[i]\n                i += 1\n        elif arr1[i] > arr2[j]:\n            if kth_element is None or arr2[j] < kth_element:\n                kth_element = arr2[j]\n                j += 1\n        else:\n            kth_element = arr1[i]\n            i += 1\n            j += 1\n\n    # If the kth element is not found, return None\n    if kth_element is None:\n        return None\n\n    # If k is greater than the length of the first array, return the kth element from the second array\n    if k > len(arr1):\n        return kth_element\n\n    # If k is less than or equal to the length of the first array, return the kth element from the first array\n    if k <= len(arr1):\n        return kth_element"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # convert the number to a string\n    num_str = str(number)\n    # initialize the sum variable\n    sum = 0\n    # loop through each digit of the number\n    for digit in num_str:\n        # convert the digit to an integer and add it to the sum\n        sum += int(digit) ** len(num_str)\n    # return True if the number is armstrong, False otherwise\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a number is an Armstrong number or not.\n    \"\"\"\n    if n < 10:\n        return False\n    else:\n        temp = n\n        sum = 0\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return n == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    Check whether a number is Armstrong or not.\n    \"\"\"\n    # Initialize a counter\n    count = 0\n    \n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n    \n    # Iterate through the reversed number and add up each digit raised to the power of the length of the string\n    for digit in reversed_number:\n        count += int(digit)**len(reversed_number)\n    \n    # Return whether the original number is equal to the sum of the digits raised to the power of the length of the string\n    return number == count"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    temp = number\n    count = 0\n    while temp > 0:\n        digit = temp % 10\n        count += digit ** 3\n        temp //= 10\n    return number == count"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    number_str = str(number)\n    # Convert the given number to a string\n    num_length = len(number_str)\n    # Get the length of the string representation of the number\n\n    power = 0\n    # Initialize a variable to store the power of the digit\n\n    for digit in number_str:\n        # Convert each digit in the string representation of the number to an integer\n        digit = int(digit)\n        # Convert the digit to an integer\n\n        power += digit ** num_length\n        # Calculate the power of the digit raised to the power of the length of its string representation\n\n    if power == number:\n        # If the sum of the powers of each digit raised to the power of the length of its string representation\n        # is equal to the original number, then the number is an Armstrong number\n        return True\n    else:\n        # If the sum of the powers of each digit raised to the power of the length of its string representation\n        # is not equal to the original number, then the number is not an Armstrong number\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong(n):\n    '''\n    This function checks whether the given number is an Armstrong number or not.\n    '''\n    if n < 10:\n        return False\n    else:\n        s = 0\n        while n > 0:\n            digit = n % 10\n            s += digit**3\n            n //= 10\n        return s == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_armstrong(n):\n    num_str = str(n)\n    total = 0\n    power = len(num_str)\n    \n    for i in num_str:\n        total += int(i) ** power\n    \n    return total == n\n\ndef is_armstrong_number(n):\n    return is_armstrong(n) and str(n) == str(n)\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_armstrong_number(num):\n        print(num, \"is an Armstrong number.\")\n    else:\n        print(num, \"is not an Armstrong number.\")\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp_number = number\n        while temp_number > 0:\n            digit = temp_number % 10\n            sum += digit ** 3\n            temp_number //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Check if the number is less than 10\n    if number < 10:\n        return False\n    \n    # Find the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    while number > 0:\n        digit = number % 10\n        sum_of_cubes += digit**3\n        number //= 10\n    \n    # Check if the sum of cubes is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    # take the number to be checked as input\n    num = n\n    \n    # initialize a counter variable\n    count = 0\n    \n    # loop through each digit of the number and add its power to the counter\n    while num > 0:\n        digit = num % 10\n        count += digit**len(str(digit))\n        num //= 10\n        \n    # return True if the number is an armstrong number else False\n    return count == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of the first n natural numbers.\n    \"\"\"\n    # Initialize variables\n    total = 0\n    count = 0\n    # Loop through numbers until n is reached\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    # Calculate sum and average\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    print(\"Sum:\", total)\n    print(\"Average:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    avg = total / count\n    print(\"Sum: \", total)\n    print(\"Average: \", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables to keep track of the sum and average\n    total = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        # add each natural number to the total\n        total += i\n        # increment the count of numbers\n        count += 1\n    # calculate the average by dividing the total by the count\n    average = total / count\n    # return the sum and average as a tuple\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    '''\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    '''\n    # initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # add each number to the sum\n        sum += i\n        # increment the count\n        count += 1\n\n    # calculate the average\n    average = sum/count\n\n    # return the result\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_val = 0\n    for i in range(number):\n        sum_val += i\n    avg = sum_val / number\n    print(\"Sum: \", sum_val)\n    print(\"Average: \", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(number):\n        sum_list.append(i+1)\n    total = sum(sum_list)\n    average = total/number\n    return sum_list, total, average\n\nprint(sum_average(10))"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function takes a number as input and returns True if it is even, else False.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(\"The number is even.\")\n    else:\n        print(\"The number is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is odd')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate over each character in the string and update its frequency in the dictionary\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n\n    # Iterate over the dictionary and find the first repeated character\n    for char, freq_count in freq.items():\n        if freq_count > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    # loop through each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    # Iterate through each character in the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through each character in the string and check if the frequency of that character is greater than 1\n    for char in str1:\n        if freq[char] > 1:\n            # If a character has a frequency greater than 1, return that character as the first repeated character\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return \"There is no repeated character in the given string.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Convert string to set to get unique characters\n    set1 = set(str1)\n\n    # Check if set has only one character\n    if len(set1) == 1:\n        return None\n\n    # Find first repeated character in the set\n    for char in set1:\n        if str1.count(char) > 1:\n            return char\n\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_list = []\n    for char in str1:\n        if char in char_list:\n            return char\n        else:\n            char_list.append(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n    \n    # find the first repeated character\n    first_repeating_char = None\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            first_repeating_char = char\n            break\n    \n    return first_repeating_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_list = []\n    for char in str1:\n        if char in char_list:\n            return char\n        char_list.append(char)\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, i//2+1)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    i = 1\n\n    while i <= n:\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        i += 1\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if i == 1 or i == 2:\n            lucid.append(i)\n        elif i % 2 == 0:\n            j = 3\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 2\n            if j * j > i:\n                lucid.append(i)\n        else:\n            j = 5\n            while j * j <= i:\n                if i % j == 0:\n                    break\n                j += 6\n            if j * j > i:\n                lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n+1):\n        if i**2 == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for num in range(2, n+1):\n        if num == 2 or num == 3:\n            lucid_numbers.append(num)\n        elif num % 2 == 0:\n            for i in range(3, num, 2):\n                if i % 6 == 5:\n                    lucid_numbers.append(i)\n                    break\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for num in range(2, n+1):\n        is_lucid = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            ludic_numbers.append(num)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = [1]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            lucid.append(i)\n        else:\n            lucid.append(i + 1)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # initialize empty list to store lucid numbers\n    lucid_numbers = []\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a lucid number\n        lucid = True\n        # loop through all numbers from 1 to the square root of the number\n        for j in range(1, int(i**0.5)+1):\n            # if the number is divisible by the square root, it is not a lucid number\n            if i % j == 0:\n                lucid = False\n                break\n        # if the number is a lucid number, append it to the list\n        if lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if all(int(digit) >= 6 for digit in str(i)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = \"\"\n        for i in range(len(word)-1, -1, -1):\n            reversed_word += word[i]\n        reversed_words.append(reversed_word)\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into a list of words\n    words.reverse()  # reverse the order of the words\n    return''.join(words)  # join the words back into a string with spaces\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word[::-1])\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into a list of words\n    words = s.split()\n    \n    # reverse each word and join them back into a string\n    reversed_words =''.join(word[::-1] for word in words)\n    \n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_word = word[::-1]\n        reversed_words.append(reversed_word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back together\n    reversed_words = \" \".join(word[::-1] for word in words)\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string by spaces\n    words = s.split()\n    # reverse each word in the list and join them back into a string with spaces\n    return''.join(reversed(words))"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # remove all spaces and split the string into a list of words\n    words = s.split()\n    # reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if num is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a given number is prime or not\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    A function to check if a given number is a prime number or not\n    \"\"\"\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            if is_prime(i) and is_prime(num//i):\n                return True\n    return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    This function checks if the given integer is a prime number.\n    \"\"\"\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2 or 3\n    elif num == 2 or num == 3:\n        return True\n    # check if the number is divisible by any number between 2 and the square root of the number\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nnum = int(input(\"Enter a number: \"))\nif is_prime(num):\n    print(num, \"is a prime number.\")\nelse:\n    print(num, \"is not a prime number.\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(limit):\n    primes = []\n    sieve = [True] * (limit + 1)\n    for i in range(2, limit + 1):\n        if sieve[i]:\n            primes.append(i)\n            for j in range(i*i, limit + 1, i):\n                sieve[j] = False\n    return primes"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Returns True if the given number is a prime number, False otherwise.\n    \"\"\"\n    return is_prime(num)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # use re.search() function to search for pattern in text\n    match = re.search(pattern, text)\n\n    # if pattern is found, return matching substring, start index, and end index\n    if match:\n        return match.group(), match.start(), match.end()\n\n    # otherwise, return None for all three values\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()\n    return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function will find all matches of a regular expression pattern in a given string. \n    The function returns a list of tuples containing the matched text, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    results = []\n    for match in matches:\n        results.append((match.group(), match.start(), match.end()))\n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        literal = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"{literal} found at index {start}-{end}\")\n        return literal, start, end\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # compile the pattern into a regular expression object\n    pattern_obj = re.compile(pattern)\n    # search the text for the pattern and return the matches\n    matches = pattern_obj.findall(text)\n    if matches:\n        # return the first match\n        return matches[0]\n    else:\n        # return None if no matches are found\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    This function takes a string and a regex pattern and returns a list of tuples containing the matching substrings, their start index, and end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    result = []\n    for match in matches:\n        start, end = match.span()\n        literal = text[start:end]\n        result.append((literal, start, end))\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.search() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If no matches are found, return None\n    if not matches:\n        return None\n    \n    # Loop through the matches and find the longest literal string\n    longest_literal = None\n    for match in matches:\n        if len(match) > len(longest_literal):\n            longest_literal = match\n    \n    # Return the longest literal string and its start and end indices\n    start_index = text.find(longest_literal)\n    end_index = start_index + len(longest_literal)\n    return longest_literal, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        return matches[0], 0, len(matches[0])"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function takes a text string and a regex pattern as input and returns a tuple containing the matching substring, a start index, and an end index. If no match is found, the function returns None.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    b = 1\n    for i in range(n):\n        b = (1/(1-b))*(b**2)\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 10\n    elif n == 4:\n        return 50\n    else:\n        count = 1\n        bell = 2\n        while count < n:\n            bell += 2 * bell\n            count += 1\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n\n    # Initialize the first term of the series\n    first_term = 1\n\n    # Initialize the sum of bell numbers\n    sum_bell = 1\n\n    # Iterate through the series to get the nth bell number\n    for i in range(1, n+1):\n        # Calculate the value of the current bell number\n        current_bell = first_term + sum_bell\n        # Update the first term of the series and the sum of bell numbers\n        first_term = sum_bell\n        sum_bell = current_bell\n\n    # Return the value of the nth bell number\n    return first_term"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Calculate bell number using binomial theorem\n    bell = 1\n    for i in range(n+1):\n        bell *= ((2*i)/(i+1))\n    return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_array = [0, 1]  # Initailizing the first two elements of the array\n\n    for i in range(2, n+1): \n        bell_array.append(bell_array[i-1] + bell_array[i-2])  # Updating the last element of the array\n\n    return bell_array[n]  # Returning the nth element of the array"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Bell number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * (2 * n - 1)) // (n - 1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    elif n % 2 == 0:\n        return 2 * bell_Number(n//2)\n    \n    else:\n        return 2 * bell_Number((n-1)//2) + 1\n        \n"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    if k < len(list1):\n        return list1[:k] + list1[k+1:]\n    else:\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the kth element from a given list.\n    \"\"\"\n    if k < 1 or k > len(lst):\n        raise ValueError(\"k must be between 1 and the length of the list.\")\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    for i in range(len(list1) - k):\n        list1[i] = list1[i+k]\n    list1 = list1[:len(list1)-k]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1  # Find the index of the kth element\n    list1.pop(k)  # Remove the kth element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L\n    if k >= n or k < 1:\n        return list1\n    else:\n        list1 = list1[:k-1] + list1[k:]\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list with the elements from list1 except for the k'th element\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L-1:\n            new_list.append(list1[i])\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1[:k] + list1[k+1:]\n    return list2"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if max_val < row[N-1]:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Checking if the input is a valid list of lists\n    if not isinstance(test_list, list) or not all(isinstance(x, list) for x in test_list):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Checking if the N is valid\n    if N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"N must be a valid index.\")\n\n    # Finding the max value of then'th column\n    max_val = float('-inf')\n    for row in test_list:\n        max_val = max(max_val, row[N])\n\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Initialize the max value\n    max_value = None\n    \n    # Iterate over each row in the list\n    for row in test_list:\n        # Get the value of then'th column\n        column_value = row[N-1]\n        \n        # If the value is greater than the current max value, update the max value\n        if column_value > max_value:\n            max_value = column_value\n    \n    # Return the max value\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = 0\n        for j in range(len(test_list[i])):\n            if j == N-1:\n                if test_list[i][j] > max_val:\n                    max_val = test_list[i][j]\n        return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(test_list)):\n        # get the nth column of the row as a list\n        col = [row[N-1] for row in test_list]\n        # find the maximum value in the column\n        max_val = max(col)\n        # assign the max value to the nth column of the row\n        for j in range(len(test_list)):\n            if j == N-1:\n                test_list[i][j] = max_val\n    # return the modified matrix\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N:\n            continue\n        if max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N:\n            max_val = test_list[i][N]\n        elif max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort()\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if max_val < test_list[i][N-1]:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        result.append([first, second])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        merged = [sublist[0], sublist[1]]\n        result.append(merged)\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):  \n    merged_lst = []  \n    for sublist in lst:  \n        merged_lst.append([sublist[0], sublist[1]])  \n    return merged_lst  "
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sub_lst in lst:\n        merged_lst.append([sub_lst[0], sub_lst[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for item in test_list:\n        if isinstance(item, tuple):\n            for i in item:\n                sum_list.append(i)\n        elif isinstance(item, int):\n            sum_list.append(item)\n    return sum(sum_list)"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    This function takes a tuple list as input and returns the cumulative sum of all the values in the list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for value in test_list:\n        cum_sum += value\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Create a variable to store the cumulative sum of all the values in the list\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n\n        # Check if the current value is present in the list. If it is, add it to the cumulative sum.\n        if test_list[i] in test_list:\n            cumulative_sum += test_list[i]\n\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    # iterate through the list of tuples\n    for item in test_list:\n        # add the value to the cumulative sum\n        cum_sum += item[1]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    total_sum = 0\n    for item in test_list:\n        total_sum += item\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1):\n            sum += test_list[i][j]\n    return sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for item in nums:\n        if isinstance(item, tuple):\n            total = 0\n            count = 0\n            for num in item:\n                total += num\n                count += 1\n            average = total / count\n            result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        for n in num:\n            sum += n\n        result.append(sum/len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize an empty list to store the average values\n    averages = []\n    # loop through each tuple in the input list\n    for tup in nums:\n        # compute the average value for the current tuple\n        avg = sum(tup)/len(tup)\n        # append the average value to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = 0\n        for i in num:\n            total += i\n        result.append(total / len(num))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in nums:\n        avg = sum(i) / len(i)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for tup in nums:\n        total = 0\n        count = 0\n        for num in tup:\n            total += num\n            count += 1\n        avg = total / count\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        sum_of_nums = sum(num_tuple)\n        avg_of_num_tuple = sum_of_nums / len(num_tuple)\n        result.append(avg_of_num_tuple)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        average = sum(num) / len(num)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo operation.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the length of the two tuples is same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples should have the same length.\")\n        return None\n    \n    # Perform element wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length\")\n        return\n    \n    # perform element wise modulo\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Input tuples must be of equal length.\")\n        return\n    \n    # perform element-wise modulo operation\n    result_tup = tuple([a % b for a, b in zip(test_tup1, test_tup2)])\n    \n    # print the result tuple\n    print(\"Result: \", result_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    n = 0\n    m = steps - d\n    dp = [[0] * (steps+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, steps+1):\n            if abs(i-j) <= d:\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = 0\n    return dp[n][m]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    def jump(pos, steps):\n        if pos == (d, 0):\n            return 1\n        if pos[0] > d:\n            return 0\n        if pos[1] < 0:\n            return 0\n        if pos[0] == 0:\n            return 0\n        if steps == 0:\n            return 0\n        else:\n            return jump((pos[0], pos[1]-1), steps-1) + jump((pos[0]-1, pos[1]), steps-1)\n\n    return jump((0, 0), steps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    current_x = 0\n    current_y = 0\n    steps_taken = 0\n    jumps = 0\n\n    # Loop through steps\n    for i in range(steps):\n\n        # Move to next point\n        if current_x + 1 <= d:\n            current_x += 1\n            steps_taken += 1\n        else:\n            current_x = 0\n            current_y += 1\n            jumps += 1\n            steps_taken = 1\n\n        # If steps_taken reaches the required length, return jumps and steps_taken\n        if steps_taken == steps:\n            return jumps, steps_taken\n\n    # If no valid path is found, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Calculate the number of possible paths from (0, 0) to (d, 0)\n    num_paths = d // steps + 1\n    \n    # Initialize the number of jumps required to reach (d, 0) from origin\n    jumps = 0\n    \n    # Initialize the number of steps required to reach (d, 0) from origin\n    steps_taken = 0\n    \n    # Keep going until we reach (d, 0) from origin\n    while steps_taken < steps:\n        \n        # Calculate the number of possible paths that can be taken\n        steps_possible = d // steps_taken + 1\n        \n        # If there are more paths possible than paths taken, then take a step\n        if steps_possible > num_paths:\n            jumps += 1\n            steps_taken += steps\n            num_paths = steps_possible\n        else:\n            # Otherwise, we have reached the desired point, so return the number of jumps required\n            return jumps\n    \n    # If we have not reached the desired point, then the number of jumps required is equal to the number of steps required\n    return steps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    jumps = 0\n    for i in range(steps):\n        # if we have already reached the destination, return 0\n        if i >= d:\n            return jumps\n        # if we have not reached the destination, move one step in each direction and update jumps accordingly\n        if i + d + 1 <= steps:\n            jumps += 1\n        if i + 1 <= steps:\n            jumps += 1\n    # if we have not reached the destination, return jumps + 1\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    jumps = 0\n    current_level = 0\n    last_point = 0\n    while current_level < steps:\n        if last_point == 0:\n            last_point = current_level\n            current_level += 1\n        elif last_point == current_level:\n            current_level += 1\n        else:\n            last_point = 0\n            jumps += 1\n            current_level += 1\n        if current_level == steps:\n            return jumps\n        if current_level == d:\n            return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize the variables to store the jumps required and the current position\n    jumps = 0\n    pos = 0\n\n    # Check if the point (d, 0) is reachable or not\n    while pos < steps and pos >= 0:\n        if pos + d >= steps:\n            # If the point is not reachable, add the required jumps to the result and stop the loop\n            jumps += steps - pos\n            break\n        pos += d\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    i = 0\n    j = 0\n    while i < steps:\n        if j >= d:\n            j = 0\n            jumps += 1\n        j += 1\n        i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    j = 0  # Number of jumps required\n    i = 0  # Step count\n    count = 0  # Count of jumps required to reach d, 0 from origin\n\n    # Loop through steps\n    while i < steps:\n        # Check if (d, 0) has been reached from origin\n        if i % d == 0:\n            count += 1\n            if count == 2:\n                return j  # Return the required number of jumps if d, 0 is reached twice in a row\n            count = 0\n\n        i += 1\n        j += 1\n\n    # If (d, 0) is not reached from origin, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    rows = len(steps)\n    cols = len(steps[0])\n\n    # create a table to store the minimum number of jumps required to reach each point on the grid\n    table = [[0]*(cols+1) for i in range(rows+1)]\n\n    # fill the first row and first column with 0\n    table[0][0] = 0\n    table[0][1] = float('inf')\n\n    # fill the remaining cells in the table using dynamic programming\n    for i in range(1, rows+1):\n        for j in range(1, cols+1):\n            if i == 1 and j == 1:\n                table[i][j] = 0\n            elif i == 1 and j > 1:\n                table[i][j] = table[i][j-1]\n            elif j == 1:\n                table[i][j] = table[i-1][j]\n            else:\n                table[i][j] = min(table[i-1][j], table[i][j-1]) + steps[i-1][j-1]\n\n    # find the minimum number of jumps required to reach the desired point\n    min_jumps = table[rows][cols]\n\n    return min_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists should have the same length\")\n        return None\n    # create a new list to store the results\n    result = []\n    # iterate over the elements of the two lists\n    for i in range(len(nums1)):\n        # calculate the element-wise division of the current elements\n        result.append(nums1[i] / nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n        return\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        return \"Lists should have the same length\"\n\n    # Create a new list to store the result\n    result = []\n\n    # Divide each element of the lists\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have the same length\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = ''\n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n    if numbers:\n        return numbers + test_str.replace(numbers, '', 1)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Loop through the words\n    for i in range(len(words)):\n        # Check if the word is a number\n        if words[i].isdigit():\n            # Move the number to the end of the list\n            words.remove(words[i])\n            words.append(words[i])\n    \n    # Join the words back into a string\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # convert the string to list\n    test_list = list(test_str)\n    \n    # initialize a variable to keep track of the current position of the number\n    i = 0\n    \n    # loop through the list and move all the numbers to the end of the list\n    for num in test_list:\n        if num.isdigit():\n            # move the current number to the end of the list\n            test_list.insert(i, num)\n            i += 1\n    \n    # join the list elements to form the final string\n    final_str = ''.join(test_list)\n    \n    # return the final string\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n\n    # create a list of all the numbers in the string\n    nums = [char for char in test_str if char.isdigit()]\n\n    # sort the list of numbers in descending order\n    nums.sort(reverse=True)\n\n    # join the numbers into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [char for char in test_str if char.isdigit()]\n    return nums + ''.join([char for char in test_str if not char.isdigit()])"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    return ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty list to store numbers\n    nums = []\n\n    # Iterate over each character in the input string\n    for char in test_str:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the list of numbers\n            nums.append(char)\n\n    # Reverse the list of numbers\n    nums.reverse()\n\n    # Join the list of numbers into a string\n    result = ''.join(nums)\n\n    # Return the result\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # create a list of all the numbers in the string\n    numbers = [char for char in test_str if char.isdigit()]\n    \n    # join the numbers to the end of the string\n    result = ''.join(numbers + [char for char in test_str if not char.isdigit()])\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Remove duplicates and sort the list\n    a = sorted(list(set(a)))\n\n    # Initialize variables\n    subset_size = 1\n    prev_num = a[0]\n    current_num = 1\n    max_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        current_num = a[i]\n        if current_num % prev_num == 0:\n            subset_size += 1\n            if subset_size > max_size:\n                max_size = subset_size\n        else:\n            subset_size = 1\n\n        prev_num = current_num\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Find the largest prime factor of every number in the list\n    factors = {}\n    for num in a:\n        factors[num] = 0\n        for i in range(2, num+1):\n            if num % i == 0:\n                factors[num] += 1\n                break\n    \n    # Find the largest subset of every number with every other number in the list\n    subset_sizes = {}\n    for num1 in a:\n        subset_sizes[num1] = [0]\n        for num2 in a:\n            if num1!= num2:\n                if num1 % num2 == 0:\n                    subset_sizes[num1].append(1)\n                else:\n                    subset_sizes[num1].append(0)\n                \n    # Find the largest subset size among all pairs of numbers\n    largest_subset_size = 0\n    for num1 in a:\n        for num2 in a:\n            if num1!= num2:\n                size = 0\n                for i in range(len(subset_sizes[num1])):\n                    if subset_sizes[num1][i] == 1 and subset_sizes[num2][i] == 1:\n                        size += 1\n                if size > largest_subset_size:\n                    largest_subset_size = size\n    \n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Convert the list to a set to remove duplicates\n    a_set = set(a)\n    # Initialize an empty list to store the indices of the largest subset\n    largest_subset_indices = []\n    # Initialize a variable to store the current subset size\n    current_size = 0\n    # Initialize a variable to store the maximum subset size found so far\n    max_size = 0\n    # Loop through the indices of the list\n    for i in range(len(a_set)):\n        # Check if the next element is divisible by the i-th element in the subset\n        if a_set[i] % a_set[i-1] == 0:\n            # If it is, add it to the current subset\n            current_size += 1\n            # Check if the current subset is larger than the maximum subset found so far\n            if current_size > max_size:\n                # If it is, update the maximum subset size and its indices\n                max_size = current_size\n                largest_subset_indices = [i]\n            elif current_size == max_size:\n                # If the current subset is equal to the maximum subset size, add its index to the list of indices\n                largest_subset_indices.append(i)\n    # Return the maximum subset size\n    return max_size, largest_subset_indices"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers as input and returns the size of the largest subset of the list \n    that is divisible by every other number.\n    \"\"\"\n    # Find the maximum value in the list\n    max_value = max(a)\n    # Create a list of boolean values indicating whether each number is divisible by every other number\n    divisibility_list = [True] * (max_value + 1)\n    # Initialize a variable to keep track of the size of the largest subset\n    largest_size = 0\n    # Iterate through the list and update the divisibility list and largest size as needed\n    for num in a:\n        # Update the divisibility list to indicate whether each number is divisible by every other number\n        for i in range(1, max_value + 1):\n            if i % num == 0:\n                divisibility_list[i] = True\n        # Update the largest size if the current number is divisible by every other number and its size is greater than the current largest size\n        if divisibility_list[num] and num > largest_size:\n            largest_size = num\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables\n    n = len(a)\n    max_subset_size = 0\n    start = 0\n    end = 0\n    count = 0\n\n    # Traverse the list from left to right\n    for i in range(n):\n        # Check if the current number is divisible by the current subset size\n        if a[i] % count == 0:\n            end += 1\n\n            # Update the subset size if it is greater than current max_subset_size\n            if end - start > max_subset_size:\n                max_subset_size = end - start\n\n            # Move the start pointer to the right until the current number is not divisible by the current subset size\n            while a[i] % count == 0 and i < n - 1:\n                count += 1\n                i += 1\n                end += 1\n                max_subset_size = max(max_subset_size, end - start)\n\n        # If the current number is not divisible by the current subset size, start a new subset\n        else:\n            count += 1\n            start = i\n            end = i + 1\n\n    # Update the subset size if the end of the list is divisible by the current subset size\n    if end - start > max_subset_size:\n        max_subset_size = end - start\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # sort the list in descending order\n    a = sorted(a, reverse=True)\n\n    # initialize the variables for the maximum subset size and the maximum subset itself\n    max_size = 0\n    max_subset = []\n\n    # iterate over the list of numbers\n    for i in range(len(a)):\n        # initialize the variables for the current subset size and the current subset itself\n        subset_size = 1\n        subset = [a[i]]\n\n        # iterate over the remaining numbers in the list\n        for j in range(i+1, len(a)):\n            # check if the current number is divisible by the previous number\n            if a[j] % a[i] == 0:\n                # add the number to the subset and increment the subset size\n                subset.append(a[j])\n                subset_size += 1\n            # if the subset size is greater than the maximum subset size, update the maximum subset size and subset\n            if subset_size > max_size:\n                max_size = subset_size\n                max_subset = subset.copy()\n\n        # if the current subset size is greater than the maximum subset size, update the maximum subset size and subset\n        if subset_size > max_size:\n            max_size = subset_size\n            max_subset = subset.copy()\n\n    # return the maximum subset size and subset\n    return max_size, max_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the input list\n    max_length = 1\n    current_length = 1\n    prev_sum = a[0]\n\n    for i in range(1, len(a)):\n        current_sum = a[i] + prev_sum\n        if current_sum % 2 == 0:\n            current_length += 1\n        else:\n            current_length = 1\n        prev_sum = current_sum\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the result variable\n    result = 1\n\n    # Loop through the list and check if every pair is divisible by the current element\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            result += 1\n        else:\n            break\n\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    This function takes a list of numbers and returns the size of the largest subset of numbers such that every pair\n    of numbers in the subset are divisible.\n\n    For example, if the input list is [1, 2, 3, 4, 5], the output should be 4, since the largest subset that can be\n    formed is [1, 2, 3, 4] or [1, 3, 5].\n    \"\"\"\n\n    # Sort the input list in non-decreasing order\n    a.sort()\n\n    # Initialize variables for the current subset size and max subset size\n    subset_size = 0\n    max_subset_size = 0\n\n    # Iterate over the input list and find the size of the largest subset that is divisible by every other number\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i] % a[j] == 0:\n                subset_size += 1\n                if subset_size > max_subset_size:\n                    max_subset_size = subset_size\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    a.sort()\n    n = len(a)\n    if n < 2:\n        return 0\n    \n    i = 1\n    j = 0\n    max_size = 0\n    \n    while i < n:\n        if a[i] % a[j] == 0:\n            j = i\n            i += 1\n            while i < n and a[i] % a[j] == 0:\n                i += 1\n        elif j == 0:\n            i += 1\n        else:\n            j = i - j\n    \n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        # if n is even, take the average of the two middle elements\n        mid1 = n//2\n        mid2 = mid1\n        if arr1[mid1] > arr2[mid2]:\n            return (arr1[mid1] + arr2[mid2]) / 2\n        else:\n            return (arr2[mid1] + arr1[mid2]) / 2\n    else:\n        # if n is odd, take the middle element\n        mid1 = n//2\n        mid2 = mid1\n        if arr1[mid1] > arr2[mid2]:\n            return arr1[mid1]\n        else:\n            return arr2[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        median = (merged_list[n//2-1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n    # Find the middle element of the merged list\n    mid_idx = n // 2\n    median = merged_list[mid_idx]\n    # Find the median based on the size of the merged list\n    if n % 2 == 0:\n        # If the size of the merged list is even, return the average of the middle two elements\n        median = (median + merged_list[mid_idx - 1]) / 2\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # merge the two sorted arrays\n    merged_array = arr1 + arr2\n    \n    # sort the merged array\n    merged_array.sort()\n    \n    # get the length of the merged array\n    length = len(merged_array)\n    \n    # get the middle index of the merged array\n    middle_index = length // 2\n    \n    # if the length of the merged array is odd, return the middle element\n    if length % 2 == 1:\n        return merged_array[middle_index]\n    \n    # if the length of the merged array is even, return the average of the middle two elements\n    else:\n        return (merged_array[middle_index - 1] + merged_array[middle_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Find the median index\n    median_index = n // 2\n\n    # Return the median value\n    return sorted_list[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single sorted list\n    merged = merge(arr1, arr2)\n\n    # Sort the merged list\n    sorted_merged = merge_sort(merged)\n\n    # Find the middle element of the sorted merged list\n    mid = n // 2\n    median = sorted_merged[mid]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    arr = arr1 + arr2\n    \n    # Sort the list\n    arr.sort()\n    \n    # Calculate the median\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge two sorted lists into a single sorted list\n    merged = sorted(arr1 + arr2)\n\n    # Find the middle element of the merged list\n    mid = n // 2\n\n    # If the middle element is odd, return the middle element\n    if n % 2 == 1:\n        return merged[mid]\n    # If the middle element is even, return the average of the two middle elements\n    else:\n        return (merged[mid - 1] + merged[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        return \"The lists are not of equal size.\"\n    \n    if n > len(arr1):\n        return \"The number of elements to be selected is greater than the length of the list.\"\n    \n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the median\n    mid = n // 2\n    median = sorted(merged_list)[mid]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Combine the two sorted arrays into a single sorted array\n    sorted_arr = arr1 + arr2\n    \n    # Find the middle index of the combined array\n    mid = n // 2\n    \n    # If the array size is odd, the median is the middle element\n    if n % 2 == 1:\n        return sorted_arr[mid]\n    \n    # If the array size is even, the median is the average of the two middle elements\n    else:\n        return (sorted_arr[mid - 1] + sorted_arr[mid]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    # Initialize an empty list to store the results\n    results = []\n\n    # Loop through the numbers in the list\n    for num in nums:\n        # Calculate the nth power of the number and append it to the results list\n        results.append(num ** n)\n\n    # Return the results list\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each number in the list\n    for num in nums:\n        # Compute the nth power of the number and append to the result list\n        result.append(num ** n)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n as input and returns a list of n-th powers of each number in the input list.\n    '''\n    n_powers = []\n    for num in nums:\n        nth_power = num ** n\n        n_powers.append(nth_power)\n    return n_powers"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and converts it to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all characters in the string are uppercase, and False otherwise.\n    '''\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is in uppercase or not.\n    '''\n\n    # Convert the string to uppercase and check if it is equal to the original string\n    if string.upper() == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # defining the first and last elements of the given list\n    first_elem = newList[0]\n    last_elem = newList[-1]\n    # interchanging the first and last elements of the list\n    newList[0] = last_elem\n    newList[-1] = first_elem\n    # printing the modified list\n    print(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    # interchange the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # if the list has less than 2 elements, return the list as it is\n    if length < 2:\n        return newList\n    # get the first and last element of the list\n    first = newList[0]\n    last = newList[length-1]\n    # create a new list by interchanging the first and last element\n    newList = newList[:1] + [last] + newList[2:]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # initialize variables\n    first_element = newList[0]\n    last_element = newList[-1]\n\n    # interchange the first and last element\n    newList[0] = last_element\n    newList[-1] = first_element\n\n    # print the updated list\n    print(\"Updated list:\", newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n    else:\n        print(\"List must have more than 1 element\")\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the given list is not empty\n    if not newList: \n        return None\n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 2:\n        first = newList[0]\n        last = newList[1]\n        newList[0] = last\n        newList[1] = first\n    else:\n        print(\"List must have length of 2\")\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the area of a triangle with sides of length 2r\n    area = (math.sqrt(3)/4) * r**2\n    \n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 4 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = 0.5 * area * math.sin(math.acos(0.5)/2)\n    \n    # Calculate the area of the smallest triangle that can be inscribed in the semicircle\n    min_area = 0.5 * semi_perimeter * (1 - math.cos(math.acos(0.5)/2))**2\n    \n    return max(min_area, max_area)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    r (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle that can be inscribed in the semicircle with the given radius.\n\n    Example:\n    >>> triangle_area(1)\n    3.141592653589793\n    '''\n    \n    area = 0.5 * r ** 2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    import math\n    \n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle\n    area = 0.5*semi_perimeter*(semi_perimeter-r)*(semi_perimeter-r)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-circle radius using the formula\n    # r_semi = r * tan(pi/3)\n    r_semi = r * (1/2)\n\n    # Calculate the area of a triangle using Heron's formula\n    # area = sqrt(s * (s - a) * (s - b) * (s - c))\n    a = 0\n    b = r_semi\n    c = 0\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Calculate the area of the largest triangle\n    # which can be inscribed in the semicircle\n    largest_area = 0\n    for i in range(3):\n        for j in range(i):\n            for k in range(j):\n                # Calculate the area of the triangle\n                # that contains the semicircle\n                t = (a + b + c) / 2\n                area_t = (t * (t - a) * (t - b) * (t - c)) ** 0.5\n                # Check if the area of the triangle is greater than the current largest\n                if area_t > largest_area:\n                    largest_area = area_t\n\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # calculate the area of a triangle given its base and height\n    def triangle_area_formula(base, height):\n        s = (base + height) / 2\n        area = math.sqrt(s * (s - base) * (s - height))\n        return area\n    \n    # find the maximum area of a triangle that can be inscribed in a semicircle with the given radius\n    def max_triangle_area(max_radius):\n        # calculate the area of the largest triangle inscribed in a semicircle with radius max_radius\n        max_area = 0\n        for i in range(max_radius):\n            for j in range(i, max_radius):\n                for k in range(j, max_radius):\n                    # find the area of the current triangle using the formula\n                    area = triangle_area_formula(j, k)\n                    # update the maximum area if necessary\n                    if area > max_area:\n                        max_area = area\n        return max_area\n    \n    # calculate the area of the largest triangle that can be inscribed in a semicircle with the given radius\n    max_radius = 2 * r\n    return max_triangle_area(max_radius)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    a = b = c = r\n    # Find the largest triangle that can be inscribed in a semicircle\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if c > a:\n        c, a = a, c\n\n    # Use the formula for the area of a triangle with three sides\n    area = 0.5 * c * (a + b + c)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (math.pi * r**2) / (2 * r)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Find the semi-perimeter of the semicircle\n    s = 2 * r\n\n    # Find the height of the triangle using Heron's formula\n    h = (s**2) / (3 * (r**2))\n\n    # Calculate the area of the triangle\n    area = (s / 2) * h\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159\n    area = (2*pi*r**2)**(1/2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # calculate the area of a triangle with sides of length 2r\n    area_triangle = math.sqrt(3) / 4 * r * r\n\n    # calculate the radius of the semicircle inscribed in the triangle\n    radius_semicircle = (area_triangle / math.sqrt(3)) / 2\n\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area_triangle * (radius_semicircle / r) ** 2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n\n    If the list is empty or None, then the function returns None.\n\n    If the list is not empty, then the function calculates the sum of all the numbers in the list.\n\n    If the sum of the numbers is odd, then the first missing number is the smallest odd number greater than the sum of all the numbers.\n\n    If the sum of the numbers is even, then the first missing number is the smallest even number greater than the sum of all the numbers.\n\n    :param array: a sorted list of natural numbers\n    :type array: list of int\n    :param start: the starting index of the search range (default 0)\n    :type start: int\n    :param end: the ending index of the search range (default None, which means to search the entire list)\n    :type end: int\n    :return: the smallest missing number or None if the array is empty or None\n    :rtype: int\n    \"\"\"\n    if not array:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    sum_of_numbers = sum(array[start:end+1])\n\n    if sum_of_numbers % 2 == 0:\n        return min(array[start:end+1][i] for i in range(len(array[start:end+1])) if array[start:end+1][i] % 2 == 1) + 1\n    else:\n        return min(array[start:end+1][i] for i in range(len(array[start:end+1])) if array[start:end+1][i] % 2 == 0) + 2"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array (list): A sorted list of natural numbers.\n        start (int): Starting index of the array. Defaults to 0.\n        end (int): Ending index of the array. Defaults to None (last index).\n\n    Returns:\n        int: The smallest missing number.\n\n    Examples:\n        find_First_Missing([1, 3, 5, 7, 9])\n        # Output: 2\n\n        find_First_Missing([4, 6, 8, 10, 12])\n        # Output: 1\n\n        find_First_Missing([1, 2, 3, 4, 5])\n        # Output: 6\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # sort the list of natural numbers\n    array.sort()\n\n    # initialize the missing number and the index of the first element\n    missing_number = array[0]\n    first_element_index = 0\n\n    # loop through the list\n    for i in range(start,len(array)):\n        if array[i]!= missing_number + i:\n            # update the missing number and its index\n            missing_number += i\n            first_element_index = i\n            break\n\n    # check if the missing number is in the first half of the array\n    if missing_number > array[-1] // 2:\n        # find the missing number by moving it to the beginning of the array\n        for i in range(first_element_index,len(array)):\n            if array[i] == missing_number:\n                missing_number = missing_number - i\n                break\n\n    return missing_number"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    \n    for i in range(start,end+1):\n        if array[i] == i:\n            return i\n            \n    return end+1+start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # If the end index is not provided, then find the maximum element in the array\n    if end is None:\n        end = max(array)\n    \n    # Iterate from the start index to the end index\n    for i in range(start,end+1):\n        # If the current element is missing, return it\n        if i not in array:\n            return i\n        \n    # If no missing element is found, then return the maximum element + 1\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    if end is None:\n        end=len(array)-1\n\n    if end < start:\n        raise ValueError(\"The end index should be greater than start index.\")\n\n    missing = start\n    for i in range(start,end+1):\n        if array[i]!= i:\n            missing = i\n            break\n\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i == array[i]:\n            return i\n\n    for i in range(end, start - 1, -1):\n        if i == array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Find the smallest missing number from a sorted list of natural numbers.\n    :param array: A sorted list of natural numbers.\n    :param start: The starting index (default is 0).\n    :param end: The ending index (default is the last index).\n    :return: The smallest missing number.\n    \"\"\"\n    if not array or len(array) < 2:\n        return None\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_nums = []\n    for num in list:\n        if num % 2 == 0:\n            even_nums.append(num)\n    return even_nums"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list: \n        if num % 2 == 0: \n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list "
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num)\n\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of numbers and returns a list of even numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    i, j = ele\n    adj = []\n    for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        if 0 <= i + di < len(sub) and 0 <= j + dj < len(sub[i + di]):\n            adj.append((i + di, j + dj))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    '''\n    This function takes a coordinate tuple as an argument and returns a list of all adjacent \n    coordinates. If the argument is not a coordinate tuple, the function returns None.\n    '''\n    if not isinstance(ele, tuple) or len(ele)!= 2:\n        return None\n    x, y = ele\n    if sub is None:\n        sub = []\n    if x > 0 and y > 0:\n        sub.append((x - 1, y - 1))\n    if x > 0 and y < len(sub) - 1:\n        sub.append((x - 1, y + 1))\n    if x < len(sub) - 1 and y > 0:\n        sub.append((x + 1, y - 1))\n    if x < len(sub) - 1 and y < len(sub) - 1:\n        sub.append((x + 1, y + 1))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    adj = [] \n    if x > 0: \n        adj.append((x-1, y)) \n    if x < n-1: \n        adj.append((x+1, y)) \n    if y > 0: \n        adj.append((x, y-1)) \n    if y < m-1: \n        adj.append((x, y+1)) \n    return adj "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj_list = []\n    x, y = ele\n    # create a list of adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i == 0 and j == 0) or (i == x and j == y):\n                continue\n            adj_list.append((i+x, j+y))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the x and y coordinates of the given element\n    x, y = ele\n    \n    # Create a list to store the adjacent coordinates\n    adj = []\n    \n    # Iterate through all possible directions and extract adjacent coordinates\n    for dx, dy in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n        if (x+dx, y+dy) not in sub:\n            adj.append((x+dx, y+dy))\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # add all adjacent coordinates to the sublist\n    sub.append((x-1, y))\n    sub.append((x+1, y))\n    sub.append((x, y-1))\n    sub.append((x, y+1))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if len(sub) == 0:\n        sub.append(ele)\n    else:\n        for i in range(len(sub)):\n            if sub[i][0] == ele[0] and sub[i][1] == ele[1]:\n                break\n            elif i == len(sub)-1:\n                sub.append(ele)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    # add adjacent coordinates to result list\n    if x > 0:\n        result.append((x-1,y))\n    if x < len(sub)-1:\n        result.append((x+1,y))\n    if y > 0:\n        result.append((x,y-1))\n    if y < len(sub[0])-1:\n        result.append((x,y+1))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj = []\n    if x-1 >= 0:\n        adj.append((x-1, y))\n    if x+1 < len(grid):\n        adj.append((x+1, y))\n    if y-1 >= 0:\n        adj.append((x, y-1))\n    if y+1 < len(grid[x]):\n        adj.append((x, y+1))\n    for i in adj:\n        if i not in sub:\n            sub.append(i)\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    if x > 0:\n        adjacent.append((x-1, y))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if x < len(grid)-1:\n        adjacent.append((x+1, y))\n    if y < len(grid[0])-1:\n        adjacent.append((x, y+1))\n    return adjacent"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    spaces = \" \"\n    underscores = \"_\"\n    new_text = \"\"\n    for char in text:\n        if char == spaces:\n            new_text += underscores\n        elif char == underscores:\n            new_text += spaces\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Convert all spaces to underscores and vice versa in the text\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscore\n    text = text.replace(' ', '_')\n    # Replace underscore with whitespaces\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            new_text += \"_\"\n        elif text[i] == \"_\":\n            new_text += \" \"\n        else:\n            new_text += text[i]\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    new_text = new_text.replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for i in range(len(num_list)-1, len(num_list)-len(zero_index)-1, -1):\n        if i not in zero_index:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = 0\n\n    for index, value in enumerate(num_list):\n        if value == 0:\n            num_list[index], num_list[zero_index] = num_list[zero_index], num_list[index]\n            zero_index += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return [num for num in num_list if num!= 0] + [0] * (len(num_list) - len([num for num in num_list if num!= 0]))"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n\n    # Traverse through the list\n    for i in range(n):\n\n        # If the current element is zero, move it to the end\n        if num_list[i] == 0:\n            for j in range(i, n-1):\n                num_list[j] = num_list[j+1]\n            n -= 1\n            i -= 1\n\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for num in num_list:\n        if num!= 0:\n            num_list[count] = num\n            count += 1\n    \n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) % 2 == 1:\n        arr.append(0)\n    arr.sort()\n    xor_sum = 0\n    for i in range(len(arr)):\n        xor_sum += arr[i] ^ arr[i + 1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        xor = arr[i] ^ arr[(i+1)%n]\n        sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_pair = arr[i] ^ arr[j]\n            sum_xor += xor_pair\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2:\n        return None\n    \n    xor_sum = 0\n    for i in range(n):\n        xor_sum += (arr[i] ^ arr[n-i-1])\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum += xor\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # create a max heap from the given iterable\n    heap = [hq.heappop(iterable) for i in range(len(iterable)//2, -1, -1)]\n\n    # extract elements from the max heap and add them to the result list\n    result = []\n    for _ in range(len(iterable)):\n        result.append(hq.heappop(heap))\n\n    # add the remaining elements from the iterable to the result list\n    for element in iterable:\n        heapq.heappush(heap, element)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.nsmallest(len(iterable), iterable)\n    while heap:\n        yield heapq.heappop(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build max heap\n    heap = iterable[:]\n    for i in range(len(heap)//2-1, -1, -1):\n        hq.heapify(heap, i, len(heap))\n    # Sort the heap\n    for i in range(len(heap)-1, 0, -1):\n        heap[0], heap[i] = heap[i], heap[0]\n        hq.heapify(heap, 0, i)\n    return heap"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heapsort algorithm.\n\n    Args:\n    iterable (iterable): A list or any iterable object.\n\n    Returns:\n    A list sorted using the heapsort algorithm.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n\n    # build the heap\n    for i in range(len(arr) // 2 - 1, -1, -1):\n        hq.heapify(arr, i, len(arr))\n\n    # extract elements from the heap in sorted order\n    for i in range(len(arr) - 1, 0, -1):\n        hq.heappop(arr)\n\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using heap sort algorithm.\n\n    Args:\n        iterable (list): List of items to be sorted.\n\n    Returns:\n        list: Sorted list.\n    \"\"\"\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n-1, 0, -1):\n        iterable[i], iterable[0] = iterable[0], iterable[i]\n        hq.heapify(iterable[:i])\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Write a function to sort the given list.\n    \"\"\"\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Build a max heap from the input iterable\n    hq.heapify(iterable)\n    \n    # Extract and return the max element from the heap\n    return hq.heappop(iterable)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if profit and loss are both 0\n    if profit == 0 and loss == 0:\n        return \"Profit and Loss are both 0.\"\n    else:\n        return \"Profit is negative and Loss is positive.\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost - sale_amount < 0:\n        return \"Profitable\"\n    elif sale_amount - actual_cost < 0:\n        return \"Loss\"\n    else:\n        return \"Neither Profit nor Loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int): The actual cost of the sale\n    sale_amount (int): The amount of the sale\n    \n    Returns:\n    bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    \n    if sale_amount < actual_cost:\n        return True\n    elif sale_amount - actual_cost == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n\n    if sale_amount <= 0:\n        return \"No profit or loss\"\n\n    if actual_cost <= 0:\n        return \"Actual cost must be greater than zero\"\n\n    if sale_amount - actual_cost <= 0:\n        return \"Profit or loss is achieved\"\n\n    return \"No profit or loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Check if the given sale amount has no profit and no loss\n\n    Args:\n        actual_cost (float): The actual cost of the sale\n        sale_amount (float): The amount of the sale\n\n    Returns:\n        bool: True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n    return (actual_cost - sale_amount) <= 0"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if the sale amount is greater than or equal to the actual cost\n    if sale_amount < actual_cost:\n        return False\n    # check if the sale amount is less than the actual cost times (1 + tax rate)\n    if sale_amount < actual_cost * (1 + 0.08):\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # check if actual cost is greater than or equal to sale amount\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two arguments, actual_cost and sale_amount, and returns a boolean value indicating whether the given amount has no profit and no loss.\n    \"\"\"\n    profit = sale_amount - actual_cost\n    if profit <= 0 and sale_amount > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    return round(math.ceil(0.5 * ((13.12 + 0.6215 * v - 11.37 * math.log(t + 273.15)) / 2.75)))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n\n    Returns:\n    int: The wind chill index rounded to the nearest integer.\n    '''\n    # Convert wind velocity from km/h to m/s\n    v = v * 1000\n    \n    # Calculate the heat capacity of water at constant pressure\n    cp = 1004.6\n    # Calculate the absolute temperature\n    T = t + 273.15\n    \n    # Calculate the ideal gas constant\n    R = 8.31446261815324\n    \n    # Calculate the latent heat of vaporization of water\n    alpha = R * T / (cp * T)\n    \n    # Calculate the heat of vaporization of water\n    h = v * alpha\n    \n    # Calculate the moisture content\n    m = v * T / (cp * T)\n    \n    # Calculate the evaporation rate of water\n    q = m * h\n    \n    # Calculate the moisture evaporation factor\n    mf = q / (R * T)\n    \n    # Calculate the sensible heat of air at constant pressure\n    Cp = 1004.6\n    # Calculate the absolute humidity\n    h = 1\n    \n    # Calculate the conductivity of air\n    k = 0.0065 * (T + 273.15)\n    \n    # Calculate the latent heat of condensation\n    L = R * T / (Cp * T)\n    \n    # Calculate the latent heat of condensation of water\n    Lw = L / m\n    \n    # Calculate the moisture heat of condensation\n    H = Lw - L\n    \n    # Calculate the moisture heat content\n    h_moist = H / (R * T)\n    \n    # Calculate the latent heat of evaporation of water\n    Le = R * T / (Cp * T)\n    \n    # Calculate the latent heat of evaporation\n    Hv = Le / q\n    \n    # Calculate the specific humidity\n    S = m / (Cp * h_moist)\n    \n    # Calculate the dynamic viscosity of air\n    mu = 1 / (Cp * h_moist)\n    \n    # Calculate the latent heat of sublimation of water\n    Ls = R * T / (Cp * T)\n    \n    # Calculate the latent heat of sublimation\n    Hs = Ls - L\n    \n    # Calculate the moisture heat of sublimation\n    Hs_moist = Hs / (R * T)\n    \n    # Calculate the moisture entrainment rate\n    q_ent = Hs_moist / (R * T)\n    \n    # Calculate the moisture excess\n    q_excess = 0\n    \n    # Calculate the temperature of sublimation\n    T_sub = T + (0.0065 * (T + 273.15) * (T + 273.15) / k)\n    \n    # Calculate the specific enthalpy of vaporization\n    h_vap = (R * T_sub) / (Cp * T_sub)\n    \n    # Calculate the specific enthalpy of the mixture\n    h_mix = (R * T) / (Cp * T)\n    \n    # Calculate the moisture content of the mixture\n    m_mix = m * S\n    \n    # Calculate the moisture content of the water vapor\n    m_vap = q_excess / h_vap\n    \n    # Calculate the mass of moist air\n    M_air = (m_mix + m_vap) * h_mix\n    \n    # Calculate the mass of dry air\n    M_dry = (m_mix - m_vap) * h_mix\n    \n    # Calculate the moisture enthalpy of dry air\n    H_dry = R * T_sub * (1 - mf)\n    \n    # Calculate the moisture enthalpy of moist air\n    H_moist = R * T_sub * (1 - mf)\n    \n    # Calculate the effective moisture heat content\n    h_eff = H_moist - H_dry\n    \n    # Calculate the mass flux of water vapor\n    q_vap_flux = (M_air - M_dry) * h_vap\n    \n    # Calculate the mass flux of dry air\n    q_dry_flux = (M_air - M_dry) * h_mix\n    \n    # Calculate the mass flux of moist air\n    q_moist_flux = M_moist * h_eff\n    \n    # Calculate the mass flux of water vapor into the atmosphere\n    q_vap_atmo = q_vap_flux * (1 - mu)\n    \n    # Calculate the mass flux"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer\n    given the wind velocity in km/h and a temperature in celsius.\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    # calculate the heat index\n    hi = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t * math.log(v) - 0.5688 * math.log(v) ** 2 + 0.0068 * t ** 2\n    # calculate the wind chill index\n    wc = hi - 459.67\n    # round to the nearest integer\n    return round(wc)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature\n    dp = 13.12 + 0.6215*t - 11.37*math.log(t) + 0.3965*t*math.log(t) - 0.0146*t**2 + 0.00128*t**3\n    # Calculate the wind chill index\n    wc = dp + 0.6215*(dp-t)\n    # Round the wind chill index to the nearest integer\n    wc = int(wc+0.5)\n    # Return the wind chill index\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v * 1.60934  # convert km/h to m/s\n    tc = t + 273.15  # convert celsius to kelvin\n    wc = (0.62197 * wind_speed) / (tc + 0.62197 * wind_speed)\n    wc_rounded = math.ceil(wc)\n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w = 3.6 # Convert km/h to m/s\n    c = 25 # Convert celsius to fahrenheit\n    \n    # Calculate the wind chill temperature\n    wct = ((v * w) / 0.621) + ((0.0065 * (t - 273.15)) - 35.75)\n    \n    # Calculate the wind chill index\n    wci = round(wct / 0.0625)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    v (float): wind velocity in km/h\n    t (float): temperature in celsius\n\n    Returns:\n    int: wind chill index rounded to the next integer\n    \"\"\"\n\n    # Calculate the temperature in Fahrenheit\n    f = 9.0 * t / 5.0 + 32.0\n\n    # Calculate the wind chill temperature\n    w = 0.6219 * v ** 0.16 + 11.37 * math.log(f) - 0.3965 * f\n\n    # Convert the wind chill temperature to Celsius\n    c = (w - 273.15) * 5.0 / 9.0\n\n    # Round the wind chill index to the nearest integer\n    wci = math.floor(c + 0.5)\n\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the maximum temperature that can be reached using sunlight\n    Tmax = 100\n    \n    # Calculate the wind chill index\n    wci = round(13.12 + 0.6215*t - 11.37*math.exp(-0.14*t/Tmax) + 0.3965*math.exp(-0.07*t/Tmax) + 0.2471*math.exp(-0.0094*t/Tmax))\n    \n    # Return the wind chill index\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil((13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * v ** 2) / 2.5)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v < 0:\n        raise ValueError(\"Wind velocity cannot be negative.\")\n    \n    if t < -273.15:\n        raise ValueError(\"Temperature cannot be below absolute zero (-273.15\u00b0C).\")\n    \n    if t > 100:\n        raise ValueError(\"Temperature cannot be above absolute maximum (100\u00b0C).\")\n    \n    if v >= 0 and v <= 10:\n        if t >= 0 and t <= 45:\n            return round((13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * math.log(t) ** 2) / 2.5)\n        elif t > 45 and t <= 65:\n            return round((11.37 * math.log(t) - 0.762 * math.log(t) ** 2 + 2.467 * math.log(t) ** 3) / 2.5)\n        else:\n            return round((8.12 + 1.85 * math.log(t) - 10.38 * math.log(t) ** 2 + 0.886 * math.log(t) ** 3) / 2.5)\n    elif v > 10 and v <= 18:\n        if t >= 0 and t <= 45:\n            return round(13.12 + 0.6215 * t - 11.37 * math.log(t) + 0.3965 * math.log(t) ** 2)\n        elif t > 45 and t <= 65:\n            return round(11.37 * math.log(t) - 0.762 * math.log(t) ** 2 + 2.467 * math.log(t) ** 3)\n        else:\n            return round(8.12 + 1.85 * math.log(t) - 10.38 * math.log(t) ** 2 + 0.886 * math.log(t) ** 3)\n    elif v > 18 and v <= 30:\n        if t >= 0 and t <= 45:\n            return round(8.12 + 1.85 * math.log(t) - 10.38 * math.log(t) ** 2 + 0.886 * math.log(t) ** 3)\n        elif t > 45 and t <= 65:\n            return round(6.11 + 2.89 * math.log(t) - 8.44 * math.log(t) ** 2 + 0.585 * math.log(t) ** 3)\n        else:\n            return round(4.11 + 3.15 * math.log(t) - 6.35 * math.log(t) ** 2 + 0.5 * math.log(t) ** 3)\n    elif v > 30 and v <= 50:\n        if t >= 0 and t <= 45:\n            return round(6.11 + 2.89 * math.log(t) - 8.44 * math.log(t) ** 2 + 0.585 * math.log(t) ** 3)\n        elif t > 45 and t <= 65:\n            return round(4.11 + 3.15 * math.log(t) - 6.35 * math.log(t) ** 2 + 0.5 * math.log(t) ** 3)\n        else:\n            return round(2.11 + 3.5 * math.log(t) - 5.6 * math.log(t) ** 2 + 0.41 * math.log(t) ** 3)\n    else:\n        if t >= 0 and t <= 45:\n            return round(4.11 + 3.15 * math.log(t) - 6.35 *"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_with_lowercase = []\n    for name in sample_names:\n        if name[0].isupper():\n            names_with_lowercase.append(name)\n    sum_length = 0\n    for name in names_with_lowercase:\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_sum = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        names_sum += len(name)\n    return names_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Remove names that start with a lowercase letter\n    sample_names = [name for name in sample_names if not name[0].islower()]\n    # Sum the length of the remaining names\n    total_length = sum([len(name) for name in sample_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum([len(name) for name in valid_names])\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    # initialize a variable to store the sum of the lengths of names\n    sum_length = 0\n\n    # loop through each name in the list of names\n    for name in sample_names:\n        # remove leading lowercase letters from the name\n        name = name.lstrip('a-z')\n        # add the length of the name to the sum\n        sum_length += len(name)\n\n    # return the sum of the lengths of the names\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum to zero\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # otherwise, add the length of the name to the sum\n        total_length += len(name)\n        \n    # return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if not name.startswith('a'):\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the regular expression pattern to match the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    # Use the findall() function to find all occurrences of the parenthesis in the string\n    matches = pattern.findall(items)\n    # Loop through the matches and remove the parenthesis and what's inbetween them\n    for match in matches:\n        # Remove the parenthesis and what's inbetween them\n        items = items.replace(match, '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string\n    items = re.sub(r'\\([^)]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)') # remove everything between parenthesis\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Remove the parenthesis and what is inbetween them from a string.\n    \n    Parameters:\n        items: str\n            The string with parenthesis in it.\n    \n    Returns:\n        str: The string without the parenthesis and what is inbetween them.\n    \"\"\"\n    pattern = re.compile(r'(\\(|\\)|\\{|\\}|\\[|\\])')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    result = re.sub(pattern, r'\\1', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)' # match any number of parenthesis and non-parenthesis characters inside them\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Removing all the parenthesis from the string\n    items = re.sub('\\(', '', items)\n    items = re.sub('\\)', '', items)\n    # Removing all the spaces between the parenthesis and the text inside them\n    items = re.sub('\\s', '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        a = 1\n        b = 1\n        for i in range(1, n):\n            a, b = b, a + b\n        return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    count = 1\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Calculate the sum of squares of first n natural numbers\n        sum_of_squares = (i**2 + (n-i)**2)**2\n        # If the sum of squares is greater than n^2, the number is nonagonal\n        if sum_of_squares > n**2:\n            return count\n        count += 1\n    # If the loop completes without finding a nonagonal number, return None\n    return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize the first two nonagonal numbers\n    num1 = 1\n    num2 = 4\n    \n    # check if the nth nonagonal number is greater than the sum of the first two nonagonal numbers\n    if n > (num1 + num2):\n        return False\n    \n    # otherwise, find the nth nonagonal number by adding the sum of the first two nonagonal numbers to the sum of the\n    # previous two nonagonal numbers\n    while True:\n        num1 += num2\n        num2 += num1\n        if n == num1:\n            return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize counter and sum\n    counter = 1\n    sum = 1\n\n    # Loop until counter reaches n\n    while counter <= n:\n        # Add the square of the counter to the sum\n        sum += counter ** 2\n        # Increment the counter\n        counter += 1\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Initialize variables to track the side lengths of each square\n    length1 = 1\n    length2 = 1\n\n    # Loop through the squares until we reach the nth square\n    for i in range(2, n+1):\n        # Calculate the length of the next square by adding the length of the previous square and the side lengths of the previous squares\n        length1 += length2\n        length2 += length1\n\n    return length2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        return None\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # define the base for the calculation\n    base = 1\n\n    # calculate the total number of squares\n    squares = (n * (n + 1)) // 2\n\n    # calculate the nth nonagonal number\n    nonagonal = base ** squares\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_sum = 1\n    for i in range(1, n+1):\n        nonagonal_sum += 2*i\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    nonagonal_number = 0\n    row = 1\n    \n    while row <= n:\n        col = 1\n        while col <= row:\n            nonagonal_number += 1\n            col += 1\n        row += 1\n        \n    return nonagonal_number"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n % 2 == 0:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]?\\w+\\b'  # matches the word boundary and one or more word characters\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphanumeric characters except for spaces and hyphens\n    text = re.sub(r'[^a-zA-Z0-9\\s-]', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Loop through each word and check if it contains 'z' at the middle\n    for i in range(len(words)):\n        if len(words[i]) > 2 and words[i][1:-1].count('z') == 1:\n            return True\n\n    # If no words contain 'z' at the middle, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regex pattern to match 'z' except at the start and end of the word\n    pattern = r'\\b[a-zA-Z]+\\b'\n    \n    # Use regex to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if matches:\n        # Find the middle of the matches and check if it contains 'z'\n        mid_match = matches[len(matches) // 2]\n        mid_word = mid_match.split()[0]\n        if 'z' in mid_word:\n            return True\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)(?!$)(?i)z'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!^)(?<!\\w)(?<=\\w)(z)(?=\\w)(?<=\\W|$)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define regex pattern to match word boundary\n    word_boundary_pattern = r'\\b'\n    \n    # Replace word boundary pattern with empty string to match only word characters\n    pattern = re.sub(word_boundary_pattern, '', text)\n    \n    # Find all occurrences of 'z' in the modified pattern\n    matches = re.findall(r'z', pattern)\n    \n    # Check if 'z' is present only at the start and end of a word\n    if (len(matches) == 1 and matches[0] == 'z'):\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    for i in range(len(words)):\n        if words[i][0] == 'z' or words[i][-1] == 'z':\n            if i == 0 or i == len(words)-1:\n                continue\n            else:\n                return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    This function checks if a string contains 'z', except at the start and end of the word.\n    '''\n    # Define the pattern to search for 'z'\n    pattern = r'\\b[zZ]\\w+\\b'\n\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # Check if a match was found\n    if match:\n        # Return True if a match was found\n        return True\n    else:\n        # Return False if a match was not found\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverseArrayUptoK(input, k):\n    \"\"\"\n    This function reverses the first k elements of an array.\n\n    Args:\n        input: A list of elements.\n        k: An integer representing the position to reverse up to.\n\n    Returns:\n        A list of elements from the original array, except for the first k elements, \n        which are now in reverse order.\n    \"\"\"\n    # Reverse the first k elements of the array.\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array.\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Check if k is valid\n    if k >= len(input):\n        print(\"Invalid position.\")\n        return\n\n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n\n    # Reverse the array from k to len(input)-1\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(\"Reversed Array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k < 0 or k > n:\n        print(\"Invalid value of k\")\n        return\n\n    start = 0\n    end = k-1\n\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Base case\n    if k <= 1:\n        return input\n    # Recursive case\n    else:\n        # Divide the array into two halves\n        mid = len(input) // 2\n        # Reverse the first half recursively\n        input[:mid] = reverse_Array_Upto_K(input[:mid], k)\n        # Reverse the second half recursively\n        input[mid:] = reverse_Array_Upto_K(input[mid:], k)\n        # Return the reversed array\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n\n    Args:\n        input (list): List of integers.\n        k (int): A position to reverse the array upto.\n\n    Returns:\n        A new list with the reversed array upto the given position.\n    \"\"\"\n    # Find the maximum value in the array\n    max_value = max(input)\n\n    # Initialize two pointers, one at the beginning and one at the end\n    left = 0\n    right = len(input) - 1\n\n    # Reverse the array upto the given position\n    while left < right and k >= 1:\n        # Reverse the values at the pointers\n        input[left], input[right] = input[right], input[left]\n\n        # Move the pointers towards each other\n        left += 1\n        right -= 1\n\n        # Decrement the position to reverse upto\n        k -= 1\n\n    # Return the reversed array upto the given position\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k - 1\n    \n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k-1, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k > len(input):\n        return input\n    else:\n        left, right = 0, k-1\n        while left < right:\n            input[left], input[right] = input[right], input[left]\n            left += 1\n            right -= 1\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Return the modified array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    for key, value in test_dict.items():\n        new_tup = new_tup + (value,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.update(test_dict)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = tuple(test_tup) + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict = test_dict.copy()  # to prevent modification of the original dictionary\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables for left and right paths\n    left_path = [0] * N\n    right_path = [0] * N\n    # Initialize variables for up and down paths\n    up_path = [0] * N\n    down_path = [0] * N\n    \n    # Compute the average of the diagonal path\n    diag_avg = sum(cost[0]) / 2\n    \n    # Compute the maximum average path\n    max_avg = diag_avg\n    \n    # Fill in the paths and update the max average path\n    for i in range(1, N):\n        left_path[i] = max(left_path[i-1], cost[i-1][i-1])\n        right_path[i] = max(right_path[i-1], cost[i][i-1])\n        up_path[i] = max(up_path[i-1], cost[i-1][i])\n        down_path[i] = max(down_path[i-1], cost[i][i])\n        \n        # Compute the average of the current diagonal path\n        current_avg = (left_path[i] + right_path[i] + up_path[i] + down_path[i]) / 4\n        \n        # Update the maximum average path\n        if current_avg > max_avg:\n            max_avg = current_avg\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_sum = float('-inf')\n    for i in range(N):\n        # Starting from top-left cell\n        if i == 0 and cost[i][0] > cost[i][N-1]:\n            max_sum = max(max_sum, sum(cost[i]) - sum(cost[i][:N-1]))\n        elif i == N-1 and cost[i][0] > cost[0][i]:\n            max_sum = max(max_sum, sum(cost[i]) - sum(cost[i][1:]))\n        else:\n            # Starting from current cell\n            for j in range(i, N):\n                if cost[i][j] > cost[i][j-1] and cost[i][j] > cost[i+1][j]:\n                    max_sum = max(max_sum, sum(cost[i][j:j+1]) - sum(cost[i][j-1:j]) - sum(cost[i+1][:i]))\n\n    return max_sum / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    def isPathValid(matrix, visited, i, j, start_i, start_j):\n        if i == len(matrix) - 1 and j == len(matrix[0]) - 1:\n            return True\n        if i < 0 or j < 0 or i >= len(matrix) or j >= len(matrix[0]) or matrix[i][j] == 0 or (i, j) in visited:\n            return False\n        visited.add((i, j))\n        return isPathValid(matrix, visited, i + 1, j, start_i, start_j) or isPathValid(matrix, visited, i, j + 1, start_i, start_j)\n\n    def maxAverage(matrix, start_i, start_j, visited):\n        max_avg = float('-inf')\n        for i in range(len(matrix)):\n            for j in range(len(matrix[0])):\n                if isPathValid(matrix, visited, i, j, start_i, start_j):\n                    avg = sum(cost[i][j]) / (i - start_i + 1)\n                    max_avg = max(max_avg, avg)\n        return max_avg\n\n    N = len(cost)\n    visited = set()\n    max_avg = maxAverage(cost, 0, 0, visited)\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_avg = float('-inf')\n    curr_path = []\n    total_cost = 0\n    num_cells = 0\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Check if current cell is a valid destination\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                curr_path.append(cost[i][j])\n                total_cost += cost[i][j]\n                num_cells += 1\n            else:\n                # Try right move\n                curr_path.append(cost[i][j])\n                total_cost += cost[i][j]\n                num_cells += 1\n                if i < len(cost) - 1 and j < len(cost[0]) - 1:\n                    total_cost -= cost[i][j]\n                    num_cells -= 1\n                    curr_path.pop()\n                # Try down move\n                if i < len(cost) - 1:\n                    total_cost -= cost[i][j]\n                    num_cells -= 1\n                    curr_path.pop()\n\n    # Compute maximum average\n    max_avg = total_cost / num_cells\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Calculate the sum of all the costs in the matrix\n    total_cost = sum(sum(row) for row in cost)\n\n    # Create a set to store all the paths\n    paths = set()\n\n    # Define a function to check if a path is valid\n    def isValidPath(i, j, path):\n        # Check if the current cell is not a wall\n        if cost[i][j]!= 0:\n            # Check if we have visited this cell before\n            if (i, j) in path:\n                return False\n            # Check if the current position is the bottom right cell\n            elif i == len(cost) - 1 and j == len(cost[0]) - 1:\n                return True\n            # Check if the current position is valid\n            elif (i + 1 < len(cost) and j + 1 < len(cost[0])):\n                return True\n            # If none of the above conditions are met, return False\n            else:\n                return False\n        # If the current cell is a wall, return False\n        else:\n            return False\n\n    # Define a function to generate all possible paths\n    def generatePaths(i, j, path, visited):\n        # Check if we have reached the bottom right cell\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            # Check if this path is valid\n            if isValidPath(i, j, path):\n                paths.add(path)\n        # Generate all possible paths for the current position\n        elif (i + 1 < len(cost) and j + 1 < len(cost[0])):\n            # Generate a valid path for the cell to the right and down\n            path.append((i+1, j+1))\n            visited.append((i, j))\n            generatePaths(i+1, j+1, path, visited)\n            # Remove the current cell from the path\n            path.pop()\n            visited.pop()\n\n    # Initialize the current position, path and visited positions\n    i, j, path, visited = 0, 0, [], []\n    # Generate all possible paths for the first cell\n    path.append((i, j))\n    visited.append((i, j))\n    generatePaths(i, j, path, visited)\n\n    # Calculate the maximum average over all paths\n    max_average = 0\n    for path in paths:\n        # Calculate the average of the path\n        avg_cost = sum(cost[i][j] for i, j in path) / len(path)\n        # Update the maximum average\n        if avg_cost > max_average:\n            max_average = avg_cost\n\n    # Return the maximum average\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    max_avg = 0\n    max_path = None\n    total_cost = 0\n    visited_cells = 0\n    \n    # Check if the matrix is empty\n    if len(cost) == 0 or len(cost[0]) == 0:\n        return 0, None\n    \n    # Initialize the top-left cell\n    start_x, start_y = 0, 0\n    \n    # Loop through all possible paths from the top-left cell\n    for x in range(len(cost)):\n        for y in range(len(cost[0])):\n            visited_cells += 1\n            \n            # Check if the current cell is the bottom-right cell\n            if x == len(cost) - 1 and y == len(cost[0]) - 1:\n                total_cost += cost[x][y]\n                continue\n            \n            # Check if the current cell is the bottom-right cell\n            if x == len(cost) - 1:\n                if visited_cells % 2 == 0:\n                    total_cost += cost[x][y]\n                continue\n            \n            if y == len(cost[0]) - 1:\n                if visited_cells % 2 == 0:\n                    total_cost += cost[x][y]\n                continue\n            \n            # Check if the current cell is part of the path\n            if visited_cells % 2 == 0:\n                total_cost += cost[x][y]\n            \n            # Check if the current cell is the top-right cell\n            if x == len(cost) - 1 and y == len(cost[0]) - 1:\n                total_cost += cost[x][y]\n                \n                # Check if the current path has a higher average than the previous path\n                current_avg = total_cost / visited_cells\n                if current_avg > max_avg:\n                    max_avg = current_avg\n                    max_path = [(x, y)]\n                elif current_avg == max_avg:\n                    max_path.append((x, y))\n                \n                # Reset the variables for the next path\n                total_cost = 0\n                visited_cells = 0\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    total_cost = 0\n    visited = set()\n    # Base case: If only one cell exists, it's the maximum average path\n    if N == 1:\n        return max_avg, visited\n\n    # Recursive case: For each cell in the matrix, generate all possible paths to its adjacent cells and update the maximum average and visited cells\n    for i in range(N):\n        for j in range(N):\n            if (i, j) not in visited:\n                visited.add((i, j))\n                left = cost[i][j]\n                up = cost[i][j]\n                if i > 0:\n                    left += cost[i-1][j]\n                if j > 0:\n                    up += cost[i][j-1]\n                path_avg, path_visited = maxAverageOfPath(cost[i+1:N][j+1:N])\n                visited.update(path_visited)\n                if path_avg > max_avg:\n                    max_avg = path_avg\n                    total_cost = left + up + max_avg * (len(visited)-1)\n\n    return max_avg, visited"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n        max_avg = max(max_avg, dp[i][0] + dp[0][i])\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = cost[0][j]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            max_avg = max(max_avg, dp[i][j])\n\n    return max_avg / (N * N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for i in range(N)] for j in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1]) + cost[i][j]\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    max_avg = 0\n    path = []\n\n    for i in range(N):\n        for j in range(N):\n            if dp[i][j] == dp[N-1][N-1]:\n                path.append((i, j))\n                max_avg = max(max_avg, dp[i][j] / (N-1))\n                path.pop()\n\n    return max_avg, path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student_name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[student_name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name,data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key: value for key, value in students.items() if value[0] > h and value[1] > w}"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[student] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Initialize an empty list to store the filtered students\n    filtered_students = []\n\n    # Loop through each student\n    for name, student in students.items():\n        # Extract the height and weight from the tuple\n        height, weight = student\n\n        # Check if the height is greater than the minimum and the weight is greater than the minimum\n        if height > h and weight > w:\n            # Add the name of the student to the filtered_students list\n            filtered_students.append(name)\n\n    # Return the filtered_students list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to count the frequency of each value in each list\n    freq_dict = {}\n    for num in nums1 + nums2:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n    \n    # Count the number of indices where the lists have the same values\n    count = 0\n    for i, num1 in enumerate(nums1):\n        if num1 == nums2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(i+1, len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Create a dictionary to store the counts of each element in each list\n    count_dict = {}\n    for num1, num2 in zip(nums1, nums2):\n        # Check if the elements are equal\n        if eq(num1, num2):\n            # Increment the count for this element in the dictionary\n            count_dict[num1] = count_dict.get(num1, 0) + 1\n    \n    # Count the indices of the elements in the dictionary with a count greater than 1\n    count = 0\n    for count in count_dict.values():\n        if count > 1:\n            count_same_pairs.append(num_count_dict)\n            count_same_pairs[-1][num1] = count_dict[num1]\n            count_same_pairs[-1][num2] = 1\n    \n    # Return the list of indices where the lists have the same values\n    return count_same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize a dictionary to store the count of values in each list\n    count = {}\n    # Loop through each element in the first list\n    for num in nums1:\n        # Check if the value already exists in the count dictionary\n        if num in count:\n            # If it does, increment its count\n            count[num] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count[num] = 1\n    # Loop through each element in the second list and check if it matches any of the values in the count dictionary\n    count_list = []\n    for num in nums2:\n        if num in count:\n            count_list.append(count[num])\n    # Return the count of same pairs in the second list\n    return sum(count_list)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    base_list = list(base_str)\n    power_sum = 0\n    \n    for i in range(power):\n        digit_sum = 0\n        for j in range(len(base_list)):\n            digit_sum += int(base_list[j])\n        power_sum += digit_sum\n        \n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        result += base % 10\n        power //= 10\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    base_sum = 0\n    while power > 0:\n        digit = base % 10\n        base_sum += digit ** power\n        base = base // 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 0:\n        return 0\n    else:\n        total_sum = 0\n        base_str = str(base)\n        for digit in base_str:\n            total_sum += int(digit)\n        return total_sum * (power * base_str.count('0'))"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum to 0\n    sum = 0\n    # iterate through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum += digit_int ** power\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize a variable to store the sum\n    sum = 0\n    # loop through each digit of the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # calculate the sum of the digit raised to the specified power\n        sum += digit_int ** power\n    # return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return \"Power should be a non-negative integer.\"\n    \n    total = 0\n    for i in range(power):\n        total += sum([int(digit) for digit in str(base)])\n        base *= 10\n\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    # Initialize sum to zero\n    total = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert the digit to an integer and add to the sum\n        total += int(digit) ** power\n\n    # Return the total\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp_base = base\n    while power > 0:\n        digit = temp_base % 10\n        result += digit\n        temp_base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    match = pattern.findall(text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern to match quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    # use the re.findall() function to extract all the values between the quotation marks\n    values = re.findall(pattern, text)\n    # return the list of values between the quotation marks\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'\"(.*?)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"No quotation found in the string\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    # finding all values between quotation marks\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = re.compile(r'(?<=\\s)[\"](.*?)[\",]')\n    matches = pattern.findall(text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    \n    # Use the re.findall() method to extract all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text1)\n    \n    # Return a list of all matched values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the tuple and calculate the product of each pair\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty tuple to store the result\n    result = ()\n    \n    # Iterate through the tuple starting from index 0 (i.e., the first element of the tuple) and add the product of the current element and the next element to the result tuple\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    \n    # Add the last element of the tuple to the result tuple\n    result += (test_tup[-1],)\n    \n    # Return the result tuple\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple should contain at least two elements.\")\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # Initialize an empty list to hold the multiplied elements\n    multiplied_elements = []\n    \n    # Loop through the tuple and multiply each element with its next element\n    for i in range(len(test_tup)-1):\n        multiplied_elements.append(test_tup[i] * test_tup[i+1])\n    \n    # Return the final tuple of multiplied elements\n    return multiplied_elements"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        if i == N-1:\n            result_tup = (test_tup[i] * test_tup[i+1],)\n        else:\n            result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    multiplied_tup = []\n    for i in range(N):\n        multiplied_tup.append(test_tup[i] * test_tup[i+1])\n    return multiplied_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns the sum of the two lists.\n    \"\"\"\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize an empty list to store the result\n    result = []\n    # loop through the elements of lst1 and lst2\n    for i in range(len(lst1)):\n        # add the elements of lst1 and lst2 at the current index and append it to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [x+y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    \n    # Convert the set back to a list to sort it\n    sorted_nums = sorted(list(unique_nums))\n    \n    # Initialize an empty list to store the consecutive duplicates\n    consecutive_duplicates = []\n    \n    # Iterate over the sorted list\n    for i, num in enumerate(sorted_nums):\n        # Check if the number is the same as the next number\n        if num == sorted_nums[i+1]:\n            # If so, add it to the consecutive duplicates list\n            consecutive_duplicates.append(num)\n            \n    # Return the list of consecutive duplicates\n    return consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(sorted(nums), lambda x: x))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[1]-x[0] == 1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(sorted(nums)):\n        if k!= g:\n            yield g"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list.\n    '''\n    # Loop through the list, group by consecutive duplicates, and remove the duplicates\n    for group in groupby(enumerate(nums), lambda x: x[0] == x[1] - 1):\n        if group[0] == 0:\n            # Remove first group of duplicates (e.g. [1, 1, 1, 2, 2, 2])\n            continue\n        yield from group[1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for item in groupby(nums):\n        if len(list(item)) > 1:\n            prev = None\n            for num in item:\n                if prev is not None and num == prev+1:\n                    continue\n                yield num\n                prev = num"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n    # Convert the set back to a list for iteration\n    nums_list = list(unique_nums)\n    # Iterate through the list and group consecutive duplicates together\n    result = []\n    for i, num in enumerate(nums_list):\n        if i == 0 or nums_list[i]!= nums_list[i-1]:\n            result.append(num)\n    return result"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # formula to find the lateral surface area of a cone\n    lateral_surface_area = 2*math.pi*(r+h)**2\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = (math.pi * (r ** 2)) + (2 * math.pi * r * h)\n    B = (math.pi * (r ** 2) * h) + ((math.pi * r ** 2) * (h ** 2)) / 3\n    return A - B"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r ** 2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone\n    surface_area = math.pi * r**2 * h\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = 2 * (math.pi * r**2 + math.pi * r * h + math.pi * h**2)\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * (r**2 + h**2)\n\nr = float(input(\"Enter the radius of the cone: \"))\nh = float(input(\"Enter the height of the cone: \"))\n\nresult = lateralsurface_cone(r,h)\n\nprint(\"The lateral surface area of the cone is:\", result)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2)*h\n    print(\"The lateral surface area of the cone is:\", area)\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all spaces with a colon\n    text = re.sub(r'\\s', ':', text)\n    # Replace all commas with a colon\n    text = re.sub(r',', ':', text)\n    # Replace all dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+', ':', text)\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\W+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[^\\w\\s]+\", \":\", text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'[,\\. ]+')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regular expression pattern to match spaces, commas, and dots\n    pattern = re.compile(r'\\s|,|\\.')\n    # replace all matches with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define regular expression pattern for space, comma, or dot\n    pattern = re.compile(r'[\\s,\\.]')\n    # Replace all occurrences of pattern with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the pattern to match and replace\n    pattern = r'[,\\. ]'\n    # replace all occurrences of the pattern with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Traverse the array from left to right\n    for i in range(len(A)):\n        # If the current element is equal to the target element, return its index\n        if A[i] == x:\n            return i\n    # If the target element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # Iterate over the array and find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the current element is x, update the first occurrence index\n            first_occurrence_index = i\n    \n    # Return the first occurrence index\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index of the first occurrence to -1\n    first_occurrence_index = -1\n\n    # Loop through the array and check if the current number matches the target number\n    for i in range(len(A)):\n        if A[i] == x:\n            # If the current number matches the target number, update the index of the first occurrence\n            if first_occurrence_index == -1:\n                first_occurrence_index = i\n            # If the current number matches the target number and the current index is less than the index of the first occurrence, update the index of the first occurrence\n            elif i < first_occurrence_index:\n                first_occurrence_index = i\n\n    # Return the index of the first occurrence of the target number\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n\n    # while left pointer is less than or equal to right pointer\n    while left <= right:\n        # compute the middle index\n        mid = (left + right) // 2\n\n        # if the middle element is equal to x, then return its index\n        if A[mid] == x:\n            return mid\n\n        # if the middle element is less than x, then update the left pointer\n        elif A[mid] < x:\n            left = mid + 1\n\n        # if the middle element is greater than x, then update the right pointer\n        else:\n            right = mid - 1\n\n    # if the number is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    n = len(A)\n    while i < n and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize variables\n    index = -1\n    \n    # Iterate through the array\n    for i in range(len(A)):\n        # If the current element is equal to the target, update the index and break out of the loop\n        if A[i] == x:\n            index = i\n            break\n    \n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize a list to store products of all possible sublists\n    prod_sublist = []\n    # Initialize a variable to store the sum of products of all sublists\n    sum_prod_sublist = 0\n\n    # Calculate the product of the first element of the array\n    prod_first = 1\n    for i in range(n):\n        prod_first *= arr[i]\n\n    # Add the product of the first element to the sum of products of sublists\n    sum_prod_sublist += prod_first\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1 = 1\n    for i in range(n-1):\n        prod_first_n_m1 *= arr[i]\n\n    # Calculate the product of the first n elements of the array\n    prod_first_n = 1\n    for i in range(n):\n        prod_first_n *= arr[i]\n\n    # Calculate the product of the first n+1 elements of the array\n    prod_first_n_p1 = 1\n    for i in range(n+1):\n        prod_first_n_p1 *= arr[i]\n\n    # Calculate the product of the first n-2 elements of the array\n    prod_first_n_m2 = 1\n    for i in range(n-2):\n        prod_first_n_m2 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m1 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_p1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_p1 *= arr[i]\n\n    # Calculate the product of the first n-2 elements of the array\n    prod_first_n_m2_m2 = 1\n    for i in range(n-2):\n        prod_first_n_m2_m2 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m2 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m2 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m1_m1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m1_m1 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m1_p1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m1_p1 *= arr[i]\n\n    # Calculate the product of the first n-2 elements of the array\n    prod_first_n_m2_m2_m2 = 1\n    for i in range(n-2):\n        prod_first_n_m2_m2_m2 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m2_m2 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m2_m2 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m1_m1_m1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m1_m1_m1 *= arr[i]\n\n    # Calculate the product of the first n-1 elements of the array\n    prod_first_n_m1_m1_m1_p1 = 1\n    for i in range(n-1):\n        prod_first_n_m1_m1_m1_p1 *= arr[i]\n\n    # Calculate the product of the first n-2 elements of the array\n    prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n\n    for i in range(1, n):\n        # calculate the product of the last i elements\n        prod = 1\n        for j in range(i):\n            prod *= arr[j]\n\n        # add the product to the result\n        res += prod\n\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * n\n    dp[0] = arr[0]\n    for i in range(1, n):\n        dp[i] = arr[i] * dp[i-1]\n    \n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += dp[j] * arr[i] * arr[j]\n    \n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "The problem statement is not clear enough. Please provide a solution that solves the problem using a python function."
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize variables\n    total_sum = 0\n    subarray_sum = 1\n    # Initialize a set to store the products of subarrays seen so far\n    subarray_prod_set = set()\n    # Loop through the array\n    for i in range(len(arr)):\n        # Update the subarray_sum\n        subarray_sum = subarray_sum * arr[i]\n        # If the subarray_sum is negative, it means the subarray is empty\n        if subarray_sum < 0:\n            # Update the subarray_sum and subarray_prod\n            subarray_sum = 1\n            # Remove the product of the empty subarray from the set\n            if 1 in subarray_prod_set:\n                subarray_prod_set.remove(1)\n        # If the subarray_sum is zero, it means the subarray is empty\n        elif subarray_sum == 0:\n            # Update the subarray_sum and subarray_prod\n            subarray_sum = 1\n            # Remove the product of the empty subarray from the set\n            if 1 in subarray_prod_set:\n                subarray_prod_set.remove(1)\n        else:\n            # Update the total_sum\n            total_sum += subarray_sum\n            # Add the product of the current subarray to the set\n            subarray_prod = subarray_sum * arr[i]\n            subarray_prod_set.add(subarray_prod)\n    # Return the total sum of products of all subarrays\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod = 1\n    count = 0\n    left = 0\n    right = 0\n    total = 0\n\n    while right < n:\n        prod *= arr[right]\n        count += 1\n        right += 1\n\n        if count == 2:\n            total += prod\n            prod = 1\n            count = 0\n            left = right\n\n    return total"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # initialize the result array\n    result = [0] * (n + 1)\n    # initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    # populate the prefix sum array\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n    # populate the result array\n    for i in range(1, n + 1):\n        result[i] = result[i - 1] + prefix_sum[i] * arr[i - 1]\n    # find the sum of products of all possible sublists\n    subarray_product_sum = result[n]\n    for i in range(n):\n        subarray_product_sum -= result[i]\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize a variable to store the sum of products of sublists\n    prod_sum = 0\n\n    # Initialize a variable to store the product of current sublist\n    curr_prod = 1\n\n    # Initialize a variable to store the sum of current sublist\n    curr_sum = arr[0]\n\n    # Loop through the array\n    for i in range(1, len(arr)):\n\n        # Add the element to the sum of current sublist\n        curr_sum += arr[i]\n\n        # Calculate the product of current sublist\n        curr_prod *= arr[i]\n\n        # If the product of current sublist is greater than 1, then it cannot be a sublist of the given array, so reset the variables\n        if curr_prod > 1:\n            curr_sum = arr[i]\n            curr_prod = 1\n\n        # Add the product of current sublist to the sum of products of sublists\n        prod_sum += curr_prod\n\n    # Return the sum of products of sublists\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a 2D list with n rows and 2 columns\n    dp = [[0,0] for i in range(n)]\n\n    # Initialize first row and column of dp\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0] * arr[1]\n\n    # Fill the rest of dp table using recursive formula\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + arr[i]\n        dp[i][1] = dp[i-1][1] + arr[i] * arr[i+1]\n\n    # Find sum of products of all possible sublists\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += dp[i][0] * dp[i][1]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    subarray_products = [1] * (n + 1)\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            subarray_products[i] = subarray_products[i] * arr[j]\n            subarray_products[i] = subarray_products[i] // (arr[i-1] * arr[j])\n            \n    sum_of_subarray_products = 0\n    for i in range(n + 1):\n        sum_of_subarray_products = sum_of_subarray_products + subarray_products[i]\n        \n    return sum_of_subarray_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initializing the first and last bits to 1\n    if n & 1 == 0:\n        n |= 1\n    else:\n        n &= ~1\n\n    # finding the middle bits\n    middle_bit = 0\n    while n > 1:\n        middle_bit = n & 1\n        n = n >> 1\n\n    # toggling the middle bits\n    if middle_bit == 0:\n        n |= (middle_bit << 1)\n    else:\n        n &= ~(middle_bit << 1)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit = n & 1  # First bit is the least significant bit\n    last_bit = (n >> 1) & 1  # Last bit is the most significant bit\n    \n    if last_bit == 0:\n        n = n | (1 << 31)  # Toggle the last bit\n    else:\n        n = n & ~(1 << 31)  # Clear the last bit\n    \n    n = n | (first_bit << 31)  # Toggle the first bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n\n    # Define the bit masks for the first and last bit of the number\n    bit_mask_first = 1\n    bit_mask_last = 1 << (n.bit_length() - 1)\n\n    # Extract the first and last bits of the number\n    first_bit = n & bit_mask_first\n    last_bit = n & bit_mask_last\n\n    # Toggle the first and last bits of the number\n    toggled_first_bit = ~first_bit & bit_mask_first\n    toggled_last_bit = ~last_bit & bit_mask_last\n\n    # Combine the toggled first and last bits with the original number\n    toggled_number = toggled_first_bit | n | toggled_last_bit\n\n    # Return the toggled number\n    return toggled_number"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # Calculate the middle index\n    middle_index = len(binary_str) // 2\n    # Toggle the middle bit\n    binary_str = binary_str[:middle_index] + '0' + binary_str[middle_index+1:]\n    # Convert the binary string back to an integer\n    return int(binary_str, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Get the binary representation of the input number\n    bin_n = bin(n)[2:]\n\n    # Remove the last and first bit, since they are already set to 1\n    bin_n = bin_n[1:-1]\n\n    # Get the length of the binary representation\n    n_length = len(bin_n)\n\n    # Create an empty string to store the binary representation with toggled bits\n    toggled_bits = \"\"\n\n    # Loop through the binary representation and toggle the bits\n    for i in range(n_length):\n\n        # If the current bit is 0, toggle it to 1\n        if bin_n[i] == \"0\":\n            toggled_bits += \"1\"\n        # Otherwise, leave it as 0\n        else:\n            toggled_bits += \"0\"\n\n    # Convert the toggled binary representation back to an integer\n    toggled_n = int(toggled_bits, 2)\n\n    return toggled_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the last bit to 0\n    n = n & ~(1 << 31)\n    \n    # Set the first bit to 0\n    n = n & ~(1 << 0)\n    \n    # Shift the number to the middle\n    n = n >> 1\n    \n    # Set the last bit to 1\n    n = n | (1 << 31)\n    \n    # Set the first bit to 1\n    n = n | (1 << 0)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle two bits of a binary number except for the first and last bit.\n\n    Parameters:\n    n (int): A binary number.\n\n    Returns:\n    int: The modified binary number.\n    \"\"\"\n\n    # Convert the binary number to a list of binary digits\n    n_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Toggle the middle two bits except for the first and last bit\n    n_list[1:-1] = [1 - bit for bit in n_list[1:-1]]\n\n    # Convert the list of binary digits back to a binary number\n    n_str = ''.join(map(str, n_list))\n    n = int(n_str, 2)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Finding the first and last bits of the number\n    first_bit = (n & 1) << 15 # The bit with the value of 1 at the 15th position\n    last_bit = (n >> 15) & 1 # The bit with the value of 1 at the 15th position\n\n    # Toggling the first and last bits\n    n = n ^ first_bit ^ last_bit\n\n    # Toggling all the middle bits\n    n = n ^ (n & 0xFF)\n\n    # Return the updated number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #get the number of bits in the binary representation of n\n    num_bits = len(bin(n)[2:])\n    #find the position of the first and last bits\n    first_bit = (num_bits-2)%num_bits\n    last_bit = (num_bits-1)%num_bits\n    #find the value of the first and last bits\n    first_bit_value = n & (1<<first_bit)\n    last_bit_value = n & (1<<last_bit)\n    #toggle the bits except the first and last bits\n    n = n ^ (first_bit_value ^ last_bit_value)\n    #return the new value of the number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Convert the given number to binary string\n    binary_str = bin(n)[2:]\n\n    # Get the length of binary string\n    length = len(binary_str)\n\n    # Get the index of the first and last bits\n    first_bit = 0\n    last_bit = length - 1\n\n    # Convert first and last bits to binary strings and create their corresponding integers\n    first_bit_binary = bin(first_bit)[2:]\n    last_bit_binary = bin(last_bit)[2:]\n\n    first_bit_int = int(first_bit_binary, 2)\n    last_bit_int = int(last_bit_binary, 2)\n\n    # Create an empty list to store the toggled bits\n    toggled_bits = []\n\n    # Iterate through the binary string\n    for i in range(length):\n        # If the current bit is not the first or last bit, toggle it\n        if i!= first_bit and i!= last_bit:\n            toggled_bits.append(1 - int(binary_str[i]))\n        # If the current bit is the first or last bit, copy it to the list\n        else:\n            toggled_bits.append(int(binary_str[i]))\n\n    # Convert the toggled bits back to binary string and convert it to an integer\n    toggled_bits_binary = ''.join(map(str, toggled_bits))\n    toggled_bits_int = int(toggled_bits_binary, 2)\n\n    # Return the toggled bits as an integer\n    return toggled_bits_int"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the left insertion point using binary search\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        # Insert the value at the left insertion point\n        a.insert(index, x)\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    i = bisect.bisect_left(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return -1\n    elif index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use binary search algorithm to find the left insertion point\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use binary search algorithm to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the element is not in the list, return the index where it can be inserted\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        # If the element is already present, return the index where it can be inserted\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    if index > 0 and a[index-1] == x:\n        return index - 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # initialize left and right pointers\n    left = 0\n    right = len(a) - 1\n\n    # loop until left pointer is greater than or equal to right pointer\n    while left < right:\n        # calculate the middle index\n        mid = (left + right) // 2\n\n        # if the middle element is greater than x, update right pointer to mid-1\n        if a[mid] > x:\n            right = mid\n        # if the middle element is less than or equal to x, update left pointer to mid+1\n        else:\n            left = mid + 1\n\n    # if x is greater than all the elements in the array, return len(a)\n    if left == len(a):\n        return len(a)\n\n    # if x is less than all the elements in the array, return left\n    else:\n        return left"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    if re.search(regex, string):\n        return \"The given string starts with a vowel.\"\n    else:\n        return \"The given string does not start with a vowel.\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string): \n        return True \n    else: \n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1 / n) * (geometric_sum(n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return geometric_sum(n-1) + n * geometric_sum(n-2)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    min_triangular = math.pow(10, n) - 1\n    min_triangular_index = 0\n    count = 1\n    current_triangular = min_triangular\n    \n    while current_triangular <= min_triangular * 100:\n        count += 1\n        current_triangular = int(math.pow(10, n) * count)\n        \n        if current_triangular < min_triangular:\n            min_triangular = current_triangular\n            min_triangular_index = count\n    \n    return min_triangular_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    index = 1\n    while True:\n        num = int(math.sqrt(index * (index + 1)) + 1)\n        if num < 10 ** n:\n            break\n        index += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    triangular_num = [0] * (n+1)\n    triangular_num[0] = 0\n    triangular_num[1] = 1\n    \n    for i in range(2, n+1):\n        triangular_num[i] = triangular_num[i-1] + triangular_num[i-2]\n    \n    return triangular_num[n]\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_nums = []\n    for i in range(n+1):\n        triangular_nums.append(int(''.join(sorted(str(i))))))\n    # Using binary search to find the index of the smallest triangular number with n digits\n    low, high = 0, len(triangular_nums)-1\n    while low <= high:\n        mid = (low+high)//2\n        if triangular_nums[mid] < 10**n:\n            low = mid+1\n        else:\n            high = mid-1\n    return low\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the value of the smallest triangular number and the index of its first digit\n    smallest_triangular = 10**(n-1) \n    first_digit_index = math.log10(smallest_triangular) + 1\n\n    # Initialize a variable to keep track of the current triangular number\n    current_triangular = smallest_triangular\n\n    # Loop over the triangular numbers starting from the smallest one up to 10^n-1\n    for i in range(smallest_triangular, 10**(n-1)+1):\n        # Check if the current triangular number is greater than the smallest triangular number\n        if current_triangular > smallest_triangular:\n            # Check if the current triangular number has the same number of digits as the smallest triangular number\n            if math.log10(current_triangular) == first_digit_index:\n                # If the current triangular number has the same number of digits as the smallest triangular number,\n                # check if it is smaller than the smallest triangular number\n                if current_triangular < smallest_triangular:\n                    # If the current triangular number is smaller than the smallest triangular number,\n                    # update the smallest triangular number and the index of its first digit\n                    smallest_triangular = current_triangular\n                    first_digit_index = math.log10(smallest_triangular) + 1\n\n        # Update the current triangular number to the next one\n        current_triangular += 1\n\n    # Return the index of the smallest triangular number with n digits\n    return first_digit_index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Calculate the value of n\n    n = int(n)\n\n    # Initialize the largest triangular number with n digits\n    largest_triangular_number = math.trunc(math.pow(10, n-1)) * 10**(n-1)\n\n    # Initialize a list to store the triangular numbers\n    triangular_numbers = []\n\n    # Loop until the largest triangular number is found\n    while True:\n        triangular_numbers.append(largest_triangular_number)\n\n        # Calculate the next triangular number\n        largest_triangular_number += 1\n\n        # Check if the next triangular number is a power of 10\n        if math.trunc(largest_triangular_number/10) == 0:\n            break\n\n    # Sort the list in ascending order\n    triangular_numbers.sort()\n\n    # Return the index of the smallest triangular number with n digits\n    return triangular_numbers.index(largest_triangular_number)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    def triangularNumber(n):\n        \"\"\"\n        Returns the n-th triangular number using a formula\n        \"\"\"\n        return int(((1 + math.sqrt(5))**n - (1 - math.sqrt(5))**n) / (2 * math.sqrt(5)))\n\n    def countDigits(num):\n        \"\"\"\n        Returns the number of digits in a number\n        \"\"\"\n        return len(str(num))\n\n    def isTriangular(num):\n        \"\"\"\n        Returns True if the given number is a triangular number, False otherwise\n        \"\"\"\n        return countDigits(triangularNumber(countDigits(num))) == countDigits(num)\n\n    def smallestTriangularNumber(n):\n        \"\"\"\n        Returns the smallest triangular number with n digits\n        \"\"\"\n        minNum = 10**n\n        while True:\n            if isTriangular(minNum):\n                return minNum\n            minNum += 1\n\n    return smallestTriangularNumber(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n\n    # Initialize the smallest triangular number and its index to the first triangular number\n    smallest = 7**(n-1)\n    index = 0\n\n    # Loop through the triangular numbers from 7 to 28\n    for i in range(7, 28):\n        # Calculate the triangular number\n        triangular = i * (i + 1) // 2\n\n        # Check if the triangular number is smaller than the smallest triangular number\n        if triangular < smallest:\n            # If it is, update the smallest triangular number and its index\n            smallest = triangular\n            index = i\n\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    \n    # Initialize variables\n    minTriangular = 10**(n-1)\n    maxTriangular = 9*10**(n-1)\n    \n    # Find the index of the smallest triangular number with n digits\n    for i in range(2, int(math.log10(maxTriangular))+1):\n        minTriangular = minTriangular*10\n    \n    for i in range(int(math.log10(minTriangular))+1):\n        maxTriangular = maxTriangular*10\n    \n    return int(math.log10(maxTriangular)) + 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n):\n    # Calculate the maximum possible value of n using the formula: 2n - 1\n    max_n = 2 * n - 1\n    \n    # Initialize the index to 0\n    index = 0\n    \n    # Initialize a variable to store the triangular number\n    triangular = 0\n    \n    # Initialize a variable to store the length of the triangular number\n    length = 1\n    \n    # Loop until we reach a triangular number with n digits\n    while length < max_n:\n        triangular += length\n        \n        # Increment the length of the triangular number\n        length += 1\n        \n        # Check if the triangular number is smaller than or equal to the square root of the maximum possible value of n\n        if triangular <= math.sqrt(max_n):\n            # If it is, increment the index by 1\n            index += 1\n            \n    return index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    key_list = []\n    value_list = []\n    for i in range(len(test_tup) - 1):\n        key_list.append(test_tup[i])\n        value_list.append(test_tup[i+1])\n    return dict(zip(key_list, value_list))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    count = 0\n    for i in test_tup:\n        if count % 2 == 0:\n            my_dict[i] = test_tup[count + 1]\n        count += 1\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create a dictionary to store key-value pairs\n    d = {}\n    # Iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key and value to the dictionary\n        d[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    d = {}\n    i = 0\n    while i < len(test_tup):\n        d[test_tup[i]] = test_tup[i+1]\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    return dict(zip(test_tup, test_tup[1:]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        return \"Invalid input tuple.\"\n    \n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        key_value_dict[key] = value\n    \n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2!= 0:\n        return \"Error: Invalid tuple length\"\n\n    # Create an empty dictionary\n    my_dict = {}\n\n    # Iterate through the tuple and insert adjacent elements as key-value pairs\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        my_dict[key] = value\n\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2 == 0:\n        return dict(zip(test_tup[0::2], test_tup[1::2]))\n    else:\n        raise ValueError(\"The given tuple should have an even length.\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    elif len(s) == 1:\n        return s[0] == s[0]\n    \n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[2:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    # Check if string is empty\n    if len(s) == 0:\n        return True\n    \n    # Convert string to list of characters\n    lst = list(s)\n    \n    # Check if all characters in the list are the same\n    for i in range(1, len(lst)):\n        if lst[0]!= lst[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list to easily iterate through it\n    s_list = list(s)\n\n    # Check if all the characters in the list are same\n    if len(s_list) > 1:\n        if s_list[0] == s_list[-1]:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # convert string to lowercase\n    s = s.lower()\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through all the characters of the string\n    for char in s:\n        # if the first character is not equal to the current character, then all the characters are not same\n        if char!= first_char:\n            return False\n\n    # if all the characters are same, then return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters in a string are the same or not.\n    \"\"\"\n    # Get the first character of the string\n    first_char = s[0]\n    \n    # Loop through all the characters in the string\n    for char in s:\n        # If the character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # If all characters are the same as the first character, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # convert string to lowercase\n    s = s.lower()\n    # get the first character of the string\n    first_char = s[0]\n    # iterate over the string\n    for char in s:\n        # check if the current character is not equal to the first character\n        if char!= first_char:\n            # if not, return False\n            return False\n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a string are same or not.\n    \"\"\"\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    #calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (side * (1 + math.sqrt(5)) / 2) * (1 + math.sqrt(5)) / 2\n    \n    #calculate the area of the tetrahedron using Heron's formula\n    area = (1/3) * (semi_perimeter ** 2)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 0.5 * side\n    area = math.sqrt(s * (s - side) * (s - 2 * side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron.\n    \"\"\"\n\n    # Find the semi-perimeter of the tetrahedron\n    semi_perimeter = 3 * side / 2\n    \n    # Use the formula for the area of a right triangle\n    area = math.sqrt(semi_perimeter ** 2 - (side / 2) ** 2)\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)*side**2/4"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = (3 * side ** 2) / (12)\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (math.sqrt(semi_perimeter ** 2 - (side ** 2 / 12)))\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the area of the tetrahedron using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3) * (side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    return 0.5 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (4 / 3) * side\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter**3)\n    \n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Reverse the list\n    list.reverse()\n    # Get the length of the list\n    n = len(list)\n    # Check if the number of rotations is greater than the length of the list\n    if m > n:\n        m = m % n\n    # Iterate through the list and rotate it by m items to the right\n    for i in range(m):\n        # Store the first item in a temporary variable\n        temp = list[0]\n        # Move all the items from index 1 to n-1 one position to the right\n        for j in range(n-1):\n            list[j] = list[j+1]\n        # Insert the temporary variable at the beginning of the list\n        list[n-1] = temp"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    \n    # Reverse the list from index 0 to m-1\n    list = list[::-1]\n    \n    # Reverse the list from index m to n-1\n    list = list[n-m:][::-1]\n    \n    # Reverse the entire list\n    list = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # handle case of m > n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # convert list to tuple to allow list rotation\n    list_tuple = tuple(list)\n    # rotate list by m items to the right\n    rotated_list = list_tuple[-m:] + list_tuple[:-m]\n    # convert back to list\n    rotated_list = list(rotated_list)\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list[-n:] = list[-m:]\n    list[:-n] = list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by specified number of items to the right direction.\n    \"\"\"\n    lst.extend(lst[:n])\n    lst[:n] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[-m:], list[:-m] = list[:-m], list[-m:]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if the rotation amount is valid\n    if m >= n:\n        print(\"Invalid rotation amount\")\n        return list\n    \n    # Reverse the list from start to middle\n    for i in range(m, n):\n        list[i], list[0] = list[0], list[i]\n    \n    # Reverse the list from middle to end\n    for i in range(n-m, n):\n        list[i], list[m] = list[m], list[i]\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If the rotation is greater than the length of the list, then simply return the list as is.\n    if m > n:\n        return list\n    \n    # Create a new empty list and copy the first m items of the original list to it.\n    result = list[:m]\n    # Append the remaining items of the original list to the new list in the order they appear.\n    result.extend(list[m:])\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        temp = list[0]\n        for j in range(1, n):\n            list[j-1] = list[j]\n        list[n-1] = temp"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    This function takes a tuple as input and returns True if it has at least one none value in it and False otherwise.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_val = None\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    This function checks if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(item is None for item in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup) is None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    digit_set = set([int(d) for d in str(startnum)])\n    for num in range(startnum, endnum+1):\n        digit_count = sum(d in str(num) for d in digit_set)\n        if digit_count == len(digit_set):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    return list(filter(lambda x: all(int(d) in str(x) for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return all(num % digit == 0 for digit in digits)\n\n    divisible_nums = filter(is_divisible, range(startnum, endnum + 1))\n    return list(divisible_nums)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    return list(filter(lambda x: all(digit % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % 2 == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    \"\"\"\n    # Convert numbers to strings and remove any non-digit characters\n    startnum_str = ''.join(filter(str.isdigit, str(startnum)))\n    endnum_str = ''.join(filter(str.isdigit, str(endnum)))\n    \n    # Convert strings to lists of digits\n    startnum_digits = list(map(int, startnum_str))\n    endnum_digits = list(map(int, endnum_str))\n    \n    # Create a function to check if a number is divisible by every digit in a given range\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Check if a number is divisible by every digit in a given range.\n        \"\"\"\n        num_str = ''.join(filter(str.isdigit, str(num)))\n        num_digits = list(map(int, num_str))\n        \n        for digit in num_digits:\n            if digit not in startnum_digits or digit not in endnum_digits:\n                return False\n        \n        return True\n    \n    # Use the filter() function to find numbers in the given range that are divisible by every digit\n    divisible_numbers = list(filter(is_divisible_by_digits, range(startnum, endnum+1)))\n    \n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by any single digit.\n        \"\"\"\n        for digit in str(num):\n            if int(digit) % 10!= 0:\n                return False\n        return True\n\n    # Filter the numbers within the given range using the is_divisible_by_digit helper function\n    divisible_numbers = filter(is_divisible_by_digit, range(startnum, endnum+1))\n\n    # Print the divisible numbers\n    for num in divisible_numbers:\n        print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def check_divisible(num):\n        digits = [int(d) for d in str(num)]\n        return all(digit in digits for digit in set(digits))\n\n    return list(filter(check_divisible, range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = []\n    for num in range(startnum, endnum+1):\n        num_str = str(num)\n        for digit in num_str:\n            digits.append(int(digit))\n    unique_digits = list(set(digits))\n    return list(filter(lambda x: all(int(digit) % d == 0 for digit in str(x)), unique_digits))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda n: all(int(d) % int(str(n)[i]) == 0 for i, d in enumerate(str(n))), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * math.sin(math.radians(a/2))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Invalid angle. Please enter a value less than 360 degrees.\")\n        return None\n    \n    # Calculating area of a sector using the formula: A = \u03c0r\u00b2 sin(\u03b8)\n    area = math.pi*r**2*math.sin(math.radians(a))\n    \n    # Converting the area to square centimeters\n    area_sq_cm = area*1000**2\n    \n    return area_sq_cm"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # convert angle to radians\n    alpha = math.radians(a)\n    \n    # check if angle is valid\n    if alpha > math.pi:\n        return None\n    \n    # calculate area of sector\n    area = math.pi * r**2 * math.sin(alpha/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    #converting angle to radians\n    theta = a * math.pi/180\n    \n    #calculating area using formulae\n    area = r * r * math.sin(theta/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r * (math.sin(math.radians(a/360)))**2\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Initialize two empty lists to store the lengths of the LCS of X and Y\n    X_lcs = []\n    Y_lcs = []\n\n    # Traverse through the three sequences using two pointers i, j\n    for i in range(len(X)):\n        for j in range(len(Y)):\n            # If the characters at i and j in X and Y are equal, add 1 to the LCS of X and Y\n            if X[i] == Y[j]:\n                X_lcs.append(i+1)\n                Y_lcs.append(j+1)\n\n    # Initialize an empty list to store the lengths of the LCS of X, Y, and Z\n    LCS_length = []\n\n    # Traverse through the LCS of X and Y to find the length of the LCS of X, Y, and Z\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(X_lcs) and j < len(Y_lcs):\n        # If the characters at i, j, and k in X, Y, and Z are equal, add 1 to the LCS length\n        if X[X_lcs[i]-1] == Y[Y_lcs[j]-1] and X[X_lcs[i]-1] == Z[k]:\n            LCS_length.append(X_lcs[i] + Y_lcs[j] + k+1)\n            i += 1\n            j += 1\n            k += 1\n        # If the characters at i, j, and k in X, Y, and Z are not equal, compare the LCS of X, Y, and Z of X and Y\n        elif X[X_lcs[i]-1] == Y[Y_lcs[j]-1]:\n            i += 1\n            j += 1\n            k = 0\n        # If the characters at i, j, and k in X, Y, and Z are not equal, compare the LCS of X, Y, and Z of Y and Z\n        else:\n            i = 0\n            j += 1\n            k = 0\n\n    # Return the length of the LCS of X, Y, and Z\n    return LCS_length"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1\n    dp = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Step 2\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # Step 3\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n            i -= 1\n        elif dp[i][j-1][k] == dp[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store length of LCS for all prefixes of X[0..i], Y[0..j], and Z[0..k]\n    LCS = [[[0 for j in range(o+1)] for k in range(n+1)] for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n\n    # store the length of LCS of X[0..m], Y[0..n], and Z[0..o]\n    length = LCS[m][n][o]\n\n    # create a list to store the LCS\n    L = []\n\n    # backtrack to find the LCS\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            L.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] == LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] == LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # return the LCS as a string\n    return ''.join(reversed(L))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    LCS = [[0] * (p + 1) for i in range(m + 1)] \n\n    # Build LCS matrix in bottom-up manner. \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if i == 0 or j == 0 or k == 0: \n                    LCS[i][j][k] = 0 \n                elif X[i - 1] == Y[j - 1] and X[i - 1] == Z[k - 1]: \n                    LCS[i][j][k] = LCS[i - 1][j - 1][k - 1] + 1 \n                else: \n                    LCS[i][j][k] = max(LCS[i - 1][j][k], LCS[i][j - 1][k], LCS[i][j][k - 1]) \n\n    # Print LCS matrix for verification. \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(p + 1): \n                if LCS[i][j][k] == LCS[i - 1][j - 1][k - 1] + 1: \n                    print(X[i - 1], end=\" \") \n\n    return LCS[m][n][p] "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    # Concatenate all three string sequences to form a single string\n    X_Y_Z = X + Y + Z\n    \n    # Initialize a 3D array to store the length of the longest common subsequence for all possible substrings of length 1, 2, and 3\n    LCS = [[[0 for j in range(len(Z)+1)] for i in range(len(Y)+1)] for k in range(len(X)+1)]\n    \n    # Fill the LCS array using dynamic programming\n    for i in range(len(X)+1):\n        for j in range(len(Y)+1):\n            for k in range(len(Z)+1):\n                if i == 0 or j == 0 or k == 0:\n                    LCS[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                else:\n                    LCS[i][j][k] = max(LCS[i-1][j][k], LCS[i][j-1][k], LCS[i][j][k-1])\n    \n    # Find the length of the longest common subsequence and its indices\n    max_length = LCS[len(X)][len(Y)][len(Z)]\n    max_indices = []\n    while max_length > 0:\n        if LCS[len(X)-1][len(Y)-1][len(Z)-1] == max_length:\n            max_indices.append(len(X)-1)\n            max_indices.append(len(Y)-1)\n            max_indices.append(len(Z)-1)\n            max_length = LCS[len(X)-1][len(Y)-1][len(Z)-1]\n        elif LCS[len(X)-1][len(Y)-1][len(Z)] == max_length:\n            max_indices.append(len(X)-1)\n            max_indices.append(len(Y)-1)\n            max_length = LCS[len(X)-1][len(Y)-1][len(Z)]\n        elif LCS[len(X)-1][len(Y)][len(Z)-1] == max_length:\n            max_indices.append(len(X)-1)\n            max_length = LCS[len(X)-1][len(Y)][len(Z)-1]\n        elif LCS[len(X)][len(Y)-1][len(Z)-1] == max_length:\n            max_indices.append(len(Y)-1)\n            max_length = LCS[len(X)][len(Y)-1][len(Z)-1]\n        elif LCS[len(X)][len(Y)-1][len(Z)] == max_length:\n            max_indices.append(len(Y)-1)\n            max_length = LCS[len(X)][len(Y)-1][len(Z)]\n        elif LCS[len(X)][len(Y)][len(Z)-1] == max_length:\n            max_indices.append(len(Z)-1)\n            max_length = LCS[len(X)][len(Y)][len(Z)-1]\n        else:\n            max_indices.append(0)\n            max_length = LCS[len(X)-1][len(Y)][len(Z)]\n    \n    # Return the longest common subsequence and its indices\n    return X_Y_Z[max_indices[::-1]], max_indices"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    def lcs(X, Y, Z):\n        m, n, p = len(X), len(Y), len(Z)\n        dp = [[[0] * (n + 1) for j in range(p + 1)] for i in range(m + 1)]\n\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                for k in range(1, p + 1):\n                    if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                        dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                    else:\n                        dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n\n        return dp[m][n][p]\n\n    return lcs(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y)\n    dp = [[0]*(n+1) for i in range(m+1)]\n\n    # Build the DP table\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n\n    # Print the length of the longest common subsequence\n    lcs = ''\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    n, m, p = len(X), len(Y), len(Z)\n\n    # create a table to store lengths of longest common suffixes\n    L = [[0] * (m + 1) for i in range(n + 1)]\n\n    # initialize L[i][0] and L[0][j] for all i and j\n    for i in range(n + 1):\n        L[i][0] = 0\n    for j in range(m + 1):\n        L[0][j] = 0\n\n    # Fill L[i][j] in bottom up manner\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1] and X[i - 1] == Z[i - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n\n    # Build the lcs string\n    lcs = \"\"\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and X[i - 1] == Z[i - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i - 1][j] > L[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a matrix to store LCS values\n    LCS = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # iterate over rows of X and cols of Z\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            # check if last character of X is same as first character of Y\n            if X[i - 1] == Y[0]:\n                if LCS[i - 1][j] >= LCS[i][j - 1]:\n                    LCS[i][j] = LCS[i - 1][j] + 1\n                else:\n                    LCS[i][j] = LCS[i][j - 1]\n            # if not, check if last character of X is same as last character of Z\n            elif X[i - 1] == Z[-1]:\n                if LCS[i - 1][j] >= LCS[i][j - 1]:\n                    LCS[i][j] = LCS[i - 1][j] + 1\n                else:\n                    LCS[i][j] = LCS[i][j - 1]\n            else:\n                if LCS[i - 1][j] >= LCS[i][j - 1]:\n                    LCS[i][j] = LCS[i - 1][j]\n                else:\n                    LCS[i][j] = LCS[i][j - 1]\n\n    # convert LCS matrix to list of characters and print the result\n    lcs_list = []\n    i = m\n    j = p\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[0]:\n            lcs_list.append(X[i - 1])\n            i -= 1\n        elif X[i - 1] == Z[-1]:\n            lcs_list.append(Z[-1])\n            j -= 1\n        else:\n            if LCS[i - 1][j] >= LCS[i][j - 1]:\n                i -= 1\n            else:\n                j -= 1\n\n    return lcs_list[::-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a 3D table to store LCS lengths of all possible substrings\n    L = [[[0 for j in range(p+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # fill in the table using dynamic programming\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j-1][k])\n\n    # backtrack to find the actual LCS\n    i = m\n    j = n\n    k = p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n    lcs.reverse()\n    return ''.join(lcs)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n    \n    # Initialize an empty list to store the modified words\n    modified_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the word starts with a capital letter\n        if word[0].isupper():\n            # If it does, add a space between it and the next word\n            modified_words.append(word)\n        else:\n            # If it doesn't, just append it to the modified list\n            modified_words.append(word)\n    \n    # Join the modified words back into a single string and return it\n    return \" \".join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the words\n    result = ''\n    for word in words:\n        # Check if the first letter of the word is capital\n        if word[0].isupper():\n            # Add a space before the word\n            result +='' + word\n        else:\n            # Otherwise, just append the word\n            result += word\n            \n    return result.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # split the string into words\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    # join the words with spaces between them\n    result =''.join(words)\n    # return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1) # find all words that start with capital letter\n    if words:\n        for word in words:\n            # split the word into words and capitalize the first letter of each word\n            words_list = word.split()\n            for i in range(len(words_list)):\n                words_list[i] = words_list[i][0].upper() + words_list[i][1:]\n            # join the words back into a string\n            new_word =''.join(words_list)\n            # replace the original word with the new one\n            str1 = str1.replace(word, new_word)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words using regular expression\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # Iterate through the list of words and replace the first letter of each word with a space\n    for i, word in enumerate(words):\n        if word[0].isupper():\n            words[i] ='' + word[0].lower() + word[1:]\n\n    # Join the words back into a string with spaces between them\n    result =''.join(words)\n\n    # Return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    space_pattern = r'\\b\\s+\\b'\n    str1 = re.sub(pattern, r'\\1 ', str1)\n    str1 = re.sub(space_pattern, r' ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert string to lowercase and split into words\n    str1 = str1.lower()\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Join words and capitalize the first letter of each word\n    result =''.join([word.capitalize() for word in words])\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # remove all non-alphanumeric characters from the string\n    str1 = re.sub('[^0-9a-zA-Z\\s]', '', str1)\n    \n    # split the string into words\n    words = str1.split()\n    \n    # capitalize the first word and the rest of the words\n    words = [word.capitalize() for word in words[1:]]\n    \n    # join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\s+([a-z])', r'\\1 ', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define a regular expression pattern to match words starting with capital letters\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    \n    # use the re.sub() method to replace the words matching the pattern with spaces between them\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    num_list = []\n    for num_str in nums_str:\n        num = float(num_str)\n        if not num.is_integer():\n            num_list.append(num_str)\n    num_list.sort(key=lambda x: float(x))\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n\n    Args:\n        nums_str (list): List of strings of numbers\n\n    Returns:\n        sorted_nums_str (list): List of strings of numbers sorted in ascending order\n    \"\"\"\n\n    # create a list of numeric strings\n    nums_list = [num for num in nums_str if num.isdigit()]\n\n    # convert the numeric strings to integers\n    nums_list = [int(num) for num in nums_list]\n\n    # sort the numeric strings in ascending order\n    nums_list.sort()\n\n    # create a list of non-numeric strings\n    non_nums_list = [num for num in nums_str if not num.isdigit()]\n\n    # concatenate the non-numeric strings with the sorted numeric strings\n    sorted_nums_str = non_nums_list + nums_list\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    num_list = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            num_list.append(num)\n        except ValueError:\n            continue\n    num_list.sort()\n    return num_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Create a list of tuples containing the number and string\n    num_str_list = []\n    for num_str in nums_str:\n        # Split the string by comma and extract the number\n        num_str_list.append((int(num_str.split(',')[0]), num_str))\n    \n    # Sort the list by the number\n    num_str_list.sort()\n    \n    # Create a new list of strings sorted by the number\n    sorted_num_str_list = []\n    for num, str_ in num_str_list:\n        sorted_num_str_list.append(str_)\n    \n    return sorted_num_str_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = re.findall(r'\\d+', nums_str)\n    nums = list(map(int, nums))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums.sort()\n    # Convert the sorted list of integers to a list of strings\n    nums_str = [str(num) for num in nums]\n    # Return the sorted list of strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically using the built-in `sorted` function.\n    \"\"\"\n    nums = [float(s.replace(',', '.')) for s in nums_str]\n    return sorted(nums)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(\"The new list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the given list to a set so we can add the tuple\n    test_set = set(test_list)\n\n    # Add the tuple to the set and convert it back to a list\n    result = list(test_set.union(test_tup))\n\n    return result"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] >= arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr)//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap(arr):\n    '''\n    This function will return True if the given array represents a min heap, else False.\n    '''\n    n = len(arr)\n    # Check if the array has at least one element\n    if n == 0:\n        return False\n\n    # Start from the second element as its parent\n    for i in range(1, n):\n        # Check if the current element is greater than its parent\n        if arr[i] < arr[i//2]:\n            return False\n\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_min_heap(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[2*i+1]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    if arr[i] <= arr[parent(i)]:\n        return False\n    return check_min_heap_helper(arr, parent(i))\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. \n    https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n    if arr[i] > arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef is_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    if len(arr) == 0:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    else:\n        return check_min_heap_helper(arr, len(arr)-2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i, n):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= n:\n        return True\n\n    if arr[i] < arr[i+1]:\n        return False\n\n    return check_min_heap_helper(arr, i+1, n)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n    return check_min_heap_helper(arr, 0, n)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i  # Assume the root is the smallest element\n\n    # If the left child is smaller than the current smallest element, then change the smallest element\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    # If the right child is smaller than the current smallest element, then change the smallest element\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # If the current smallest element is not the root, then swap it with the root\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        # Recursively call the function on the swapped element\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i >= len(arr) // 2:\n        return True\n    \n    if arr[i] > arr[2 * i + 1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2 * i + 1)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_num = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n    return jacobsthal_num[n]\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]  # initialize the list of jacobsthal numbers\n    for i in range(2, n + 1):\n        jacobsthal_numbers.append(jacobsthal_numbers[i - 1] + jacobsthal_numbers[i - 2])\n    return jacobsthal_numbers[-1]  # return the last element of the list, which is the nth jacobsthal number"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Returns the nth Jacobsthal number using the recurrence relation:\n    J(n) = J(n-1) + J(n-2) + 2J(n-3) +... + 2^(n-1)J(0) +...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1) + jacobsthal_num(n-2) + 2**(n-1)*jacobsthal_num(0)) % 1000000007"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jacobsthal = 1\n    jacobsthal_lucas = 0\n\n    # Calculate and print the nth jacobsthal number\n    for i in range(1, n+1):\n        jacobsthal = (jacobsthal * (i + 1)) // (i + 2)\n        print(jacobsthal, end=' ')\n\n    # Calculate and print the nth jacobsthal lucas number\n    for i in range(1, n+1):\n        jacobsthal_lucas = (jacobsthal_lucas * i) // (i + 2)\n        print(jacobsthal_lucas, end=' ')"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal = 1\n    lucas = 1\n    for i in range(n):\n        jacobsthal, lucas = jacobsthal + lucas, jacobsthal\n    return jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 1 + 1 + jacobsthal_num(n - 2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = 0\n        while n > 0:\n            jacob_num += n // 2\n            n = n - jacob_num\n            n = n // 2\n        return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1)) + jacobsthal_num(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize minimum k to infinity\n    min_k = float('inf')\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate through the sorted list\n    for i in range(len(test_list)):\n        if count < K:\n            min_k = min(min_k, test_list[i][1])\n            count += 1\n        else:\n            # If count is already greater than or equal to K,\n            # remove the smallest element from the list\n            if test_list[i][1] == min_k:\n                del test_list[i]\n\n    return min_k"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    min_count = 0\n    min_value = None\n    for i in test_list:\n        if min_count < K:\n            min_count += 1\n            min_value = i\n        else:\n            if i < min_value:\n                min_count -= 1\n                min_value = i\n\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the list by second element in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize minimum count and minimum value as infinite\n    min_count = float('inf')\n    min_value = float('inf')\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n\n        # If current count is smaller than K, increment count\n        if sorted_list[i][0] < K:\n            sorted_list[i][0] += 1\n\n        # If current count is equal to K, check if the value is smaller than the current minimum value\n        elif sorted_list[i][0] == K and sorted_list[i][1] < min_value:\n            min_count = K\n            min_value = sorted_list[i][1]\n\n        # If current count is greater than K, check if the count is smaller than the minimum count\n        elif sorted_list[i][0] > K:\n            min_count = sorted_list[i][0]\n            min_value = sorted_list[i][1]\n\n        # If current count is equal to K, check if the value is smaller than the current minimum value\n        elif sorted_list[i][0] == K and sorted_list[i][1] < min_value:\n            min_count = K\n            min_value = sorted_list[i][1]\n\n        # If current count is greater than K and the value is smaller than the minimum value, update the minimum count and value\n        elif sorted_list[i][0] > K and sorted_list[i][1] < min_value:\n            min_count = sorted_list[i][0]\n            min_value = sorted_list[i][1]\n\n    # Return the minimum count and minimum value\n    return min_count, min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # sort the list of tuples based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n\n    # initialize min_list with the first K records\n    min_list = test_list[:K]\n\n    # initialize min_val with the minimum value of the first K records\n    min_val = min_list[0][1]\n\n    # loop over the remaining records of the list\n    for i in range(K, len(test_list)):\n        # if the current record has a smaller value than the current minimum, update the minimum\n        if test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_list = [test_list[i]]\n        # if the current record has the same value as the minimum, add it to the min_list\n        elif test_list[i][1] == min_val:\n            min_list.append(test_list[i])\n\n    # return the minimum K records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return None\n\n    min_k_records = sorted(test_list, key=lambda x: x[1])[:K]\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize min_k variable with maximum possible value of int\n    min_k = 2147483647\n\n    # Initialize min_index variable with 0\n    min_index = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Calculate the difference between the current tuple and the minimum k-tuple found so far\n        diff = sum(min_k_tuple) - sum(test_list[i])\n\n        # If the difference is less than the current min_k, update min_k and min_index\n        if diff < min_k:\n            min_k = diff\n            min_index = i\n\n    # Return the minimum k tuple\n    return test_list[min_index][:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list)\n\n    # Initialize variables to store minimum k records and index of minimum k record\n    min_k_records = []\n    min_k_index = -1\n\n    # Loop through the sorted list\n    for index, item in enumerate(sorted_list):\n        if len(min_k_records) < K:\n            # Add to the list if less than k records found\n            min_k_records.append(item)\n        elif item[1] < min_k_records[-1][1]:\n            # If the current item's second element is less than the minimum k record's second element, replace the minimum k record\n            min_k_records[-1] = item\n        elif item[1] == min_k_records[-1][1] and item[0] < min_k_records[-1][0]:\n            # If the current item's second element is equal to the minimum k record's second element and its first element is less than the minimum k record's first element, replace the minimum k record\n            min_k_records[-1] = item\n\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for tup in test_list:\n        if tup[0] in freq_dict:\n            freq_dict[tup[0]] += 1\n        else:\n            freq_dict[tup[0]] = 1\n    \n    # sort the dictionary based on the frequency of each element\n    sorted_dict = dict(sorted(freq_dict.items(), key=lambda item: item[1], reverse=True))\n    \n    # initialize the minimum frequency\n    min_freq = float('inf')\n    \n    # iterate through the sorted dictionary and find the minimum k records\n    min_list = []\n    for key, value in sorted_dict.items():\n        if value >= K:\n            min_list.append((key, value))\n            if len(min_list) == K:\n                break\n            \n    # return the minimum k records\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1]) # sort by value in ascending order\n    min_val = test_list[0][1]\n    min_count = 1\n    for i in range(1, len(test_list)):\n        if test_list[i][1] == min_val:\n            min_count += 1\n        else:\n            break\n    return min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a list of tuples and a number k as inputs and returns a list of tuples containing the k minimum elements from the input list.\n    If there are fewer than k elements in the list, the function returns all the elements in the list.\n    '''\n    sorted_list = sorted(test_list)\n    return sorted_list[:K]"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    # Iterate through all the indices in the first list\n    for i in range(len(l1)):\n        # Check if the element at that index is present in all the lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i] and l1[i] not in common_elements:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create an empty list to store the common elements\n    common_list = []\n    \n    # Loop through each index of l1, l2, l3\n    for i in range(len(l1)):\n        # If the element at this index is common for all three lists, add it to the common_list\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    \n    # Return the common_list\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_list.append(l1[i])\n            \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty dictionary to store the count of each element in the lists\n    count_dict = {}\n    \n    # Iterate through l1 and l2 and count the occurrence of each element in l3\n    for elem in l1 + l2:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    \n    # Iterate through l3 and check if the element is common for all the lists\n    common_elements = []\n    for elem in l3:\n        if elem in count_dict and count_dict[elem] == 3:\n            common_elements.append(elem)\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_list:\n            common_list.append(l1[i])\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3 and l2[i] not in common_list:\n            common_list.append(l2[i])\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2 and l3[i] not in common_list:\n            common_list.append(l3[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # create empty list to store common elements\n    common_elements = []\n    \n    # iterate through the lists\n    for i in range(len(l1)):\n        # check if the element at index i is in all the lists\n        if l1[i] in l2 and l2[i] in l3 and l1[i] in l3:\n            # if the element is common, add it to the common_elements list\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list to store the common elements\n    common_elements = []\n\n    # loop through the indices of the lists\n    for i in range(len(l1)):\n        # check if the element at the current index is in all three lists\n        if l1[i] in l2[i] and l2[i] in l3[i]:\n            # if it is, add it to the common elements list\n            common_elements.append(l1[i])\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Create a dictionary to store the numbers and their indices\n    dict = {}\n\n    # Loop through the list of numbers and add them to the dictionary\n    for i in range(len(numbers)):\n        dict[numbers[i]] = i\n\n    # Find the smallest and second smallest numbers\n    smallest = second_smallest = float('inf')\n\n    # Loop through the list of numbers and update the smallest and second smallest numbers\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    for number in numbers[2:]:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n    \"\"\"\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    smallest = min(numbers)\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest and number!= smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest and number!= second_smallest:\n            second_smallest = number\n            \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    The second smallest number in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input is not a list.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n\n    min1, min2 = float('inf'), float('inf')\n\n    for num in numbers:\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2 and num!= min1:\n            min2 = num\n\n    return min2"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    This function finds the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = second_smallest = float('inf')\n    \n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=(?:(?!b).)*b)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'\\ba(?=\\w*b\\b)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b)*')\n    result = pattern.findall(text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab{1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'(?<=a)b+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:] and test_list[j][::-1] in test_list[i:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n\n    # Create an empty dictionary to store the counts of reverse pairs\n    reverse_dict = {}\n\n    # Loop through each string in the list\n    for string in test_list:\n\n        # Split the string into two parts and reverse them\n        reversed_string = string[::-1]\n\n        # Check if the reversed string is already a key in the dictionary\n        if reversed_string in reverse_dict:\n\n            # Increment the count for the original string\n            reverse_dict[string] += 1\n\n        # If the reversed string is not already a key, add it with a count of 1\n        else:\n            reverse_dict[reversed_string] = 1\n\n    # Create an empty list to store the counts of reverse pairs\n    pair_counts = []\n\n    # Loop through each key in the dictionary and add the count to the pair_counts list\n    for key, value in reverse_dict.items():\n        pair_counts.append((key, value))\n\n    # Sort the pair_counts list in descending order of the counts\n    pair_counts.sort(key=lambda x: x[1], reverse=True)\n\n    # Initialize a counter variable\n    count = 0\n\n    # Loop through each pair of counts in the sorted pair_counts list\n    for i in range(len(pair_counts)):\n        for j in range(i + 1, len(pair_counts)):\n\n            # If the counts are the same, increment the count\n            if pair_counts[i][1] == pair_counts[j][1]:\n                count += pair_counts[i][1]\n\n    # Return the final count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize a dictionary to store the count of reverse strings\n    reverse_count = {}\n\n    # Iterate over the input list\n    for s in test_list:\n        # If the string is already in the dictionary, increment its value\n        if s in reverse_count:\n            reverse_count[s] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else:\n            reverse_count[s] = 1\n\n    # Initialize a variable to store the count of pairs\n    pair_count = 0\n\n    # Iterate over the keys of the dictionary\n    for key in reverse_count:\n        # Iterate over the keys of the dictionary again\n        for other_key in reverse_count:\n            # Check if the keys are in reverse order\n            if key == other_key[::-1]:\n                # If so, increment the pair count\n                pair_count += reverse_count[key] * reverse_count[other_key]\n\n    # Return the pair count\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] and test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_dict = {}\n    count = 0\n\n    for string in test_list:\n        if string in reverse_dict:\n            count += reverse_dict[string]\n        else:\n            reverse_dict[string] = 0\n\n    for string in test_list:\n        if string in reverse_dict:\n            reverse_dict[string] += 1\n        else:\n            reverse_dict[string] = 1\n\n    for value in reverse_dict.values():\n        count += value // 2\n\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary\n    sublist_count = {}\n    # loop through each element of the list\n    for elem in list1:\n        # convert the element to a tuple\n        tup = tuple(elem)\n        # check if the tuple is already in the dictionary\n        if tup in sublist_count:\n            # if it is, increment its value by 1\n            sublist_count[tup] += 1\n        else:\n            # if it's not, add it to the dictionary with a value of 1\n            sublist_count[tup] = 1\n    # return the dictionary\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    # Iterate over the list of lists\n    for sublist in list1:\n        # Convert the sublist to a tuple and check if it exists in the dictionary\n        if tuple(sorted(sublist)) not in count_dict:\n            # If it doesn't exist, add it to the dictionary with a count of 1\n            count_dict[tuple(sorted(sublist))] = 1\n        else:\n            # If it does exist, increment the count of its occurrence\n            count_dict[tuple(sorted(sublist))] += 1\n    # Return the dictionary of unique sublists with their count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique sublist\n    sublist_counts = {}\n\n    # Loop through each element in the list1 and convert it to a tuple\n    for item in list1:\n        # Convert the item to a tuple if it is a list\n        if isinstance(item, list):\n            item = tuple(item)\n\n        # If the item is already a tuple, add it to the sublist_counts dictionary\n        if isinstance(item, tuple):\n            sublist_counts[item] = sublist_counts.get(item, 0) + 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts of each tuple of the list\n    count_dict = {}\n    # loop through each element of the list\n    for element in list1:\n        # convert the element to a tuple\n        tuple_element = tuple(element)\n        # check if the tuple already exists in the dictionary\n        if tuple_element in count_dict:\n            # increment the count of the tuple in the dictionary\n            count_dict[tuple_element] += 1\n        else:\n            # add the tuple to the dictionary with a count of 1\n            count_dict[tuple_element] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_tuples = set()\n    for item in list1:\n        list_tuples.add(tuple(item))\n    counts = {}\n    for tuple_ in list_tuples:\n        counts[tuple_] = list1.count(tuple_)\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # Create an empty dictionary\n    result = {}\n    # Iterate over each sublist in the given list\n    for sublist in lst:\n        # Convert the sublist to a tuple\n        sublist = tuple(sublist)\n        # Check if the tuple already exists in the dictionary\n        if sublist in result:\n            # Increment the value of the tuple by 1\n            result[sublist] += 1\n        else:\n            # If the tuple does not exist in the dictionary, add it with a value of 1\n            result[sublist] = 1\n    # Return the dictionary\n    return result"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist not in count_dict:\n            count_dict[sublist] = 0\n        count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for lst in list1:\n        count_dict[tuple(lst)] = list1.count(lst)\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # creating an empty dictionary\n    sublists = {}\n    # iterating over the list1\n    for i in range(len(list1)):\n        # converting the list to tuple\n        lst = tuple(list1[i])\n        # checking if the tuple is already present in the dictionary\n        if lst in sublists:\n            # incrementing the value of the tuple by 1\n            sublists[lst] += 1\n        else:\n            # adding the tuple to the dictionary with value 1\n            sublists[lst] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        tup = tuple(element)\n        # Check if the tuple is already a key in the dictionary\n        if tup in count_dict:\n            # If it is, increment the value associated with the key\n            count_dict[tup] += 1\n        else:\n            # If it isn't, add the key-value pair to the dictionary\n            count_dict[tup] = 1\n\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    if num_list[0] == '.' or num_list[-1] == '.':\n        return False\n    for i in range(1, len(num_list)-1):\n        if not num_list[i].isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the string is a valid number\n    if '.' not in num and not num.isdigit():\n        return False\n    \n    # check if the number has a precision of 2\n    if '.' in num:\n        num_str = num.split('.')\n        if len(num_str[1]) > 2:\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    num = str(num)\n    if '.' not in num:\n        return False\n    elif '.' not in num.split('.')[-1]:\n        return False\n    else:\n        num_list = num.split('.')[-1].split(',')\n        for digit in num_list:\n            if digit.replace('.', '').isdigit():\n                if len(digit) > 2:\n                    return False\n            else:\n                return False\n        return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the given string is a valid number\n    try:\n        float(num)\n    except ValueError:\n        return False\n\n    # Check if the number has a precision of 2\n    parts = num.split('.')\n    if len(parts) > 1 and len(parts[1]) > 2:\n        return False\n\n    # Check if the number is a valid decimal number\n    if len(parts) == 1 or (len(parts) == 2 and len(parts[1]) <= 2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if num.count(\".\") == 1 and num.count(\",\") == 0:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # convert the string to a float\n    float_num = float(num)\n\n    # check if the float is an integer\n    if int(float_num) == float_num:\n        # if it's an integer, check the precision\n        if abs(float_num - int(float_num)) < 0.01:\n            # if it's within 0.01 of the integer, return True\n            return True\n        else:\n            # if it's not within 0.01 of the integer, return False\n            return False\n    else:\n        # if it's not an integer, return False\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '.')\n    if '.' in num:\n        num_list = num.split('.')\n        if len(num_list) == 2:\n            int_part = num_list[0]\n            dec_part = num_list[1]\n            if len(int_part) <= 10 and len(dec_part) <= 2:\n                for i in range(len(int_part)):\n                    if int(int_part[i]) > 9:\n                        return False\n                for i in range(len(dec_part)):\n                    if int(dec_part[i]) > 9:\n                        return False\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if '.' not in num and '-' not in num and 'e' not in num and 'E' not in num:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    # split the string into a list of digits\n    digits = list(str(num))\n\n    # check if the length of the list is less than 2\n    if len(digits) < 2:\n        return False\n\n    # check if the first digit is not 0\n    if digits[0] == '0':\n        return False\n\n    # check if the second digit is 0\n    if digits[1] == '0':\n        return False\n\n    # check if the length of the list is greater than 2\n    if len(digits) > 2:\n        # check if the last two digits are 0\n        if digits[-2:] == '00':\n            return False\n\n    # check if all the remaining digits are 0\n    for digit in digits[2:]:\n        if digit!= '0':\n            return False\n\n    # if the loop has been completed without returning False, the string is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    if len(count) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Remove duplicates from the list\n    arr = list(set(arr))\n\n    # Check if the length of the list is 1\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = set(arr) # convert the list to set to remove duplicates\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Remove duplicates from the list using a set\n    unique_arr = list(set(arr))\n\n    # Check if the length of the unique list is 1\n    if len(unique_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the current element\n    curr_elem = None\n\n    # Iterate through the list and check if the current element is the same as the previous element\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n\n    # If the loop completes without returning False, it means there are only one distinct elements in the list\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Check if the list contains only one element\n    if len(arr) == 1:\n        return True\n\n    # Create a dictionary to store the count of each element in the list\n    count = {}\n\n    # Iterate over the elements in the list and update the count of each element\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Iterate over the count dictionary and check if the count of each element is 1\n    for num in count:\n        if count[num]!= 1:\n            return False\n\n    # If all elements have a count of 1, the list contains only one distinct element\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(1,len(arr)):\n            if arr[i] == arr[i-1]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list does not contain only one distinct element.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 < 1 or monthnum3 > 12:\n        raise ValueError(\"Month number should be between 1 and 12.\")\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            days_in_months[2] = 29\n        else:\n            days_in_months[2] = 28\n    return days_in_months[monthnum3-1]"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Define the number of days in each month\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # Check whether the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number!\"\n\n    # Check whether the month contains 30 days or not\n    if days_in_month[monthnum3-1] == 30:\n        return \"The month contains 30 days.\"\n    else:\n        return \"The month does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum = int(monthnum)\n    if monthnum == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            if monthnum == 2:\n                return True\n        else:\n            return False\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check for valid input\n    if not isinstance(monthnum3, int) or monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid input.\"\n    \n    # Convert month number to text\n    monthnum3_text = str(monthnum3)\n    \n    # Check for 30-day months\n    if monthnum3_text[0] in [\"4\", \"6\", \"9\", \"11\"]:\n        return \"30-day month.\"\n    else:\n        return \"Not a 30-day month.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        if monthnum3 % 100 == 0:\n            if monthnum3 % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n                return \"True\"\n            else:\n                return \"False\"\n        else:\n            return str(days[monthnum3-1])\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        if monthnum3 % 2 == 0:\n            return False\n        else:\n            return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"The month contains 30 days.\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(\"The month contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 == 2:\n        if monthnum3 % 4 == 0:\n            if monthnum3 % 100 == 0:\n                if monthnum3 % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    elif monthnum3 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and a number n, and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')  # initialize minimum difference as infinity\n\n    # iterate through the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the difference between the elements\n            diff = abs(arr[i] - arr[j])\n\n            # if the difference is smaller than the current minimum difference, update the minimum difference\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes a list of integers and an integer n as input, and\n    returns a list containing the minimum difference between any two elements\n    in the given array.\n\n    The function first finds the minimum element in the array, and then\n    calculates the minimum difference between any two elements in the array.\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n\n    Args:\n    arr: list of integers\n    n: integer\n\n    Returns:\n    list of integers: containing the minimum difference between any two elements in the given array.\n    \"\"\"\n\n    min_element = min(arr)\n\n    min_diff = float('inf')\n\n    for i in range(n):\n        diff = arr[i] - min_element\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. \n    https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1]-arr[0]\n    for i in range(1,n-1):\n        diff = arr[i+1]-arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(1, n):\n        diff = min(diff, arr[i] - arr[i - 1])\n    return diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() # sort the array in ascending order\n    min_diff = arr[1] - arr[0] # initialize minimum difference as the difference between first and second element\n    for i in range(1, n-1): # loop through the array except the first and last elements\n        diff = arr[i+1] - arr[i] # calculate the difference between current element and next element\n        if diff < min_diff: # if the calculated difference is smaller than the current minimum difference, update the minimum difference\n            min_diff = diff\n    return min_diff # return the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input.\n    It finds the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    min_diff = arr[n-1] - arr[0]\n    for i in range(1, n-1):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort() #sort the array in ascending order\n\n    diff = arr[1] - arr[0] #initializing the minimum difference as the difference between the first two elements\n\n    for i in range(2,n): #iterating from the third element to the last element of the array\n        curr_diff = arr[i] - arr[i-1] #calculating the difference between the current element and the previous element\n        if curr_diff < diff: #if the current difference is smaller than the current minimum difference\n            diff = curr_diff #updating the minimum difference\n\n    return diff #returning the minimum difference"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Args:\n    arr (list of int): List of integers.\n    n (int): Number of elements in the array.\n\n    Returns:\n    int: Minimum difference between any two elements in the array.\n\n    \"\"\"\n    min_diff = float('inf')  # initialize the minimum difference as infinite\n    for i in range(n):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(s):\n    \"\"\"\n    Count the number of digits in a string.\n    \"\"\"\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    num_of_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_of_digits += 1\n    return num_of_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(string):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    def nth_polite_number(num):\n        polite_num = 0\n        current_num = 1\n        prime_count = 0\n        while prime_count < num-1:\n            if is_prime(current_num):\n                polite_num += current_num\n                prime_count += 1\n            current_num += 1\n        return polite_num\n    \n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function takes an integer n as input and returns the nth polite number. \n    '''\n    if n < 1:\n        return None\n    \n    if n == 1:\n        return 1\n    \n    if n % 2 == 0:\n        return 2 * is_polite(n/2)\n    \n    phi = (1 + math.sqrt(5)) / 2\n    count = 0\n    x = 1\n    \n    while count < n:\n        x = 3 * x + 1\n        count += 1\n    \n    return x"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_polite(n):\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189,"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_close_to_prime(num):\n        return is_prime(num) and abs(num) < 1000\n\n    def is_prime_and_close_to_prime(num):\n        return is_prime(num) and abs(num) < 10000\n\n    def is_prime_and_close_to_prime_and_odd(num):\n        return is_prime_and_close_to_prime(num) and num % 2 == 1\n\n    polite_number = 0\n\n    while polite_number < n:\n        if is_prime_and_close_to_prime_and_odd(polite_number):\n            polite_number += 1\n        else:\n            polite_number += 2\n\n    return polite_number\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Returns True if a given number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_polite_number(num):\n        \"\"\"\n        Returns True if a given number is a polite number.\n        \"\"\"\n        polite = \"\"\n        for i in range(1, num+1):\n            if is_prime(i):\n                polite += str(i)\n        return polite == str(num)\n\n    def get_nth_polite_number(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        count = 1\n        current_num = 1\n        while count < n:\n            if is_polite_number(current_num):\n                count += 1\n            current_num += 1\n        return current_num\n\n    return get_nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    This function returns the nth polite number.\n    '''\n    if n < 1:\n        return 1\n    \n    # Calculate the sum of squares of even numbers from 1 to n-1\n    sum_of_squares = sum([i**2 for i in range(1, n+1, 2)])\n    \n    # Calculate the sum of odd numbers from 1 to n-1\n    sum_of_odds = sum([i for i in range(1, n+1, 2)])\n    \n    # Calculate the square root of the sum of squares\n    square_root = math.sqrt(sum_of_squares)\n    \n    # Calculate the number of digits in the square root\n    digits = int(math.log10(square_root))\n    \n    # Calculate the sum of digits of the square root\n    sum_of_digits = sum([int(i) for i in str(square_root)])\n    \n    # Calculate the difference between the sum of digits and the total number of digits in the square root\n    difference = sum_of_digits - digits\n    \n    # Return the nth polite number\n    return int((square_root + 1) * (2**(difference % 2)))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize the polite number count and the current polite number\n    count = 0\n    num = 1\n    # Loop till n is reached\n    while count < n:\n        # If the current polite number is odd, increment it by 2\n        if num % 2 == 1:\n            num += 2\n        # If the current polite number is even, increment it by 1\n        else:\n            num += 1\n        # Increment the polite number count\n        count += 1\n    # Return the polite number\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_count = 0\n    num = 1\n    for i in range(n):\n        if num % 11 == 0:\n            polite_count += 1\n            if polite_count == 5:\n                return num\n        num += 1\n    return None"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        result = 3\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return \"Not a polite number\"\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            if n % i == 0:\n                return \"Not a polite number\"\n        return result\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    This function checks if a given number is a polite number or not.\n    A polite number is a number that is divisible by 2, 3, or 5 and has at least one 0 in it.\n    \"\"\"\n    # If n is less than or equal to 0, then it cannot be a polite number.\n    if n <= 0:\n        return False\n\n    # We need to check if the number is divisible by 2, 3, or 5.\n    divisible_by_2 = n % 2 == 0\n    divisible_by_3 = n % 3 == 0\n    divisible_by_5 = n % 5 == 0\n\n    # If none of the above conditions are true, then the number cannot be a polite number.\n    if not (divisible_by_2 or divisible_by_3 or divisible_by_5):\n        return False\n\n    # We need to check if the number has at least one 0 in it.\n    if str(n).count('0') == 0:\n        return False\n\n    # If all the above conditions are true, then the number is a polite number.\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i + 1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    This function takes a list as input and returns a list of all pairs of consecutive items in the list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to sum.\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as inputs and returns the number of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function counts the number of pairs whose sum is equal to'sum'. It takes two arguments: a list of numbers and the sum.\n    '''\n    pairs_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    # Using set() method to get the difference between two lists\n    diff_set = set(li1) - set(li2)\n    # Converting set to a list\n    diff_list = list(diff_set)\n    # Returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Given two lists, this function returns a new list that contains the elements that appear only in list1 but not in list2.\n\n    Args:\n        li1 (list): A list of elements.\n        li2 (list): A list of elements.\n\n    Returns:\n        A new list that contains the elements that appear only in list1 but not in list2.\n    \"\"\"\n    diff_list = []\n    for elem in li1:\n        if elem not in li2:\n            diff_list.append(elem)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n\n    Args:\n    - li1 (list): first list\n    - li2 (list): second list\n\n    Returns:\n    - list: the list of elements that are in li1 but not in li2\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements that are in list1 but not in list2.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # creating a new list to store the difference\n    diff_list = []\n    # iterating over each element of the list 1 and checking if it exists in the list 2\n    for i in li1:\n        if i not in li2:\n            # if not, then adding the element to the new list\n            diff_list.append(i)\n    # returning the new list as the difference between the two lists\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2) : \n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of the fourth power of odd natural numbers\n    sum_4th_pow = 0\n    # Initialize a variable to store the current number\n    num = 1\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if num % 2!= 0:\n            # Calculate the fourth power of the current number\n            fourth_pow = num ** 4\n            # Add the fourth power to the sum_4th_pow variable\n            sum_4th_pow += fourth_pow\n        # Increment the current number by 2\n        num += 2\n    # Return the sum of the fourth power of odd natural numbers\n    return sum_4th_pow"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # initializing sum of fourth power of odd natural numbers\n    sum_of_fourth_powers = 0\n    \n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # checking if i is odd\n        if i % 2!= 0:\n            # if odd, finding fourth power\n            fourth_power = i ** 4\n            # adding fourth power to sum of fourth powers\n            sum_of_fourth_powers += fourth_power\n    \n    # returning the sum of fourth powers\n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num = 1\n    sum_of_power = 0\n    \n    while num < n:\n        sum_of_power += num ** 4\n        num += 1\n    \n    return sum_of_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i**4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                balance += 1\n            else:\n                stack.pop()\n\n    if not stack:\n        return balance\n    else:\n        return \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            elif stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    \n    for i in exp:\n        if i in opening_brackets:\n            stack.append(i)\n        elif i in closing_brackets:\n            if not stack:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            elif i == ']' and stack[-1]!= '[':\n                return False\n            elif i == '}' and stack[-1]!= '{':\n                return False\n            stack.pop()\n            \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1]!= '(':\n                return False\n            elif char == ']' and stack[-1]!= '[':\n                return False\n            elif char == '}' and stack[-1]!= '{':\n                return False\n            else:\n                stack.pop()\n\n    if not stack:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1]!= '(':\n                return False\n            elif i == '}' and stack[-1]!= '{':\n                return False\n            elif i == ']' and stack[-1]!= '[':\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char in ['(', '[', '{']:\n                if char == stack.pop():\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char.isalpha():\n            if char == '(':\n                stack.append(char)\n            elif char == ')':\n                if not stack:\n                    return False\n                if stack.pop()!= '(':\n                    return False\n        elif char in ['+', '-', '*', '/']:\n            if not stack:\n                return False\n            if stack[-1].isdigit():\n                return False\n            if char == '+' and stack[-1] == '-' or char == '-' and stack[-1] == '+' or char == '*' and stack[-1] == '/' or char == '/' and stack[-1] == '*':\n                return False\n            stack.append(char)\n        elif char =='':\n            continue\n        else:\n            return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        elif bracket in closing_brackets:\n            if len(stack) == 0:\n                return False\n            last_bracket = stack.pop()\n            if bracket!= last_bracket:\n                return False\n\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char == ')' and top!= '(':\n                return False\n            elif char == ']' and top!= '[':\n                return False\n            elif char == '}' and top!= '{':\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    # Convert the given string to a list of words\n    words = test_str.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the length of the word is equal to K\n        if len(words[i]) == K:\n            # Remove the word from the list using the index\n            del words[i]\n    \n    # Convert the list of words back to a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the words without k length\n    new_words = []\n    # Loop through each word in the words list\n    for word in words:\n        # If the length of the word is not equal to K, add it to the new_words list\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the words in the new_words list into a string and return it\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Loop through the list of words and remove any words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    # Join the words back into a string\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split() #split the string into words\n    for i in range(len(words)):\n        if len(words[i]) == K: #check if word length is equal to K\n            words.remove(words[i]) #remove the word from the list\n    \n    return''.join(words) #join the words back into a string"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the new words\n    new_words = []\n    # Loop through each word in the list\n    for word in words:\n        # If the length of the word is not equal to K, append it to the new list\n        if len(word)!= K:\n            new_words.append(word)\n    # Join the new words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if not matches:\n        return None\n    else:\n        result = []\n        for match in matches:\n            result.append(match.group())\n        return result"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # match all occurrences of pattern in text and return the results\n    matches = re.findall(pattern, text)\n\n    # if no matches are found, return None\n    if not matches:\n        return None\n\n    # loop through the matches and return the results\n    for match in matches:\n        pos = text.find(match)\n        print(f\"The substring '{match}' occurs {matches.count(match)} times at position {pos} in the text.\")\n\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    if matches:\n        result = []\n        for match in matches:\n            result.append((match.group(), match.start(), match.end()))\n        return result\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return len(matches), matches[0]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n\n    for match in matches:\n        match_index = text.find(match)\n        print(f\"Occurrence: {match}, Position: {match_index}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern,text)\n    if matches:\n        match_list = []\n        for match in matches:\n            match_dict = {}\n            match_dict['start'] = match.start()\n            match_dict['end'] = match.end()\n            match_list.append(match_dict)\n        return match_list\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Check if pattern is a regular expression\n    if re.search(r'^\\(', pattern) is not None:\n        pattern = re.compile(pattern)\n        \n    # Find all occurrences of the pattern in the text\n    matches = pattern.findall(text)\n    \n    # Check if there are any matches\n    if matches:\n        # Sort matches by their position in the text\n        matches = sorted(matches, key=lambda x: text.index(x))\n        \n        # Return the first match and its position in the text\n        return matches[0], text.index(matches[0])\n    \n    # Return None if there are no matches\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0: # even index\n            if nums[i] % 2 == 0: # even number at even index\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # loop through each index in the list\n    for i in range(len(nums)):\n        # check if the index is odd\n        if i % 2!= 0:\n            # check if the number at the index is odd\n            if nums[i] % 2!= 0:\n                # if the number at the index is odd, return False\n                return False\n\n    # if we reach this point, then every odd index contains odd numbers\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            print(f\"The odd number at index {i} is: {nums[i]}\")\n            break\n    else:\n        print(\"All odd numbers in the list are present at odd indices.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            count += 1\n        if count == len(nums):\n            return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            for j in range(len(nums[i])):\n                if nums[i][j] % 2 == 1:\n                    odd_count += 1\n                    break\n            if odd_count == len(nums[i]):\n                return True\n            odd_count = 0\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2 == 1) and (nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if every odd index contains odd numbers, False otherwise.\n\n    Args:\n    nums: A list of integers.\n\n    Returns:\n    True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count == 1:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    # Create a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    # Initialize a counter to keep track of the number of vowels\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # Get the character at the current index\n        char = test_str[i]\n\n        # If the character is a vowel, check if it has a vowel as its neighbor\n        if char in vowels:\n            # If it has, increment the count\n            for j in range(max(0, i-1), min(len(test_str), i+2)):\n                if test_str[j] in vowels:\n                    count += 1\n                    break\n\n    # Return the count of vowels\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if (test_str[i-1] in vowels and test_str[i+1] in vowels) or (test_str[i-1] in vowels and test_str[i] in vowels) or (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i].lower() in vowels and test_str[i+1].lower() in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a set to store the unique elements of the list\n    unique_elements = set(arr)\n\n    # Create a list to store the sum of each unique element\n    sum_of_unique = [0] * len(unique_elements)\n\n    # Iterate through the list and calculate the sum of each unique element\n    for i, unique in enumerate(unique_elements):\n        sum_of_unique[i] = sum(arr == unique)\n\n    # Return the sum of all unique elements\n    return sum(sum_of_unique)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Find the sum of the unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n\n    # Initialize a variable to store the sum\n    sum_of_unique_elements = 0\n\n    # Add the sum of unique elements to the sum_of_unique_elements variable\n    for element in unique_elements:\n        sum_of_unique_elements += element\n\n    # Return the sum of unique elements\n    return sum_of_unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # create a set to store the non-repeated elements of the list\n    unique_elements = set(arr)\n\n    # initialize the sum variable to 0\n    sum_of_unique = 0\n\n    # loop through the unique elements and add them to the sum variable\n    for element in unique_elements:\n        sum_of_unique += element\n\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # Create a dictionary to store unique elements and their indices\n    unique_dict = {}\n    for i, num in enumerate(arr):\n        if num not in unique_dict:\n            unique_dict[num] = i\n\n    # Initialize variables to keep track of the sum and the unique elements\n    sum_ = 0\n    unique_elements = []\n\n    # Iterate through the dictionary and add the unique elements to the sum\n    for num in unique_dict:\n        sum_ += num\n        unique_elements.append(num)\n\n    # Return the sum and the unique elements\n    return sum_, unique_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    unique_elements = set(arr)\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq = {}\n    # loop through the list and update the frequency of each element in the dictionary\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    # create an empty list to store the non-repeated elements\n    result = []\n    # loop through the dictionary and add the keys that have a frequency of 1 to the result list\n    for key in freq:\n        if freq[key] == 1:\n            result.append(key)\n    # calculate the sum of the non-repeated elements and return it\n    return sum(result)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements from the list\n    unique_set = set(arr)\n    # convert the set to a list and then sum the elements\n    return sum(unique_set)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # convert the set back to a list and sort it\n    sorted_unique = sorted(list(unique_set))\n    # initialize the sum\n    total_sum = 0\n    # loop through the sorted list and add up the elements\n    for num in sorted_unique:\n        total_sum += num\n    # return the final sum\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_nums = [] # create an empty list to store unique numbers\n    for num in arr:\n        if num not in unique_nums: # check if the number is not in the list\n            unique_nums.append(num) # add the number to the list if it is not there already\n    \n    sum_of_unique_nums = sum(unique_nums) # calculate the sum of unique numbers\n    return sum_of_unique_nums"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list elements by their key (consecutive duplicates)\n    grouped = groupby(list1)\n    # initialize an empty list to store the packed sublists\n    packed_list = []\n    # iterate over the grouped elements and pack consecutive duplicates into sublists\n    for key, group in grouped:\n        if key:\n            # if the group contains at least two elements, append it to the packed list\n            if len(group) >= 2:\n                packed_list.append(list(group))\n            # otherwise, append a single element to the packed list\n            else:\n                packed_list.append(list(group)[0])\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for item, group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    This function takes a list of integers as input and returns a list of sublists\n    where each sublist contains consecutive duplicates of the input list.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(enumerate(list1), lambda x: x[0] - x[1])\n    return [list(group) for group in grouped_list]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # create an iterator for the input list\n    iterator = iter(list1)\n    # initialize an empty list to store the consecutive duplicates\n    consecutive_duplicates = []\n    # iterate over the iterator\n    for key, group in groupby(iterator):\n        # if the next element is the same as the current element, append it to the consecutive duplicates list\n        if key == next(group):\n            consecutive_duplicates.append(key)\n    # return the list of consecutive duplicates\n    return consecutive_duplicates"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = groupby(list1)\n    result = []\n    for key, group in grouped_list:\n        if len(list(group)) > 1:\n            sublist = list(group)\n            sublist.pop(0)\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for lst in list1:\n        if lst in unique_lists:\n            unique_lists[lst] += 1\n        else:\n            unique_lists[lst] = 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a dictionary where the key is the list and the value is the number of occurrences\n    count = {}\n    for item in list1:\n        if type(item) == list:\n            key = tuple(item)\n            if key in count:\n                count[key] += 1\n            else:\n                count[key] = 1\n    \n    # Return the dictionary\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        if sublist in sublist_dict:\n            sublist_dict[sublist] += 1\n        else:\n            sublist_dict[sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store the counts\n    counts = {}\n\n    # iterate over all the lists in the input list\n    for sublist in lst:\n        # convert each sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in counts:\n            # if it is, increment the count\n            counts[tuple(sublist)] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            sublist = list1[i:j+1]\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate through the lists in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        sublist_tuple = tuple(sublist)\n        \n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in count_dict:\n            count_dict[sublist_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[sublist_tuple] = 1\n    \n    # Return the dictionary with the counts of the sublists\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    sublist_count = {}\n    for i in range(len(list1)):\n        if isinstance(list1[i], list):\n            count = len(list1[i])\n            if count not in sublist_count:\n                sublist_count[count] = 1\n            else:\n                sublist_count[count] += 1\n        else:\n            continue\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    # Create a dictionary to store the count of unique sublists\n    count_dict = {}\n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Create a tuple of the current element and its subsequent elements\n        sublist_tuple = tuple(lst[i:i+1] + lst[i+1:])\n        # If the tuple is not in the dictionary, add it with a count of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is in the dictionary, increment its count by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    # Return the dictionary of unique sublists and their counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the unique sublists and their occurrences\n    unique_sublists_dict = {}\n\n    # Loop through each list in the input list\n    for i in range(len(list1)):\n        # Check if the current list is already in the dictionary\n        if tuple(list1[i]) in unique_sublists_dict:\n            # Increment the count of the current list by 1\n            unique_sublists_dict[tuple(list1[i])] += 1\n        else:\n            # If the current list is not already in the dictionary, add it to the dictionary with a count of 1\n            unique_sublists_dict[tuple(list1[i])] = 1\n\n    # Return the dictionary containing the unique sublists and their occurrences\n    return unique_sublists_dict"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a tuple list as input and returns all the combinations of sums with tuples in the list.\n    '''\n    def find_combinations_helper(test_list, remaining_sum, result, start, curr_comb):\n        if remaining_sum == 0:\n            result.append(curr_comb)\n            return\n        for i in range(start, len(test_list)):\n            if i > start and test_list[i][0] == test_list[i-1][0]:\n                continue\n            if remaining_sum - test_list[i][0] >= 0:\n                find_combinations_helper(test_list, remaining_sum - test_list[i][0], result, i+1, curr_comb + (test_list[i][1],))\n\n    combined_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            combined_list.append((test_list[i][0] + test_list[j][0], (test_list[i][1], test_list[j][1])))\n    for comb in combinations(combined_list, len(test_list)):\n        find_combinations_helper(test_list, sum(comb), [], 0, ())\n        print(comb)\n    return combined_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(sorted_list)):\n        # Iterate over the remaining unsorted list of tuples\n        for j in range(i+1, len(sorted_list)):\n            # Check if the sum of the current pair of tuples is equal to the sum of the next pair of tuples\n            if sorted_list[i][0] + sorted_list[j][0] == sorted_list[i+1][0] + sorted_list[j+1][0]:\n                # If yes, add the current pair of tuples to the result list\n                comb_list = [sorted_list[i], sorted_list[j]]\n                # Remove the two tuples from the sorted list\n                sorted_list.remove(sorted_list[i])\n                sorted_list.remove(sorted_list[j])\n                # Add the combination of the two tuples to the result list\n                comb_list.extend(sorted_list[i])\n                comb_list.extend(sorted_list[j])\n                yield comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    \n    # sort the list of tuples\n    test_list.sort()\n    \n    # define a function to find combinations of sums\n    def find_combinations_of_sums(sums, target):\n        '''\n        Recursive function to find all combinations of sums in the given list.\n        '''\n        \n        # base case: if the target sum is 0, return all possible combinations\n        if target == 0:\n            return list(combinations(test_list, len(sums)))\n        \n        # base case: if the target sum is less than 0, return an empty list\n        if target < 0:\n            return []\n        \n        # recursive case: find combinations of sums for each element in the list\n        result = []\n        for i, tup in enumerate(test_list):\n            # calculate the sum of the current tuple and subtract it from the target sum\n            new_sum = target - tup[i]\n            # if the new sum is negative, there is no combination of sums that add up to the new sum\n            if new_sum < 0:\n                continue\n            # if the new sum is zero, add the current tuple to the result\n            elif new_sum == 0:\n                result.append(tup)\n            # otherwise, recursively call the function with the new sum and append the result to the current result\n            else:\n                new_result = find_combinations_of_sums(sums, new_sum)\n                for combo in new_result:\n                    result.append(tup + combo)\n        \n        return result\n    \n    # find all possible combinations of sums that add up to the given target sum\n    sums = [0] + [tup[i] for tup in test_list for i in range(len(tup))]\n    result = find_combinations_of_sums(sums, target)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Sorting the list of tuples to be used in combinations\n    sorted_list = sorted(test_list)\n\n    # Combinations of sums with tuples in the sorted list\n    for comb in combinations(sorted_list, r=2):\n        # Calculating the sum of the tuples in the combination\n        sum_of_tuples = sum(comb)\n\n        # Checking if the sum is present in the test list\n        if sum_of_tuples in test_list:\n            print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns the combinations of sums with tuples in the given list.\n    It uses itertools.combinations to find all possible combinations of sums from the given list of tuples.\n    '''\n\n    # create a set of the tuples to use in the combinations\n    unique_tuples = set(test_list)\n\n    # find all possible combinations of sums\n    combinations_of_sums = []\n    for combination in combinations(unique_tuples, len(test_list[0])):\n        # check if all elements in the combination are distinct\n        if len(combination) == len(test_list):\n            # create a list of the elements in the combination and sort them\n            combination_list = sorted(combination)\n            # check if the combination is already in the list\n            if combination_list not in combinations_of_sums:\n                combinations_of_sums.append(combination_list)\n\n    return combinations_of_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Get the first element of the tuple list\n    first_element = test_list[0]\n\n    # Get the length of the tuple list\n    length = len(test_list)\n\n    # Create a list of lists to store the combinations\n    combinations_list = []\n\n    # Iterate over the combinations of the length of the tuple list\n    for i in range(length):\n        for j in range(i+1, length):\n            # Create a tuple of the two elements of the tuple list\n            combination = (first_element, test_list[j])\n\n            # Check if the combination is present in the test_list\n            if combination in test_list:\n                # If it is, append the combination to the combinations_list\n                combinations_list.append(combination)\n\n    # Return the combinations_list\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize the result list to store the combinations\n    result = []\n\n    # Loop through all the tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the two tuples and check if it's present in the list\n            if sum(test_list[i]) == sum(test_list[j]) and (sum(test_list[i]), sum(test_list[j])) not in result:\n                # If it's present, append the combination to the result list\n                result.append((sum(test_list[i]), sum(test_list[j])))\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # get the maximum sum\n    max_sum = max(sum(tuple) for tuple in test_list)\n\n    # iterate over all possible combinations of two numbers\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the sum is less than the maximum sum\n            if test_list[i][0] + test_list[j][0] < max_sum:\n                # check if the sum is a multiple of the maximum sum\n                if test_list[i][0] + test_list[j][0] % max_sum == 0:\n                    # print the combination\n                    print(test_list[i], test_list[j])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # function to find the combinations of sums\n    def combination_of_sums(arr, target_sum):\n        # create a set to store unique elements of arr\n        unique_arr = set(arr)\n        # create a list to store the combinations\n        combinations = []\n        # loop through all possible pairs of elements in the set\n        for i in range(len(unique_arr)):\n            for j in range(i+1, len(unique_arr)):\n                # check if the sum of the pair is equal to the target sum\n                if unique_arr[i] + unique_arr[j] == target_sum:\n                    # add the pair to the list of combinations\n                    combinations.append((unique_arr[i], unique_arr[j]))\n        return combinations\n\n    # function to check if a tuple is present in a list of tuples\n    def is_tuple_present(tuple_list, tuple_to_search):\n        for i in tuple_list:\n            if i == tuple_to_search:\n                return True\n        return False\n\n    # function to find the combinations of sums with tuples in the given tuple list\n    def combinations_with_tuples(test_list):\n        combinations_list = []\n        # loop through all possible pairs of tuples in the list\n        for i in combinations(test_list, 2):\n            # check if the first tuple is present in the list of tuples\n            if is_tuple_present(test_list, i[0]):\n                # check if the second tuple is present in the list of tuples\n                if is_tuple_present(test_list, i[1]):\n                    # add the pair to the list of combinations\n                    combinations_list.append(i)\n        return combinations_list\n\n    # function to check if a given combination of sums with tuples is valid\n    def is_valid_combination(combination, test_list):\n        # loop through all possible pairs of tuples in the list\n        for i in combinations(test_list, 2):\n            # check if the first tuple is present in the list of tuples\n            if is_tuple_present(test_list, i[0]):\n                # check if the second tuple is present in the list of tuples\n                if is_tuple_present(test_list, i[1]):\n                    # check if the pair of tuples in the combination is a subset of the pair of tuples in the original tuple list\n                    if i in combination:\n                        return True\n        return False\n\n    # call the function to find the combinations of sums with tuples in the given tuple list\n    combinations_list = combinations_with_tuples(test_list)\n    # filter out the combinations with invalid tuples\n    valid_combinations_list = [combination for combination in combinations_list if is_valid_combination(combination, test_list)]\n\n    return valid_combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    def helper(combs, cur_sum, test_list, i):\n        if cur_sum == 0 and len(combs) > 0:\n            result.append(tuple(combs))\n        if cur_sum < 0:\n            return\n\n        for j in range(i, len(test_list)):\n            helper(combs + [test_list[j]], cur_sum - test_list[j], test_list, j + 1)\n\n    result = []\n    helper([], 0, test_list, 0)\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n    if n > 1:\n        divisor_count += 1\n    if divisor_count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # get the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n <= 1:\n        return False\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return True\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    count = 0\n    for i in divisors:\n        count += i\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function takes an integer n and returns True if it has an even count of divisors, otherwise False.\n    A divisor of an integer n is an integer other than 1 and n itself. \n    A positive integer can have an infinite number of divisors.\n    '''\n    # Check if n is less than 2, as divisors of 1 and 2 are not allowed.\n    if n < 2:\n        return False\n    \n    # Calculate the square root of n, rounded up to the nearest integer.\n    sqrt_n = int(math.ceil(math.sqrt(n)))\n    \n    # Initialize a variable to store the count of divisors.\n    count = 0\n    \n    # Iterate from 1 to sqrt_n.\n    for i in range(1, sqrt_n+1):\n        # Check if i divides n.\n        if n % i == 0:\n            count += 1\n    \n    # Check if the count of divisors is even or not.\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # count of divisors = sum of its natural numbers\n    count_div = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count_div += i\n            if n // i!= i:\n                count_div += n // i\n    \n    # check whether the count of divisors is even or odd\n    if count_div % 2 == 0:\n        print(n, \"has even count of divisors.\")\n    else:\n        print(n, \"has odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count > int(math.sqrt(n)):\n                return \"The count of divisors is even.\"\n    return \"The count of divisors is odd.\"\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # calculate the number of divisors\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n\n    # calculate the number of divisors\n    count = 0\n    for i in divisors:\n        count += 1\n\n    # check whether the count of divisors is even\n    if count % 2 == 0:\n        print(f\"{n} has even number of divisors\")\n    else:\n        print(f\"{n} has odd number of divisors\")"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # initialize a variable to store the sum of odd length subarrays\n    sum = 0\n\n    # loop through the input array\n    for i in range(len(arr)):\n        # loop through the remaining elements of the input array\n        for j in range(i+1, len(arr)):\n            # check if the length of the subarray is odd\n            if j-i+1 % 2!= 0:\n                # if it is, add the subarray to the sum\n                sum += sum_of_subarray(arr, i, j)\n\n    # return the sum of odd length subarrays\n    return sum\n\n\ndef sum_of_subarray(arr, start, end):\n    '''\n    Write a python function to calculate the sum of all odd length subarrays between start and end indices.\n    '''\n    # initialize a variable to store the sum of odd length subarrays\n    sum = 0\n\n    # loop through the remaining elements of the subarray\n    for i in range(start, end+1):\n        # add the current element to the sum\n        sum += arr[i]\n\n    # return the sum of odd length subarrays\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += sum_subarray(arr, i, j)\n    return sum\n\ndef sum_subarray(arr, i, j):\n    return sum(arr[i:j+1])"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j - i) % 2 == 1:\n                result += sum(arr[i:j+1])\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_of_subarrays = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if j - i == 1:\n                sum_of_subarrays += arr[j]\n            else:\n                sum_of_subarrays += arr[j] - arr[i]\n            j += 2\n        i += 2\n    return sum_of_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if len(arr[i]) % 2 == 0:\n            result += arr[i][0]\n        else:\n            result += arr[i][0]\n            result += arr[i][-1]\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        temp = 0\n        for j in range(i, n):\n            temp += arr[j]\n            if j-i+1 % 2!= 0:\n                sum += temp\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    # Initialize variables to store sum of odd length subarrays and their indices\n    sum_odd = 0\n    start = 0\n\n    # Traverse through the array and check if the length of the current subarray is odd\n    for i in range(n):\n        if i == n-1 or arr[i+1] % 2!= 0:\n            # If the length is odd, add the sum of the subarray and its starting index to the sum_odd variable\n            sum_odd += sum(arr[start:i+1])\n            # Move the starting index to the next odd index in the array\n            start = i + 1\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(1, n-1):\n        if (i % 2 == 1):\n            subarr = arr[i:i+3]\n            result += sum(subarr)\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n-1):\n        for j in range(i+2, n):\n            if j-i == 1:\n                res += arr[j]\n    return res"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        if i%2 == 1:\n            subarray_sum += arr[i]\n    return subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    Args:\n    r (int): Red color value (0-255)\n    g (int): Green color value (0-255)\n    b (int): Blue color value (0-255)\n\n    Returns:\n    h (float): Hue value (0-360)\n    s (float): Saturation value (0-1)\n    v (float): Value value (0-1)\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    v = max_val\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta) % 6\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    else:\n        h = 60 * ((r - g) / delta) + 240\n\n    if h < 0:\n        h += 360\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    h = h if h % 360 < 0 else h % 360\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n\n    h = 0\n    s = 0\n    v = max_rgb\n\n    if max_rgb == min_rgb:\n        h = 0\n        s = 0\n    else:\n        delta_rgb = max_rgb - min_rgb\n\n        if max_rgb == r:\n            h = (g - b) / delta_rgb\n        elif max_rgb == g:\n            h = 2 + (b - r) / delta_rgb\n        else:\n            h = 4 + (r - g) / delta_rgb\n\n        if h < 0:\n            h += 6\n\n        h = h * 60\n\n        if h < 0:\n            h += 360\n\n        s = delta_rgb / max_rgb\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val / 255\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n        s = 0\n    elif max_val == r:\n        h = 60 * ((g - b) / delta)\n    elif max_val == g:\n        h = 60 * ((b - r) / delta) + 120\n    elif max_val == b:\n        h = 60 * ((r - g) / delta) + 240\n\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Normalize the values to range 0-255\n    r = r / 255\n    g = g / 255\n    b = b / 255\n\n    # Find the max and min values among r, g, b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find the delta value\n    delta = max_val - min_val\n\n    # Find the hue value\n    if max_val == r:\n        hue = (g - b) / delta\n    elif max_val == g:\n        hue = 2 + (b - r) / delta\n    else:\n        hue = 4 + (r - g) / delta\n\n    # Scale the hue value to range 0-1\n    hue = hue / 6\n\n    # Find the saturation value\n    if delta == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_val\n\n    # Find the value value\n    value = max_val\n\n    # Convert the values to range 0-1\n    hue = hue * 6\n    saturation = saturation * 100\n    value = value * 100\n\n    # Return the converted hsv values\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0  # normalize to range 0-1\n    g = g / 255.0\n    b = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:  # achromatic color\n        h = s = 0\n    else:\n        s = delta / cmax\n        if delta == cmax:\n            h = (g - b) / delta\n        elif delta == cmin:\n            h = 2 + (b - g) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h / 6 if h < 0 else h / 6  # wrap around the range 0-1\n        h = h if h < 1 else 1\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    Parameters:\n    r (int): Red value (0-255)\n    g (int): Green value (0-255)\n    b (int): Blue value (0-255)\n\n    Returns:\n    h (float): Hue value (0-360)\n    s (float): Saturation value (0-1)\n    v (float): Value value (0-1)\n    \"\"\"\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / cmax\n        if r == cmax:\n            h = (g - b) / delta\n        elif g == cmax:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n    v = cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    # Convert the RGB values to a list of values\n    rgb_list = [r, g, b]\n\n    # Find the maximum and minimum values in the list\n    max_value = max(rgb_list)\n    min_value = min(rgb_list)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the saturation value\n    if max_value == 0:\n        # If the maximum value is zero, then the saturation value is zero\n        saturation = 0\n    else:\n        saturation = delta / max_value\n\n    # Calculate the hue value\n    if max_value == r:\n        # If the maximum value is red, then calculate the hue value as ((g - b) / delta)\n        hue = ((g - b) / delta) % 6\n    elif max_value == g:\n        hue = (b - r) / delta + 2\n    else:\n        hue = (r - g) / delta + 4\n\n    # Convert the hue value to degrees\n    hue = hue * 60\n\n    return (hue, saturation, max_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n\n    v = cmax\n\n    if cmax == cmin:\n        h = 0\n    else:\n        if r == cmax:\n            h = (g-b)/((cmax-cmin)*255.0)\n        elif g == cmax:\n            h = (b-r)/((cmax-cmin)*255.0)+1\n        else:\n            h = (r-g)/((cmax-cmin)*255.0)+2\n\n        h = h*60.0\n\n    if h < 0:\n        h += 360.0\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    The HSV color model uses the hue, saturation, and value components to represent colors.\n    \"\"\"\n    r, g, b = r/255, g/255, b/255 # Normalizing the values to 0-1\n    \n    # Converting RGB to HSV color model\n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n    \n    if max_c == min_c:\n        h = 0\n    elif r == max_c:\n        h = (g - b) / delta\n    elif g == max_c:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h % 6\n    \n    if h < 0:\n        h += 6\n    \n    s = delta / max_c\n    \n    v = max_c\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes red, green, and blue values as input and returns the corresponding hue, saturation, and value values in HSV color space.\n    The values are returned as a tuple of three floats.\n    '''\n\n    # Convert red, green, and blue to floats\n    r = float(r) / 255\n    g = float(g) / 255\n    b = float(b) / 255\n\n    # Convert RGB to XYZ color space\n    x = (0.4124 * r + 0.3576 * g + 0.1805 * b) / 0.950456\n    y = (0.2126 * r + 0.7152 * g + 0.0722 * b) / 1.000000\n    z = (0.0193 * r + 0.1192 * g + 0.9505 * b) / 1.088833\n\n    # Convert XYZ to LMS color space\n    l = 0.215 * y + 0.715 * z\n    a = 0.072 * x + 0.713 * y + 0.015 * z\n    b = 0.015 * x + 0.072 * y + 0.957 * z\n\n    # Convert LMS to RGB color space\n    x = l * 0.950456 + a * 1.000000\n    y = l * 1.000000 + a * 1.088833\n    z = l * 1.088833\n\n    # Convert RGB to HSV color space\n    r = max(0, min(1, x / 0.950456))\n    g = max(0, min(1, y / 1.000000))\n    b = max(0, min(1, z / 1.088833))\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = h / 6\n\n    # Convert HSV to HSV color space\n    h = (h * 360) % 360\n    s = (cmax / 1)\n    v = cmax\n\n    return (h, s, v)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_sum = 0\n    odd_sum = 0\n    \n    # Iterate through the list and calculate the sum of even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    # Calculate the product of even and odd numbers\n    product = even_sum * odd_sum\n    \n    # Return the product\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        product *= min(even_count, odd_count)\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and first odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n            \n    if even_count == 0 or odd_count == 0:\n        return None\n    \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    input_list = test_str.split(',')\n    \n    # Convert each string to an integer\n    integer_list = []\n    for i in input_list:\n        integer_list.append(int(i))\n    \n    # Convert the list of integers to a tuple\n    integer_tuple = tuple(integer_list)\n    \n    return integer_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to integer tuple\n    test_int_tuple = tuple(int(i) for i in test_str.split(','))\n    return test_int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list\n    test_list = list(test_str)\n    \n    # Create empty list to hold integers\n    int_list = []\n    \n    # Loop through each character in the list\n    for char in test_list:\n        \n        # Check if the character is an integer\n        if char.isdigit():\n            \n            # Convert the character to an integer\n            int_num = int(char)\n            \n            # Append the integer to the list\n            int_list.append(int_num)\n    \n    # Convert the integer list to a tuple\n    int_tuple = tuple(int_list)\n    \n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string into a list of strings\n    str_list = test_str.split(',')\n    # Initialize an empty integer tuple\n    int_tuple = ()\n    # Loop through each string in the list\n    for str_item in str_list:\n        # Convert the string to an integer\n        try:\n            int_value = int(str_item)\n            # Append the integer value to the integer tuple\n            int_tuple += (int_value,)\n        except ValueError:\n            # If the string cannot be converted to an integer, skip it\n            pass\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Initialize an empty list to store the integers\n    int_list = []\n    # Loop through each string in the list\n    for str in str_list:\n        # If the string contains only digits, add it to the list\n        if str.isdigit():\n            int_list.append(int(str))\n    # Return the list of integers as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of strings separated by ','\n    string_list = test_str.split(',')\n    # Initialize an empty list to hold the converted integers\n    int_list = []\n    # Loop through each string in the list\n    for string in string_list:\n        # Convert the string to an integer and append it to the list\n        int_list.append(int(string))\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = []\n    for char in test_str:\n        if char.isdigit():\n            lst.append(int(char))\n        else:\n            pass\n    return tuple(lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    try:\n        # convert tuple string to integer tuple using eval()\n        test_tuple = eval(test_str)\n        return test_tuple\n    except:\n        # if eval() fails, return empty list\n        return []"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the tuple string by comma\n    test_str_list = test_str.split(',')\n    # Convert each element of the tuple string to an integer\n    int_tuple = tuple([int(x) for x in test_str_list])\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n\n    Args:\n        test_str (tuple): A tuple of strings.\n\n    Returns:\n        tuple: A tuple of integers.\n    \"\"\"\n    def str_to_int(str_):\n        \"\"\"\n        Convert a string to integer.\n\n        Args:\n            str_ (str): A string.\n\n        Returns:\n            int: An integer value of the string.\n        \"\"\"\n        return int(str_)\n\n    return tuple(map(str_to_int, test_str))"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return len(a)\n    elif a[index] == x:\n        return index\n    else:\n        return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        j = i\n        while j < len(a) and a[j] < x:\n            j += 1\n        return j\n    else:\n        j = i\n        while j > 0 and a[j] > x:\n            j -= 1\n        return j"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n        a: list of sorted integers\n        x: the integer we want to locate the right insertion point for\n\n    Returns:\n        index: the index of the right insertion point for x in a\n    \"\"\"\n\n    # Use bisect.bisect_right function to locate the right insertion point\n    index = bisect.bisect_right(a, x)\n\n    # If x is already present in the list, return the index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # If x is not present in the list, return the index of the next element greater than x\n    while index < len(a) and a[index] > x:\n        index += 1\n\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # binary search to find the insertion point for x in a\n    i = bisect.bisect_right(a, x)\n    # if x is not found in a, i will be the insertion point\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i if i!= len(a) and a[i] == x else -1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the insertion point\n    index = bisect.bisect_right(a, x)\n    \n    # If the value is already in the list, return the index\n    if index < len(a) and a[index] == x:\n        return index\n    \n    # Otherwise, return the index of the next available insertion point\n    return index + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    elif x < a[index]:\n        return index - 1\n    else:\n        return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\w{3}b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        print(match.group(0))\n    else:\n        print('No match found')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = r'a[b]{3}'\n    matches = re.findall(pattern, text)\n    \n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"No match found.\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a{3}b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a+b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(?=\\s*b{3})'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str + str(item) for item in test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Define a new tuple\n    new_tuple = (test_str, *test_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and append the string to the tuple\n    new_tuple = (test_list, test_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Joining the two lists into one string separated by a space\n    new_str =''.join(test_list)\n    # Splitting the string into a list of words\n    new_words = new_str.split()\n    # Creating a new tuple with the two lists\n    new_tuple = (test_str, new_words)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n\n    Args:\n        test_list (list): A list of values to be included in the new tuple.\n        test_str (str): A string to be included in the new tuple.\n\n    Returns:\n        tuple: A new tuple with the given values.\n\n    Raises:\n        TypeError: If either argument is not a list or a string.\n    \"\"\"\n\n    if not isinstance(test_list, list):\n        raise TypeError(\"The first argument must be a list.\")\n    if not isinstance(test_str, str):\n        raise TypeError(\"The second argument must be a string.\")\n\n    new_list = test_list + [test_str]\n    return tuple(new_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the list and string into a single string using the '+' operator\n    combined_str = str(test_list) + str(test_str)\n    # Convert the combined string into a tuple using the tuple() function\n    new_tuple = tuple(combined_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # concatenate the list and string using the '+' operator\n    combined_str = test_str + str(test_list)\n    # convert the concatenated string into a tuple using the tuple() function\n    new_tuple = tuple(combined_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str), tuple(test_list)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(num % 2 == 0 for num in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Check if the length of the list is odd\n    if len(nums) % 2!= 0:\n        return False\n    # Loop through the list and check if the even index contains even numbers\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:])) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n        if even_count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize the even_count list to store the count of even numbers at each even index\n    even_count = [0] * len(nums)\n\n    # Loop through the list and count the even numbers at even indices\n    for i, num in enumerate(nums):\n        if i % 2 == 0:\n            if num % 2 == 0:\n                even_count[i // 2] += 1\n\n    # Loop through the even_count list and check if all even numbers are present at each even index\n    for i, count in enumerate(even_count):\n        if count == 0:\n            return False\n\n    # If all even numbers are present at each even index, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count += 1\n            if nums[i] % 2 == 0:\n                even_count -= 1\n    return even_count == 0"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        result = []\n        for item in test_tup:\n            result.extend(remove_nested(item))\n        return result\n    else:\n        return [test_tup]\n"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return list(test_tup)\n    elif isinstance(test_tup, list):\n        return [remove_nested(sub_tup) for sub_tup in test_tup]\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = [item for sublist in test_tup for item in sublist]\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for elem in test_tup:\n        if type(elem)!= tuple:\n            result.append(elem)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flatten_list = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                flatten_list.append(sub_item)\n        else:\n            flatten_list.append(item)\n    return flatten_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize an empty list to store the flattened tuple\n    flat_list = []\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # If the element is not a tuple, append it to the flat_list\n        if not isinstance(element, tuple):\n            flat_list.append(element)\n        # If the element is a tuple, recursively call the function on the tuple and append the result to the flat_list\n        else:\n            flat_list.extend(remove_nested(element))\n    # Return the flat_list\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # Initialize an empty list to hold the flattened tuple\n    flattened_tup = []\n    # Loop through each item in the tuple\n    for item in test_tup:\n        # If the item is not a tuple, append it to the flattened list\n        if not isinstance(item, tuple):\n            flattened_tup.append(item)\n        # If the item is a tuple, recursively call the function on it and append the flattened result to the flattened list\n        else:\n            flattened_tup.extend(remove_nested(item))\n    # Return the flattened list\n    return flattened_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_lists(input_list):\n    '''\n    This function takes a list of lists as input and returns the count of lists in the input list.\n    '''\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if isinstance(sublist, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_lists(input_list):\n    '''\n    This function counts the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    This function takes a list as input and returns the number of lists in the list.\n    '''\n    num_lists = 0\n    for item in input_list:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n    result=-1\n\n    while low<=high:\n        mid=(low+high)//2\n\n        if arr[mid]==x:\n            result=mid\n            high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n\n    return result"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # check if the array is empty\n    if not arr:\n        return -1\n\n    # find the index of the first element greater than or equal to x\n    index = bisect_left(arr, x)\n\n    # if the element is not found, return -1\n    if index == len(arr) or arr[index]!= x:\n        return -1\n\n    # return the index of the last occurrence of x\n    return index\n\nfrom bisect import bisect_left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search on the sorted array\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            # If element found, return its index\n            return mid\n        elif arr[mid] < x:\n            # If element is in right half of the array\n            left = mid + 1\n        else:\n            # If element is in left half of the array\n            right = mid - 1\n\n    # If element is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two parameters: the sorted array and the element to be found. \n    It finds the index of the last occurrence of the element in the array, and returns the index.\n    If the element is not found, the function returns -1.\n    \"\"\"\n    n = len(arr)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and a target element x, and returns the index of the last occurrence of x in the array.\n    If x is not present in the array, the function returns -1.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the index of the last element as -1\n    last_index = -1\n    \n    # Loop through the array and find the last occurrence of the element\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_index = i\n            \n    # Return the last index\n    return last_index"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n\n    # Find the first index where the element appears in the array\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    This function takes in a sorted array and an element x and returns the last position of the element in the array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1  # if we found x, move the right pointer to previous index\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes in an array and an element as arguments and returns the index of the last occurrence of the element in the array. If the element is not present in the array, it will return -1.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)\\w*\\b' + r'(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)[^b]*(?=b)'\n    return re.search(pattern, text).group()"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as input and returns the sum of all items in the dictionary.\n    '''\n    sum = 0\n    for key, value in dictionary.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum\n\nmy_dict = {'apple': 2, 'banana': 3, 'cherry': 4, 'date': 5}\nprint(return_sum(my_dict)) # Output: 19"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # defining the range of the numbers to be considered\n    l = 1\n    r = n\n\n    # initializing the sum variable to 0\n    sum_odd = 0\n\n    # iterating over the range of numbers from l to r\n    for i in range(l, r+1):\n        # checking if the number is odd\n        if i % 2!= 0:\n            # adding the odd numbers to the sum\n            sum_odd += i\n\n    # returning the sum of all odd numbers\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = map(int, input(\"Enter the lower and upper limit of the range: \").split())\n    if r < l:\n        print(\"Invalid input. Lower limit should be less than or equal to upper limit.\")\n        return\n    elif l < 1:\n        print(\"Invalid input. Lower limit should be greater than 0.\")\n        return\n    elif r > 10**12:\n        print(\"Invalid input. The upper limit should be less than or equal to 10^12.\")\n        return\n\n    sum_odd = 0\n    for i in range(l, r+1, 2):\n        sum_odd += i\n\n    print(\"The sum of all odd natural numbers within the range l and r is:\", sum_odd)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    This function takes an integer as input, n, and returns the sum of all odd natural numbers within the range 1 to n.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n # initializing the lower and upper range\n    sum = 0 # initialize the sum variable\n\n    while l <= r: # checking if the lower range is less than or equal to the upper range\n        if l % 2!= 0: # checking if the number is odd\n            sum += l # adding the odd number to the sum variable\n        l += 1 # incrementing the lower range\n\n    return sum # returning the sum of all odd numbers within the given range"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n % 2!= 0:\n        return 0\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_ = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum_ += i\n    return sum_"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    if n % 2 == 0:\n        r = n - 1\n    \n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(l, r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n    \n    # loop through the range from l to r\n    for i in range(l, r+1):\n        \n        # check if the current number is odd\n        if i % 2!= 0:\n            \n            # add the number to the sum\n            sum += i\n            \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr) # recursion"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if not arr:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Finds the sum of an array of numbers.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # Initialize a variable to store the sum\n    sum_var = 0\n    \n    # Loop through each element in the array\n    for i in arr:\n        # Add each element to the sum\n        sum_var += i\n    \n    # Return the sum\n    return sum_var"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to shift by\n    shift = d % 32\n\n    # Calculate the mask to use for shifting\n    mask = 1 << shift\n\n    # Calculate the mask to use for ANDing\n    and_mask = ~(mask - 1)\n\n    # Calculate the result after left rotation\n    result = ((n << shift) | (n & and_mask)) & 0xffffffff\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff # 32-bit mask for converting to unsigned int\n    n = n & mask # remove the sign bit (if any)\n    d = d % 32 # keep d in the range of 0 to 31\n    result = (n << d) | (n >> (32 - d)) # calculate the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n    # Calculate the number of zeroes to the left of the MSB\n    msb = binary_num.index('1')\n    # Calculate the number of bits to rotate\n    rotate_bits = d % msb\n    # Calculate the number of bits to shift left\n    shift_left = msb - rotate_bits\n    # Shift the bits to the left\n    shifted = binary_num[rotate_bits:] + binary_num[:rotate_bits]\n    # Combine the shifted bits with the MSB shifted bits\n    result = shifted + '1' * shift_left\n    # Convert the result back to an integer\n    result = int(result, 2)\n    # Return the result\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert the number to a list of 4 bytes (32 bits)\n    n = bytearray(n.to_bytes(4, byteorder='big'))\n    # rotate the list left by d bits\n    n = n[d:] + n[:d]\n    # convert the list back to an integer and return it\n    return int.from_bytes(n, byteorder='big')"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert binary number to decimal\n    num = int(n, 2)\n    # rotate left d bits\n    rotated = (num << d) | (num >> (32 - d))\n    # convert decimal to binary and return it\n    return bin(rotated)[2:].zfill(32)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Get the number of bits in the number\n    bits = bin(n)[2:].zfill(32)\n    # Get the bits that are to be shifted\n    shifted_bits = bits[-d:]\n    # Get the bits that are to be moved to the left\n    moved_bits = bits[:-d]\n    # Concatenate the shifted and moved bits\n    rotated_bits = shifted_bits + moved_bits\n    # Convert the rotated bits to an integer and return it\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    This function rotates the left d bits of the given number n to the right by 32-d bits.\n    '''\n    mask = (1 << 32) - 1\n    d = 32 - d\n    rotated = (n << d) & mask\n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    This function rotates a 32-bit number left by the specified number of bits (d).\n    \"\"\"\n    # Convert the input number to a 32-bit binary string\n    n_binary = bin(n)[2:]\n\n    # Calculate the number of bits to be rotated\n    d_binary = bin(d)[2:]\n\n    # Calculate the number of bits to be padded with zeros to make the rotated bits equal to the original number\n    zeros_to_pad = 32 - len(n_binary) - len(d_binary)\n\n    # Pad with zeros the bits to be rotated\n    if zeros_to_pad > 0:\n        n_binary = '0' * zeros_to_pad + n_binary\n\n    # Calculate the rotated bits and convert them to a 32-bit integer\n    rotated_bits = n_binary[-d_binary:] + n_binary[:-d_binary]\n\n    # Convert the rotated bits back to an integer and return it\n    return int(rotated_bits, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert number to binary string\n    bin_str = bin(n)[2:]\n    # Pad with zeros to ensure d bits in the result\n    result = bin_str.zfill(d)\n    # Extract the bits to rotate left\n    bits_to_rotate = bin_str[-d:]\n    # Extract the bits to rotate right\n    bits_to_rotate_right = bin_str[:-d]\n    # Combine the bits to rotate left and right\n    bits_to_rotate_combined = bits_to_rotate + bits_to_rotate_right\n    # Convert the combined binary string to decimal\n    rotated_number = int(bits_to_rotate_combined, 2)\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number to binary string\n    bin_num = bin(n)[2:]\n\n    # Add d zeros at the beginning of the binary string to rotate left by d bits\n    bin_num = '0'*(d) + bin_num\n\n    # Convert the rotated binary string back to decimal number\n    rotated_num = int(bin_num, 2)\n\n    return rotated_num"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces from the string using regular expressions\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n\n    # Using regular expressions to remove all whitespace from the string\n    text = re.sub(r'\\s+','', text)\n\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expression\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    # Check if all three integers are equal\n    if x == y and y == z:\n        count += 1\n    if x == z and y == x:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    # Use sets to count the number of equal numbers\n    set1 = set([x,y,z])\n    set2 = set([y,z,x])\n    set3 = set([z,x,y])\n    \n    # Count the number of equal numbers\n    count = len(set1.intersection(set2).intersection(set3))\n    \n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(i, z+1):\n            if i == j:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        if y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # initialize variables\n    count = 0\n\n    # check if the three given integers are equal\n    if x == y and x == z:\n        count += 1\n\n    if y == x and y == z:\n        count += 1\n\n    if z == x and z == y:\n        count += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Finding the first rotation that makes the array sorted\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    # Counting the number of rotations required for that first rotation\n    rotations = 0\n    while left > 0:\n        rotations += 1\n        left -= 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    # Initialize the length of the array\n    n = len(arr)\n\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Initialize the maximum number of rotations required\n    max_rotations = 0\n\n    # Initialize the current number of rotations\n    current_rotations = 0\n\n    # Initialize the number of comparisons required for each rotation\n    comparisons_per_rotation = 0\n\n    # Loop through the array until the array is sorted\n    while True:\n        # Increment the number of comparisons required for the current rotation\n        comparisons_per_rotation += n\n\n        # Check if the array is sorted\n        if arr == sorted(arr):\n            break\n\n        # Increment the number of rotations required\n        current_rotations += 1\n\n        # Reverse the array\n        arr = arr[::-1]\n\n    # Return the number of rotations required\n    return current_rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] > arr[i + n // 2]:\n            return n - i - 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array in non-decreasing order\n    arr.sort()\n    # Initialize two pointers\n    i, j = 0, n-1\n    # Count the number of rotations required\n    count = 0\n    while i < j:\n        # Swap the values at i and j if they are not in the correct order\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n        # Move the pointers towards each other until they meet in the middle of the array\n        i += 1\n        j -= 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    \n    # Find the minimum element in the array\n    min_element = min(arr)\n    \n    # Initialize the count of rotations required\n    count = 0\n    \n    # Iterate through the array until we find the minimum element\n    while min_element not in arr:\n        # Increment the count of rotations required\n        count += 1\n        \n        # Iterate through the array again and remove the minimum element\n        for i in range(n):\n            if arr[i] == min_element:\n                arr[i], arr[n-1] = arr[n-1], arr[i]\n                break\n        \n        # Find the minimum element in the updated array\n        min_element = min(arr)\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n    # Initialize count variable to 0\n    count = 0\n    # Iterate through all possible rotations of the array\n    for i in range(n):\n        # Find the last element of the previous rotated array\n        last_element = arr[i]\n        # Iterate through the array from the next index\n        for j in range(i + 1, n):\n            # If the next element is smaller than the last element, update the count and exit the loop\n            if arr[j] < last_element:\n                count += 1\n                break\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        mid = (left + right) // 2\n        if mid < right and arr[mid] > arr[mid + 1]:\n            count += mid + 1\n            left = mid + 1\n        elif mid > left and arr[mid] < arr[mid - 1]:\n            count += mid\n            right = mid - 1\n        else:\n            right = mid\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # initialize variables\n    i = 0\n    j = n - 1\n    rotations = 0\n    while i < j:\n        # check if array is already sorted\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            j -= 1\n            rotations += 1\n    # check if array is sorted in decreasing order\n    if arr[i:j+1] == sorted(arr[i:j+1], reverse=True):\n        return rotations\n    else:\n        return rotations + 1"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Calculate the frequency of each element in the array\n    freq = [0] * (n + 1)\n    for i in range(n):\n        freq[arr[i]] += 1\n\n    # Calculate the cumulative frequency array\n    cum_freq = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cum_freq[i] = cum_freq[i - 1] + freq[i - 1]\n\n    # Find the maximum element in the array\n    max_elem = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_elem:\n            max_elem = arr[i]\n\n    # Count the number of rotations required\n    count = 0\n    while max_elem > 0:\n        max_elem -= 1\n        count += cum_freq[max_elem]\n\n    # Return the count of rotations required\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if n is a perfect square\n    x = n**0.5\n    if x.is_integer():\n        return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square else False.\n    \"\"\"\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n * sqrt_n == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Compute the square root of the given number\n    square_root = int(n ** 0.5)\n    # Check if the square root is an integer\n    if square_root ** 2!= n:\n        return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if n % i == 0 and i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using trial division method to check if n is a perfect square or not\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            if i * i == n:\n                return True\n            else:\n                return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    if n <= 0:\n        return False\n    \n    # find the square root of n\n    x = n ** 0.5\n    \n    # check if x is an integer\n    if x.is_integer():\n        return True\n    \n    # check if x is within 0.5% of the square root of n\n    return abs(x - round(x)) < 0.0005 * n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # check if the number is even or odd\n    if n % 2 == 0:\n        return False\n\n    # use the formula for a perfect square\n    a = n\n    b = 1\n    while b * b <= n:\n        a = b\n        b += 1\n    if a * a == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    # Check if the number is a square or not\n    if n % 4 == 0:\n        return True\n    # If the number is not a square, check for factors of 2 and 3\n    for i in range(5, int(n**0.5)+1, 6):\n        if n % i == 0 or n % (i+2) == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to integer\n    n = int(n)\n    \n    # Check if the number is 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400\n    if n in [1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]:\n        return True\n    \n    # Check if the number is divisible by 4 and not divisible by 16\n    if n % 4 == 0 and n % 16!= 0:\n        return True\n    \n    # Check if the number is divisible by 9 and not divisible by 32\n    if n % 9 == 0 and n % 32!= 0:\n        return True\n    \n    # Check if the number is divisible by 25 and not divisible by 128\n    if n % 25 == 0 and n % 128!= 0:\n        return True\n    \n    # Check if the number is divisible by 36 and not divisible by 256\n    if n % 36 == 0 and n % 256!= 0:\n        return True\n    \n    # Check if the number is divisible by 49 and not divisible by 512\n    if n % 49 == 0 and n % 512!= 0:\n        return True\n    \n    # Check if the number is divisible by 64 and not divisible by 1024\n    if n % 64 == 0 and n % 1024!= 0:\n        return True\n    \n    # Check if the number is divisible by 81 and not divisible by 2048\n    if n % 81 == 0 and n % 2048!= 0:\n        return True\n    \n    # Check if the number is divisible by 100 and not divisible by 4096\n    if n % 100 == 0 and n % 4096!= 0:\n        return True\n    \n    # Check if the number is divisible by 121 and not divisible by 8192\n    if n % 121 == 0 and n % 8192!= 0:\n        return True\n    \n    # Check if the number is divisible by 144 and not divisible by 32768\n    if n % 144 == 0 and n % 32768!= 0:\n        return True\n    \n    # Check if the number is divisible by 169 and not divisible by 65536\n    if n % 169 == 0 and n % 65536!= 0:\n        return True\n    \n    # Check if the number is divisible by 196 and not divisible by 131072\n    if n % 196 == 0 and n % 131072!= 0:\n        return True\n    \n    # Check if the number is divisible by 225 and not divisible by 262144\n    if n % 225 == 0 and n % 262144!= 0:\n        return True\n    \n    # Check if the number is divisible by 256 and not divisible by 524288\n    if n % 256 == 0 and n % 524288!= 0:\n        return True\n    \n    # Check if the number is divisible by 289 and not divisible by 1048576\n    if n % 289 == 0 and n % 1048576!= 0:\n        return True\n    \n    # Check if the number"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether a given number is a perfect square or not.\n    \"\"\"\n    # To check whether a number is a perfect square or not, we need to check whether the square root of the number is an integer.\n    # If the square root is an integer, then the number is a perfect square, otherwise it is not.\n    # We can use the math module to find the square root of a number.\n    import math\n    \n    # Finding the square root of the given number\n    sqrt_num = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if sqrt_num == int(sqrt_num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # initialize product variable to 1\n    product = 1\n    \n    # iterate through each element in the list\n    for num in arr: \n        # multiply product by current number\n        product *= num\n    \n    # check if product is even or not\n    if product % 2 == 0: \n        # return True if product is even\n        return True\n    else: \n        # return False if product is odd\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return (product % 2 == 0)"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable with the first element of the list\n    product = arr[0]\n    \n    # Loop through the rest of the list\n    for i in range(1, len(arr)):\n        # Multiply the current element with the product variable\n        product *= arr[i]\n        \n        # Check if the product variable is even\n        if product % 2 == 0:\n            # If it is, return True\n            return True\n        else:\n            # If it isn't, set the product variable back to the first element of the list\n            product = arr[0]\n    \n    # If the loop completes without finding an even product, return False\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    best_list = None\n\n    # Loop through lists\n    for sub_list in lists:\n\n        # Calculate sum of sub_list\n        sub_sum = sum(sub_list)\n\n        # If sum is greater than current maximum, update best_list and max_sum\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            best_list = sub_list\n\n    # Return best_list\n    return best_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input, where each inner list contains a list of integers.\n    It returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # Initialize an empty list to store the maximum sublists\n    max_sublists = []\n    \n    # Loop through each inner list in the outer list\n    for sublist in lists:\n        # Initialize the sum of the elements in this sublist to 0\n        sublist_sum = 0\n        \n        # Loop through each element in this sublist\n        for element in sublist:\n            # Add the element to the sum\n            sublist_sum += element\n            \n            # If the sum of the elements in this sublist is greater than the current maximum sum,\n            # update the maximum sum and add this sublist to the list of maximum sublists\n            if sublist_sum > max_sum:\n                max_sum = sublist_sum\n                max_sublists = [sublist]\n            # If the sum of the elements in this sublist is equal to the current maximum sum,\n            # add this sublist to the list of maximum sublists\n            elif sublist_sum == max_sum:\n                max_sublists.append(sublist)\n    \n    # Return the list of maximum sublists\n    return max_sublists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = None\n    for i in range(len(lists)):\n        curr_sum = sum(lists[i])\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n\n    for i in lists:\n        current_sum = sum(i)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_lists = [i]\n        elif current_sum == max_sum:\n            max_lists.append(i)\n\n    return max_lists\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for list in lists:\n        current_sum = sum(list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize max_list with the first list in the list of lists\n    max_list = lists[0]\n\n    # loop through the rest of the lists\n    for i in range(1, len(lists)):\n        # loop through the elements in the current list\n        for j in range(len(lists[i])):\n            # calculate the sum of the elements in the current list\n            current_sum = sum(lists[i][:j+1])\n\n            # if the current sum is greater than the current max sum, update max_list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lists[i][:j+1]\n\n    # return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == j:\n                continue\n            current_sum = lists[i][j] + lists[j][i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j], lists[j][i]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [lists[i][j]]\n                for k in range(j+1, len(lists[i])):\n                    result.append(lists[i][k])\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize the variables to store the maximum sum and the current sum of the list\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through each list in the input list of lists\n    for sublist in lists:\n        # Iterate through each element in the current sublist\n        for element in sublist:\n            # Add the current element to the current sum\n            current_sum += element\n\n            # If the current sum is greater than the maximum sum, update the maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n\n            # If the current sum is equal to the maximum sum, add the sublist to the output list\n            if current_sum == max_sum:\n                output_list.append(sublist)\n\n    # Return the output list\n    return output_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # create a variable to store the maximum run of uppercase characters\n    max_run = 0\n    \n    # create a variable to store the current run of uppercase characters\n    cur_run = 1\n    \n    # iterate through each character in the string\n    for i in range(1, len(test_str)):\n        # if the current character is uppercase\n        if test_str[i].isupper():\n            # increment the current run counter\n            cur_run += 1\n        # if the current character is not uppercase\n        else:\n            # if the current run counter is greater than the maximum run counter\n            if cur_run > max_run:\n                # update the maximum run counter\n                max_run = cur_run\n            # reset the current run counter\n            cur_run = 1\n    \n    # if the current run counter is greater than the maximum run counter\n    if cur_run > max_run:\n        # update the maximum run counter\n        max_run = cur_run\n    \n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    max_start = 0\n    \n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i - count + 1\n        else:\n            count = 1\n            \n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the maximum run of uppercase characters found so far\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, reset the current run count and compare it to the maximum run found so far\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    \n    # If there are any remaining characters in the string that are not uppercase, compare the current run count to the maximum run found so far\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters found in the string\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    current_run = 1\n    max_run = 1\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if the character is uppercase\n        if char.isupper():\n            count += 1\n        else:\n            count = 0\n        \n        # Update the run length if the count is greater than the run length\n        if count > current_run:\n            current_run = count\n            max_run = current_run\n    \n    # Return the maximum run length\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    start = 0\n    max_count = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n            max_start = start\n\n        if count == 1:\n            start = i\n\n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    for char in test_str:\n        if char.isupper():\n            if current_char is None:\n                current_char = char\n                current_run += 1\n            else:\n                if char!= current_char:\n                    current_run = 0\n                    current_char = char\n                else:\n                    current_run += 1\n                    \n        else:\n            if current_char is not None:\n                if current_run > max_run:\n                    max_run = current_run\n                    current_run = 0\n                    current_char = None\n                    \n            current_run = 0\n            current_char = None\n            \n    if current_char is not None:\n        if current_run > max_run:\n            max_run = current_run\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    max_i = 0\n    for i in range(len(test_str)):\n        if i == 0 or test_str[i]!= test_str[i-1]:\n            if test_str[i:i+max_run+1].isupper():\n                max_run += 1\n                if max_run > max_run_max:\n                    max_run_max = max_run\n                    max_i = i-max_run+1\n    return test_str[max_i:max_i+max_run_max+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    max_run = 0\n    start = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            if i == n - 1 or not test_str[i+1].isupper():\n                max_run = max(max_run, i - start + 1)\n                start = i + 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run = 1\n    max_run = 1\n    max_index = 0\n\n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            run += 1\n            if run > max_run:\n                max_run = run\n                max_index = i\n        else:\n            run = 1\n\n    return test_str[max_index:max_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    run = 0\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string\n    for i in range(len(test_str)):\n        # If the character is uppercase and the current run is greater than 0, increment the current run and reset the max run if necessary\n        if test_str[i].isupper() and current_run > 0:\n            current_run += 1\n        # If the character is not uppercase and the current run is greater than 0, update the max run and reset the current run\n        elif not test_str[i].isupper() and current_run > 0:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    # Update the max run with the remaining characters in the string\n    max_run = max(max_run, len(test_str) - current_run)\n    \n    # Return the maximum run\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate through the list of numbers\n    for num in nums:\n        # check if the number is odd\n        if num % 2!= 0:\n            # return the number if it's odd\n            return num\n    # if no odd number is found, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (K in test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i in K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    if len(set(test_tup)) < K:\n        return False\n    elif len(set(test_tup)) == K:\n        for x in test_tup:\n            if x in test_tup:\n                return True\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    elif len(test_tup) == K:\n        return all(set(test_tup) == set(tuple(sorted(test_tup))))\n    else:\n        return all(set(test_tup[:K]) == set(tuple(sorted(test_tup[:K]))))"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup) - set([K])) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    if all(i in test_tup for i in range(K)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the length of the tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    # compare each element of the second tuple with its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Length of tuples should be the same.\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return \"Error: Element in second tuple is not smaller than its corresponding element in the first tuple.\"\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Both tuples must have the same number of elements.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same number of elements.')\n    for i, item1 in enumerate(test_tup1):\n        if item1 > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] < test_tup1[i]:\n                return True\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    # Check if each element of the second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]