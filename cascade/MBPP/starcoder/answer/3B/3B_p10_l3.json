[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem1 in test_tup1:\n        if elem1 in test_tup2:\n            shared_elements.append(elem1)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_elements = []\n    \n    # Loop through the first tuple\n    for element in test_tup1:\n        # Check if the element is in the second tuple\n        if element in test_tup2:\n            # If yes, append it to the shared_elements list\n            shared_elements.append(element)\n    \n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Find the intersection of the two lists\n    shared_list = list(set(test_tup1) & set(test_tup2))\n\n    # Return the shared elements in a tuple\n    return tuple(shared_list)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_list = []\n\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # creating a set to remove duplicates from the given lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # checking if there are any common elements between the two sets\n    if set1.intersection(set2):\n        return list(set1.intersection(set2))\n    else:\n        return []"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if the number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If none of the above conditions are met, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n    if n <= 1:\n        return False\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    p = 2\n    while p**2 <= n:\n        if sieve[p]:\n            for i in range(p**2, n + 1, p):\n                sieve[i] = False\n        p += 1\n    return [i for i in range(2, n + 1) if sieve[i]]"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(12))  # Output: True\nprint(is_not_prime(13))  # Output: False\nprint(is_not_prime(19))  # Output: True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is equal to 2 or 3\n    if n == 2 or n == 3:\n        return True\n\n    # Check if the number is a multiple of 2\n    if n % 2 == 0:\n        return False\n\n    # Check if the number is divisible by any number between 3 and the square root of n\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n\n    # If the number is not divisible by any number between 3 and the square root of n, it is prime\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list to a heap\n    heap = [-x for x in nums]\n    hq.heapify(heap)\n    # extract the largest n elements\n    result = [hq.heappop(heap) for i in range(n)]\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    This function takes a list of numbers and a number n as input and returns a list of the n largest integers from the given list.\n    The list of integers is sorted in descending order.\n    '''\n    # Create a min heap of size n\n    min_heap = hq.nsmallest(n, nums)\n    # Extract the n largest integers from the min heap and return the result\n    return [hq.heappop(min_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of the first n elements of the list\n    min_heap = hq.nsmallest(n, nums)\n\n    # Iterate through the remaining elements of the list\n    for num in nums[n:]:\n        # If the current number is greater than the smallest element in the heap, remove the smallest element from the heap and add the new number\n        if num > min_heap[0]:\n            min_heap.pop(0)\n            min_heap.append(num)\n\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n\n    # Convert the list of numbers into a heap\n    hq.heapify(nums)\n\n    # Remove the smallest elements from the heap\n    for i in range(n-1):\n        hq.heappop(nums)\n\n    # Return the heap as a list\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    for num in nums:\n        # If the heap size is less than n, add the number to the heap\n        if len(min_heap) < n:\n            hq.heappush(min_heap, -num)\n        # If the heap size is greater than or equal to n, compare the number with the smallest number in the heap\n        else:\n            if -num > min_heap[0]:\n                # If the new number is greater than the smallest number, remove the smallest number from the heap and add the new number to the heap\n                hq.heappop(min_heap)\n                hq.heappush(min_heap, -num)\n    # Return the numbers in the heap in descending order\n    return list(map(lambda x: -x, min_heap))"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        nums.pop()\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a min heap from the given list of numbers\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n    \n    # Extract the n largest elements from the heap and return them\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap to store the n largest numbers\n    heap = hq.nsmallest(n,nums)\n    \n    # iterate through the remaining numbers and remove the smallest one if it is greater than the smallest one in the heap\n    for num in nums[n:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,num)\n    \n    # return the n largest numbers in descending order\n    return [heap[i] for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # create a min heap of size n\n    hq.heapify(nums[:n])\n    # remove the smallest element from the heap and add the next element to it\n    for i in range(n, len(nums)):\n        hq.heappushpop(nums[:n], -nums[i])\n    return nums[:n]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If the first bit is set, return False\n    if x & 1 == 1:\n        return False\n    \n    # Find the first set bit position\n    i = 0\n    while (x & 1) == 0:\n        x >>= 1\n        i += 1\n    \n    # If the difference between the two numbers is greater than 1, return False\n    if abs(x - y) > 1:\n        return False\n    \n    # If the difference is 1, return True\n    if x == y:\n        return True\n    \n    # If the difference is 0, return True\n    if x == 0:\n        return True\n    \n    # If the difference is greater than 1, return False\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x & (x-1)!= 0: # check if x is a power of two \n        x &= x-1 # if not, set x to the smallest power of two greater than x\n    if x > 1: # check if x is odd or even\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while(x > 1): \n        if(x & 1): \n            count += 1\n        x = x >> 1 \n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the given number x is a power of two or not.\n    A power of two is a positive integer that is equal to a multiple of 2.\n    It has the property that 2^n == x for any integer n.\n    '''\n    if x == 0:\n        return False\n    if x == 1:\n        return True\n    if x & (x-1) == 0: # check if the binary representation of x has only one bit set to 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes a single integer as input and returns True if the number is a power of 2 and False otherwise.\n    A power of 2 is a positive integer that has no positive integer that is a factor of it. \n    For example, 2, 4, 8, 16, and so on are all power of 2.\n    '''\n    \n    # We can check if the number is 1 by performing the bitwise AND operation with itself.\n    # If the result is 0, then the number is a power of 2.\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the numbers to binary \n    binary_x = bin(x)[2:]\n    binary_y = bin(y)[2:]\n    \n    # Count the number of bits that differ between the two binary numbers \n    count = 0\n    for i in range(min(len(binary_x), len(binary_y))):\n        if binary_x[i]!= binary_y[i]:\n            count += 1\n            \n    # If the count is zero, then the two numbers differ at one bit position only \n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    elif x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # bitwise AND operator\n    # returns 1 if both bits are set to 1, else 0\n    # if the result is 1, then the two numbers differ at one bit position only\n    return ((x ^ (x - 1)) == 0)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n\n    # Using regular expressions to find all words which are at least 4 characters long.\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n\n    # Returning the matches list.\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to match words at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    \n    # Find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Return a list of the matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words of at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() method to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use a regular expression to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words with at least 4 characters\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\nif __name__ == '__main__':\n    text = \"The quick brown fox jumps over the lazy dog. The dog slept well.\"\n    result = find_char_long(text)\n    print(result)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # loop through the list and find the squares of each element\n    squared_nums = [num ** 2 for num in nums]\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # Initialize an empty list to store the squares of the nums\n    squares = []\n    \n    # Loop through each element in the nums list\n    for num in nums:\n        # Append the square of the current element to the squares list\n        squares.append(num ** 2)\n    \n    # Return the squares list\n    return squares"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Convert string to list of characters\n    char_list = list(str)\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the list of characters and keep track of the rotation count\n    for i in range(len(char_list)):\n        # If the current character is not equal to the next character, the string is not a palindrome\n        if char_list[i]!= char_list[(i+1)%len(char_list)]:\n            result += 1\n\n        # If the character at the end is not equal to the first character, the string is not a palindrome\n        if char_list[i]!= char_list[len(char_list)-1-i]:\n            result += 1\n\n    # Return the minimum number of rotations required to get the same string\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        if str[i] == str[n-i-1]:\n            continue\n        else:\n            return i+1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                return 0\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Check if the string is empty or has only one character\n    if len(str) <= 1:\n        return 0\n    \n    # Initialize variables to store the minimum number of rotations and the maximum length of the string\n    min_rotations = 0\n    max_length = len(str)\n    \n    # Loop through all possible rotations of the string\n    for i in range(1, max_length+1):\n        \n        # Check if the length of the current string after rotation is equal to the original string\n        if len(str[i:]) == len(str):\n            \n            # If the length of the current string after rotation is equal to the original string, increment the minimum number of rotations\n            min_rotations += 1\n            \n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # If the string has length 1 or 0, no rotations are required.\n    if n <= 1:\n        return 0\n    # If the string has length 2, the second character is equal to the first character,\n    # so we can't rotate the string to get the same string.\n    elif n == 2:\n        if str[1]!= str[0]:\n            return 0\n        else:\n            return 1\n    # If the string has length greater than 2, we can use a sliding window approach.\n    else:\n        # Initialize a window of length 3 and a pointer at the first character of the string.\n        window = str[:3]\n        left = 0\n        right = 0\n        # While the window has at least 3 characters, we can perform a rotation on the window.\n        while right < n-1:\n            # If the first character of the window is greater than the last character,\n            # we can rotate the window to get the same string.\n            if window[0] > window[2]:\n                left += 1\n                window = str[left:left+3]\n            # If the last character of the window is greater than the first character,\n            # we can rotate the window to get the same string.\n            elif window[2] > window[0]:\n                right += 1\n                window = str[right-2:right]\n            # If the first and last characters of the window are equal,\n            # we can rotate the window to get the same string.\n            else:\n                # If the length of the window is 3, we can rotate the window to get the same string.\n                if right - left == 2:\n                    if str[right] == str[right+1]:\n                        return 0\n                    else:\n                        return 1\n                # If the length of the window is greater than 3, we can perform a full rotation.\n                else:\n                    if str[right] == str[right+1] and str[left+1] == str[left+2]:\n                        return 0\n                    else:\n                        return 1\n        # If the loop completes without returning a minimum number of rotations,\n        # it means the string is already the same as itself, so we return 0.\n        return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Create a set to store the characters that occur more than once\n    duplicates = set()\n    for key, value in freq.items():\n        if value > 1:\n            duplicates.add(key)\n\n    # Check if the string has any duplicate characters\n    if not duplicates:\n        return 0\n\n    # Initialize the rotation count to 1\n    rotation_count = 1\n\n    # Create a list of tuples to store the rotations\n    rotations = []\n\n    # Iterate through each character in the string and check if it is a duplicate\n    for i in range(len(str)):\n        char = str[i]\n        if char in duplicates:\n            # Check if the next character is also a duplicate\n            if i < len(str) - 1:\n                next_char = str[i + 1]\n                if next_char in duplicates:\n                    # Create a new string that excludes the current and next characters\n                    new_str = str[:i] + str[i + 2:]\n                    # Check if the new string has the same frequency as the original string\n                    new_freq = {}\n                    for char in new_str:\n                        if char in new_freq:\n                            new_freq[char] += 1\n                        else:\n                            new_freq[char] = 1\n                    if new_freq == freq:\n                        # Add the new string and its frequency to the list of rotations\n                        rotations.append((str, new_str))\n                        # Increment the rotation count\n                        rotation_count += 1\n\n    # Return the minimum rotation count\n    return rotation_count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    # Initialize a set to keep track of the original string\n    original_set = set(str)\n\n    # Initialize the minimum number of rotations to 0\n    min_rotations = 0\n\n    # Loop until all characters have been removed from the set\n    while len(original_set) > 0:\n        # Find the first character in the set\n        first_char = next(iter(original_set))\n\n        # Remove the first character from the set\n        original_set.remove(first_char)\n\n        # Find the remaining characters in the set\n        remaining_chars = set(str).difference(original_set)\n\n        # Add the remaining characters to the set\n        original_set.update(remaining_chars)\n\n        # Increment the minimum number of rotations\n        min_rotations += 1\n\n    # Return the minimum number of rotations\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Initialize two variables to store the index of the first and last characters of the string\n    first_char_idx = 0\n    last_char_idx = len(str) - 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Loop through the string\n    while first_char_idx < last_char_idx:\n        # Swap the characters at the first and last indices\n        str[first_char_idx], str[last_char_idx] = str[last_char_idx], str[first_char_idx]\n\n        # Check if the string is already sorted\n        if str == str[::-1]:\n            return min_rotations\n\n        # Update the indices of the first and last characters\n        first_char_idx += 1\n        last_char_idx -= 1\n\n        # Increment the minimum number of rotations required\n        min_rotations += 1\n\n    # If the string was not found to be sorted, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if str[i:j] == str[j:k] == str[k:n]:\n                    return k-j\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Find the length of the string\n    n = len(str)\n    # Initialize two pointers, one at the start of the string and the other at the end\n    i = 0\n    j = n-1\n    # Initialize the minimum number of rotations required\n    min_rot = 0\n    # Initialize a flag to check if the two pointers meet at the end of the string\n    reached_end = False\n    # Initialize a boolean variable to keep track of whether the first string is found or not\n    found_first = False\n    # Initialize a boolean variable to keep track of whether the second string is found or not\n    found_second = False\n    # Loop through the string until the two pointers meet at the end\n    while not reached_end:\n        # If the characters at the two pointers are same, swap them\n        if str[i] == str[j]:\n            str[i], str[j] = str[j], str[i]\n            # Increment the minimum number of rotations required\n            min_rot += 1\n            # Check if the second string is found\n            if str == reversed(str):\n                found_second = True\n            # Move the pointers to the next position\n            i += 1\n            j -= 1\n        # If the characters at the two pointers are not same, break the loop\n        else:\n            reached_end = True\n    # If the first string is found, return the minimum number of rotations required\n    if found_first:\n        return min_rot\n    # If the second string is found, return the minimum number of rotations required\n    elif found_second:\n        return min_rot\n    # If neither string is found, return -1\n    else:\n        return -1"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s: \n        return s \n    if s[0] == ch: \n        return remove_Occ(s[1:],ch) \n    if s[-1] == ch: \n        return remove_Occ(s[:-1],ch) \n    return s[0] + remove_Occ(s[1:],ch) + s[-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_occurrence = s.find(ch)\n    if first_occurrence == -1:\n        return s\n    last_occurrence = s.rfind(ch)\n    if last_occurrence == -1:\n        return s\n    return s[:first_occurrence] + s[last_occurrence+len(ch):]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n    else:\n        return s\n    if s.startswith(ch):\n        s = s.replace(ch,'',1)\n    if s.endswith(ch):\n        s = s.replace(ch,'',-1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function takes a string s and a character ch as input.\n    It then removes the first and last occurrence of the given character\n    from the string and returns the result.\n    '''\n\n    # Removing the first occurrence of the character\n    s = s.replace(ch, \"\")\n\n    # Removing the last occurrence of the character\n    s = s.replace(ch, \"\")\n\n    # Returning the modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert the string to a list of characters\n    chars = list(s)\n    \n    # find the index of the first occurrence of the character\n    index = chars.index(ch)\n    \n    # remove the first occurrence of the character\n    del chars[index]\n    \n    # find the index of the last occurrence of the character\n    index = chars.index(ch)\n    del chars[index]\n    \n    # convert the list of characters back to a string and return it\n    return ''.join(chars)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'')\n    s = s.replace(ch, '', 1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return s\n    else:\n        return s[s.find(ch)+1:][:-1]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Initialize two pointers to start and end of the string\n    start = 0\n    end = len(s) - 1\n    \n    # Find the first occurrence of the character\n    while start <= end and s[start]!= ch:\n        start += 1\n        \n    # If the character is not found, return the string as it is\n    if start > end:\n        return s\n    \n    # Find the last occurrence of the character\n    while start <= end and s[end]!= ch:\n        end -= 1\n        \n    # If the character is not found, return the string as it is\n    if start > end:\n        return s\n    \n    # Remove the first occurrence of the character\n    s = s[:start] + s[start+1:]\n    \n    # Remove the last occurrence of the character\n    s = s[:end] + s[end+1:]\n    \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s:\n        return \"Character not found in string\"\n    else:\n        s = s.replace(ch,\"\")\n        s = s.lstrip(ch)\n        s = s.rstrip(ch)\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n\n    # Split the string into list of characters\n    chars = list(s)\n\n    # Initialize indexes for first and last occurrences of the character\n    first_occ = None\n    last_occ = None\n\n    # Iterate over the list and find first occurrence of the character\n    for i in range(len(chars)):\n        if chars[i] == ch:\n            first_occ = i\n            break\n\n    # If first occurrence is found, find last occurrence\n    if first_occ is not None:\n        for i in range(len(chars)-1, first_occ-1, -1):\n            if chars[i] == ch:\n                last_occ = i\n                break\n\n    # If last occurrence is found, remove both occurrences\n    if first_occ is not None and last_occ is not None:\n        del chars[first_occ]\n        del chars[last_occ]\n        return ''.join(chars)\n\n    # If no occurrence is found, return the original string\n    else:\n        return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # initialize a list to store the rows with the smallest sum\n    rows = []\n\n    # iterate through each row in the matrix\n    for i in range(len(M)):\n        # calculate the sum of the current row\n        row_sum = sum(M[i])\n        # if the row sum is not already in the list of rows with the smallest sum, add it\n        if row_sum not in rows:\n            rows.append(row_sum)\n\n    # initialize a list to store the sorted matrix\n    sorted_matrix = []\n\n    # iterate through each row in the matrix\n    for row_sum in rows:\n        # create a new list for the current row sum\n        current_row = []\n        # iterate through each column in the matrix\n        for j in range(len(M)):\n            # check if the current element of the current row is equal to the current row sum\n            if M[j][i] == row_sum:\n                # add the element to the new list for the current row\n                current_row.append(M[j][i])\n        # sort the new list for the current row\n        current_row.sort()\n        # add the sorted list for the current row to the sorted matrix\n        sorted_matrix.append(current_row)\n\n    # return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    rows = len(M)\n    cols = len(M[0])\n\n    # initialize a variable to store the row with the maximum sum\n    max_row = 0\n    for i in range(rows):\n        # find the row with the maximum sum\n        current_sum = 0\n        for j in range(cols):\n            current_sum += M[i][j]\n        if current_sum > M[max_row][max_col]:\n            max_row = i\n\n    # swap the maximum row with the first row of the matrix\n    M[max_row], M[0] = M[0], M[max_row]\n\n    # sort the remaining rows of the matrix in ascending order\n    for i in range(1, rows):\n        current_sum = 0\n        for j in range(cols):\n            current_sum += M[i][j]\n        # find the row with the maximum sum\n        max_col = 0\n        for j in range(cols):\n            if current_sum < M[max_row][j]:\n                max_col = j\n        # swap the maximum col with the i-th column of the matrix\n        M[i], M[max_row][max_col] = M[max_row][max_col], M[i]\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # convert the matrix to a list of lists\n    rows = [list(row) for row in M]\n    # sort the rows in ascending order based on their sum\n    rows.sort(key=lambda x: sum(x))\n    # convert the sorted rows back to a matrix\n    sorted_M = [[row[i] for row in rows] for i in range(len(rows[0]))]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Check if the matrix is valid\n    if len(M) == 0:\n        return []\n    elif len(M[0]) == 0:\n        return []\n    elif len(M)!= len(M[0]):\n        return []\n\n    # Sort the matrix by sum of rows\n    sorted_M = []\n    for i in range(len(M)):\n        sorted_M.append(sorted(M[i], reverse=True))\n\n    # Merge the sorted rows and columns to get the final sorted matrix\n    sorted_M = [row for sublist in sorted_M for row in sublist]\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize two empty lists to store the sorted matrix and the row sums\n    sorted_matrix = []\n    row_sums = []\n    # Loop through each row in the matrix\n    for i in range(n):\n        # Calculate the sum of the current row\n        row_sum = sum(M[i])\n        # Append the row sum to the row sums list\n        row_sums.append(row_sum)\n        # Initialize a variable to keep track of the current row index\n        j = 0\n        # While the current row is greater than the previous row, swap the rows\n        while j < len(sorted_matrix) and sorted_matrix[j][i] > M[i][j]:\n            j += 1\n        # Append the current row to the sorted matrix after swapping\n        sorted_matrix.append(M[j])\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the indices of each row's minimum element\n    min_indices = []\n    # Loop through each row of the matrix and find the index of its minimum element\n    for i in range(len(M)):\n        min_index = i\n        for j in range(len(M[i])):\n            if j == 0 or M[i][j] < M[i][min_index]:\n                min_index = j\n        min_indices.append(min_index)\n    # Sort the matrix by rows according to the minimum element indices\n    sorted_matrix = []\n    for i in range(len(min_indices)):\n        row = []\n        for j in range(len(M[i])):\n            row.append(M[min_indices[i]][j])\n        sorted_matrix.append(row)\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n\n    # Sort the matrix based on the sum of each row\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                # Swap the rows\n                M[j], M[j+1] = M[j+1], M[j]\n\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n\n    # Sort the matrix in ascending order based on the row sums\n    sorted_M = sorted(M, key=lambda x: sum(x))\n\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the sum of the ith row\n        sum_i = sum(M[i])\n        # sort the ith row using a modified bubble sort algorithm\n        for j in range(n - i - 1):\n            if M[i][j] > M[i][j + 1]:\n                M[i][j], M[i][j + 1] = M[i][j + 1], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i, n):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l*b*h / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h  # Formula for volume of a triangular prism\n    return V\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Find the semi-perimeter\n    semi_perimeter = (l+b+h)/2\n    \n    # Find the area of each half of the triangle\n    half_area_l = l*b/2\n    half_area_b = b*h/2\n    half_area_h = h*l/2\n\n    # Find the total area of the triangle\n    area = half_area_l + half_area_b + half_area_h\n    \n    # Calculate the volume of the triangle\n    volume = semi_perimeter**2 * area\n    \n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the length, width, and height of a triangular prism as inputs and returns the volume of the prism.\n    '''\n    # calculate the area of the prism\n    area = 0.5 * l * b * h\n    # calculate the volume of the prism\n    vol = area * l * b * h\n    return vol"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate the volume of the prism\n    V = 1/3 * l * b * h\n    # print the result\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])([a-z])(?!\\1)'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z][a-z_]*[a-z]'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    pattern = r'(?<![a-z])([a-z]+(?=[A-Z])|[A-Z]+(?=[A-Z][a-z]))(?![a-z])'\n    matches = re.findall(pattern, text)\n\n    return len(matches) == 1"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'(?<!_)\\b[a-z]+(?=_\\b)')\n    return pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define the regular expression pattern\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n\n    # Use the re.search() method to search for matches in the input string\n    matches = re.findall(pattern, text)\n\n    # Return true if any matches are found, false otherwise\n    return True if matches else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    lowercase_underscore_pattern = r'[a-z_][a-z_]*'\n    lowercase_underscore_pattern = re.compile(lowercase_underscore_pattern)\n    return lowercase_underscore_pattern.search(text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![\\w_])[a-z]+(?![\\w_])_'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'([a-z]+)_([a-z]+)(_[a-z]+)*')\n    match = pattern.match(text)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z](?![a-z])'\n\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    list_of_chars = list(string)\n    for i in range(NO_OF_CHARS):\n        if i not in list_of_chars:\n            list_of_chars.remove(chr(i))\n\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Create a list of unique characters in the string\n    unique_chars = list(set(string))\n    # Create a list to store the result\n    result = []\n    # Loop through each character in the first string\n    for char in string:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n    # Return the result list\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input, string1 and string2, and returns a new string\n    with all the characters of string1 that are not present in string2.\n\n    Args:\n        string1 (str): The original string to be processed.\n        string2 (str): The string containing the characters to be removed from string1.\n\n    Returns:\n        str: The new string with all the characters of string1 that are not present in string2.\n    \"\"\"\n    char_list = list(string1)\n    for char in char_list:\n        if char in string2:\n            char_list.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n\n    # Convert the strings to lists of characters\n    str1_list = list(string)\n    str2_list = list(input(\"Enter the string to remove characters from: \"))\n\n    # Remove characters from str1_list which are present in str2_list\n    for char in str1_list:\n        if char in str2_list:\n            str1_list.remove(char)\n\n    # Convert the lists back to strings and return the result\n    result = ''.join(str1_list)\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    chars_to_remove = set(string)\n    filtered_string = [char for char in string if char not in chars_to_remove]\n    return filtered_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    :param string: The first string to remove characters from.\n    :param remove_chars: A string of characters to remove from the first string.\n    :return: The modified string with the characters from the second string removed.\n    \"\"\"\n    remove_set = set(remove_chars)\n    return ''.join([char for char in string if char not in remove_set])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    This function takes two strings as input, and returns a new string containing the characters that are not present in the second string.\n    \"\"\"\n    no_of_chars = 256\n    char_count = [0] * no_of_chars\n    for char in string1:\n        char_count[ord(char)] += 1\n\n    result = \"\"\n    for char in string1:\n        if char_count[ord(char)] == 1:\n            result += char\n        char_count[ord(char)] -= 1\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    This function removes characters from the first string which are present in the second string.\n    '''\n    list_string = [chr(i) for i in range(NO_OF_CHARS)]\n    return [char for char in list_string if char not in string]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = []\n    char_set = set(string)\n\n    # Populate char_list with unique characters from string\n    for char in range(NO_OF_CHARS):\n        if char not in char_set:\n            char_list.append(chr(char))\n\n    # Remove characters from first string present in char_list\n    result = [char for char in string if char not in char_list]\n\n    return ''.join(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n    \"\"\"\n    first_string = list(string)\n    second_string = list(NO_OF_CHARS * '*')\n    for char in second_string:\n        if char in first_string:\n            first_string.remove(char)\n    return ''.join(first_string)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements of the array\n    unique_elements = set(arraynums)\n\n    # check if the length of the set is equal to the length of the array\n    if len(unique_elements) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the values in the array\n    dictnums = {}\n    # loop through the array and add each value to the dictionary\n    for num in arraynums:\n        dictnums[num] = True\n    # check if there are any values in the dictionary that are not None\n    return any(num is not None for num in dictnums.values())"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the set has duplicate elements\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a dictionary to store the elements of the array\n    element_dict = {}\n    \n    # Iterate over the array and add each element to the dictionary\n    for num in arraynums:\n        element_dict[num] = True\n        \n    # Check if the dictionary has more than one element in it\n    if len(element_dict) > 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    # check if the number is divisible by 5\n    if x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the conditions for a woodall number\n    woodall = lambda y: (x**2 == y**2) or (x**3 == y**3)\n\n    # Check if the number is a woodall number\n    if any(woodall(i) for i in range(1, x)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 10 == 3:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Define a list of all the prime numbers less than or equal to 100\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n    \n    # Check if the given number is a prime number\n    if x in primes:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # check if the number is divisible by 5 and by 10\n    if x % 5 == 0 and x % 10 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x == 0:\n        return False\n    elif x % 3 == 0:\n        return False\n    elif x % 5 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # list of numbers that are considered as woodall numbers\n    woodall_numbers = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n\n    # iterate through the list of woodall numbers and check if the input number is in the list\n    for woodall_number in woodall_numbers:\n        if x == woodall_number:\n            return True\n    \n    # if the input number is not a woodall number, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 10 == 7:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 2: \n        return False\n    elif x == 2: \n        return True\n    else: \n        return is_woodall(x - 2)"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 3 and x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # check if the number is one less than twice its reverse\n    if num < 2*rev_int:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Get the reverse of the number\n    rev_num = int(str(num)[::-1])\n    # Check if the original number is one less than twice its reverse\n    if num!= (rev_num + 1):\n        return \"The number is not one less than twice its reverse\"\n    else:\n        return \"The number is one less than twice its reverse\""
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return reverse < 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse_num = 0\n    while num > 0:\n        remainder = num % 10\n        reverse_num = reverse_num * 10 + remainder\n        num //= 10\n    return num == reverse_num * 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        rem = temp % 10\n        rev_num = rev_num * 10 + rem\n        temp //= 10\n    if rev_num == 2 * num - 1:\n        print(\"The number is one less than twice its reverse.\")\n    else:\n        print(\"The number is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        digit = num % 10\n        reverse = reverse * 10 + digit\n        num //= 10\n    return reverse > 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return False\n    else:\n        reverse = 0\n        temp = num\n        while temp > 0:\n            reverse = reverse * 10 + temp % 10\n            temp //= 10\n        return num - reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # convert the number to a string\n    num = str(num)\n    # reverse the string\n    rev_num = num[::-1]\n    # convert the reversed number to an integer\n    rev_num = int(rev_num)\n    # calculate the difference between the original number and its reverse\n    diff = abs(num - rev_num)\n    # check if the difference is one less than twice its reverse\n    if diff == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    \n    while temp > 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    \n    if (rev_num - 1) // 2 == num // 10:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1]\n    return int(num) + 1 == 2 * int(reversed_num)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    \n    max_num = 0\n    \n    for num in arr:\n        max_num = max(max_num, num)\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Initialize the maximum number to be formed\n    max_num = 0\n\n    # Sort the given list of digits in ascending order\n    arr.sort()\n\n    # Loop through each digit in the sorted list of digits\n    for digit in arr:\n\n        # Check if the digit is at the beginning of the number\n        if digit == arr[0]:\n\n            # If it is, check if the sum of the digits to the left of it is greater than the current maximum number\n            if sum(digit for digit in arr[:arr.index(digit)]) > max_num:\n\n                # If it is, update the maximum number\n                max_num = sum(digit for digit in arr[:arr.index(digit)])\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Initialize two variables to keep track of the largest and smallest digits\n    largest_num = 0\n    smallest_num = 10**len(arr) - 1\n    # Iterate through the array and check if the current digit can be formed with the remaining digits\n    for num in arr:\n        if num < smallest_num // 10:\n            return \"No valid combination found\"\n        largest_num = 10 * largest_num + num\n        smallest_num = 10 * smallest_num + 9\n    # If the array is empty, return 0\n    if len(arr) == 0:\n        return 0\n    # If the largest number is greater than the smallest number, return it\n    elif largest_num > smallest_num:\n        return largest_num\n    # If the largest number is less than the smallest number, return the smallest number\n    else:\n        return smallest_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    return int(''.join(str(i) for i in arr))"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Sort the digits in ascending order\n    arr.sort()\n\n    # Initialize variables to keep track of the maximum and the current sum\n    max_sum = 0\n    current_sum = 0\n\n    # Traverse the digits of the sorted list from left to right\n    for num in arr : \n\n        # If the current digit is a multiple of 2, add it to the current sum\n        if num % 2 == 0 : \n            current_sum += num\n\n        # If the current digit is a multiple of 3, subtract it from the current sum\n        elif num % 3 == 0 : \n            current_sum -= num\n\n        # Update the maximum sum if the current sum becomes greater than the maximum sum\n        if current_sum > max_sum : \n            max_sum = current_sum\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the given list of digits in ascending order\n    arr.sort()\n    # Initialize the result variable with the first number in the list\n    result = arr[0]\n    # Iterate over the sorted list of digits\n    for num in arr:\n        # Calculate the sum of the digits in the current number\n        current_sum = sum(int(digit) for digit in str(num))\n        # If the sum is greater than the current result, update the result\n        if current_sum > result:\n            result = current_sum\n    # Return the result\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the input array in descending order\n    arr = sorted(arr, reverse=True)\n    \n    # Initialize variables to store the largest number formed with the digits\n    max_num = 0\n    temp = 0\n    \n    # Loop through the array and calculate the largest number formed with the digits\n    for digit in arr:\n        # Check if the current digit is a multiple of 3 or 5\n        if digit % 3 == 0 or digit % 5 == 0:\n            temp += digit // 3\n        else:\n            temp += digit // 5\n        \n        # Update the largest number formed with the digits\n        if temp > max_num:\n            max_num = temp\n            \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    # initialize max_num to the first element in the list\n    max_num = arr[0]\n\n    # loop through the list starting from index 1\n    for i in range(1, len(arr)):\n        # check if the current element can be formed with the previous elements in the list\n        if arr[i] == arr[i-1] + 1:\n            max_num = arr[i]\n        else:\n            # if the current element cannot be formed with the previous elements, set max_num to the current element\n            max_num = arr[i]\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the input array in ascending order\n    arr.sort()\n    # Initialize the maximum number as the first element of the array\n    max_num = arr[0]\n    # Loop through the remaining elements of the array\n    for i in range(1, len(arr)):\n        # Calculate the sum of the current element and the maximum number\n        new_sum = arr[i] + max_num\n        # Update the maximum number if the new sum is greater\n        if new_sum > max_num:\n            max_num = new_sum\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n\n    # Function to find the number of digits in the given array\n    def count_digits(arr) : \n        count = 0 \n        for i in arr : \n            if i > 9 or i < 0 : \n                count += 1 \n        return count \n\n    # Function to find the number of ways to form the given array with given number of digits\n    def count_ways(arr, num_digits) : \n        count = 0 \n        for i in range(10**(num_digits-1), 10**num_digits) : \n            if set(str(i)) == set(arr) : \n                count += 1 \n        return count \n\n    # Function to find the maximum number that can be formed with the given array of digits\n    def find_max(arr) : \n        num_digits = count_digits(arr) \n        max_num = 0 \n        for i in range(10**(num_digits-1), 10**num_digits) : \n            if set(str(i)) == set(arr) : \n                if i > max_num : \n                    max_num = i \n        return max_num \n\n    # Main function to find the maximum number that can be formed with the given array of digits\n    return find_max(arr)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    #check if both numbers have same sign\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs.\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs.\"\n    else:\n        return \"Both numbers have same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if their signs are opposite.\n    \"\"\"\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    if x == 0 or y == 0:\n        return 'Both the numbers are zero'\n    elif x > 0 and y < 0:\n        return 'x is positive and y is negative'\n    elif x < 0 and y > 0:\n        return 'x is negative and y is positive'\n    else:\n        return 'Both the numbers have the same sign'"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # check if the signs are opposite or not\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0: \n        return True \n    elif x<=0 and y<=0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    \"\"\"\n    This function takes two integers as input and returns True if the two integers have opposite sign and False otherwise.\n    \"\"\"\n    if x >= 0 and y >= 0:\n        return False\n    elif x <= 0 and y <= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the integers have opposite signs,\n    and False otherwise.\n    \"\"\"\n    if x == 0 and y == 0:\n        return True\n    elif x == 0:\n        return False\n    elif y == 0:\n        return False\n    elif (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y > 0:\n        return True\n    elif x < 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    for i in range(1, n+1):\n        result += 8*i*(i-1)\n    return result"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n):\n        if n == 1:\n            return 1\n        elif n % 2 == 0:\n            return 1 + 2 * nth_octagonal(n // 2)\n        else:\n            return 1 + 2 * nth_octagonal((n - 1) // 2)\n    \n    return nth_octagonal(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    This function checks if a given number is an octagonal number or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        if n < 16:\n            a = n*(n-1)*(n-2)\n            b = n*(n-1)*n\n            return a == b\n        else:\n            c = (n-1)*(n-1)\n            d = n*(n-1)*n\n            e = n*(n-1)*(n-2)\n            return c == d or c == e"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return 1\n    else:\n        return 4 * is_octagonal(n - 1) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    i = 1\n    j = 1\n    while i <= n:\n        if i == 1:\n            j = 1\n        while j <= n:\n            if j == 1:\n                i += 1\n            else:\n                k = j - 1\n                while k <= n:\n                    if k == 1:\n                        j += 1\n                    else:\n                        if i + k == j - k:\n                            return True\n                        else:\n                            break\n                    k += 1\n                if j > n:\n                    break\n        i += 1\n    return False\n\nn = int(input(\"Enter a positive integer: \"))\n\nif is_octagonal(n):\n    print(f\"The {n}th octagonal number is {2**n - 1}.\")\nelse:\n    print(f\"The {n}th octagonal number does not exist.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        a = 1 + 2 * i\n        b = 3 * i * i\n        c = 2 * i - 1\n        if a * a + b * b == c * c:\n            return a"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_num = 0\n    i = 1\n    while i <= n:\n        oct_num += i\n        i += 1\n    return oct_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    e = 1\n    f = 1\n\n    for i in range(2, n+1):\n        temp = a + b + c + d + e + f\n        a = b\n        b = c\n        c = d\n        d = e\n        e = f\n        f = temp\n\n    return f"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Define a function to check if a number is octagonal or not\n    def is_octagonal_helper(num):\n        return int(num**2+num) == num\n\n    # Define a function to find the nth octagonal number\n    def nth_octagonal(n):\n        if n < 1:\n            return None\n        num = 1\n        count = 0\n        while count < n:\n            if is_octagonal_helper(num):\n                count += 1\n            num += 2\n        return num - 2\n\n    return nth_octagonal(n)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the given condition\n    count = defaultdict(int)\n\n    # Loop through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the sum of digits of the substring is equal to its length\n            if sum([int(digit) for digit in s[i:j]]) == j-i:\n                # Increment the count of substrings with the given condition\n                count[j-i] += 1\n\n    # Return the count of substrings with the given condition\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Creating a dictionary to store the count of substrings with the given condition\n    substring_count = defaultdict(int)\n    # Iterating over all substrings of s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Checking if the substring with sum of digits equal to its length exists in s\n            if s[i:j] == str(sum([int(digit) for digit in s[i:j]])):\n                substring_count[s[i:j]] += 1\n    # Returning the count of substrings with the given condition\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Substrings(s):\n    '''\n    This function takes a string as input and returns the number of substrings with the sum of digits equal to their length.\n    '''\n    # Creating a defaultdict to store the count of each substring with sum of digits equal to its length\n    count_dict = defaultdict(int)\n    # Looping through all the possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extracting the substring from the input string and converting it to a set of digits\n            substring = set(str(s[i:j]))\n            # Adding the length of the substring to the count of the substring with sum of digits equal to its length\n            count_dict[len(substring)] += 1\n    # Returning the count of the substrings with sum of digits equal to their length\n    return count_dict[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings[substring] += 1\n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a defaultdict to store the count of substrings with each length\n    substrings_count = defaultdict(int)\n    \n    # Iterate through all possible substrings of the string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Get the substring and calculate its sum of digits\n            substring = s[i:j]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            \n            # If the sum of digits is equal to its length, increment the count for that length\n            if sum_of_digits == len(substring):\n                substrings_count[len(substring)] += 1\n    \n    # Return the count of substrings with each length\n    return substrings_count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                substrings[substring] += 1\n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the frequency of each digit\n    digit_count = defaultdict(int)\n    \n    # Calculate the frequency of each digit in the given string\n    for char in s:\n        if char.isdigit():\n            digit_count[int(char)] += 1\n    \n    # Initialize a variable to store the count of substrings with the given sum of digits\n    count = 0\n    \n    # Calculate the sum of digits of each substring and store the count of substrings with the given sum\n    for i in range(len(s)):\n        substring = s[i:]\n        substring_sum = sum(int(digit) for digit in substring)\n        if substring_sum == len(substring):\n            count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # loop through the string and check if the sum of digits of the current substring equals to its length\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # check if the sum of digits of the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == len(s[i:j+1]):\n                # increment the count of substrings with sum of digits equal to their length\n                count_dict[len(s[i:j+1])] += 1\n\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n    # loop through each character in the string\n    for i in range(len(s)):\n        # loop through each substring of the remaining characters\n        for j in range(i, len(s)):\n            # extract the substring\n            substring = s[i:j+1]\n            # check if the sum of digits is equal to the length of the substring\n            if sum(int(digit) for digit in substring) == len(substring):\n                # increment the count of the substring in the defaultdict\n                count[substring] += 1\n    # return the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # create a dictionary to store the counts of each substring length\n    substring_count = defaultdict(int)\n    \n    # loop through the input string and count the number of substrings with the sum of digits equal to their length\n    for i in range(len(s)):\n        substring = s[i:i+1]\n        digit_sum = sum(int(digit) for digit in substring)\n        substring_count[digit_sum] += 1\n        \n    return sum(substring_count.values())"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Initialize smallest number to be the first number in the list\n    smallest = xs[0]\n    \n    # Loop through the list and compare each number to the smallest number\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    \n    # Return the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    This function takes a list as input and returns the smallest number in the list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    # Sort the list of tuples\n    sorted_list = sorted(test_list)\n    \n    # Initialize the variables\n    max_diff = 0\n    min_val = sorted_list[0][0]\n    max_val = sorted_list[0][1]\n    \n    # Loop through the sorted list of tuples\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][1] > max_val:\n            max_diff = sorted_list[i][1] - min_val\n            max_val = sorted_list[i][1]\n        elif sorted_list[i][1] < max_val:\n            min_val = sorted_list[i][1]\n        else:\n            min_val = min(min_val, sorted_list[i][0])\n            max_val = max(max_val, sorted_list[i][1])\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes in a list of tuples and returns the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][0] > test_list[i][0]:\n                difference = max(difference, test_list[j][0] - test_list[i][0])\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables\n    min_val = float('inf')\n    max_diff = 0\n    \n    # Loop through each element in the list\n    for i in range(len(test_list)-1):\n        # Compare the current element to the next element\n        if test_list[i][1] > test_list[i+1][1]:\n            # If the current element is smaller, update the minimum value and max difference\n            min_val = min(min_val, test_list[i][1])\n            max_diff = max(max_diff, test_list[i][1] - min_val)\n        else:\n            # If the current element is larger, update the minimum value and max difference\n            min_val = min(min_val, test_list[i+1][1])\n            max_diff = max(max_diff, test_list[i+1][1] - min_val)\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store maximum difference and current difference\n    max_diff = 0\n    curr_diff = 0\n\n    # Loop through the tuple list\n    for i in range(len(test_list)):\n        # Get the current element and the next element in the tuple list\n        current = test_list[i]\n        next_element = test_list[i+1]\n\n        # Calculate the difference between the current and next element\n        diff = abs(current - next_element)\n\n        # Update the maximum difference and the current difference if the new difference is greater than the current\n        if diff > curr_diff:\n            max_diff = curr_diff\n            curr_diff = diff\n\n        # Update the current difference if the difference is between two elements in the tuple list\n        else:\n            curr_diff = diff\n\n    # Return the maximum difference between available pairs in the tuple list\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pairs = set()\n    max_diff = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.add((test_list[i], test_list[j]))\n            max_diff = max(max_diff, max(test_list[i], test_list[j]) - min(test_list[i], test_list[j]))\n            \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n    last_num = None\n\n    # Iterate through the list\n    for num in test_list:\n\n        # If the current number is greater than the previous number,\n        # update the max_diff and store the current number as the last_num\n        if num > last_num:\n            max_diff = num - last_num\n            last_num = num\n\n        # If the current number is less than or equal to the previous number,\n        # update the max_diff with the difference between the current and last numbers\n        else:\n            diff = num - last_num\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                diff = test_list[j][1] - test_list[i][1]\n                max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Initialize max_diff to the first element of the tuple list\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n    # Loop through the tuple list\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current element and the next element\n        diff = abs(test_list[i][0] - test_list[i+1][0])\n        # Update max_diff if the current difference is greater\n        max_diff = max(max_diff, diff)\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the maximum difference and the maximum pair\n    max_diff = 0\n    max_pair = (0, 0)\n\n    # Loop through the sorted list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = test_list[i][1] - test_list[i + 1][0]\n\n        # Update the maximum difference and the maximum pair if the current pair's difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            max_pair = test_list[i]\n\n    # Return the maximum difference and the maximum pair\n    return max_diff, max_pair"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # sort the list of tuples by the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    # sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value (marks)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value (the grade)\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(recursive_list_sum(item))\n            else:\n                flattened_list.append(item)\n        return recursive_list_sum(flattened_list)\n\ndef flatten_and_sum(data_list):\n    flat_list = recursive_list_sum(data_list)\n    return sum(flat_list)\n\ndata_list = [1, [2, [3, 4]], 5, 6, [[[7]], [[8]]]]\nprint(flatten_and_sum(data_list))"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        return sum(data_list) + recursive_list_sum(sum(data_list))\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    def flatten(lst):\n        flat_lst = []\n        for item in lst:\n            if type(item) == list:\n                flat_lst.extend(flatten(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n    \n    def sum_flat_lst(flat_lst):\n        return sum(flat_lst)\n    \n    flat_lst = flatten(data_list)\n    return sum_flat_lst(flat_lst)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: sum up the head element and the sum of the tail of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    if isinstance(data_list, list):\n        return sum(recursive_list_sum(sublist) for sublist in data_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element to the sum of the flattened list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input is a list, sum all elements recursively\n    if type(data_list) == list:\n        return sum([recursive_list_sum(x) for x in data_list])\n    # Base case: if the input is a scalar, return the scalar\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list or single-element list\n    if len(data_list) == 0 or len(data_list) == 1:\n        return sum(data_list)\n    # Recursive case: sum first element and then call function recursively on remaining elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the input list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: sum the first element of each sublist and add the result to the sum of all sublists\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as an argument and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    def power(x, n):\n        if n == 0:\n            return 1\n        elif n % 2 == 0:\n            return power(x, n//2) * power(x, n//2)\n        else:\n            return x * power(x, n//2) * power(x, n//2)\n    \n    def bell_number_helper(n, memo={}):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 1\n        memo[n] = 0\n        for i in range(1, n+1):\n            memo[n] += power(i, n) * bell_number_helper(n-i, memo)\n        return memo[n]\n    \n    return bell_number_helper(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a variable to store the number of ways to partition the set\n    ways = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # For each number, check if it can be partitioned into 2 Bell numbers\n        if i % 2 == 0:\n            # If it can be partitioned, add 2 to the ways variable\n            ways += 2\n        # For each odd number greater than 2, check if it can be partitioned into 2 Bell numbers plus one more\n        elif i > 2:\n            # If it can be partitioned, add 3 to the ways variable\n            ways += 3\n\n    # Return the number of ways to partition the set\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    The Bell numbers are defined as:\n\n    B(n) = n * (n + 1) / 2\n\n    For example, the first ten Bell numbers are:\n\n    B(1) = 1\n    B(2) = 2\n    B(3) = 6\n    B(4) = 12\n    B(5) = 20\n    B(6) = 30\n    B(7) = 42\n    B(8) = 60\n    B(9) = 84\n    B(10) = 120\n\n    The number of ways to partition a set of Bell numbers is equal to the sum of the Bell numbers.\n    For example, the number of ways to partition the set of Bell numbers {1, 2, 3, 4, 5, 6, 7, 8, 9, 10} is:\n\n    n * (n + 1) / 2 + (n - 1) * (n - 2) / 2 + (n - 2) * (n - 3) / 2 +...\n\n    This can be simplified to:\n\n    n * n / 2 + n - 1 + n - 2 +...\n\n    This sum can be computed using a loop, and the result is stored in a variable called `sum_bell`.\n\n    Finally, the function returns the value of `sum_bell` as the number of ways to partition the set of Bell numbers.\n    '''\n\n    sum_bell = 0\n\n    for i in range(n + 1):\n        sum_bell += i * (i + 1) // 2\n\n    return sum_bell"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 10\n    if n % 2 == 0:\n        return 0\n    if n == 4:\n        return 2\n    else:\n        return 5 * bell_number(n-2) + 10 * bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Initialize a list of bell numbers\n    bell_numbers = []\n    # Loop through the range of bell numbers from 1 to n\n    for i in range(1, n+1):\n        # Add the i-th bell number to the list of bell numbers\n        bell_numbers.append(i)\n    # Loop through the range of partitions from 1 to n\n    for k in range(1, n+1):\n        # Loop through the range of indices from 0 to k-1\n        for j in range(k):\n            # Check if the j-th index can be removed from the k-th partition to form the j-th bell number\n            if bell_numbers[j] > bell_numbers[k-j-1]:\n                break\n            # If the j-th index can be removed from the k-th partition, add the number of partitions formed with the remaining bell numbers to the count\n            else:\n                count += (k-j-1)\n    # Return the count of ways to partition the bell numbers\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # We know that the first Bell number is 1\n    if n == 0:\n        return 1\n    # We know that the last Bell number is 1\n    elif n == 1:\n        return 1\n    # Otherwise, we can partition the Bell numbers as follows:\n    else:\n        # If the last digit of n is 0, we can partition into two sets:\n        # the first set contains all the digits of n with a 1 before the last digit,\n        # and the second set contains all the digits of n with a 1 after the last digit.\n        if n % 10 == 0:\n            return 2 * bell_number(n // 10)\n        # If the last digit of n is not 0, we can partition into four sets:\n        # the first set contains all the digits of n with a 1 before the last digit,\n        # the second set contains all the digits of n with a 1 after the last digit,\n        # the third set contains all the digits of n with a 1 before the second-to-last digit,\n        # and the fourth set contains all the digits of n with a 1 after the second-to-last digit.\n        else:\n            return 4 * bell_number(n // 10) + 1"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of partitions required.\n\n    Returns:\n    int: The number of ways to partition the Bell numbers.\n    \"\"\"\n\n    # Initialize variables to store the count of ways to partition the Bell numbers\n    ways = 0\n    p = 0\n\n    # Iterate over the first Bell number\n    for i in range(n + 1):\n        p = i * (i - 1) // 2\n\n        # Iterate over the remaining Bell numbers\n        for j in range(2, n + 1):\n            p += j * (n - j + 1) // (j - 1)\n\n        # Add the count to the total count of ways\n        ways += p\n\n    # Return the total count of ways to partition the Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Base case: if n is 0 or 1, there is only 1 way to partition\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize variables\n    ways = 0\n    i = 0\n    j = n\n    \n    # Calculate the number of ways to partition the set of Bell numbers\n    while i <= j:\n        if i == 0:\n            ways += 1\n            i += 1\n            j -= 1\n        elif i == j:\n            ways += 1\n            i += 1\n        else:\n            ways += 1\n            i += 1\n            j -= 1\n    \n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    def helper(memo, n):\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n % 2 == 0:\n            memo[n] = (helper(memo, n-2) + helper(memo, n-4)) % (10**9+7)\n            return memo[n]\n        else:\n            memo[n] = (helper(memo, n-2) - helper(memo, n-4)) % (10**9+7)\n            return memo[n]\n    \n    memo = {}\n    return helper(memo, n)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    \n    if A[len(A)-1] >= A[len(A)-2]:\n        for i in range(len(A)-2, 0, -1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A monotonic array is one in which the elements are either increasing or decreasing.\n    \"\"\"\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n    \n    # Initialize two variables to keep track of the last two elements in the array\n    prev_element = A[0]\n    curr_element = A[1]\n    \n    # Iterate through the rest of the array\n    for i in range(2, len(A)):\n        # If the current element is less than the previous element\n        if A[i] < prev_element:\n            # If the last two elements were increasing, the current element must also be increasing\n            if curr_element < prev_element:\n                return False\n        # If the current element is greater than the previous element\n        elif A[i] > prev_element:\n            # If the last two elements were decreasing, the current element must also be decreasing\n            if curr_element > prev_element:\n                return False\n        \n        # Update the previous and current elements\n        prev_element = curr_element\n        curr_element = A[i]\n    \n    # If all elements in the array are of the same sign, return True\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    elif A[0] < A[1]: \n        return all(A[i] >= A[i-1] for i in range(1, len(A)))\n    else: \n        return all(A[i] <= A[i-1] for i in range(1, len(A)))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    n = len(A)\n    # If the array is empty or has only one element, return True\n    if n <= 1:\n        return True\n    # If the array has only two elements, return True if the elements are in ascending or descending order\n    elif n == 2:\n        if A[0] <= A[1]:\n            return True\n        else:\n            return False\n    # If the array has more than two elements, check the monotonicity of the first and last elements\n    else:\n        if A[0] <= A[1]:\n            if A[-1] >= A[-2]:\n                return True\n            else:\n                return False\n        else:\n            if A[-1] <= A[-2]:\n                return True\n            else:\n                return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    This function takes an array A as input and returns True if it is monotonic, i.e., if it is either \n    increasing or decreasing. Otherwise, it returns False.\n    \n    For example:\n    is_Monotonic([1, 2, 3, 4, 5])   # Returns False\n    is_Monotonic([1, 2, 4, 4, 5])   # Returns True\n    is_Monotonic([1, 1, 1, 1, 1])   # Returns True\n    '''\n    \n    # Initialize variables for the first element and the last element of the array\n    first_element = A[0]\n    last_element = A[-1]\n    \n    # Check if the first and last elements are equal\n    if first_element == last_element:\n        return True\n    \n    # Loop through the rest of the array\n    for i in range(1, len(A)-1):\n        # Check if the current element is increasing or decreasing from the previous element\n        if A[i] <= first_element:\n            return False\n        elif A[i] >= last_element:\n            return False\n        else:\n            # If the current element is neither increasing nor decreasing, then the array is neither monotonic nor monotone\n            return False\n    \n    # If the loop completes, then the array is monotonic or monotone\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n\n    # Check if the array is monotonic or not based on the first element\n    if A[0] < A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or contains only one element\n    if len(A) <= 1:\n        return True\n\n    # Initialize the first and last elements\n    first = A[0]\n    last = A[len(A) - 1]\n\n    # Iterate through the array from the second element to the second-to-last element\n    for i in range(1, len(A) - 1):\n        # Check if the current element is greater than the previous element\n        if A[i] > A[i - 1]:\n            # Check if the current element is smaller than the next element\n            if A[i] < A[i + 1]:\n                # If the current element is smaller than the previous element and the next element is also smaller than the current element, the array is not monotonic\n                return False\n            else:\n                # If the current element is smaller than the previous element and the next element is greater than the current element, the array is monotonic\n                continue\n        else:\n            # If the current element is greater than the previous element and the next element is less than the current element, the array is not monotonic\n            return False\n\n    # If the loop completes without returning False, the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if len(l) < len(s):\n        return False\n    return s[0] in l and is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Check if a list contains a given sublist or not.\n    \"\"\"\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if the sublist is empty\n    if not s:\n        return True\n    \n    # check if the first element of the list is the same as the first element of the sublist\n    if l[0] == s[0]:\n        # check if the sublist is a sublist of the rest of the list\n        return is_sublist(l[1:], s[1:])\n    \n    # if the first element of the list is not the same as the first element of the sublist,\n    # check if the rest of the list contains the sublist\n    return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if s in l:\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Check if the given sublist is empty\n    if not s:\n        return True\n    # Check if the first element of the given sublist is in the list\n    if s[0] in l:\n        # Check if the rest of the sublist is present in the list\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return l in s"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Check if the input is a list of tuples\n    if isinstance(Input, list):\n        # Check if the length of the first tuple is the same as the length of the rest of the tuples\n        if len(Input[0]) == len(Input[1:]) and all(len(t) == len(Input[0]) for t in Input[1:]):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        count += len(i)\n    if count == len(Input[0]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            count += 1\n    if count == len(Input):\n        print(\"All tuples have equal length.\")\n    else:\n        print(\"Not all tuples have equal length.\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Initializing a list to store the tuple lengths\n    lengths = []\n\n    # Loop through each tuple in the Input list\n    for t in Input:\n        # Append the length of the tuple to the lengths list\n        lengths.append(len(t))\n\n    # Check if all the lengths in the lengths list are equal\n    if all(x == lengths[0] for x in lengths):\n        print(\"All tuples have equal length\")\n    else:\n        print(\"Not all tuples have equal length\")"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # convert the list of tuples into a list of lists\n    tups_list = [list(tup) for tup in Input]\n    # find the maximum length of a tuple\n    max_len = max(max(t) for t in tups_list)\n    # check whether all tuples have the same length or not\n    for tup in tups_list:\n        if len(tup)!= max_len:\n            return False\n    # all tuples have the same length, so return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    This function takes a list of tuples as input and returns True if all the tuples have equal length and False otherwise.\n    '''\n    tuples_length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= tuples_length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    The comb sort algorithm works as follows:\n    1. Start with a gap of 1.\n    2. Within each iteration, do the following steps:\n       a. Bubble the largest element to its final position.\n       b. Move the gap to be the average of the previous gap and the gap that was just bubbled.\n    3. Decrease the gap by 1.\n    4. Continue until the gap is 1, at which point the list is sorted.\n\n    This algorithm has a time complexity of O(n^2) in the average case and O(n^2) in the worst case.\n    '''\n\n    # Set the gap to be half the length of the list\n    gap = len(nums) // 2\n\n    # While the gap is greater than 1\n    while gap > 1:\n        # Within each iteration, bubble the largest element to its final position\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n\n        # Decrease the gap by 1\n        gap = (gap // 1.3) + 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        # Move the gap one position to the right\n        for i in range(gap):\n            # Compare adjacent elements\n            if nums[i] > nums[i+gap]:\n                # Swap them if they are in the wrong order\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        # Decrease the gap by a factor of 1.3\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Define the swap function\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Define the compare function\n    def compare(nums, i, j):\n        if nums[i] > nums[j]:\n            return -1\n        elif nums[i] < nums[j]:\n            return 1\n        else:\n            return 0\n\n    # Define the swap_partial function\n    def swap_partial(nums, low, mid, high):\n        for i in range(low, high):\n            if compare(nums, i, mid) > 0:\n                swap(nums, i, mid)\n\n    # Define the bubble_sort function\n    def bubble_sort(nums, low, high):\n        if low < high:\n            for i in range(low, high):\n                for j in range(low, high):\n                    if compare(nums, i, j) > 0:\n                        swap(nums, i, j)\n            bubble_sort(nums, low, high - 1)\n\n    # Define the comb_sort function\n    def comb_sort(nums):\n        n = len(nums)\n        gap = n\n        while gap > 1:\n            gap = n // 10\n            for i in range(gap, n):\n                if compare(nums, i, i - gap) > 0:\n                    swap(nums, i, i - gap)\n            n -= gap\n            bubble_sort(nums, 0, n)\n\n    comb_sort(nums)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(1, n):\n            if nums[i-1] > nums[i]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n    while gap > 1 or swapped:\n        if gap > 1:\n            step = gap // 10\n            for j in range(step, n):\n                if nums[j] < nums[j - step]:\n                    nums[j], nums[j - step] = nums[j - step], nums[j]\n            gap = step\n        swapped = False\n        for j in range(n - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n                swapped = True\n        i += 1\n        gap = max(1, 4 * gap)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    # initialize variables\n    gap = n\n    swapped = True\n    start = 0\n\n    # loop until the gap is reduced to 1\n    while gap > 1 or swapped:\n        # calculate the new gap\n        if gap == n:\n            gap = start + 1\n        else:\n            gap = int(gap / 1.3)\n\n        # check if the gap has been reduced to 1\n        if gap == 1:\n            swapped = False\n\n        # swap adjacent elements if they are out of order\n        for i in range(start, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n        # update the start index\n        start += gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sort a list of elements using the Comb Sort algorithm.\n    \n    Parameters:\n    nums (list): A list of elements to sort.\n    \n    Returns:\n    A list of the sorted elements.\n    \"\"\"\n    n = len(nums)\n    max_swaps = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        gap = n\n        while gap > 1:\n            gap //= 10\n            max_swaps = max(max_swaps // gap, 1)\n        for i in range(max_swaps):\n            for j in range(n-gap):\n                if nums[j] > nums[j+gap]:\n                    nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                    swapped = True\n        n -= gap\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    # keep swapping adjacent elements\n    while n > 1:\n        swapped = False\n        # iterate over the list until no more swaps are needed\n        for i in range(0, n-1):\n            if nums[i] > nums[i+1]:\n                # swap the elements if they are not in the correct order\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        # stop iterating if no swaps were made\n        if not swapped:\n            break\n        n -= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        gap = int(gap / 1.3)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap //= 1.3\n        else:\n            gap = n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Square(n):\n    '''\n    This function returns True if the given number is a square number, and False otherwise.\n    '''\n    if n < 0:\n        return False\n    root = int(n ** 0.5)\n    return root * root == n\n\n\ndef dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 2:\n        return False\n    if is_Square(n) or is_Square(2 * n):\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the number is a square\n    if n*n == n:\n        # Check if the difference of squares of two integers can be represented as an integer\n        return True if int(n/2)**2 == n else False\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # check if the number is positive\n    if n <= 0: \n        return \"Invalid Input\"\n\n    # check if the number is a perfect square\n    if n**0.5 == int(n**0.5): \n        return \"Number is a perfect square\"\n\n    # check if the number is a power of 2\n    while n % 2 == 0: \n        n = n//2\n\n    # check if the number is a power of 2\n    if n == 1: \n        return \"Number is a power of 2\"\n\n    # check if the number can be represented as the difference of two squares\n    a = n\n    b = n\n    while b**2 <= a: \n        if a % b == 0: \n            return \"Cannot be represented as the difference of two squares\"\n        a -= b\n        b = b-1\n\n    return \"Number is a valid representation of the difference of two squares\"\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n\n    # Calculate the square of the given number\n    square = n ** 2\n\n    # Check if the square of the given number is equal to the input number\n    if square == n:\n        return \"Yes, the given number can be represented as the difference of two squares\"\n    else:\n        return \"No, the given number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0 and n//i == i:\n                return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Loop through all possible squares and check if n can be represented as the difference of two squares\n    for i in range(1,n//2+1):\n        if i*i == n or n-i*i == i*i:\n            print(f\"The given number {n} can be represented as the difference of two squares: {i} and {n-i*i}\")\n            return\n\n    # If the number cannot be represented as the difference of two squares, print that the number cannot be represented\n    print(f\"The given number {n} cannot be represented as the difference of two squares\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Function to check whether a number is a power of 2 or not\n    def isPowerOf2(n):\n        return (n & (n-1)) == 0\n    \n    # Find the square root of the given number\n    sqrt = int(n ** 0.5)\n    \n    # Check if the square root is a power of 2 or not\n    if isPowerOf2(sqrt):\n        # Check if the given number can be represented as the difference of two squares or not\n        if n - (sqrt ** 2) == (sqrt ** 2) + (sqrt ** 2):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    \"\"\"\n    This function checks whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n\n    # Loop through all possible values of n^2\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            # Check if the difference between i^2 and j^2 is equal to n\n            if (i**2 - j**2) == n:\n                return True\n\n    # If no valid pair is found, return False\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2+1):\n        if n - i*i == i*i:\n            print(\"The given number can be represented as the difference of two squares.\")\n            return\n    \n    print(\"The given number cannot be represented as the difference of two squares.\")\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check if a number is a square\n    def is_square(num):\n        return num == int(num**0.5)**2\n\n    # Checking if the number can be represented as the difference of two squares\n    if is_square(n):\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0 and is_square(n//i):\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for i in range(len(colors) - 1):\n        if colors[i]!= colors[i+1]:\n            return False\n        if patterns[i]!= patterns[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    pattern = patterns[0]\n    for color in colors:\n        if color not in pattern:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a dictionary to store the counts of each color\n    color_counts = {}\n    for color in colors:\n        if color in color_counts:\n            color_counts[color] += 1\n        else:\n            color_counts[color] = 1\n\n    # check if the color counts in the patterns array match the color counts in the colors array\n    for pattern in patterns:\n        if len(pattern)!= len(colors):\n            return False\n        for i, color in enumerate(pattern):\n            if color in color_counts and color_counts[color] == 0:\n                return False\n            color_counts[color] -= 1\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # create a set of all patterns\n    pattern_set = set(patterns)\n    # create a set of all possible patterns of the same length\n    same_length_patterns = set([tuple(colors[i:i+len(pattern)]) for i in range(len(colors)-len(pattern)+1)])\n    # check if the pattern set is a subset of the same_length_patterns set\n    return pattern_set.issubset(same_length_patterns)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize a dictionary to store the number of occurrences of each pattern in the given colors array\n    pattern_count = {}\n    # Iterate through each color in the colors array\n    for color in colors:\n        # If the color is already in the pattern_count dictionary, increment its count by 1\n        if color in pattern_count:\n            pattern_count[color] += 1\n        # If the color is not in the pattern_count dictionary, add it with a count of 1\n        else:\n            pattern_count[color] = 1\n    # Initialize a variable to store the count of occurrences of each pattern in the patterns array\n    count = 0\n    # Iterate through each pattern in the patterns array\n    for pattern in patterns:\n        # If the pattern is in the pattern_count dictionary, increment the count by the number of times it appears in the colors array\n        if pattern in pattern_count:\n            count += pattern_count[pattern]\n    # Return True if the count is equal to the length of the patterns array, indicating that it follows the sequence given in the patterns array\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns, index=0, pattern_index=0, pattern_length=0):\n    if index == len(colors):\n        return True\n    \n    if index == 0:\n        pattern_length = len(patterns[pattern_index])\n    \n    if colors[index] == patterns[pattern_index][pattern_length]:\n        return is_samepatterns(colors, patterns, index + 1, pattern_index + 1, pattern_length + 1)\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for pattern in patterns:\n        if pattern == colors[count]:\n            count += 1\n        if count == len(colors):\n            return True\n    return False"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_list = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            filtered_list.append(tup)\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for t in test_list:\n        if all(x % K == 0 for x in t):\n            result.append(t)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n\n    # Define a function to check if a list contains all the elements of another list\n    def list_contains_all(lst1, lst2):\n        \"\"\"\n        Check if a list contains all the elements of another list.\n        \"\"\"\n        for elem in lst2:\n            if elem not in lst1:\n                return False\n        return True\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the tuple contains all elements divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # If the tuple contains all elements divisible by K, return it\n            return tup"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for t in test_list:\n        divisible_count = 0\n        for i in range(len(t)):\n            if t[i] % K == 0:\n                divisible_count += 1\n        if divisible_count == len(t):\n            filtered_tuples.append(t)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(x, y) for x, y in test_list if all(y % k == 0 for y in x)]\n"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    # initialize an empty list to store the tuples\n    result = []\n    # loop through each tuple in the list\n    for tup in test_list:\n        # check if all elements of the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # if all elements are divisible by K, add the tuple to the result list\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples_divisible_by_k = []\n    for i in range(len(test_list)):\n        divisible_count = 0\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                divisible_count += 1\n            if divisible_count == len(test_list[i]):\n                tuples_divisible_by_k.append(test_list[i])\n    return tuples_divisible_by_k"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    # Iterate over the list of tuples\n    for tup in test_list:\n\n        # Check if all elements are divisible by k\n        if all(elem % K == 0 for elem in tup):\n            # If all elements are divisible by k, add the tuple to the result list\n            result.append(tup)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple_1 in test_list:\n        for tuple_2 in test_list:\n            if tuple_1!= tuple_2 and all(i % K == 0 for i in tuple_1) and all(i % K == 0 for i in tuple_2):\n                result.append(tuple_1)\n                result.append(tuple_2)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n):\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower() # convert all letters to lowercase\n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of the word is odd\n            return False # if the length is odd, return False\n    return True # if all words have even length, return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.lower()\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(f\"{word} has an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the input string into a list of characters\n    words = list(s)\n\n    # Initialize a variable to store the length of the word\n    word_len = 0\n\n    # Iterate over the list of characters to check the length of the word\n    for char in words:\n        # Increment the length of the word by 1\n        word_len += 1\n\n    # Return True if the length of the word is odd, else False\n    return word_len % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    This function takes a string as input and returns whether the length of the word is odd or not.\n    '''\n\n    # Split the input string into words using whitespace as the delimiter\n    words = s.split()\n\n    # Iterate through each word and check its length\n    for word in words:\n        if len(word) % 2 == 1:\n            # If the length of the word is odd, return True\n            return True\n\n    # If no odd word was found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Convert the string to a list of words\n    words = s.split()\n\n    # Initialize the count of odd words\n    count = 0\n    \n    # Loop through the list of words\n    for word in words:\n        # Check if the length of the word is odd\n        if len(word) % 2 == 1:\n            # If it is, increment the count\n            count += 1\n\n    # Return the count of odd words\n    return count"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    \"\"\"\n    This function takes a string as input and returns True if the length of the word is odd and False otherwise.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word = s.split()[0]\n    if len(word) % 2 == 1:\n        print(\"The length of the word is odd.\")\n    else:\n        print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    word_length = [len(word) for word in words]  # find the length of each word in the list\n    odd_len = [word for i, word in enumerate(word_length) if word % 2!= 0]  # find the odd length words\n    if odd_len:  # if there are odd length words\n        print(\"The word(s) have odd length(s):\", \", \".join(odd_len))\n    else:\n        print(\"The word(s) have even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    \"\"\"\n    word = s.split()\n    for w in word:\n        if len(w) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n % 2 == 0:\n        return tetrahedral_number(n//2) + tetrahedral_number(n//2) + tetrahedral_number(n//2) + 1\n    else:\n        return 3*tetrahedral_number(n//2) + tetrahedral_number(n//2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(1, n+1):\n        t += (4*i**2 - 1) * (4*i**2 - 3) * (4*i**2 - 5)\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4*n*(n+1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedral_helper(n, count=1):\n        if count > n:\n            return 1\n        return 4*count*(tetrahedral_helper(n, count+1))\n\n    return tetrahedral_helper(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    def tetrahedron(a, b, c, d):\n        return (a + b + c + d) / 2\n\n    def is_tetrahedron(n):\n        return (n * (n - 1) * (n - 2) * (n - 3)) % 12 == 0\n\n    count = 0\n    current_tetrahedron = 0\n\n    while count < n:\n        current_tetrahedron += 1\n        if is_tetrahedron(current_tetrahedron):\n            count += 1\n\n    return current_tetrahedron"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    This function finds the nth tetrahedral number.\n\n    Parameters:\n    n (int): The value of n for which we want to find the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n\n    # Initialize the sum of tetrahedral numbers and count of tetrahedra\n    t_sum = 0\n    t_count = 0\n\n    # Initialize the counter variable and current number\n    i = 1\n    current = 4\n\n    # Loop through the sequence of tetrahedra\n    while i <= n:\n        # Increment the counter variable\n        i += 1\n\n        # Check if the current number is a tetrahedral number\n        if (current - 2) % 4 == 0:\n            # If it is, add it to the sum and increment the count of tetrahedra\n            t_sum += current\n            t_count += 1\n\n        # Update the current number\n        current += 4\n\n    # Return the sum of the first n tetrahedral numbers\n    return t_sum"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((n * (n + 1)) // 2) * ((n * (n + 1) * (n + 2)) // 6)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n\n    # The first tetrahedral number is 1\n    if n == 1:\n        return 1\n\n    # The first three tetrahedral numbers are 1, 4, and 10\n    elif n in [1, 4, 10]:\n        return n\n\n    # The next tetrahedral number is the sum of the previous two\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral = 1\n    count = 0\n    while count < n:\n        tetrahedral = tetrahedral + 6 - (tetrahedral - 1) // 2\n        count += 1\n    return tetrahedral"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r ** 3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r ** 3\n    return V"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #initialize a variable to store the sum of ASCII values of characters\n    sum = 0\n    #iterate over each character in the string\n    for char in strr:\n        #convert the character to its ASCII value and add it to the sum\n        sum += ord(char)\n    #get the character made by adding the ASCII value of all the characters of the string modulo 26\n    char = chr((sum % 26) + 65)\n    #return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize the character variable\n    char = ''\n    \n    # Loop through each character of the string\n    for c in strr:\n        # Convert the character to its ASCII value and add it to the character variable\n        char += chr(ord(c) + 1)\n    \n    # Return the character\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    # Convert the string to lowercase for case insensitivity\n    strr = strr.lower()\n    # Initialize a variable to store the sum of ASCII values of characters\n    sum = 0\n    # Loop through each character in the string\n    for char in strr:\n        # Add the ASCII value of the character to the sum\n        sum += ord(char)\n    # Return the sum modulo 26 to get the character made by adding ASCII values of characters\n    return (sum % 26) + ord('a') - 1"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the ASCII values of all the characters\n    ascii_str = ''\n\n    # Loop through each character of the input string\n    for char in strr:\n        # Convert each character to its ASCII value and add it to the ASCII string\n        ascii_val = ord(char)\n        ascii_str += str(ascii_val)\n\n    # Calculate the sum of all the ASCII values of the characters and take the remainder\n    sum_ascii = sum(int(ascii_str[i:i+len(ascii_str)//2]) for i in range(0, len(ascii_str), 2)) % 26\n\n    # Convert the remainder to the corresponding character and return it\n    return chr(97 + sum_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    # Initialize an empty string to store the character made\n    char = \"\"\n    # Convert the string to a list of characters\n    str_list = list(strr)\n    # Iterate through the list of characters\n    for i in range(len(str_list)):\n        # Get the ASCII value of the current character\n        ascii_value = ord(str_list[i])\n        # Add the ASCII value to the current character made\n        char += str(ascii_value % 26)\n    # Return the character made\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr((sum % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # initialize a string variable to store the character\n    char = ''\n\n    # iterate over each character in the string\n    for i in range(len(strr)):\n\n        # get the ASCII value of the current character\n        ascii_value = ord(strr[i])\n\n        # add the ASCII value of the current character to the character string\n        char += chr(ascii_value + 1)\n\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    ascii_sum = 0\n    for i in range(len(strr)):\n        ascii_sum += ord(strr[i])\n    return ascii_sum % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for i in range(len(strr)):\n        total += ord(strr[i])\n    return chr(((total % 26) + 65) % 26 + 97)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman conway sequence.\n    \"\"\"\n    if n < 1:\n        return None\n    \n    # Initialize sequence with 1\n    sequence = [1]\n    \n    # Iterate n times to generate sequence\n    for _ in range(n-1):\n        # Generate next sequence using previous sequence\n        next_sequence = [sequence[-1]]\n        for i in range(len(sequence)-1):\n            if sequence[i] == 1:\n                next_sequence.append(sequence[i+1])\n        sequence = next_sequence\n    \n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    a = 0\n    b = 1\n\n    while a < n:\n        a = b\n        b = a + b\n\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0,"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n - 1):\n        next_num = len(sequence) * 2 - 1\n        sequence.append(next_num)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 1, 1, 1]\n    for i in range(5):\n        if sequence[i] == 1:\n            sequence.append(sequence[i] + sequence[i+1])\n        else:\n            sequence.append(sequence[i] - sequence[i+1])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the Newman Conway sequence.\n    \"\"\"\n    sequence = [1, 1]\n    for i in range(2, n):\n        if sequence[i-1] == 1 and sequence[i-2] == 1:\n            sequence.append(0)\n        else:\n            sequence.append(1)\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i-2] + sequence[i-4])\n        else:\n            sequence.append(sequence[i-2] + sequence[i-4] - 1)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Initialize a list of 21 integers with the first 5 values of the sequence\n    sequence = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # Initialize a variable to keep track of the current number in the sequence\n    current = 5\n    \n    # Loop through the sequence n times\n    for i in range(n-1):\n        # Calculate the next number in the sequence by adding the current number and the sum of the previous two numbers in the sequence\n        next = current + sequence[i] + sequence[i+1]\n        # Append the next number to the sequence list\n        sequence.append(next)\n        # Update the current number to be the last number in the sequence\n        current = sequence[-1]\n    \n    # Return the nth number in the sequence\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with the first three numbers of the sequence\n    sequence = [0, 1, 1]\n    \n    # Loop n-3 times to compute the rest of the sequence\n    for i in range(2, n-3):\n        # Compute the next number in the sequence\n        next_num = sequence[i-1] + sequence[i]\n        \n        # Append the next number to the sequence\n        sequence.append(next_num)\n    \n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r ** 2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area using the formula for the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r ** 2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base cases\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 13\n    elif n == 3:\n        return 27\n    \n    # Recursive case\n    a = centered_hexagonal_number(n-1)\n    b = centered_hexagonal_number(n-2)\n    return a + b + 4*a*b"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    def centered_hexagonal_digit(n, base):\n        \"\"\"\n        Write a function to find the centered hexagonal digit of a given number.\n        \"\"\"\n        hexagonal_digit = n\n        while hexagonal_digit >= base:\n            hexagonal_digit -= base\n        return hexagonal_digit\n\n    def hexagonal_to_number(digit):\n        \"\"\"\n        Write a function to convert a hexagonal digit to a decimal number.\n        \"\"\"\n        return digit * (digit + 1)\n\n    def centered_hexagonal_digit_to_decimal(digit, base):\n        \"\"\"\n        Write a function to convert a centered hexagonal digit to a decimal number.\n        \"\"\"\n        number = hexagonal_to_number(centered_hexagonal_digit(digit, base))\n        return number\n\n    hexagonal_digit = centered_hexagonal_digit(n, 12)\n    centered_decimal = centered_hexagonal_digit_to_decimal(hexagonal_digit, 12)\n\n    return centered_decimal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 1\n    for i in range(n):\n        a += 1\n        b += 2\n        c += 2\n        if (b**2 - 4*a*c) > 0:\n            print(\"The centered hexagonal number is:\", a - 1)\n            break"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = (n-1)//2 + 1\n    hex_num = 1\n    for i in range(num):\n        hex_num = 6*hex_num + i + 1\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize variables\n    A = 0\n    B = 1\n    C = 2\n    D = 4\n    E = 8\n    F = 16\n    \n    # find nth centered hexagonal number\n    for i in range(n):\n        A, B, C, D, E, F = (F, E, A + B + C + D + E + F, A + B, A + C, A + D, A + E + F)\n        if i % 2 == 0:\n            print(A)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    k = (n*(3*n-1))//2 + (n*(2*n-1))//2\n    return k"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        base = 2 * (n - 1) + 1\n        result = base * base * (base - 1) // 6\n        return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n - 1) * (n - 1) - (n - 1) * 2 + 1"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all the keys from the three dictionaries\n    keys = dict1.keys() | dict2.keys() | dict3.keys()\n    # Create an empty dictionary to store the merged values\n    merged_dict = {}\n    # Iterate over all the keys\n    for key in keys:\n        # Add the values from the three dictionaries to the merged dictionary\n        merged_dict[key] = dict1.get(key, None) if key in dict1 else None\n        merged_dict[key] = dict2.get(key, merged_dict[key]) if key in dict2 else merged_dict[key]\n        merged_dict[key] = dict3.get(key, merged_dict[key]) if key in dict3 else merged_dict[key]\n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        merged_dict[key] = dict1[key]\n    for key in dict2:\n        merged_dict[key] = dict2[key]\n    for key in dict3:\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n    - dict1 (dict): A dictionary object\n    - dict2 (dict): A dictionary object\n    - dict3 (dict): A dictionary object\n\n    Returns:\n    - merged_dict (dict): A single dictionary that contains the merged contents of the input dictionaries.\n    \"\"\"\n\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    Args:\n    dict1 (dict): The first dictionary to be merged.\n    dict2 (dict): The second dictionary to be merged.\n    dict3 (dict): The third dictionary to be merged.\n\n    Returns:\n    dict: The merged dictionary.\n    \"\"\"\n\n    # Create a new dictionary to store the merged data.\n    merged_dict = {}\n\n    # Loop through the keys of each dictionary.\n    for key in dict1.keys() + dict2.keys() + dict3.keys():\n\n        # If the key exists in all three dictionaries, add the value to the merged dictionary.\n        if key in dict1 and key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key] + dict2[key] + dict3[key]\n\n        # If the key exists in only one of the dictionaries, add the value from the other dictionary.\n        elif key in dict1:\n            merged_dict[key] = dict1[key]\n\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n\n        else:\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key] + dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key in merged_dict:\n            merged_dict[key] = ct.Counter(merged_dict[key] + dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Combine all dictionaries into a single dictionary\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy() # create a copy of the first dictionary\n    merged_dict.update(dict2) # update the copy with the second dictionary\n    merged_dict.update(dict3) # update the copy with the third dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1.keys() + dict2.keys() + dict3.keys():\n        merged_dict[key] = dict1.get(key, dict2.get(key, dict3.get(key)))\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where the keys are the elements of the list and\n    the values are their respective frequencies.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where the keys are the elements in the list\n    and the values are the frequencies of the elements in the list.\n    \"\"\"\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as an input and returns the frequency of all the elements in the list\n    returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for elem in list1:\n        if elem in freq:\n            freq[elem] += 1\n        else:\n            freq[elem] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency count of each element\n    freq = {}\n\n    # Loop through each element in the list and update its frequency count in the dictionary\n    for element in list1:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n\n    # Return the dictionary containing the frequency count of each element\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = list(range(1, N+1))\n    nums.append(N)\n    nums.sort()\n    for i in range(len(nums)-1):\n        if nums[i+1] - nums[i] == 1:\n            return nums[i]\n    return nums[-1]"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for num in range(1, N+1):\n        if num < smallest:\n            smallest = num\n            closest = smallest\n        elif num < closest:\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # initialize variables\n    min_num = 0\n    max_num = 1000000\n    closest_num = 500000\n\n    # loop through numbers until closest smaller number is found\n    while closest_num!= N:\n        # find the closest smaller number\n        if N - closest_num < closest_num - min_num:\n            closest_num = N - closest_num\n        else:\n            closest_num = closest_num - min_num\n\n        # update min and max numbers\n        if N - closest_num < closest_num - min_num:\n            min_num = closest_num\n        else:\n            max_num = closest_num\n\n    # return the closest smaller number\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    if N == 1:\n        return 0\n    min_num = min(N, N-1)\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_diff = float('inf')\n    min_num = None\n    for num in range(N, 0, -1):\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input(\"Enter a number: \"))\n    min_num = n\n    closest_num = min_num\n    \n    for i in range(1, N):\n        if n-i < min_num:\n            min_num = n-i\n            closest_num = n\n    \n    print(\"The closest smaller number is:\", closest_num)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    smallest_num = N\n    closest_num = N\n    for i in range(1, N):\n        if N - i < smallest_num:\n            smallest_num = N - i\n        if i - smallest_num < closest_num:\n            closest_num = i - smallest_num\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n_set = set(range(1, N))  # Generate a set of numbers from 1 to N\n    smallest_num = min(n_set)  # Find the smallest number in the set\n    closest_smaller_num = 0\n    \n    # Iterate through the set of numbers and find the closest smaller number\n    for num in n_set:\n        if num < smallest_num:\n            closest_smaller_num = num\n    \n    # Return the closest smaller number\n    return closest_smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Find the closest smaller number than N\n    closest = N\n    for i in range(1, N//2+1):\n        if abs(N - i) < abs(N - closest):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_num = None\n    for i in range(1, N):\n        if i < smaller_num:\n            smaller_num = i\n    return smaller_num\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for i in list1:\n        if len(i) > longest:\n            longest = len(i)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of sentences.\n    \"\"\"\n    longest_word = \"\"\n    for sentence in list1:\n        words = sentence.split()\n        for word in words:\n            if len(word) > len(longest_word):\n                longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(lst):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list of words.\n\n    Parameters:\n    lst (list): A list of words.\n\n    Returns:\n    int: The length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in lst:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # convert the string to a list of strings\n    str_list = str1.split(',')\n\n    # check if the substring is present in the list\n    for sub in str_list:\n        if sub.strip().lower() == sub_str.strip().lower():\n            return True\n\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise TypeError('The first argument must be a list.')\n    if type(sub_str)!= str:\n        raise TypeError('The second argument must be a string.')\n    if not sub_str:\n        raise ValueError('The second argument cannot be an empty string.')\n    for s in str1:\n        if s.find(sub_str)!= -1:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found\")\n    else:\n        print(\"Substring not found\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, lst):\n    if str1 in lst:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    # convert the number to string and split it into a list of digits\n    digits = [int(d) for d in str(n)]\n\n    # sum the digits and check if it is divisible by 9\n    return sum(digits) % 9 == 0"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return True\n    elif n == 1:\n        return False\n    else:\n        return (is_undulating(n-1) or is_undulating(n+1))"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    \n    for i in range(1, n//2+1):\n        if n % i == 0:\n            return \"The given number is not undulating.\"\n    \n    return \"The given number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return 'The given number is undulating'\n    else:\n        return 'The given number is not undulating'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Check if n is even or odd\n    if n % 2 == 0:\n        # If even, return True\n        return True\n    else:\n        # If odd, check if n can be divided by 3\n        if n % 3 == 0:\n            # If n is divisible by 3, return True\n            return True\n        else:\n            # If n is not divisible by 3, return False\n            return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"The number is not undulating.\"\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return \"The number is not undulating.\"\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # check if the number is less than or equal to 5\n    if n <= 5:\n        return True\n    else:\n        # check if the number is divisible by 4\n        if n % 4 == 0:\n            return True\n        else:\n            # check if the number is divisible by 5\n            if n % 5 == 0:\n                return True\n            else:\n                # check if the number is divisible by 6\n                if n % 6 == 0:\n                    return True\n                else:\n                    # check if the number is divisible by 7\n                    if n % 7 == 0:\n                        return True\n                    else:\n                        # check if the number is divisible by 8\n                        if n % 8 == 0:\n                            return True\n                        else:\n                            # check if the number is divisible by 9\n                            if n % 9 == 0:\n                                return True\n                            else:\n                                # check if the number is divisible by 10\n                                if n % 10 == 0:\n                                    return True\n                                else:\n                                    # check if the number is divisible by 11\n                                    if n % 11 == 0:\n                                        return True\n                                    else:\n                                        # check if the number is divisible by 12\n                                        if n % 12 == 0:\n                                            return True\n                                        else:\n                                            # check if the number is divisible by 13\n                                            if n % 13 == 0:\n                                                return True\n                                            else:\n                                                # check if the number is divisible by 14\n                                                if n % 14 == 0:\n                                                    return True\n                                                else:\n                                                    # check if the number is divisible by 15\n                                                    if n % 15 == 0:\n                                                        return True\n                                                    else:\n                                                        # check if the number is divisible by 16\n                                                        if n % 16 == 0:\n                                                            return True\n                                                        else:\n                                                            # check if the number is divisible by 17\n                                                            if n % 17 == 0:\n                                                                return True\n                                                            else:\n                                                                # check if the number is divisible by 18\n                                                                if n % 18 == 0:\n                                                                    return True\n                                                                else:\n                                                                    # check if the number is divisible by 19\n                                                                    if n % 19 == 0:\n                                                                        return True\n                                                                    else:\n                                                                        # check if the number is divisible by 20\n                                                                        if n % 20 == 0:\n                                                                            return True\n                                                                        else:\n                                                                            # check if the number is divisible by 21\n                                                                            if n % 21 == 0:\n                                                                                return True\n                                                                            else:\n                                                                                # check if the number is divisible by 22\n                                                                                if n % 22 == 0:\n                                                                                    return True\n                                                                                else:\n                                                                                    # check if the number is divisible by 23\n                                                                                    if n % 23 == 0:\n                                                                                        return True\n                                                                                    else:\n                                                                                        # check if the number is divisible by 24\n                                                                                        if n % 24 == 0:\n                                                                                            return True\n                                                                                        else:\n                                                                                            # check if the number is divisible by 25\n                                                                                            if n % 25 == 0:\n                                                                                                return True\n                                                                                            else:\n                                                                                                # check if the number is divisible by 26\n                                                                                                if n % 26 == 0:\n                                                                                                    return True\n                                                                                                else:\n                                                                                                    # check if the number is divisible by 27\n                                                                                                    if n % 27 == 0:\n                                                                                                        return True\n                                                                                                    else:\n                                                                                                        # check if the number is divisible by 28\n                                                                                                        if n % 28 == 0:\n                                                                                                            return True\n                                                                                                        else:\n                                                                                                            # check if the number is divisible by 29\n                                                                                                            if n % 29 == 0:\n                                                                                                                return True\n                                                                                                            else:\n                                                                                                                # check if the number is divisible by 30\n                                                                                                                if n % 30 == 0:\n                                                                                                                    return True\n                                                                                                                else:\n                                                                                                                    # check if the number is divisible by 31\n                                                                                                                    if n % 31 == 0:\n                                                                                                                        return True\n                                                                                                                    else:\n                                                                                                                        # check if the number is divisible by 32\n                                                                                                                        if n % 32 == 0:\n                                                                                                                            return True\n                                                                                                                        else:\n                                                                                                                            # check if the number is divisible by"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a*power(a*a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b<0:\n        return 1/power(a,abs(b))\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b, result=1):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return result\n    else:\n        return power(a, b-1, result*a)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a: the base of the power\n        b: the exponent of the power\n\n    Returns:\n        the value of 'a' to the power 'b'\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result = result * a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Use a lambda function to extract the second element of each tuple\n    second_element = lambda x: x[1]\n    \n    # Sort the list of tuples based on the second element\n    sorted_list = sorted(test_list, key=second_element)\n    \n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda x: test_list[x][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda x: test_list[x][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    \"\"\"\n    # Sort the list by the second element of each tuple (in ascending order)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Get the index of the first tuple with the smallest second value\n    index = sorted_list.index(min(sorted_list, key=itemgetter(1)))\n    return index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    index_list = []\n    for i in range(len(test_list)):\n        index_list.append((i, test_list[i]))\n    index_list.sort(key=itemgetter(1))\n    return index_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function finds the length of the smallest list in a list of lists.\n    '''\n    # Create a list of lists of lists\n    lst_of_lst = [lst]\n    \n    # Loop through the list of lists to find the smallest length\n    min_length = len(lst)\n    for sub_lst in lst:\n        length = len(sub_lst)\n        if length < min_length:\n            min_length = length\n    \n    # Return the smallest length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = []\n    for sublist in lst:\n        if len(sublist) < len(smallest):\n            smallest = sublist\n    return len(smallest)"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    \"\"\"\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  # initialize the minimum length to infinity\n    for sublist in lst:  # iterate through each sublist\n        if len(sublist) < min_len:  # if the current sublist is shorter than the current minimum length\n            min_len = len(sublist)  # update the minimum length to the current sublist length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Find the length of the first list in the list of lists\n    length1 = len(lst[0])\n    # Loop through the remaining lists in the list of lists\n    for lst in lst[1:]:\n        # If the length of the current list is shorter than the length of the first list, update the length\n        if len(lst) < length1:\n            length1 = len(lst)\n    # Return the length of the smallest list in the list of lists\n    return length1"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n            if n / i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer n as input and returns the number of divisors of n.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    This function returns the number of divisors of a given integer n.\n\n    Args:\n    n (int): an integer value to be checked for divisors.\n\n    Returns:\n    int: the number of divisors of n.\n    '''\n\n    # initialize the counter variable\n    count = 0\n\n    # iterate over all possible divisors of n\n    for i in range(1, n):\n        if n % i == 0:\n            # increment the counter variable\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div = 1\n    count = 0\n    \n    for i in range(1, n):\n        if n % i == 0:\n            count += 1\n            div *= i\n            \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    This function calculates the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n/2:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            freq_dict.update(frequency_lists(item))\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n        list1 (list): A flattened list of lists.\n\n    Returns:\n        dict: A dictionary where the keys are the elements in the flattened list and the values are their frequencies.\n\n    \"\"\"\n    # Create an empty dictionary to store the frequencies\n    freq_dict = {}\n\n    # Loop through each element of the flattened list\n    for element in list1:\n        # Check if the element is already a key in the frequency dictionary\n        if element in freq_dict:\n            # Increment the frequency of the element by 1\n            freq_dict[element] += 1\n        else:\n            # Add the element and its frequency to the dictionary\n            freq_dict[element] = 1\n\n    # Return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Initialize an empty dictionary\n    freq_dict = {}\n\n    # Loop through the list of lists and add frequency to the dictionary\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element of the list1 and add its frequency to the dictionary\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    \n    # Return the dictionary containing the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # loop through each element in the flattened list\n    for elem in list1:\n        # check if the element is a list\n        if type(elem) == list:\n            # recursively call the function on the sublist to find its frequency\n            sublist_freq = frequency_lists(elem)\n            # update the frequency of the parent list by summing its frequencies\n            freq_dict[elem] = freq_dict.get(elem, 0) + sublist_freq.get(elem, 0)\n        # if the element is not a list, add its frequency to the dictionary\n        else:\n            freq_dict[elem] = freq_dict.get(elem, 0) + 1\n            \n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency\n    freq_dict = {}\n    # Iterate over each element of the list\n    for element in list1:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq_dict[element] += 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element in list1\n    freq_dict = {}\n\n    # Loop through each element in list1\n    for element in list1:\n        # Check if the element is already a key in the frequency dictionary\n        if element in freq_dict:\n            # If it is, increment the value by 1\n            freq_dict[element] += 1\n        else:\n            # If it's not, add it as a new key with a value of 1\n            freq_dict[element] = 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # iterate over the flattened list\n    for item in flat_list:\n        # check if the element is already in the dictionary\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if not, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq_dict:\n                    freq_dict[subitem] += 1\n                else:\n                    freq_dict[subitem] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return [num * len(numbers) for num in numbers]"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    # Base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return str(n)\n\n    # Recursive case\n    binary = decimal_to_binary(n // 2)\n    binary = str(n % 2) + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\" \n    else: \n        bin_num = \"\" \n        while n > 0: \n            digit = n % 2 \n            bin_num = str(digit) + bin_num \n            n = n // 2 \n        return bin_num \n"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # convert decimal to binary and remove leading zeros\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary.lstrip('0')"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # base case: when n is 0, return an empty string\n    if n == 0:\n        return \"\"\n\n    # recursive case: divide n by 2 and convert the remainder to binary\n    remainder = n % 2\n    binary_str = str(remainder)\n    return decimal_to_binary(n//2) + binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0: \n        rem = n % 2 \n        binary = str(rem) + binary \n        n = n // 2 \n    return binary"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num\n    \n    # Find the smallest palindrome greater than the given number\n    while True:\n        next_num = num + 1\n        # Check if the next number is already a palindrome\n        if str(next_num) == str(next_num)[::-1]:\n            return next_num\n        # If not, increment the number and continue\n        num += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the number is even or not\n    if num % 2 == 0:\n        # If it's even, add 1 to get the next odd number\n        num += 1\n    # If the number is odd, add 2 to get the next even number\n    else:\n        num += 2\n    # Convert the number to string and reverse it\n    num_str = str(num)[::-1]\n    # Check if the reversed string is palindrome or not\n    if num_str == num_str[::-1]:\n        # If it is, return the number as it is\n        return num\n    # If the reversed string is not palindrome, find the smallest palindrome greater than the original number\n    else:\n        # Initialize a variable to store the smallest palindrome greater than the original number\n        smallest_palindrome = 0\n        # Loop through all possible odd numbers greater than the original number\n        for i in range(num, num + 10, 2):\n            # Convert the number to string and reverse it\n            i_str = str(i)[::-1]\n            # Check if the reversed string is palindrome or not\n            if i_str == i_str[::-1]:\n                # If it is, return the number as it is\n                return i\n            # If the reversed string is not palindrome, check if it's greater than the current smallest palindrome\n            elif int(i_str) > smallest_palindrome:\n                # If it is, update the smallest palindrome\n                smallest_palindrome = i\n        # If no palindrome greater than the original number is found, return the original number\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert it back to an integer\n    reversed_num = int(num_str[::-1])\n\n    # Check if the reversed number is within the range of the original number\n    if num < reversed_num:\n        # If it is, return the next smallest palindrome\n        return reversed_num + 1\n    else:\n        # If it's not, return the original number\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input number is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Find the largest palindrome smaller than the input number\n    left = num - 1\n    right = num + 1\n    while left > 999 or right < 1000:\n        if left > 999:\n            left = right + 1\n        elif right < 1000:\n            right = left - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if is_palindrome(mid):\n            return mid\n        elif mid < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return left"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Check whether a number is palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n    \"\"\"\n    for i in range(num, 10**9, -1):\n        if is_palindrome(i):\n            return i\n    raise ValueError(\"No palindromic number found.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Finds the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n    \n    # Check if the number is even, since odd numbers don't have a palindrome\n    if num % 2 == 0:\n        smallest = 10\n        while smallest < num:\n            smallest += 2\n    else:\n        smallest = 1\n        while smallest < num:\n            smallest += 1\n            \n    # Check if the next smallest palindrome is a palindrome\n    while not is_palindrome(smallest):\n        smallest += 1\n    \n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    A helper function to check if a number is palindrome or not.\n    '''\n    str_num = str(num)\n    return str_num == str_num[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        for i in range(num + 1, sys.maxsize):\n            if is_palindrome(i):\n                return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return 999999999999999999\n\n    if is_palindrome(num):\n        return num + 1\n\n    # check for negative numbers\n    if num < 0:\n        # find the next smallest positive number\n        next_num = abs(num)\n        if next_num < 10:\n            return 1\n\n        # find the smallest positive number that is greater than the negative number\n        for i in range(10, 0, -1):\n            if i**2 > next_num:\n                return i**2\n\n    # find the smallest palindrome greater than the input number\n    for i in range(10, num + 1):\n        if is_palindrome(i):\n            return i\n\nif __name__ == '__main__':\n    num = int(sys.argv[1])\n    next_palindrome = next_smallest_palindrome(num)\n    print(next_palindrome)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    largest_palindrome = 0\n    for i in range(len(num_str)):\n        for j in range(i + 1, len(num_str) + 1):\n            palindrome = int(''.join(sorted(num_str[i:j])))\n            if palindrome > largest_palindrome:\n                largest_palindrome = palindrome\n    return largest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n    \n    # Initialize the maximum number\n    max_num = num\n    \n    # Use the Sieve of Eratosthenes algorithm to find the primes\n    primes = [True] * (max_num + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_num**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, max_num + 1, i):\n                primes[j] = False\n    \n    # Find the next smallest palindrome\n    next_palindrome = 0\n    for i in range(max_num - 1, 0, -1):\n        if primes[i]:\n            next_palindrome = i\n            break\n    \n    # Return the next smallest palindrome\n    return next_palindrome"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            pivot = left + (right - left) // 2\n            if arr[pivot] < arr[right]:\n                right = pivot\n            else:\n                left = pivot + 1\n        if k == left + 1:\n            return arr[left]\n        elif k == left + 2:\n            return arr[right]\n        else:\n            return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is valid\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n\n    # Use binary search to find the kth element\n    left, right = 1, len(arr)\n    while left <= right:\n        mid = (left + right) // 2\n        if mid == k:\n            return arr[mid-1]\n        elif mid < k:\n            left = mid + 1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return None\n\n    # Find the midpoint of the array\n    mid = len(arr) // 2\n\n    # If the midpoint is the kth element, return it\n    if k == mid + 1:\n        return arr[k-1]\n\n    # If the kth element is in the left half of the array, search in that half\n    elif k < mid + 1:\n        return kth_element(arr[:mid], k)\n\n    # If the kth element is in the right half of the array, search in that half\n    else:\n        return kth_element(arr[mid:], k - mid - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n or k < 1:\n        return None\n    left, right = 1, n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid - 1] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    n = len(arr)\n    if k > n:\n        return None\n    if k == 1:\n        return arr[0]\n    if k == n:\n        return arr[-1]\n\n    mid = n // 2\n    if k <= mid:\n        return kth_element(arr[:mid], k)\n    else:\n        return kth_element(arr[mid+1:], k-mid-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the array is empty or k is less than 1\n    if not arr or k < 1:\n        return None\n    \n    # find the middle index\n    middle = len(arr) // 2\n    \n    # if k is less than or equal to the middle index, search in the left half\n    if k <= middle:\n        return kth_element(arr[:middle], k)\n    # if k is greater than the middle index, search in the right half\n    else:\n        return kth_element(arr[middle:], k - middle - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Get the length of the array\n    n = len(arr)\n\n    # Check if k is valid\n    if k > n or k < 1:\n        return -1\n\n    # Initialize the two pointers\n    i = 0\n    j = n - 1\n\n    # Move the pointers until kth element is found\n    while i <= j:\n        if arr[i] < arr[j]:\n            i += 1\n        elif arr[i] > arr[j]:\n            j -= 1\n        else:\n            # If the pointers meet at a common element, increment i\n            i += 1\n\n    # Return the kth element\n    return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes an array and a positive integer k as input and returns the kth element in the array.\n    The function uses 1-based indexing, so the first element of the array has index 1.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += '_' + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_word = ''\n    for i, word in enumerate(words):\n        if i == 0:\n            camel_case_word += word.capitalize()\n        else:\n            camel_case_word += word\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].upper()\n        elif i == len(word)-1 and word[i] in ['_','', '-', '.']:\n            camel_case += word[i]\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    # convert all the words in the string to camel case\n    result = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            result += word[i].lower()\n        elif word[i].isupper():\n            result += \"_\" + word[i].lower()\n        else:\n            result += word[i]\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif word[i].isupper():\n            camel_word += '_' + word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_word = words[0]\n    for word in words[1:]:\n        camel_word += word.capitalize()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            result += char.upper()\n        elif char.isupper():\n            result += \"_\" + char.lower()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0].lower()\n    rest_of_word = word[1:].replace('_','')\n    camel_case_word = first_letter + rest_of_word.capitalize()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    result = \"\"\n    capitalize_next = True\n    for char in word:\n        if char == \"_\":\n            capitalize_next = True\n        elif capitalize_next:\n            result += char.upper()\n            capitalize_next = False\n        else:\n            result += char\n    return result"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case = ''.join(word.capitalize() for word in words)\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n    \"\"\"\n    # Calculate the number of possible combinations of n parts and m parts\n    n_comb = 1\n    for i in range(1, n+1):\n        n_comb *= i\n    m_comb = 1\n    for i in range(1, m+1):\n        m_comb *= i\n    # Calculate the total number of combinations that can be formed\n    total_comb = n_comb // m_comb\n    # Calculate the Eulerian number a(n, m)\n    eulerian = total_comb // (n_comb // (n - 1))\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function calculates the Eulerian number a(n, m) by summing the number of paths of length n and length m from each node of the graph.\n    \"\"\"\n    if n > m:\n        return eulerian_num(m, n)\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        x, y = map(int, input().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    return sum(len(graph[i]) for i in range(1, n + 1)) + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 0\n    if m == 0:\n        return 1\n\n    # Initialize the first row of the matrix\n    first_row = [0] * (m+1)\n    first_row[1] = 1\n\n    # Initialize the second row of the matrix\n    second_row = [0] * (m+1)\n    second_row[2] = 2\n\n    # Initialize the third row of the matrix\n    third_row = [0] * (m+1)\n    third_row[3] = 3\n\n    # Initialize the fourth row of the matrix\n    fourth_row = [0] * (m+1)\n    fourth_row[4] = 5\n\n    # Initialize the final matrix\n    final_matrix = [first_row, second_row, third_row, fourth_row]\n\n    # Print the final matrix\n    for row in final_matrix:\n        print(row)\n\n    # Initialize the solution array\n    solution = [0] * (n+1)\n    solution[1] = 1\n\n    # Find the Eulerian number\n    for i in range(1, n+1):\n        # Loop through the rows of the matrix\n        for j in range(len(final_matrix)):\n            # Find the next value of the i-th element in the j-th row\n            if i+j > m:\n                break\n            next_value = final_matrix[j][i+j] + solution[i-j]\n            if next_value == m:\n                solution[i] = next_value\n                break\n        else:\n            # If no value is found, the solution array is not a Eulerian path\n            return -1\n\n    # Return the solution array\n    return solution"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        return ((2*n+1)*(n+m)**2 - 2*n**2*m**2) / (2*n+1)\n    else:\n        return ((2*n+1)*(n+m)**2 + 2*n**2*m**2) / (2*n+1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    elif m == 0:\n        return n\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n, m-1) - eulerian_num(n-1, m-1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n\n    # base case\n    if n == 1 and m == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return (n * eulerian_num(n-1, m-1)) % m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    This function takes two integers, n and m, as input. It returns the Eulerian number a(n, m).\n\n    The Eulerian number is defined as the number of pairs of points in a geometric figure. \n    In this case, we are interested in finding the number of pairs of points that satisfy the condition of being parallel to a line passing through the origin.\n\n    Let's consider an example:\n\n    We have a square with four corners at (-1, -1), (1, -1), (1, 1), (-1, 1). \n    If we define a line passing through the origin, we can represent it as y = -x + 1.\n    In this case, the four points correspond to pairs of points that satisfy the condition y = -x + 1, and we have two pairs of points: (-1, 1) and (1, -1). \n    Therefore, the Eulerian number of this square is 2.\n\n    The Eulerian number of n points on a line passing through the origin is given by:\n\n    a(n, m) = n * m / (2 * (n - 1) * (m - 1))\n\n    where n and m are the number of points and the coordinates of the points, respectively.\n    '''\n\n    if n < 1 or m < 1:\n        return 0\n\n    return n * m / (2 * (n - 1) * (m - 1))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n + 1):\n        a += (i * (m - 1) // i)\n    \n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # initialize matrix\n    a = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # initialize first row\n    a[1][1] = 1\n\n    # initialize first column\n    a[1][2] = 1\n\n    # fill matrix\n    for i in range(2, n+1):\n        for j in range(2, m+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 0\n    b = 1\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n + 1):\n        a = b\n        b = a + m * b\n\n    # Return the final value of a\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for i, sublist in enumerate(input_list):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for i, sublist in enumerate(input_list):\n        input_list[i] = sorted(sublist)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the count of true booleans in the list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool):\n            count += int(item)\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Using append method to append list to tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n\n    # append the list to the tuple\n    test_tup += (test_list,)\n\n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + test_list\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the given tuples to lists\n    list1 = list(test_list)\n    tuple1 = tuple(test_tup)\n\n    # append the lists to the tuples\n    new_tup = tuple1 + list1\n\n    # convert the new tuple back to a list\n    new_list = list(new_tup)\n\n    # return the new list\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n    \n    # Append the lists to the tuples\n    test_tup.extend(test_list)\n    \n    # Return the updated tuples\n    return tuple(test_tup)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the test_list to a tuple\n    test_tup = tuple(test_list)\n\n    # Append the tuple to the given list\n    test_list.extend(test_tup)\n\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # append lists to tuples\n    test_list_tup = test_list + test_tup\n\n    # convert tuple back to list\n    test_list_tup = list(test_list_tup)\n\n    return test_list_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use heapq to merge three lists into a single sorted list.\n    # First, convert the three lists into min-heap data structure.\n    heap1 = [-num for num in num1]\n    heap2 = [-num for num in num2]\n    heap3 = [-num for num in num3]\n    \n    # Then, extract the minimum element from each heap and append to a new list.\n    merged_list = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] and heap1[0] <= heap3[0]:\n            merged_list.append(heap1.pop(0))\n        elif heap2[0] <= heap1[0] and heap2[0] <= heap3[0]:\n            merged_list.append(heap2.pop(0))\n        else:\n            merged_list.append(heap3.pop(0))\n    \n    # Check if there are still elements in the heaps. If so, append them to the new list.\n    while heap1:\n        merged_list.append(heap1.pop(0))\n    while heap2:\n        merged_list.append(heap2.pop(0))\n    while heap3:\n        merged_list.append(heap3.pop(0))\n        \n    # Return the merged list.\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Combine the lists into a single list\n    combined_list = num1 + num2 + num3\n    # Use heapq to sort the combined list\n    sorted_list = heapq.heapify(combined_list)\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Use a min-heap to store the smallest number of each list\n    min_heap = [heapq.heappop(num1), heapq.heappop(num2), heapq.heappop(num3)]\n    merged_list = []\n\n    while len(min_heap) > 0:\n        # Pop the smallest number from the heap and add it to the merged list\n        merged_list.append(heapq.heappop(min_heap))\n\n        # Add the next smallest number to the heap if there is one\n        if len(num1) > 0 and len(min_heap) < len(num1):\n            heapq.heappush(min_heap, heapq.heappop(num1))\n        if len(num2) > 0 and len(min_heap) < len(num2):\n            heapq.heappush(min_heap, heapq.heappop(num2))\n        if len(num3) > 0 and len(min_heap) < len(num3):\n            heapq.heappush(min_heap, heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a list of tuples with all the elements\n    # of the three input lists in the required order\n    lst = [(num1[i], i) if i < len(num1) else (num2[j], len(num1) + j) for j in range(len(num2)) for i in range(len(num1))]\n\n    # merge the lists using heapq\n    return [heapq.heappop(min_heap)[0] for min_heap in [heapq.heappushpop(heapq.heappushpop(heapq.heapify(num1[:i] + num2[j:j+len(num1)]), num3[k]), num2[j+len(num1):]) for j in range(len(num2)) for i in range(len(num1))] for k in range(len(num3))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Create a min heap to store the smaller elements of num1, num2, and num3\n    min_heap = [(num1[0], 0), (num2[0], 1), (num3[0], 2)]\n    \n    # Initialize variables for the indices of the current element in each list\n    i, j, k = 0, 0, 0\n    \n    # Create an empty list to store the merged sorted list\n    merged_list = []\n    \n    # While the min heap is not empty\n    while min_heap:\n        # Get the smallest element and its index from the min heap\n        smallest_element, smallest_index = heapq.heappop(min_heap)\n        \n        # Add the smallest element to the merged list\n        merged_list.append(smallest_element)\n        \n        # If the smallest element is in num1, decrease its index and add it to the min heap\n        if smallest_index == 0:\n            heapq.heappush(min_heap, (num1[i], 0))\n            i += 1\n        \n        # If the smallest element is in num2, decrease its index and add it to the min heap\n        elif smallest_index == 1:\n            heapq.heappush(min_heap, (num2[j], 1))\n            j += 1\n        \n        # If the smallest element is in num3, decrease its index and add it to the min heap\n        elif smallest_index == 2:\n            heapq.heappush(min_heap, (num3[k], 2))\n            k += 1\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three lists as arguments and returns a single sorted list.\n    '''\n    # Use heapq to merge the three lists into a single sorted list\n    merged_list = heapq.merge(num1, num2, num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        elif heapq.heappop(num2) <= heapq.heappop(num3):\n            merged_list.append(heapq.heappop(num2))\n        else:\n            merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Initialize an empty list to store the merged sorted list\n    merged_list = []\n    \n    # Initialize two pointers for each list, i.e., num1_ptr and num2_ptr\n    num1_ptr, num2_ptr = 0, 0\n    \n    # Compare the first element of each list\n    while num1_ptr < len(num1) and num2_ptr < len(num2):\n        if num1[num1_ptr] < num2[num2_ptr]:\n            heapq.heappush(merged_list, num1[num1_ptr])\n            num1_ptr += 1\n        else:\n            heapq.heappush(merged_list, num2[num2_ptr])\n            num2_ptr += 1\n    \n    # Add any remaining elements from the non-empty list(s)\n    while num1_ptr < len(num1):\n        heapq.heappush(merged_list, num1[num1_ptr])\n        num1_ptr += 1\n    while num2_ptr < len(num2):\n        heapq.heappush(merged_list, num2[num2_ptr])\n        num2_ptr += 1\n    \n    # Return the merged sorted list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Merge the two smallest lists\n    merged_list = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merged_list.append(num1[i])\n            i += 1\n        else:\n            merged_list.append(num2[j])\n            j += 1\n    # Add the remaining elements\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3)\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n\n    # Initialize an empty heap\n    heap = []\n\n    # Insert each number into the heap\n    heapq.heappush(heap, num1)\n    heapq.heappush(heap, num2)\n    heapq.heappush(heap, num3)\n\n    # Merge the heaps into a single sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n\n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Convert the binary string to a list of integers\n    binary_list = [int(i) for i in s]\n    \n    # Loop through the list of integers n times\n    for i in range(n):\n        # Initialize two pointers to the start and end of the list\n        start = 0\n        end = len(binary_list) - 1\n        \n        # Swap the values of the start and end pointers\n        while start < end:\n            binary_list[start], binary_list[end] = binary_list[end], binary_list[start]\n            \n            # Update the start and end pointers\n            start += 1\n            end -= 1\n            \n    # Convert the list of integers back to a binary string\n    binary_string = ''.join(str(i) for i in binary_list)\n    \n    # Count the number of odd values in the binary string\n    count = sum(1 for i in binary_string if int(i)%2 == 1)\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # Convert the binary string to an integer\n    binary_num = int(s,2)\n    \n    # Initialize the count variable\n    count = 0\n    \n    # Iterate n times\n    for i in range(n):\n        \n        # Find the rightmost set bit position in the binary number\n        rightmost_set_bit = binary_num.bit_length() - 1\n        \n        # Set the least significant bit of the binary number to 1\n        binary_num |= 1\n        \n        # Set the least significant bit of the binary number to 0\n        binary_num &= ~(1 << rightmost_set_bit)\n        \n        # Increment the count variable\n        count += 1\n        \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string `s` and an integer `n` as input and returns the number of odd numbers in the rotated binary string.\n    \"\"\"\n\n    # Initialize the count of odd numbers to 0\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n\n        # Initialize the index of the last bit of the binary string to the end of the string\n        j = len(s) - 1\n\n        # Initialize the carry bit to 0\n        carry = 0\n\n        # Iterate through the binary string\n        for k in range(len(s)):\n\n            # Get the value of the current bit\n            curr_bit = int(s[k])\n\n            # Add the carry bit to the current bit\n            curr_bit += carry\n\n            # If the current bit is 1, increment the count of odd numbers\n            if curr_bit % 2 == 1:\n                count += 1\n\n            # If the carry bit is 1, update the value of the carry bit\n            carry = 1 if curr_bit > 1 else 0\n\n            # Shift the current bit to the left by 1\n            s = s[:k] + str(curr_bit % 2) + s[k+1:]\n\n    # Return the count of odd numbers after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n): \n    # Initialize count variable to 0\n    count = 0\n    # Split the binary string into an array of characters\n    bin_str = [int(i) for i in bin(int(s, 2))[2:]]\n    # Loop through each character in the array\n    for i in range(len(bin_str)):\n        # If the character is odd, increment the count variable\n        if bin_str[i] % 2!= 0:\n            count += 1\n        # If the count variable is equal to n, break out of the loop\n        if count == n:\n            break\n    # Return the count variable\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    \n    # Convert binary string to a list of bits\n    bits = [int(bit) for bit in s]\n\n    # Loop through each rotation\n    for _ in range(n):\n        # Reverse the bits of the list\n        bits.reverse()\n\n        # Count the number of odd bits in the list\n        odd_count = sum(1 for bit in bits if bit)\n\n    # Return the count\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n    s (str): Binary string to be rotated.\n    n (int): Number of rotations.\n\n    Returns:\n    int: Number of odd numbers after rotating the binary string the given number of times.\n    \"\"\"\n    # Initialize variables to store the count of odd numbers and the rotated binary string\n    count = 0\n    rotated_s = ''\n\n    # Loop through the input string n times\n    for i in range(n):\n        # Reverse the input string and concatenate it to the rotated_s variable\n        rotated_s += s[::-1]\n\n        # Count the number of odd numbers in the rotated_s variable\n        for j in range(len(rotated_s)):\n            if rotated_s[j] == '1':\n                count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes two arguments: a binary string s and an integer n. It rotates the binary string s n times and returns the number of odd values in the result.\n    \"\"\"\n    # initialize the number of odd values to zero\n    num_odd = 0\n\n    # loop n times\n    for i in range(n):\n        # rotate the binary string s by i positions to the right\n        s = s[::-1] + s\n\n        # count the number of odd values in the rotated binary string\n        for j in range(len(s)):\n            if s[j] == '1':\n                num_odd += 1\n\n    return num_odd"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    This function takes a binary string's' and an integer 'n' as input, and returns the number of odd numbers\n    that can be obtained by rotating the binary string's' the given number of times.\n    '''\n\n    # Initialize variables to keep track of the number of even and odd numbers\n    even_count = 0\n    odd_count = 0\n\n    # Convert the binary string's' to a list of characters\n    s_list = list(s)\n\n    # Loop through the list of characters and count the number of even and odd numbers\n    for char in s_list:\n        if char == '0':\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the number of odd numbers after rotating the binary string's' the given number of times\n    return (odd_count + n - 1) // n"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n):\n    # convert the binary string to a list of bits\n    binary_list = [int(bit) for bit in s]\n    \n    # rotate the list n times\n    for _ in range(n):\n        temp = binary_list[0]\n        for i in range(len(binary_list)-1):\n            binary_list[i] = binary_list[i+1]\n        binary_list[-1] = temp\n        \n    # count the number of odd values\n    count = 0\n    for bit in binary_list:\n        if bit % 2!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common:\n                continue\n            else:\n                common.append(nestedlist[i][j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Loop through each nested list\n    for i in nestedlist:\n        # Loop through each element in the nested list\n        for j in i:\n            # Add the element to the set if it is not already in the set\n            if j not in common:\n                common.add(j)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set(sum(nestedlist, [])) # create a set of all elements in the nested list\n    set2 = set() # initialize an empty set for the common elements\n\n    for i in nestedlist:\n        for j in i:\n            set2.add(j) # add each element from the nested list to the set\n\n    return list(set1.intersection(set2)) # return the common elements as a list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        if len(set(nestedlist[i])) == len(nestedlist[i]):\n            common_list.append(nestedlist[i])\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in i:\n            if j in common:\n                common.remove(j)\n            else:\n                common.append(j)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        if len(nestedlist[i]) > 1:\n            common.extend(set(nestedlist[i]).intersection(set(nestedlist[j])))\n            for j in range(i+1, len(nestedlist)):\n                common.extend(set(nestedlist[i]).intersection(set(nestedlist[j])))\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in common_elements:\n                common_elements.remove(nestedlist[i][j])\n            else:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Create a set to store the common elements\n    common_set = set()\n    \n    # Loop through each list in the nested list\n    for sublist in nestedlist:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the element is in the set, add it to the common set\n            if element in common_set:\n                common_set.remove(element)\n            else:\n                common_set.add(element)\n                \n    # Convert the set back to a list and return it\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n    \n    # Loop through each list in the nested list\n    for lst in nestedlist:\n        # Loop through each element in the list\n        for elem in lst:\n            # Add the element to the set if it's not already in it\n            if elem not in common:\n                common.add(elem)\n                \n    # Return the common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common_elements:\n                common_elements.remove(element)\n            else:\n                common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # Remove all non-numeric characters from the string\n    cleaned_text = ''.join(filter(str.isdigit, text))\n\n    # If the cleaned string is empty, return False\n    if not cleaned_text:\n        return False\n\n    # Convert the cleaned string to an integer and return True\n    try:\n        int_value = int(cleaned_text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n\n    This function takes a string as input and returns True if the string represents an integer, and False otherwise.\n\n    Examples:\n    >>> check_integer('42')\n    True\n    >>> check_integer('123.45')\n    False\n    >>> check_integer('-987654321')\n    True\n    >>> check_integer('0')\n    True\n    '''\n\n    if text == '':\n        return False\n\n    if text[0] == '-':\n        text = text[1:]\n\n    if text[0] == '0' and len(text) > 1:\n        return False\n\n    for char in text:\n        if char < '0' or char > '9':\n            return False\n\n    return True"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\nprint(check_integer(\"5\"))  # Output: True\nprint(check_integer(\"5a\"))  # Output: False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    # Initialize a variable to store the count of empty dictionaries\n    count = 0\n    # Loop through each dictionary in the list\n    for item in list1:\n        # Check if the dictionary is empty using the len() function\n        if len(item) == 0:\n            count += 1\n    # Return True if all dictionaries are empty, else return False\n    return count == len(list1)"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if dictionary:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty = True\n    for i in list1:\n        if i:\n            empty = False\n            break\n    return empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list\n    nums_list = list(nums)\n    # Initialize an empty integer variable\n    result = 0\n    # Iterate over the list and add each element to the result\n    for num in nums_list:\n        result += num\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a string\n    nums_str = str(nums)\n    # Convert the string into an integer\n    result = int(nums_str)\n    # Return the integer\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_value = 0\n    for num in nums:\n        int_value = int_value * 10 + num\n    return int_value"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for item in test_list:\n        if isinstance(item, float):\n            float_list.append(item)\n        elif isinstance(item, list):\n            float_list.append(list_to_float(item))\n        else:\n            try:\n                float_list.append(float(item))\n            except ValueError:\n                float_list.append(None)\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float, complex)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                element = float(element)\n                sublist[sublist.index(element)] = element"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n\n    Parameters:\n    test_list (list): A list of lists that may contain strings, integers, floats, or other convertible types.\n\n    Returns:\n    list: A new list that contains only floats from the original list.\n    \"\"\"\n    result = []\n    for row in test_list:\n        for element in row:\n            if isinstance(element, (int, float)):\n                result.append(float(element))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            if isinstance(item, (int, float)):\n                item = float(item)\n            elif isinstance(item, str):\n                try:\n                    item = float(item)\n                except ValueError:\n                    pass\n            elif isinstance(item, list):\n                item = list_to_float(item)\n            else:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n                sublist[test_list.index(sublist)] = float(element)\n            except ValueError:\n                pass"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Convert string to list of characters\n    chars = list(string)\n    # Initialize an empty list to hold the result\n    result = []\n    # Loop through the characters and split on space character\n    for char in chars:\n        if char =='':\n            # Add the current string to the result list\n            result.append(''.join(chars[:chars.index(char)]))\n            # Reset the current string to an empty string and remove the space character from the list\n            chars = chars[chars.index(char) + 1:]\n        else:\n            # Add the current character to the current string\n            chars[chars.index(char)] = char\n    # Add the last string to the result list\n    result.append(''.join(chars))\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # convert the string to a list\n    list_string = string.split()\n    # return the list\n    return list_string"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    unique_element = None\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] == unique_element:\n            count += 1\n        elif arr[i]!= unique_element and count == 1:\n            unique_element = arr[i]\n            count = 0\n            \n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = [0] * n\n\n    # Count the frequency of each element in the array\n    for i in range(n):\n        count[arr[i]] += 1\n\n    # Find the first occurrence of the element that appears only once\n    for i in range(n):\n        if count[i] == 1:\n            return i\n\n    # If no such element is found, return -1\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            for j in range(i + 1, n):\n                if arr[j] == arr[i]:\n                    return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return None\n    else:\n        return arr[0]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize two variables to keep track of the first and last element of the array\n    first = 0\n    last = len(arr) - 1\n\n    # Iterate through the array until the first and last elements meet in the middle\n    while first <= last:\n        # Calculate the middle index\n        mid = (first + last) // 2\n\n        # Check if the element at the middle index is the only element in the array\n        if arr[mid] == arr[mid - 1] == arr[mid + 1]:\n            return arr[mid]\n\n        # If the element at the middle index is greater than the previous element,\n        # then the only element that appears only once in the array is in the left half of the array\n        elif arr[mid] > arr[mid - 1]:\n            last = mid - 1\n        # If the element at the middle index is less than the next element,\n        # then the only element that appears only once in the array is in the right half of the array\n        else:\n            first = mid + 1\n\n    # If no element appears only once in the array, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize two pointers, one starting at the beginning and one starting at the end\n    i = 0\n    j = len(arr) - 1\n\n    # Loop while both pointers are within the bounds of the array\n    while i < j:\n        # Calculate the midpoint of the array\n        mid = (i + j) // 2\n\n        # If the element at mid is not the same as the element at i, it must be the only element\n        if arr[mid]!= arr[i]:\n            return arr[mid]\n\n        # If the element at mid is not the same as the element at j, it must be the only element\n        if arr[mid]!= arr[j]:\n            return arr[mid]\n\n        # If the element at mid is the same as both i and j, it must be the only element\n        if arr[mid] == arr[i] and arr[mid] == arr[j]:\n            return arr[mid]\n\n        # If the element at mid is greater than both i and j, it must be in the left half of the array\n        elif arr[mid] > arr[i] and arr[mid] > arr[j]:\n            i = mid + 1\n\n        # If the element at mid is less than both i and j, it must be in the right half of the array\n        else:\n            j = mid - 1\n\n    # If the loop completes without finding the only element, it must be the same as the element at the beginning\n    return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to keep track of the count and the element that appears only once\n    count = 0\n    prev_element = None\n\n    # Iterate through the sorted array\n    for element in arr:\n        # If the current element is equal to the previous element, increment the count\n        if element == prev_element:\n            count += 1\n        else:\n            # If the count is greater than 1, return the previous element\n            if count > 1:\n                return prev_element\n\n            # Reset the count and update the previous element\n            count = 1\n            prev_element = element\n\n    # If the loop completes without returning, return None\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if arr[i] == arr[arr.index(arr[i], i+1)]:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initializing a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # iterating through the array and incrementing the frequency of each element in the dictionary\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n\n    # iterating through the dictionary and checking if the frequency of each element is 1\n    for i in freq:\n        if freq[i] == 1:\n            return i\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a hash set to store the unique elements in the array\n    unique_elements = set()\n\n    # Iterate through the array and add each element to the hash set only if it's not already there\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.add(element)\n\n    # If there are no unique elements in the array, return None\n    if len(unique_elements) == 0:\n        return None\n\n    # If there's only one unique element in the array, return it\n    elif len(unique_elements) == 1:\n        return list(unique_elements)[0]\n\n    # If there are multiple unique elements in the array, return the first one\n    else:\n        return list(unique_elements)[0]"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize variables\n    max_product = 0\n    \n    # Iterate through the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            # Check if the product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    max_product = (0, 0)\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            # calculate absolute product of numbers in pairs\n            abs_product = abs(lst[i][0] * lst[j][0]) + abs(lst[i][1] * lst[j][1])\n            # update max_abs_product and max_product if current absolute product is greater\n            if abs_product > max_abs_product:\n                max_abs_product = abs_product\n                max_product = (lst[i][0], lst[i][1])\n                max_product = (lst[j][0], lst[j][1])\n    return max_product, max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_product = list1[i][0]*list1[i][1]*list1[j][0]*list1[j][1]\n            max_product = max(max_product, abs(current_product))\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if abs(product) > max_product:\n                max_product = abs(product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) % 2 == 1:\n        raise ValueError('List should have an even number of elements')\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+2, len(list1)+1, 2):\n            if abs(list1[i][0] * list1[j][1]) > max_abs_product:\n                max_abs_product = abs(list1[i][0] * list1[j][1])\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    # Initialize the maximum absolute product and the product of pairs to zero\n    max_product = 0\n    product_of_pairs = 0\n\n    # Iterate through the list of tuples\n    for pair in list1:\n        # Calculate the absolute difference between the first and second elements of the pair\n        difference = abs(pair[0] - pair[1])\n\n        # Update the maximum absolute product and the product of pairs if the current difference is greater than the current maximum\n        if difference > max_product:\n            max_product = difference\n            product_of_pairs = pair[0] * pair[1]\n\n        # Update the product of pairs if the current difference is less than or equal to the current maximum\n        elif difference <= max_product:\n            product_of_pairs *= pair[0] * pair[1]\n\n    # Return the maximum absolute product and the product of pairs\n    return max_product, product_of_pairs"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][0])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Define a function to check if a number is amicable to another number\n    def is_amicable(num1, num2):\n        if num1 < num2:\n            for i in range(num2, num1):\n                if (num1 % i == 0) and (num2 % i == 0):\n                    if i == num2:\n                        return True\n                    else:\n                        break\n            return False\n        else:\n            for i in range(num1, num2):\n                if (num2 % i == 0) and (num1 % i == 0):\n                    if i == num1:\n                        return True\n                    else:\n                        break\n            return False\n\n    # Initialize a variable to store the sum of amicable numbers\n    amicable_sum = 0\n\n    # Iterate through all numbers from 1 to the specified limit\n    for num in range(1, limit+1):\n        # Check if the number is amicable to any other number from 1 to the current number\n        for i in range(1, num):\n            if (num % i == 0) and (is_amicable(num, i)):\n                amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num!= 1:\n            if num in amicable_numbers:\n                continue\n            is_amicable = True\n            for i in range(2, num):\n                if num % i == 0:\n                    is_amicable = False\n                    break\n            if is_amicable:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit + 1):\n        if i not in amicable_numbers and is_amicable(i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef is_amicable(number):\n    '''\n    Helper function to check if a number is amicable or not.\n    '''\n    for i in range(1, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Create a list to store amicable numbers\n    amicable_numbers = []\n\n    # Loop through all numbers from 1 to limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable to any other number between 1 and limit\n        for j in range(1, limit+1):\n            # Check if the number is amicable to itself and to j\n            if i!= j and i + j == limit:\n                # If both conditions are true, the number is an amicable number\n                amicable_numbers.append(i + j)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable_number(num):\n    \"\"\"\n    Check if a number is amicable. A number is amicable if it is both a prime and has no other factors besides 1 and itself.\n    \"\"\"\n    if num < 2:\n        return False\n    prime = True\n    for i in range(2, num):\n        if num % i == 0:\n            prime = False\n            break\n    return prime and num == sum(set(range(1, num)) - {1, num})\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Find the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_amicable = 0\n    for num in range(1, limit+1):\n        if is_amicable_number(num):\n            sum_amicable += num\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sieve_of_eratosthenes(limit):\n    '''\n    Returns a list of prime numbers up to a specified limit using the Sieve of Eratosthenes algorithm.\n    '''\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n\n    for i in range(2, int(limit**0.5) + 1):\n        if primes[i]:\n            for j in range(i**2, limit + 1, i):\n                primes[j] = False\n\n    return [i for i in range(2, limit + 1) if primes[i]]\n\ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    primes = sieve_of_eratosthenes(limit)\n    return sum(x for x in primes if is_amicable(x, primes) and x!= 1)\n\ndef is_amicable(n, primes):\n    '''\n    Returns True if n is amicable to any prime number in primes, otherwise False.\n    '''\n    for prime in primes:\n        if prime!= n and prime <= n//prime:\n            return n == prime + prime\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # initialize variables\n    amicable_sum = 0\n    num = 1\n\n    # check if the number is prime or not\n    while num <= limit:\n        # check if the number is amicable or not\n        if num == sum_of_proper_divisors(num):\n            amicable_sum += num\n        num += 1\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(num):\n        '''\n        Write a function to calculate the sum of all its divisors.\n        '''\n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i + num//i\n        return sum\n\n    def sum_divisors_sum(num):\n        '''\n        Write a function to calculate the sum of all its divisors, but including the original number.\n        '''\n        return num + sum_divisors(num)\n\n    total_sum = 0\n    for i in range(1, limit+1):\n        if i == sum_divisors_sum(i):\n            total_sum += i\n\n    return total_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables to keep track of the sum and the count of amicable numbers\n    amicable_sum = 0\n    count = 0\n    # Loop through all numbers from 1 to the limit (exclusive)\n    for i in range(1, limit):\n        # Check if the number is amicable (divisible by 2 and the sum of its factors excluding the number itself)\n        if i == sum_of_factors(i):\n            amicable_sum += i\n            count += 1\n    # Return the sum of all amicable numbers\n    return amicable_sum\n\ndef sum_of_factors(num):\n    '''\n    Calculate the sum of all factors of a given number (excluding the number itself).\n    '''\n    # Initialize variables to keep track of the sum and the count of factors\n    factor_sum = 1\n    count = 0\n    # Loop through all numbers from 1 to the square root of the given number\n    for i in range(1, num // 2 + 1):\n        # Check if the given number is a factor of i\n        if (num % i == 0):\n            # If it is, check if it's a prime factor (divisible by 2)\n            if (i % 2 == 0 and i!= num):\n                # If it is, increment the count and add it to the sum\n                count += 1\n                factor_sum += i\n    # Return the sum of all factors (excluding the number itself)\n    return factor_sum * count"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store all the pair sums\n    amicable_pairs = {}\n    for i in range(1, limit):\n        for j in range(i+1, limit):\n            # Check if the two numbers are amicable\n            if is_amicable(i, j):\n                # Store the pair sum in the dictionary\n                amicable_pairs[i+j] = (i, j)\n\n    # Sum all the pair sums\n    total = sum(amicable_pairs.keys())\n\n    return total\n\ndef is_amicable(a, b):\n    '''\n    Check if two numbers are amicable.\n    '''\n    if a < 100:\n        for i in range(1, a):\n            if a % i == 0 and b % i == 0 and i!= a and i!= b:\n                return False\n    else:\n        for i in range(5, a):\n            if a % i == 0 and b % i == 0 and i!= a and i!= b:\n                return False\n\n    return True"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle_radian = cmath.phase(a+b*1j)\n    angle_degree = angle_radian * (180/cmath.pi)\n    angle_degree = round(angle_degree, 2)\n    return angle_degree"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    num = a * a + b * b\n    den = 2 * a * b\n    angle = cmath.phase(num / den)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the angle using cmath module\n    angle = cmath.phase(complex(a,b))\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes two complex numbers as input and returns the angle of the complex number.\n    '''\n    # Get the magnitude and the phase of the complex number\n    mag = cmath.sqrt(a**2 + b**2)\n    phase = cmath.phase(mag + a*b/(mag**2))\n    \n    # Convert the phase to degrees\n    angle_deg = cmath.phase(phase) * 180 / cmath.pi\n    \n    # Return the angle in degrees\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(modulus) * 180 / cmath.pi\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = round(angle.real, 3)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number to radians\n    angle = cmath.phase(a + b * 1j)\n    # Convert the radians to degrees\n    angle = angle * 180 / cmath.pi\n    # Return the angle\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zeros = 0\n    count_ones = 0\n    \n    for char in string:\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n            \n    max_diff = 0\n    \n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_zeros1 = 0\n            count_ones1 = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    count_zeros1 += 1\n                else:\n                    count_ones1 += 1\n            diff = abs(count_zeros - count_zeros1) + abs(count_ones - count_ones1)\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    length = 0\n    count = 0\n    max_length = 0\n    for i in range(n):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        if count > max_length:\n            max_length = count\n        length += 1\n        if length == n:\n            length = 0\n    return max_length"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count_0 = string.count('0', i, j)\n            count_1 = string.count('1', i, j)\n            if count_1 > count_0:\n                max_diff = max(max_diff, count_1 - count_0)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    n = len(string)\n    diff_max = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = 0\n            for k in range(j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            diff_max = max(diff_max, diff)\n    return diff_max"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    max_diff = 0\n    n = len(string)\n    \n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            diff = abs(string.count('0') - string.count('1'))\n            max_diff = max(diff, max_diff)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    for i in range(n):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros_count = 0\n    ones_count = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros_count += 1\n        else:\n            ones_count += 1\n\n        diff = abs(zeros_count - ones_count)\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    current_diff = 0\n    for i in range(length):\n        if string[i] == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Check if a is greater than b\n    if a > b:\n        # Swap the values of a and b\n        a, b = b, a\n\n    # Initialize the sum of common divisors to 0\n    result = 0\n\n    # Iterate through all possible values of i between 1 and b\n    for i in range(1, b + 1):\n        # Check if i is a divisor of both a and b\n        if a % i == 0 and b % i == 0:\n            # Add the value of i to the sum of common divisors\n            result += i\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # Use the greatest common divisor algorithm to find the greatest common divisor of a and b\n    gcd = gcd_algorithm(a, b)\n\n    # Create a set of the common divisors of a and b\n    common_divisors = set(range(1, gcd + 1)).intersection(set(range(1, gcd + 1)))\n\n    # Calculate the sum of the common divisors\n    result = sum(common_divisors)\n\n    return result"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(2, math.ceil(math.sqrt(max(a,b)))):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of the two given numbers\n    common = set(set(a).intersection(set(b)))\n\n    # Find the sum of the common divisors\n    return sum(common)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # find the common divisor of a and b\n    common_divisor = gcd(a,b)\n    # find the sum of all common divisors of a and b\n    sum_common_divisors = (a + b) / common_divisor\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Finding all the divisors of a and b\n    a_divisors = find_divisors(a)\n    b_divisors = find_divisors(b)\n\n    # Finding the common divisors of a and b\n    common_divisors = [d for d in a_divisors if d in b_divisors]\n\n    # Summing the common divisors\n    result = sum(common_divisors)\n\n    return result\n\n\ndef find_divisors(n):\n    '''\n    Find all the divisors of a given number.\n    '''\n\n    divisors = []\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def common_divisors(a, b):\n        \"\"\"\n        Helper function to find the common divisors of two given numbers.\n        \"\"\"\n        divisors = set()\n        for i in range(1, min(a, b) + 1):\n            if a % i == 0 and b % i == 0:\n                divisors.add(i)\n        return list(divisors)\n\n    # Calculate the common divisors\n    common_div = common_divisors(a, b)\n\n    # Calculate the sum of the common divisors\n    total_sum = sum(common_div)\n\n    return total_sum"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find the common divisors of the two numbers\n    divisors = [i for i in range(1, min(a, b)+1) if a%i == 0 and b%i == 0]\n    \n    # Calculate the sum of common divisors\n    sum_divisors = sum(divisors)\n    \n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_common_divisors(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, b+1):\n        if b % i == 0:\n            divisors.append(i)\n    \n    sum_of_common_divisors = 0\n    for i in range(1, b+1):\n        if i in divisors and a % i == 0:\n            sum_of_common_divisors += i\n    \n    return sum_of_common_divisors\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(max(x, y)+1):\n        if i <= x:\n            result += y\n        if i <= y:\n            result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    '''\n    This function takes in a list of words and a maximum length n as input and returns a list of words that are longer than n characters.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    words = str.split()\n    long_words = []\n\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    total_sum = 0\n    \n    # Check rows and columns\n    for i in range(n):\n        total_sum += my_matrix[i][i]\n        total_sum += my_matrix[i][n-i-1]\n    \n    # Check diagonal\n    total_sum += my_matrix[0][0]\n    total_sum += my_matrix[n-1][n-1]\n    \n    # Check remaining cells\n    for i in range(n):\n        for j in range(n):\n            if i == j == n-1:\n                continue\n            total_sum += my_matrix[i][j]\n    \n    return total_sum == n**2 * (n**2 + 1) // 2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n\n    # Initialize variables\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    num_cols = len(set(my_matrix))\n    num_rows = len(set([row.count(i) for row in my_matrix]))\n\n    # Check if all the rows have the same number of distinct values\n    if num_rows!= 1:\n        return False\n\n    # Check if all the columns have the same number of distinct values\n    if num_cols!= 1:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= (i+j)%9:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Determine the size of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix is a square\n    if rows!= cols:\n        return False\n\n    # Check if all elements are unique\n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j] in my_matrix[i][j+1:cols] or my_matrix[i][j] in my_matrix[i+1:rows][j]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Initialize a list to store the sum of each row\n    row_sums = [0] * len(my_matrix)\n\n    # Calculate the sum of each row and store it in the row_sums list\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            row_sums[i] += my_matrix[i][j]\n\n    # Check if the sum of each row is equal to the sum of the whole matrix\n    for i in range(len(row_sums)):\n        if row_sums[i]!= sum(my_matrix[i]):\n            return False\n\n    # Check if the sum of each column is equal to the sum of the whole matrix\n    col_sums = [0] * len(my_matrix[0])\n    for j in range(len(my_matrix)):\n        for i in range(len(my_matrix[j])):\n            col_sums[i] += my_matrix[j][i]\n\n    for i in range(len(col_sums)):\n        if col_sums[i]!= sum(my_matrix[:, i]):\n            return False\n\n    # Check if the sum of the main diagonal is equal to the sum of the whole matrix\n    main_diag_sum = sum([my_matrix[i][i] for i in range(len(my_matrix))])\n    if main_diag_sum!= sum(my_matrix):\n        return False\n\n    # Check if the sum of the secondary diagonal is equal to the sum of the whole matrix\n    sec_diag_sum = sum([my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix))])\n    if sec_diag_sum!= sum(my_matrix):\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    row_sum = [0] * 10  # initialize row sum list to 0\n\n    # iterate over rows\n    for row in my_matrix:\n        # iterate over columns\n        for col in range(len(row)):\n            # add element to row sum list\n            row_sum[row[col]] += 1\n\n    # check if each row sum is the same as the length of the matrix\n    for i in range(len(my_matrix)):\n        if row_sum[i]!= len(my_matrix):\n            return False\n\n    # check if each column sum is the same as the length of the matrix\n    for i in range(len(my_matrix[0])):\n        column_sum = 0\n        for row in my_matrix:\n            column_sum += row[i]\n        if column_sum!= len(my_matrix):\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define the number of rows and columns in the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        # Check each row to see if the elements are equal\n        for j in range(cols):\n            if my_matrix[i][j]!= my_matrix[rows-1-i][j]:\n                return False\n    for j in range(cols):\n        # Check each column to see if the elements are equal\n        for i in range(rows):\n            if my_matrix[i][j]!= my_matrix[i][cols-1-j]:\n                return False\n    for i in range(rows):\n        for j in range(cols):\n            # Check each element of the matrix to see if it is equal to its neighbors\n            if i > 0 and j > 0 and my_matrix[i][j] == my_matrix[i-1][j-1]:\n                continue\n            if i > 0 and my_matrix[i][j] == my_matrix[i-1][j]:\n                continue\n            if j > 0 and my_matrix[i][j] == my_matrix[i][j-1]:\n                continue\n            if i+1 < rows and j+1 < cols and my_matrix[i][j] == my_matrix[i+1][j+1]:\n                continue\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the sum of all rows is the same\n    row_sum = sum(row for row in my_matrix)\n    if row_sum!= 25:\n        return False\n    \n    # Check if the sum of all columns is the same\n    col_sum = sum(col for col in zip(*my_matrix))\n    if col_sum!= 25:\n        return False\n    \n    # Check if the sum of the diagonals is the same\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= 25:\n        return False\n    if my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= 25:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # get the size of the matrix\n    n = len(my_matrix)\n    \n    # create a list to store the sum of each row\n    row_sums = [sum(row) for row in my_matrix]\n    \n    # create a list to store the sum of each column\n    col_sums = [sum(my_matrix[i][j] for i in range(n)) for j in range(n)]\n    \n    # create a list to store the sum of each diagonal\n    diagonal_sums = [sum(my_matrix[i][i] for i in range(n)) for j in range(n)]\n    \n    # create a list to store the sum of each sub-diagonal\n    sub_diagonal_sums = [sum(my_matrix[i][i+j] for i in range(n) for j in range(n-i-1)) for j in range(n)]\n    \n    # check if the sum of each row, column, diagonal, and sub-diagonal is equal to the size of the matrix\n    if row_sums == col_sums == diagonal_sums == sub_diagonal_sums == [n**2]*n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix has all unique values\n    unique_values = set(sum(my_matrix, []))\n    if len(unique_values)!= 1:\n        return False\n\n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if my_matrix[i][j]!= j + 1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    n = len(my_matrix)\n\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(row for j in range(n) for row in my_matrix)\n\n        if row_sum!= col_sum:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)  # create a defaultdict to store frequency counts\n    for num in nums:\n        freq[num] += 1  # increment the frequency count for each number\n    max_freq = max(freq.values())  # find the maximum frequency count\n    for num, count in freq.items():  # iterate over items and find the one with maximum frequency\n        if count == max_freq:\n            return num\n    return None  # if no item has max frequency, return None"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_count:\n            max_count = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n        \n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    freq_dict = defaultdict(int)\n\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = max(freq, key=freq.get)\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    \"\"\"\n    # Count the frequency of each element in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    # Find the item with the maximum frequency\n    max_freq = 0\n    max_item = None\n    for num in freq:\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n            \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of numbers and returns the item with the maximum frequency.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    max_freq = 0\n    max_num = None\n    \n    for key, value in freq_dict.items():\n        if value > max_freq:\n            max_freq = value\n            max_num = key\n            \n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_freq = max(freq.values())\n    max_items = [item for item, count in freq.items() if count == max_freq]\n\n    return max_items[0]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    \n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n            \n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str = reversed_str + char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_vowels = ''\n    for char in str1:\n        if char in vowels:\n            if char.lower() not in vowels:\n                reversed_vowels += char\n    return reversed_vowels[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    vowels_regex = '[' + vowels + ']'\n    vowels_found = re.findall(vowels_regex, string)\n    \n    reversed_string = ''\n    for vowel in vowels_found:\n        reversed_string += string.replace(vowel, '')\n    \n    return reversed_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str += char\n    reversed_str = reversed_str[::-1]\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str2 = ''\n    for char in str1:\n        if char not in vowels:\n            str2 += char\n    return str2[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            if len(new_str) == 0:\n                new_str += char\n            elif char!= new_str[-1]:\n                new_str = new_str[:-1] + char + new_str[-1]\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            result.append(str1[i])\n    result.reverse()\n    return ''.join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str1 = list(str1)\n    i = j = 0\n\n    while j < len(str1):\n        if str1[j] not in vowels:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n        j += 1\n\n    return ''.join(str1)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = []\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            new_str.append(str1[i])\n    return ''.join(new_str)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ', '.join(str(x) for x in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return''.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert tuple to string using join() method\n    return ','.join(str(x) for x in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert tuple to string using join method\n    return ','.join(str(x) for x in tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string using the join() method.\n    str_tup = ','.join(map(str, tup1))\n    # Return the converted string.\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives_sum = 0\n    for num in nums:\n        if num < 0:\n            negatives_sum += num\n    return negatives_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_nums = [num for num in nums if num < 0]  # filtering out positive numbers\n    return sum(neg_nums)  # summing up negative numbers"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    sum_negative = 0\n    # Loop through each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum_negative += num\n    # Return the sum of negative numbers\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_negatives += num\n    return sum_negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * (n//2) + 1\n    else:\n        return 2 * (n//2) + 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (2*n-1)*((2*n-1)//2) + (n-1)//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Initialize variables\n    k = 0\n    i = 1\n    result = 0\n\n    # Loop through each row of hexagons\n    while k < n:\n        # Loop through each hexagon\n        while i < n:\n            # Increment the result by 1\n            result += 1\n\n            # Increment the hexagon number counter\n            i += 1\n        # Increment the row number counter\n        k += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b = 0, 1\n    for _ in range(n):\n        print(a)\n        a, b = b, 3*a + b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = 1\n    for i in range(1, n+1): \n        hex_num += i*i*i/2\n    return hex_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth hexagonal number is:\", hexagonal_num(n))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hexagons = [(2*i + 1)**2 for i in range(n)]\n    return sum(hexagons)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # define the first 100 hexagonal numbers\n    hex_numbers = [1]\n    for i in range(1, 100):\n        hex_numbers.append(3*i*i - 1)\n    # return the nth hexagonal number\n    return hex_numbers[n-1]"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * hexagonal_num(n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_count = 0\n    for i in range(1, n+1):\n        hex_count += 6 * i\n    return hex_count\n\nn = int(input(\"Enter the value of n: \"))\nprint(hexagonal_num(n))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    ratio = 0\n    if non_zero_count!= 0:\n        ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0\n    else:\n        return zero_count/non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    ones = array('i')\n    \n    # Count the number of zeros and ones\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            ones.append(1)\n    \n    # Calculate the ratio of zeros to non-zeroes\n    zeros_count = zeros.count(1)\n    ones_count = ones.count(1)\n    \n    if zeros_count == 0:\n        ratio = 0\n    else:\n        ratio = ones_count / zeros_count\n    \n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    '''\n    zeros = 0\n    non_zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n            \n    return non_zeros / zeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[non_zeros.index(0)] += 1\n        else:\n            non_zeros[non_zeros.index(0)] += 1\n    return zeros[non_zeros.index(0)] / non_zeros[non_zeros.index(0)]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    # Initialize an array to store the counts of zeroes and non-zeroes\n    count = array('i', [0] * 2)\n\n    # Iterate through the array\n    for num in nums:\n        # Increment the count of non-zeroes if the number is not zero\n        if num!= 0:\n            count[0] += 1\n        # Increment the count of zeroes if the number is zero\n        else:\n            count[1] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = count[0] / (count[0] + count[1])\n\n    # Return the ratio as a float\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n\n    non_zero_count = len(non_zeros)\n    zero_count = sum(zeros)\n\n    if non_zero_count == 0:\n        return 0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    if non_zero_count == 0:\n        return 0.0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0] * len(nums))\n    for num in nums:\n        count[num] += 1\n    zeros = sum(1 for i in count if i == 0)\n    nonzeros = len(count) - zeros\n    ratio = zeros / nonzeros if nonzeros!= 0 else 0\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = num_nonzeros = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_nonzeros += 1\n\n    return num_zeroes / num_nonzeros"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check for n being a multiple of 4\n    if n % 4!= 0: \n        return False\n\n    # Convert n to binary\n    binary_n = bin(n)[2:]\n\n    # Check if the binary representation of n has more than one 1\n    if binary_n.count('1') > 1: \n        return False\n\n    # Check if the binary representation of n has more than 1 0s at the end\n    if binary_n.count('0') > len(binary_n) - binary_n.count('1'): \n        return False\n\n    # Check if the binary representation of n has only one 0 at the beginning\n    if binary_n.count('0') == 1 and binary_n[0] == '0': \n        return False\n\n    # Check if the binary representation of n has at most 2 0s in a row\n    if binary_n.count('0') > 2: \n        return False\n\n    # If all the conditions have been met, return True\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if i == 1:\n            continue\n        elif i == 2:\n            if n == 1 or n == 2:\n                return True\n        elif n % i == 0:\n            n = n // i\n        else:\n            break\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        if n & (n - 1) == 0:\n            return False\n        else:\n            return is_Sum_Of_Powers_Of_Two(n + 1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # To check if the given number is a power of 2, we can check if there exists a number x such that n = 2^x.\n    # We can use binary search to find the smallest power of 2 greater than or equal to n.\n    def is_power_of_two(n):\n        return n!= 0 and ((n & (n-1)) == 0)\n\n    left, right = 1, 1 << 31\n    while left <= right:\n        mid = left + (right - left) // 2\n        if is_power_of_two(mid) and (n == 2**mid):\n            return True\n        elif is_power_of_two(mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # function to check whether a number is power of 2\n    def is_power_of_two(num):\n        return num & (num - 1) == 0\n\n    # function to calculate the sum of non-zero powers of 2\n    def sum_of_powers_of_two(num):\n        return 2 if num == 0 else (2 + sum_of_powers_of_two(num >> 1))\n\n    # function to check whether a number can be represented as sum of non-zero powers of 2 or not\n    def check(num):\n        if is_power_of_two(num):\n            return False\n        return num == sum_of_powers_of_two(num)\n\n    # calling the check function and returning the result\n    return check(n)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    # check if the number is negative\n    if n < 0:\n        return False\n    \n    # create a dictionary to store the powers of 2\n    powers = {}\n    \n    # iterate through the numbers from 2 to the square root of n\n    for i in range(2, int(n**0.5)+1):\n        # check if i is a power of 2\n        if n % i == 0:\n            # if it is, check if it's already in the dictionary\n            if i in powers:\n                return False\n            else:\n                # if not, add it to the dictionary and continue with the next number\n                powers[i] = True\n    \n    # if we've made it this far, the number can be represented as a sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # To check whether n is a power of 2 or not\n    def is_power_of_two(num):\n        return (num & (num - 1)) == 0\n\n    # Check whether n is a power of 2 or not\n    if is_power_of_two(n):\n        print(\"n can be represented as sum of non-zero powers of 2.\")\n    else:\n        print(\"n cannot be represented as sum of non-zero powers of 2.\")"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            count += num & 1\n            num >>= 1\n        return count\n\n    def two_pow(num):\n        count = 0\n        while num > 0:\n            count += 1\n            num >>= 1\n        return 1 << count\n\n    def sum_of_powers_of_two(n):\n        total = 0\n        while n > 0:\n            if n & 1 == 1:\n                total += two_pow(count_ones(n))\n            n >>= 1\n        return total\n\n    # Check if n can be represented as sum of non-zero powers of 2\n    if n == sum_of_powers_of_two(n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return True\n    if n & (n-1) == 0:\n        return True\n    if n & (n-2) == 0:\n        return True\n\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    if count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # use the formula for the circumference of a circle\n    circumference = 2 * 3.14 * r\n    # return the value of the circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\n\nprint(circle_circumference(5))"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return list(set(flattened_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set([num for sublist in test_list for num in sublist])"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for num in sublist:\n            result.append(num)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten_helper(lst):\n        flat_lst = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_lst.extend(flatten_helper(item))\n            else:\n                flat_lst.append(item)\n        return flat_lst\n    \n    return set(flatten_helper(test_list))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    unique_numbers = list(set(flattened_list))\n    return unique_numbers"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        if isinstance(item, list):\n            result.update(extract_singly(item))\n        else:\n            result.add(item)\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = [num for sublist in test_list for num in sublist]\n    return flat_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    def pancake_sort_helper(arr, start, end):\n        if start >= end:\n            return\n        arr[start], arr[end] = arr[end], arr[start]\n        pancake_sort_helper(arr, start + 1, end - 1)\n\n    pancake_sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Reverse the sublist from the current index to the end\n        for j in range(i, n-1, -1):\n            nums[i+j], nums[j] = nums[j], nums[i+j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # find the maximum element in the first i elements\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # swap nums[i] with nums[max_idx]\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # print the sorted nums\n        print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def sort_helper(nums, start, end):\n        if start >= end:\n            return\n        for i in range(start, end + 1):\n            min_idx = i\n            for j in range(start, end):\n                if nums[j] < nums[min_idx]:\n                    min_idx = j\n            nums[i], nums[min_idx] = nums[min_idx], nums[i]\n        sort_helper(nums, start + 1, end)\n\n    sort_helper(nums, 0, len(nums) - 1)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Helper function to find the size of the pancake\n    def find_pancake_size(n):\n        # Initialize the size of the pancake to 1\n        size = 1\n        # Iterate over the numbers from 1 to n-1\n        for i in range(1, n):\n            # Check if i can be included in the pancake\n            if n % i == 0:\n                # If i can be included in the pancake, increment the size\n                size += 1\n            else:\n                # If i cannot be included in the pancake, break the loop\n                break\n        return size\n\n    # Iterate over the numbers in the list and find their pancake size\n    pancake_sizes = [find_pancake_size(i) for i in range(1, len(nums)+1)]\n\n    # Iterate over the pancake sizes and permute the list\n    for size in pancake_sizes:\n        # Create a list of indices to permute\n        indices = [i for i in range(len(nums)-size)]\n        # Randomly shuffle the indices\n        random.shuffle(indices)\n        # Permute the list using the indices\n        nums = [nums[i] for i in indices]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Loop through the list of numbers\n    for i in range(len(nums)):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, len(nums)):\n            if nums[max_index] < nums[j]:\n                max_index = j\n        # Swap the maximum element with the first element in the unsorted part of the list\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using pancake sort.\n    '''\n    n = len(nums)\n\n    # Perform pancake sort\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the unsorted part\n        max_idx = i\n        for j in range(i):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the element at the beginning of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the sublist from the end to the maximum element (in-place)\n        for j in range(i-1, max_idx-1, -1):\n            nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    for i in range(n-1, 0, -1):\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the elements\n        nums[i], nums[max_index] = nums[max_index], nums[i]"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function takes three lists as input and counts the number of items that are identical in the same position of each list.\n\n    :param list1: list of integers\n    :param list2: list of integers\n    :param list3: list of integers\n    :return: integer\n    \"\"\"\n\n    # initialize a dictionary to store the frequency of each item in the lists\n    freq_dict = {}\n\n    # iterate through each item in the first list and increment its frequency in the frequency dictionary\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # iterate through each item in the second list and increment its frequency in the frequency dictionary\n    for item in list2:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # iterate through each item in the third list and increment its frequency in the frequency dictionary\n    for item in list3:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # iterate through the frequency dictionary and count the number of items that have frequency equal to 2\n    count = 0\n    for freq in freq_dict.values():\n        if freq == 2:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in the tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if type(item) == list:\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and finds the maximum difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns the maximum difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function finds the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize max_diff with the first element of the array\n    max_diff = arr[0]\n\n    # Iterate through the array and compare each element with the previous element\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    max_diff = 0 \n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff "
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize two variables to store the solution\n    x_sol = None\n    y_sol = None\n    \n    # Loop through all possible values of x and y\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            # Check if the solution satisfies the given condition\n            if a * x + b * y == n:\n                # If it does, update the solution variables\n                x_sol = x\n                y_sol = y\n    \n    # If a solution was found, return it as a tuple\n    if x_sol is not None and y_sol is not None:\n        return (x_sol, y_sol)\n    # If no solution was found, return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    x = 0\n    y = 0\n    while x**2 + y**2 <= n:\n        x += 1\n    if x**2 + y**2 == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    elif a == 0:\n        return None\n    else:\n        x = -n / b\n        y = -a * x\n        if y % 1 == 0:\n            return (int(x), int(y))\n        else:\n            return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n\n    # set up variables for x and y\n    x = 0\n    y = n // b\n\n    # check if x and y are integers\n    if x.is_integer() and y.is_integer():\n        return (x, y)\n\n    # if not, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    else:\n        x = (-n + b**0.5) / a\n        y = (-n - b**0.5) / a\n        return (int(x), int(y))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x_1 = (-b + n//a**2) / (2*a)\n    x_2 = (-b - n//a**2) / (2*a)\n    y_1 = (-a + n//b**2) / (2*b)\n    y_2 = (-a - n//b**2) / (2*b)\n    if x_1**2 + y_1**2 == x_2**2 + y_2**2:\n        return (int(x_1), int(y_1)), (int(x_2), int(y_2))\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = (-b + n//a) // a\n    x2 = (-b - n//a) // a\n    y1 = (a * x1) // b\n    y2 = (a * x2) // b\n    return (x1, y1), (x2, y2) if (x1!= x2) else None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # check if a or b is 0\n    if a == 0 or b == 0:\n        return None\n    \n    # initialize variables\n    x1 = 0\n    y1 = 0\n    x2 = 1\n    y2 = 1\n    \n    # calculate coefficients and check if solution exists\n    while x1 <= n/a or x2 <= n/b:\n        if a*x1 + b*y1 == n:\n            return (x1, y1)\n        elif a*x2 + b*y2 == n:\n            return (x2, y2)\n        \n        # update values of x1 and x2\n        x1 += 1\n        x2 += 1\n        \n        # update values of y1 and y2\n        y1 += 1\n        y2 += 1\n    \n    # return None if no solution exists\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # calculate the discriminant\n    disc = b**2 - 4*a*n\n\n    # check if there is no solution\n    if disc < 0:\n        return None\n\n    # calculate the roots of the discriminant\n    x1 = (-b + disc**0.5) / (2*a)\n    x2 = (-b - disc**0.5) / (2*a)\n\n    # sort the roots in ascending order\n    x1, x2 = sorted((x1, x2))\n\n    # check if the solution satisfies the given condition\n    if a*x1 + b*x2 == n:\n        return (x1, x2)\n\n    # if no solution satisfies the given condition, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are integers\n    if not isinstance(a, int) or not isinstance(b, int):\n        return None\n\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if there is a solution\n    if d < 0:\n        return None\n    elif d == 0:\n        return (int((-b) / (2*a)),)\n    else:\n        # Calculate the two solutions\n        x1 = int((-b + d**0.5) / (2*a))\n        x2 = int((-b - d**0.5) / (2*a))\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input, list1 and list2. It removes all elements from list1 present in list2.\n\n    Args:\n        list1 (list): A list of elements to be removed from.\n        list2 (list): A list of elements that are to be removed.\n\n    Returns:\n        list: A new list without the elements present in list2.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5], [2, 4, 6])\n        [1, 3, 5]\n\n        >>> remove_elements([1, 2, 3, 4, 5], [1, 3, 5])\n        [2, 4]\n\n        >>> remove_elements([1, 2, 3, 4, 5], [5])\n        []\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Convert both lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Remove elements in set2 from set1 and convert back to list\n    result = list(set1.difference(set2))\n\n    return result"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def fibonacci_sum(n):\n    \"\"\"\n    Calculate the sum of the first n terms in the Fibonacci series.\n    \"\"\"\n    a, b = 0, 1\n    total = 0\n\n    for i in range(n):\n        total += a\n        a, b = b, a + b\n\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    series_sum = 0\n    i = 0\n    while i <= n // 2:\n        series_sum += n - 2 * i\n        i += 1\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    else:\n        x = n - 1\n        while x >= 0:\n            sum_series_temp = sum_series(n-x) + 2*x\n            return sum_series_temp\n        return 0"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n % 2 == 0:\n        return sum_series(n // 2) + (n - sum_series(n // 2) - 1) // 2 * (n - sum_series(n // 2) - 1)\n    else:\n        return (n - 1) * (sum_series(n // 2) + 1) // 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        n = n // 2 + 1\n    \n    result = 0\n    i = 0\n    \n    while n-2*i >= 0:\n        result += (n-2*i)\n        i += 1\n        \n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n//2):\n        s += n - 2*i\n    return s"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    while n - 2*i >= 0:\n        n -= 2*i\n        i += 1\n    return i * (n + 1) / 2"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += (s/2)*(tan(angle))**2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    perimeter = s * l\n\n    # Calculate the area of each triangle\n    area = perimeter * tan(pi/l)\n\n    # Calculate the total area of the polygon\n    total_area = area * l\n\n    return total_area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the angle between adjacent sides\n    theta = 2*pi/l\n\n    # Calculate the sum of the sine of each angle\n    area = 0.5*s\n    for i in range(l):\n        area += area_polygon(s, l-1)*sin((i+1/2)*theta)\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((2 * pi * i) / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l) / 2\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s * tan(pi / l)) ** 2\n    return round(area, 2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) / (4*tan(pi/l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = pi / 5  # approximation of the area of a triangular triangle\n    area = a * s * l\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    def sum_divisors(num):\n        \"\"\"\n        Returns the sum of the divisors of a given number.\n        \"\"\"\n        divisors = [1]\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if num // i!= i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    if sum_divisors(n) == sum_divisors(n + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n//i\n    return divisor_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            if n//i!= i:\n                div_sum += n//i\n\n    return div_sum == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n using a for loop\n    sum_div = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # calculate the sum of divisors of n using a lambda function\n    sum_div_lambda = sum(lambda i: 0 if n % i == 0 else 1 for i in range(1, int(math.sqrt(n))+1))\n    # check if the two sums are equal\n    if sum_div == sum_div_lambda:\n        print(\"The sum of divisors of\", n, \"are the same.\")\n    else:\n        print(\"The sum of divisors of\", n, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Function to calculate the sum of divisors\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    # Calculate the sum of the divisors of n\n    sum_divisors_n = sum_of_divisors(n)\n\n    # Calculate the sum of the divisors of n + 1\n    sum_divisors_n_plus_1 = sum_of_divisors(n+1)\n\n    # Check if the sum of the divisors of n and n + 1 are the same\n    if sum_divisors_n == sum_divisors_n_plus_1:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", n, \"and\", n+1, \"are not the same.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Find the sum of the divisors of n\n    sum_div = sum(set(divisors(n)))\n    \n    # Check if the sum of the divisors of n is equal to n\n    if sum_div == n:\n        return True\n    else:\n        return False\n\ndef divisors(n):\n    '''\n    Return a list of all the divisors of n.\n    '''\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i!= n//i:\n                divs.append(i)\n            if i!= (n//i)*i:\n                divs.append(n//i)\n    return divs"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_divisors(num):\n        '''\n        Calculate the sum of the divisors of a given number.\n        '''\n        div_list = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_list.append(i)\n                if num // i!= i:\n                    div_list.append(num // i)\n        return sum(div_list)\n\n    if sum_divisors(n) == sum_divisors(n//2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 2:\n        return False\n    \n    div_list = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if n // i!= i:\n                div_list.append(n // i)\n    \n    div_sum_set = set(div_list)\n    return len(div_sum_set) == 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n//i!= i:\n                divisors.append(n//i)\n    # Check if the sum of the divisors is the same\n    return all(x == sum(divisors) for x in divisors)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    # Calculate the sum of the divisors of n\n    div_sum = sum(divisors(n))\n    \n    # Calculate the sum of the divisors of n\n    div_sum_prime = sum(divisors(n, True))\n    \n    # If the sum of the divisors of n and n is equal, then return True\n    if div_sum == div_sum_prime:\n        return True\n    else:\n        return False\n\ndef divisors(n, prime=False):\n    '''\n    Calculate the divisors of n.\n    If prime is True, only return prime divisors.\n    '''\n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if prime and i > 1:\n                div_list.append(i)\n            if not prime:\n                div_list.append(n//i)\n    if n > 1:\n        div_list.append(n)\n    return div_list"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Initialize an empty dictionary to store count of characters at each position in the alphabet\n    count_dict = {chr(i): 0 for i in range(ord('a'), ord('z')+1)}\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is in the dictionary\n        if char in count_dict:\n            # Increment the count in the dictionary\n            count_dict[char] += 1\n    # Return the dictionary as a list of tuples, where each tuple contains a character and its count\n    return [(key, value) for key, value in count_dict.items()]"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and counts the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # convert the input string to lowercase\n    str1 = str1.lower()\n\n    # initialize a dictionary to store the count of characters at each position in the alphabet\n    char_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n\n    # loop through the input string and increment the count of characters at each position in the alphabet\n    for char in str1:\n        if char.isalpha():\n            char_count[char] += 1\n\n    # print the character counts\n    for key, value in char_count.items():\n        print(key, value)\n"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # create a dictionary to store the count of characters\n    char_count = {}\n\n    # loop through the string and count the characters at the same position in the English alphabet\n    for i in range(26):\n        char_count[chr(65+i)] = 0\n\n    # loop through the string and count the characters at the same position in the English alphabet\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n\n    # return the dictionary containing the count of characters\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Iterate through the string\n    for char in str1:\n        # If the character is a letter, increment its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the count of each character\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # initialize a dictionary to store the count of each character in str1\n    char_count = {}\n    for char in str1.upper():\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through str1 again, counting the number of characters that occur at the same position in the string as in the English alphabet\n    count = 0\n    for i, char in enumerate(str1):\n        if char == char_count[char.upper()]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in 'abcdefghijklmnopqrstuvwxyz':\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert all characters in the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the position of each character\n    char_position = {}\n\n    # Loop through each character in the string\n    for i in range(26):\n        # Get the ASCII code of the current character\n        ascii_code = ord('a') + i\n\n        # If the character is a letter and its position in the English alphabet is not already stored in the dictionary, add the position to the dictionary\n        if ord('a') + i >= 97 and ord('a') + i <= 122 and ascii_code not in char_position:\n            char_position[ascii_code] = i\n\n    # Initialize a counter to store the number of occurrences of each character at the same position in the string\n    count = {}\n\n    # Loop through each character in the second string\n    for char in str1:\n        # Get the ASCII code of the current character\n        ascii_code = ord(char)\n\n        # If the character is a letter and its position in the English alphabet is already stored in the dictionary, increment the counter in the dictionary\n        if ord('a') + char_position[ascii_code] in count:\n            count[ord('a') + char_position[ascii_code]] += 1\n        # If the character is not a letter, skip it\n        else:\n            continue\n\n    # Return the number of occurrences of each character at the same position in the string\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # initialize a dictionary to store the count of each character\n    char_count = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # convert the character to lowercase for case insensitivity\n        char = char.lower()\n        # if the character is in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # return the count of each character that occurs at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize the count dictionary\n    count_dict = {}\n\n    # Iterate through each character in the string\n    for i in range(len(str1)):\n        # Get the current character and its position in the string\n        current_char = str1[i]\n        current_position = i\n\n        # Check if the current character is a letter\n        if current_char.isalpha():\n            # Convert the current character to lowercase\n            current_char = current_char.lower()\n\n            # Check if the current character is already in the count dictionary\n            if current_char in count_dict:\n                # If it is, increment its count by 1\n                count_dict[current_char] += 1\n            else:\n                # If it's not, add it to the dictionary with a count of 1\n                count_dict[current_char] = 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0 and A[j] ^ A[i] == 0: \n                count += 1\n                \n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # Find the minimum number of bits required to represent the largest power of 2\n    max_bits = 0\n    while 2**max_bits <= n:\n        max_bits += 1\n\n    # Find the smallest power of 2 greater than or equal to n\n    power = int('1' * max_bits, 2)\n\n    # Check if the smallest power of 2 is equal to or greater than n\n    if power >= n:\n        return power\n    else:\n        return power + (2**max_bits - n)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 * next_power_of_2(n // 2)\n\nprint(next_power_of_2(8)) # Output: 16\nprint(next_power_of_2(9)) # Output: 16\nprint(next_power_of_2(12)) # Output: 16\nprint(next_power_of_2(13)) # Output: 16\nprint(next_power_of_2(16)) # Output: 16"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the highest bit set in n\n    highest_bit = 0\n    while highest_bit <= n:\n        highest_bit <<= 1\n    \n    # Return the result of 2 raised to the power of (n - highest_bit + 1)\n    return 2**(n - highest_bit + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    \n    # Convert n to binary and find the binary representation of the next power of 2 \n    binary_n = bin(n)[2:]\n    binary_power_of_2 = bin(2**len(binary_n))[2:]\n    \n    # Find the length of the longest common prefix of the two binary representations\n    i = 0\n    while i < len(binary_power_of_2) and i < len(binary_n) and binary_power_of_2[i] == binary_n[i]:\n        i += 1\n    \n    # Convert the common prefix to an integer and return it to the caller\n    return 2**i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # Initialize power of 2\n    power = 1\n    \n    # Loop until power is greater than or equal to n\n    while power < n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Convert n to binary representation and count the number of 1s\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    # Calculate the smallest power of 2 greater than or equal to n\n    power = 1 << (count - 1)\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n < 0:\n        return None\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n    # Initialize a variable to store the result\n    result = 1\n    # Iterate over the binary representation and set the corresponding bits of the result to 1\n    for bit in binary:\n        if bit == '1':\n            result *= 2\n        else:\n            break\n    # Add 1 to the result\n    result += 1\n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n):\n    # Find the next power of 2 greater than or equal to n\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Return the power of 2\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize a variable to keep track of the power of 2\n    power = 0\n    \n    # loop through all the powers of 2 from 1 to n\n    while n > 1:\n        # if n is a power of 2, increment the power variable\n        if n & 1 == 0:\n            power += 1\n        # shift n to the right by 1 bit\n        n >>= 1\n        \n    # return the power of 2 greater than or equal to n\n    return 1 << power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        while n & (n - 1)!= 0:\n            n = n | (n & -n)\n        return n << 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    This function takes two parameters - a list and a number.\n    It returns the frequency of the number in the list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_range = 0\n    for i in range(m, n+1):\n        sum_of_range += list1[i]\n    return sum_of_range\n"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the input list is not empty\n    if len(list1) == 0:\n        print(\"The list is empty\")\n        return\n\n    # Check if the input indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1):\n        print(\"Invalid indices\")\n        return\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the list and add numbers in the range to the sum variable\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    # Print the sum\n    print(\"The sum of numbers in the given range is:\", sum)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i-1]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m < 0 or m > len(list1) or n < 0 or n > len(list1):\n        return \"Invalid indices\"\n    else:\n        return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"Invalid range\"\n    else:\n        sum = 0\n        for i in range(m, n+1):\n            if i in list1:\n                sum += i\n        return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = a / 2  # length of the side of the pentagon\n    perimeter = 5 * (s**2 + s)\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the sine and cosine of each side of the pentagon\n    sina = math.sin(math.radians(a))\n    cosa = math.cos(math.radians(a))\n\n    # Calculate the perimeter of the pentagon using the formula:\n    # p = 5 * (s + cos)\n    perimeter = 5 * (sina + cosa)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of a regular pentagon using the formula:\n    # 5 * a^2\n    # Use the math module to calculate the square root of 5\n    # Then multiply it by the length of the base\n    return 5 * math.sqrt(5) * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Formula to find the perimeter of a regular pentagon\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start = 0\n    while True:\n        index = s.find('std', start)\n        if index == -1:\n            break\n        else:\n            count += 1\n            start = index + 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    std_count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            std_count += 1\n    return std_count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    \n    while True:\n        index = s.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 3\n    \n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the same data type or not.\n    \"\"\"\n    # Check if there are at least two elements in the tuple\n    if len(test_tuple) < 2:\n        return False\n    \n    # Get the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # Loop over the remaining elements\n    for element in test_tuple[1:]:\n        # Check if the current element has the same data type as the first element\n        if type(element)!= data_type:\n            return False\n    \n    # If we reach this point, all elements in the tuple have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Checks if all elements in a tuple have the same data type or not.\n    \"\"\"\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n    return len(set(types)) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # create a list of data types in the tuple\n    data_types = [type(x) for x in test_tuple]\n\n    # create a dictionary to store data types and their count\n    data_type_count = {}\n\n    # iterate through the data types and count them\n    for data_type in data_types:\n        if data_type in data_type_count:\n            data_type_count[data_type] += 1\n        else:\n            data_type_count[data_type] = 1\n\n    # check if all the data types are the same\n    if len(data_type_count) == 1:\n        # if all data types are the same, return True\n        return True\n    else:\n        # if not, return False\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, False otherwise.\n    '''\n    types = set()\n    for element in test_tuple:\n        if isinstance(element, int):\n            types.add(int)\n        elif isinstance(element, float):\n            types.add(float)\n        elif isinstance(element, str):\n            types.add(str)\n        elif isinstance(element, bool):\n            types.add(bool)\n        else:\n            return False\n    return len(types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # loop through the tuple elements and check if all the elements have the same data type or not\n    for element in test_tuple:\n        if type(element)!= type(first_element):\n            # if any element has a different data type, return False\n            return False\n\n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for item in test_tuple:\n        types.append(type(item))\n    return types[0] == types[1] and types[0] == types[2] and types[0] == types[3]"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # first, check if there are any elements in the tuple\n    if not test_tuple:\n        return \"The tuple is empty\"\n    \n    # get the data type of the first element in the tuple\n    first_type = type(test_tuple[0])\n    \n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple:\n        # if the data type of any element is different from the first element, return False\n        if type(element)!= first_type:\n            return False\n    \n    # if all the elements have the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if data_type!= type(test_tuple[i]):\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize variables\n    count = 0\n    curr_count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # Check if the current element is equal to the given element\n        if arr[i] == x:\n            # Increment the count of the current element\n            count += 1\n            \n            # If the count is equal to half of n, it means the element is the majority element\n            if count == n // 2:\n                return True\n        \n        # If the current element is not equal to the given element, reset the count and move on to the next element\n        else:\n            count = 0\n            \n    # If the loop completes without finding the majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize a count variable to keep track of the number of occurrences of x\n    count = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        \n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n        # If the count is equal to n/2, return True\n        if count == n//2:\n            return True\n    \n    # If the loop completes without finding a majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    # initialize variables\n    count = 0\n    majority = False\n\n    # loop through array and check for majority element\n    for num in arr:\n        if num == x:\n            count += 1\n        elif count > n // 2:\n            majority = True\n            break\n\n    return majority"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize variables to keep track of the count and the frequency of the element\n    count = 0\n    frequency = 0\n\n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to the target element, increment the count and the frequency\n        if arr[i] == x:\n            count += 1\n            frequency += 1\n        # If the current element is less than the target element, decrement the frequency\n        else:\n            frequency -= 1\n\n        # If the frequency becomes zero, return False (since the target element is not the majority)\n        if frequency == 0:\n            return False\n\n    # If the loop completes without finding the target element, return True (since the target element is the majority)\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    # Initialize variables\n    count = 0\n    majority = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # Increment count if element is equal to x\n        if arr[i] == x:\n            count += 1\n        \n        # If count is greater than n/2, update majority\n        if count > n // 2:\n            majority = x\n    \n    # Check if x is the majority element\n    if majority == x:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= (n-1) # clearing all bits except the least significant one\n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n\n    # Convert the binary representation of n to a list of digits\n    binary_rep = [int(digit) for digit in bin(n)[2:]]\n\n    # Count the number of set bits in the binary representation\n    count = 0\n    for digit in binary_rep:\n        count += digit\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create an empty list to store the odd values\n    odd_values = []\n\n    # Loop through each character in the string\n    for char in str:\n        # Check if the index value of the character is odd\n        if (str.index(char) + 1) % 2 == 1:\n            # If the index value is odd, add the character to the odd_values list\n            odd_values.append(char)\n\n    # Convert the odd_values list to a string and return it\n    return ''.join(odd_values)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string += str[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    # create a list of indexes for odd characters\n    odd_indexes = [i for i in range(len(str)) if i % 2 == 1]\n    # iterate over the list and remove the characters at the odd indexes\n    new_str = ''.join([str[i] for i in range(len(str)) if i not in odd_indexes])\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i, c in enumerate(str):\n        if i % 2 == 1:\n            result += c\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    odd_index_chars = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            odd_index_chars.append(str[i])\n    return ''.join(odd_index_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a new string with empty characters to store odd indices\n    new_str = \"\"\n    \n    # loop through each character in the given string\n    for char in str:\n        # check if the index of the character is odd\n        if int(char) % 2!= 0:\n            # add the character to the new string if it's odd\n            new_str += char\n    \n    # return the new string with only odd characters\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n\n    # create a list of characters\n    char_list = list(str)\n\n    # iterate through the list and remove odd characters\n    for i in range(len(char_list)):\n        if i % 2!= 0:\n            char_list.pop(i)\n\n    # convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum number.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as input and returns the minimum of them.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function checks whether all the bits are unset in the given range or not.\n\n    Parameters:\n    n (int): The given integer.\n    l (int): The left bound of the range.\n    r (int): The right bound of the range.\n\n    Returns:\n    bool: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    if l == 0 and r == 0:\n        return True\n    elif l == 0:\n        return (r - 1) & n == r - 1\n    elif r == 0:\n        return (n - 1) & l == n - 1\n    else:\n        return ((n - 1) & l) == ((n - 1) & r)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l,r+1):\n        count += n & (1 << i) # check the ith bit of n \n    return (count == 0) # return True if all the bits are set and False otherwise"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_set = True\n    for i in range(l, r+1):\n        if bin(n & (1<<i-1)).count('1')!= 0:\n            all_set = False\n            break\n    return all_set"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n//2,l,r) and all_Bits_Set_In_The_Given_Range(n//2,r+1,l)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Create a binary string of n bits with all bits set to 1\n    binary_string = '1' * n\n\n    # Check whether all bits are unset in the given range or not\n    if binary_string[l:r+1] == '0' * (r-l+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        # Check if all the bits are set in the current number\n        if bin(i).count('1') == len(bin(i)):\n            return True\n    return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Check whether all the bits in the range [l, r] are set or not.\n    \"\"\"\n    # check whether all the bits from l to r are set or not\n    for i in range(l, r+1):\n        # if any bit is unset, return False\n        if (n & (1 << i)) == 0:\n            return False\n    # if all the bits from l to r are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(n & (1 << i)).count('1')!= 32:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    if l > r:\n        return True\n    \n    bit_set = [0] * (r - l + 1)\n    \n    for i in range(l, r+1):\n        bit_set[i - l] = n & (1 << i)\n    \n    for i in bit_set:\n        if i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize count variable\n    count = 0\n    # Loop through all the bits of the given range\n    for i in range(l, r+1):\n        # Check if the ith bit is set or not\n        if n & (1 << i):\n            # Increment count if the ith bit is set\n            count += 1\n        # If count becomes greater than n, it means that all the bits are set in the given range\n        if count > n:\n            return True\n    # If no bit is set, return True\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create two empty lists to store negative and positive elements, respectively\n    neg_list = []\n    pos_list = []\n    \n    # Iterate through the given array\n    for num in arr:\n        \n        # Check if the element is negative or positive\n        if num < 0:\n            neg_list.append(num)\n        else:\n            pos_list.append(num)\n    \n    # Sort the negative elements in ascending order\n    neg_list.sort()\n    \n    # Sort the positive elements in descending order\n    pos_list.sort(reverse=True)\n    \n    # Merge the two sorted lists into a single sorted list\n    merged_list = neg_list + pos_list\n    \n    # Return the merged list with the first n elements\n    return merged_list[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    \n    # Initialize variables to keep track of the current position and the negative counter\n    current_pos = 0\n    neg_count = 0\n    \n    # Loop through the array and move all negative elements to the front, and all positive elements to the end\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            # Move the negative elements to the front\n            for j in range(neg_count):\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            \n            # Move the positive elements to the end\n            for j in range(i-neg_count, n):\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            \n            # Reset the negative counter for the next iteration\n            neg_count = 0\n    \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Create a new array to store the negative and positive elements\n    neg = [0] * n\n    pos = [0] * n\n    \n    # Separate the elements into positive and negative groups\n    for num in arr:\n        if num < 0:\n            neg[neg.index(num)] += 1\n        else:\n            pos[pos.index(num)] += 1\n    \n    # Merge the positive and negative groups into a single array\n    merged = []\n    merged.extend(neg)\n    merged.extend(pos)\n    \n    # Shuffle the merged array to preserve the relative order of negative and positive elements\n    import random\n    random.shuffle(merged)\n    \n    # Return the shuffled merged array\n    return merged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # create two empty lists to store negative and positive elements\n    negative = []\n    positive = []\n\n    # loop through the input array\n    for element in arr:\n        # if the element is negative, add it to the negative list\n        if element < 0:\n            negative.append(element)\n        # otherwise, add it to the positive list\n        else:\n            positive.append(element)\n\n    # merge the two lists into a single list and sort it in reverse order\n    rearranged_list = negative + positive\n    rearranged_list.sort(reverse=True)\n\n    # return the re-arranged list\n    return rearranged_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize variables for keeping track of the negative and positive elements\n    neg = []\n    pos = []\n    \n    # Loop through the array and add elements to the appropriate lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n    \n    # Combine the two lists into a single array\n    combined = neg + pos\n    \n    # Shuffle the array using the Fisher-Yates shuffle algorithm\n    for i in range(len(combined)):\n        j = i + random.randint(0, len(combined) - i - 1)\n        combined[i], combined[j] = combined[j], combined[i]\n    \n    return combined"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two empty lists for negative and positive elements\n    neg_lst = []\n    pos_lst = []\n\n    # Loop through the array and add elements to the appropriate lists\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            neg_lst.append(arr[i])\n        else:\n            pos_lst.append(arr[i])\n\n    # Re-arrange the negative and positive lists into the original array\n    arr[:n] = neg_lst + pos_lst\n\n    # Return the final array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    for i in range(n):\n        arr[i] = negative[i]\n    for i in range(n, len(arr)):\n        arr[i] = positive[i-n]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers for positive and negative elements\n    p = 0\n    n = n - 1\n\n    # iterate over the array from the beginning to the end\n    for i in range(n, -1, -1):\n\n        # if the element at the current index is negative, swap it with the element at the positive pointer\n        if arr[i] < 0:\n            arr[i], arr[p] = arr[p], arr[i]\n            p += 1\n\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # initialize two lists for positive and negative elements\n    pos = []\n    neg = []\n    \n    # iterate through the array and append positive and negative elements to their respective lists\n    for i in range(n):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n            \n    # append the remaining elements to the end of the respective lists\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n            \n    # join the two lists and return the result\n    return pos + neg"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in arr:\n        if i > 0:\n            positive.append(i)\n        elif i < 0:\n            negative.append(i)\n    for i in range(n):\n        arr[i] = negative.pop(0)\n    for i in range(n, len(arr)):\n        arr[i] = positive.pop(0)\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    return ''.join([char if char =='' else char for char in str1])"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # split the string into a list of words\n    words = str1.split()\n    # loop through the words and replace any blank spaces with the character\n    for i in range(len(words)):\n        if words[i] == '':\n            words[i] = char\n    # join the list of words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return ''.join(char if char.strip() =='' else str1[i] for i in range(len(str1)))"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # Remove all spaces from the string\n    str1 = str1.replace(\" \", \"\")\n    # Replace any consecutive spaces with the specified character\n    return str1.replace(\"  \", char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for i in range(n)]\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return [heapq.heappop(list1) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # sort the list in descending order\n    list1.sort(reverse=True)\n    # get the first n items from the sorted list\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n    \"\"\"\n    return heapq.nlargest(n, lst)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a max-heap of size n to keep track of the n largest items\n    max_heap = [0] * n\n    heapq.heapify(max_heap)\n\n    # Iterate through the list and add the items to the max-heap\n    for item in list1:\n        heapq.heappush(max_heap, item)\n\n    # Extract the n largest items from the max-heap and return them as a list\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Convert the input list to a min-heap\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n\n    # Extract the n largest items from the heap and return as a list\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(max_heap))\n\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2*r*h\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cylinder(r, h):\n    '''\n    This function calculates the lateral surface area of a cylinder.\n    r: radius of the cylinder\n    h: height of the cylinder\n    '''\n    area = 2 * (r ** 2) * h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*h\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r*h) - (2*math.pi*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    A = 2 * r * h\n    return A"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*r**2*h # calculate lateral surface area using formula for a cylinder\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # calculate the volume\n    return v"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n |= n >> 1   # Set all even bits to 1\n    n |= n >> 2   # Set all even bits to 1\n    n |= n >> 4   # Set all even bits to 1\n    n |= n >> 8   # Set all even bits to 1\n    n |= n >> 16  # Set all even bits to 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the even bits of n\n    even_bits = []\n\n    # loop through each bit of n\n    for i in range(31, -1, -1):\n        # if the bit is even, append it to the list of even bits\n        if (n >> i) & 1 == 0:\n            even_bits.append(i)\n\n    # loop through the list of even bits and set them to 1 in n\n    for i in even_bits:\n        n |= (1 << i)\n\n    # return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    def set_even_bit(n):\n        '''\n        Helper function to set even bits of a number.\n        '''\n        while n:\n            if n & 1:\n                n |= 1 << 1\n            else:\n                n >>= 1\n        return n\n\n    return set_even_bit(n)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of n\n    even_bits = 0\n    # loop through all the bits of n\n    for i in range(32): \n        # if the i-th bit of n is even, set the corresponding bit of even_bits to 1\n        if (n >> i) & 1 == 0: \n            even_bits |= (1 << i)\n    # return the even_bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it to 1, otherwise leave it as 0\n        if int(bit) % 2 == 0:\n            result |= 1 << int(bit)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Loop through each bit in the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & (1 << i):\n            # If it is, set the corresponding bit in the result to 1\n            result |= (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Iterate over all bits in the binary representation of n\n    for bit in bin(n)[2:]:\n        # If the current bit is even, set it to 1\n        if int(bit) == 0:\n            n = n & ~(2 ** int(bit))\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Args:\n    n (int): The number whose even bits need to be set.\n\n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n\n    # Initialize a variable to hold the result\n    result = 0\n\n    # Loop through each bit in the binary representation of n\n    for i in range(8):\n        # Get the i-th bit of n\n        bit = n & (1 << i)\n\n        # If the bit is even, set it to 1 (1 << i is a power of 2)\n        if bit:\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        bit_mask = 1 << (n % 32)\n        n = n >> 1\n        if bit_mask & n:\n            n = n ^ bit_mask\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Loop through each bit in the given number\n    for i in range(32):\n        # Check if the current bit is even\n        if (n & (1 << i))!= 0:\n            # Set the current bit in the result\n            result |= (1 << i)\n            \n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the occurrence of each tuple\n    occurrences = {}\n\n    # Loop through each tuple in the list\n    for tup in test_list:\n\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # If it is, increment the count\n            occurrences[tup] += 1\n        else:\n            # If not, add the tuple to the dictionary with a count of 1\n            occurrences[tup] = 1\n\n    # Return the dictionary of occurrence counts\n    return occurrences"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # Loop through the list of tuples and count the number of times each tuple appears in the list\n    for tup in test_list:\n        count = count_dict.get(tup, 0)\n        count_dict[tup] = count + 1\n\n    # Return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item not in count_dict:\n            count_dict[item] = 1\n        else:\n            count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for tup in test_list:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = list(set(test_list))\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n            \n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment the count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # otherwise, add the tuple and its count to the dictionary\n        else:\n            count_dict[tup] = 1\n\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    # initialize an empty set to store the count of substrings \n    count = set() \n\n    # loop through all possible substrings of the given string \n    for i in range(len(str) + 1): \n        for j in range(i, len(str) + 1): \n            # if the substring is not empty, add it to the set of substrings \n            if j > i and str[i:j] not in count: \n                count.add(str[i:j]) \n    # return the size of the set as the count of substrings \n    return len(count) "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n            \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Initialize a variable to store the current substring\n        substring = ''\n\n        # Loop through each character from the current position to the end of the string\n        for j in range(i, len(str)):\n            # Add the current character to the substring\n            substring += str[j]\n\n            # Check if the substring is non-empty\n            if substring:\n                # Increment the count of non-empty substrings\n                count += 1\n\n    # Return the final count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    # Create a list to store the substrings\n    substrings = []\n    \n    # Loop through all possible starting positions\n    for i in range(len(str)+1):\n        # Check if the current substring is non-empty\n        if i > 0 and i <= len(str):\n            substring = str[i-1:i]\n            # Check if the substring is not already in the list\n            if substring not in substrings:\n                substrings.append(substring)\n    \n    # Return the number of substrings\n    return len(substrings)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    This function takes a string as input and returns the number of non-empty substrings in the string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_str = str[i:j]\n            if len(sub_str) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i + 1, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str) + 1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = set()\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            continue\n        sequences.add(tuple([i, i // 2]))\n        if i >= 2:\n            for j in range(3, n + 1, 2):\n                if i * j <= m:\n                    sequences.add(tuple([i * j, i * (j - 2)]))\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    \n    for i in range(m):\n        if (i % 2 == 0):\n            count += 1\n            continue\n        \n        count += 1\n        j = i\n        while (j + n <= m and (j % 2 == 0 or (j >= 2*i and j < m))):\n            if (j % 2 == 0):\n                count += 1\n            j += 1\n            \n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(prev, current):\n        if current == n:\n            return 1\n        if current > n:\n            return 0\n        if current < 2 * prev:\n            return 0\n        return helper(current, current + 1) + helper(current, current + 2)\n\n    def count_combinations(start, end):\n        count = 0\n        for i in range(start, end):\n            count += helper(i + 1, i + 1 + n)\n        return count\n\n    return count_combinations(2, m + 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize variables\n    total = 0\n    prev = 0\n    \n    # Iterate through all possible combinations of sequences\n    for i in range(m, n+1):\n        # Calculate the next sequence\n        seq = i - 2*prev\n        # Check if the sequence is within the bounds of the problem\n        if seq >= 0 and seq <= m:\n            # Add the sequence to the total count\n            total += 1\n        # Update the previous element\n        prev = i\n    \n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total = 0\n    for i in range(n + 1):\n        total += m // i\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    i = 2\n    while i <= n:\n        j = i - 1\n        while j >= 2 and (2 * j + 1) <= m:\n            count += 1\n            j -= 1\n        i += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n):\n    def helper(i, j, total):\n        if j == n:\n            return total\n        if i + 2 * j > m:\n            return helper(i, j+1, total)\n        if i + j >= m:\n            return helper(i + 2 * j, j+1, total)\n        return helper(i + 2 * j, j+1, total + helper(i, j, 0))\n\n    return helper(0, 0, 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences_count = 0\n\n    # check if the condition is true for the first element\n    if n >= 2 * m:\n        sequences_count += 1\n\n    # check if the condition is true for the second element\n    if n >= 2 * m + 1:\n        sequences_count += 1\n\n    # check for all possible elements in the sequence\n    for i in range(3, n + 1):\n        if n >= 2 * i - 1 and n >= 2 * i:\n            sequences_count += 1\n\n    return sequences_count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, count, prev):\n        if i == n:\n            return count\n        if i > m:\n            return count\n\n        if m % 2 == 0 and i % 2 == 0:\n            count += helper(i + 1, count, 2 * prev)\n        elif m % 2 == 0 and i % 2 == 1:\n            count += helper(i + 1, count, prev)\n        elif m % 2 == 1 and i % 2 == 0:\n            count += helper(i + 1, count, 2 * prev)\n        else:\n            count += helper(i + 1, count, prev)\n\n        return count\n\n    return helper(0, 0, 1)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    def is_valid_sequence(sequence):\n        \"\"\"\n        A helper function to check if a given sequence is valid or not.\n        A valid sequence is a list of elements such that the elements are all positive integers and are greater than or equal to twice the previous element but less than or equal to m.\n        \"\"\"\n        for i in range(1, len(sequence)):\n            if sequence[i] < 2 * sequence[i - 1] or sequence[i] > m:\n                return False\n        return True\n\n    # Initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # Iterate through all possible sequences of length n\n    for i in range(1, m + 1):\n        sequence = [i]\n        # Check if the current sequence is valid or not\n        if is_valid_sequence(sequence):\n            # If the current sequence is valid, append it to the list of valid sequences and increment the total number of valid sequences\n            valid_sequences.append(sequence)\n            total_sequences += 1\n        # For each valid sequence, check if there are any more valid sequences that can be generated by adding the previous element to the current sequence\n        for j in range(i + 1, m + 1):\n            sequence.append(j)\n            if is_valid_sequence(sequence):\n                valid_sequences.append(sequence)\n                total_sequences += 1\n                break\n\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    else:\n        list1[-1] = list2[0]\n        return replace_list(list1[:-1], list2[1:])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Find the length of the longer list\n    len_list1 = len(list1)\n    len_list2 = len(list2)\n    \n    # If the longer list is longer, we need to remove some elements from the first list\n    if len_list1 > len_list2:\n        list1 = list1[:len_list1-len_list2]\n    \n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop() # Remove the last element from the first list\n    list1.extend(list2) # Add the elements of the second list to the first list\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < len(list2):\n        return \"The length of the second list must be greater than the length of the first list.\"\n    elif len(list1) == len(list2):\n        for i in range(len(list1)-1, -1, -1):\n            list1[i] = list2.pop(0)\n        return list1\n    else:\n        return \"The length of the second list must be less than or equal to the length of the first list.\""
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    # Get the last element of the first list\n    last_element = list1[-1]\n    # Remove the last element from the first list\n    list1.pop()\n    # Append the elements of the second list to the first list\n    list1.extend(list2)\n    # Append the last element of the first list to the second list\n    list2.append(last_element)\n    # Print the modified lists\n    print(\"First list:\", list1)\n    print(\"Second list:\", list2)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_char = 0\n    for char in str1:\n        total_char += 1\n    return total_char"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    This function counts the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    x = sqrt_N\n    while True:\n        x += 1\n        y = x * x\n        if y > N:\n            break\n    return y"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math  \n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Convert the given number to a floating-point number\n    N = float(N)\n    # Use binary search to find the next perfect square\n    left, right = 1, N\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == N:\n            if mid < right:\n                right = mid - 1\n            else:\n                return mid\n        elif mid * mid < N:\n            left = mid + 1\n        else:\n            right = mid - 1\n    # If we reach here, the next perfect square is not found\n    return None"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # find the square root of the input number\n    sqrt_N = math.sqrt(N)\n\n    # if the square root is an integer, increment it by 1\n    if sqrt_N.is_integer():\n        sqrt_N += 1\n\n    # find the square root of the incremented value\n    sqrt_N_plus_1 = math.sqrt(sqrt_N)\n\n    # if the incremented square root is an integer, decrement it by 1\n    if sqrt_N_plus_1.is_integer():\n        sqrt_N_plus_1 -= 1\n\n    # calculate the next perfect square value\n    next_square = (sqrt_N_plus_1 + sqrt_N) * (sqrt_N_plus_1 + sqrt_N)\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initialize a counter for the number of digits of the given number\n    count = 0\n    while N > 0:\n        N //= 10\n        count += 1\n\n    # initialize the next number to be found\n    next_num = 10 ** count\n\n    # loop until the next perfect square is greater than the given number\n    while next_num ** 2 <= N:\n        next_num += 1\n\n    # return the next perfect square greater than the given number\n    return next_num ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n    \"\"\"\n    sqrtN = int(math.sqrt(N))\n    sqrtN = sqrtN * sqrtN\n    return sqrtN + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Returns the next perfect square number greater than N.\n    \"\"\"\n    def is_perfect_square(num):\n        \"\"\"\n        Returns True if the given number is a perfect square, False otherwise.\n        \"\"\"\n        root = math.sqrt(num)\n        return root == int(root)\n    \n    def next_square(num):\n        \"\"\"\n        Returns the next perfect square number greater than the given number.\n        \"\"\"\n        if is_perfect_square(num):\n            return 2 * num\n        else:\n            return 2 * num + 1\n    \n    if is_perfect_square(N):\n        return N\n    else:\n        return next_square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if root.is_integer():\n        root = root + 1\n    else:\n        root = int(root) + 1\n    return root**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a positive integer N and returns the next perfect square greater than N.\n\n    Examples:\n    >>> next_Perfect_Square(6)\n    8\n    >>> next_Perfect_Square(21)\n    27\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    while True:\n        if sqrt_N**2 == N:\n            # we have found the next perfect square greater than N\n            return int(sqrt_N**2)\n        sqrt_N += 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    while True:\n        square = N + 1\n        root = math.sqrt(square)\n        if root.is_integer():\n            if root**2 == square:\n                return square\n        else:\n            return next_Perfect_Square(N)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while True:\n        N += 1\n        if math.isqrt(N) ** 2 == N:\n            break\n    return N"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if n == 2:\n        return max(arr[0], arr[1])\n    max_sum1 = arr[0]\n    max_sum2 = arr[1]\n    for i in range(2, n):\n        if arr[i] > arr[i-1]:\n            max_sum1 = max(max_sum1 + arr[i], max_sum2)\n            max_sum2 = max(max_sum1, max_sum2)\n        else:\n            max_sum2 = max(max_sum1, max_sum2 + arr[i])\n    return max(max_sum1, max_sum2)\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    # Initialize variables for the current bitonic subsequence\n    current_sum = arr[0]\n    prev_sum = arr[0]\n    # Initialize variables for the maximum sum of all bitonic subsequences\n    max_sum_prev = arr[0]\n    max_sum_current = arr[0]\n    \n    # Iterate through the array and update the current and maximum sum of bitonic subsequences\n    for i in range(1, n):\n        if arr[i] > arr[i-1]: # Check if the current element is increasing\n            current_sum = current_sum + arr[i]\n            max_sum_current = max(max_sum_current, current_sum)\n        else: # Check if the current element is decreasing\n            current_sum = current_sum - arr[i]\n            max_sum_current = max(max_sum_current, current_sum)\n        max_sum_prev = max(max_sum_prev, current_sum - prev_sum)\n        prev_sum = current_sum\n    return max_sum_current"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif len(arr) == 2:\n        return max(arr[0], arr[1])\n    elif len(arr) % 2 == 0:\n        left_sum = max_sum(arr[:len(arr)//2])\n        right_sum = max_sum(arr[len(arr)//2:])\n        return max(left_sum, right_sum) + arr[len(arr)//2]\n    else:\n        left_sum = max_sum(arr[:len(arr)//2])\n        right_sum = max_sum(arr[len(arr)//2:])\n        return max(left_sum, right_sum)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Initialize variables to keep track of increasing and decreasing subsequences\n    inc = 0\n    dec = 0\n    \n    # Find the maximum sum of the bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            # Update the increasing subsequence\n            inc = max(inc+arr[i], dec)\n            dec = 0\n        elif arr[i] < arr[i+1]:\n            # Update the decreasing subsequence\n            dec = max(dec+arr[i], inc)\n            inc = 0\n        else:\n            # Update the increasing and decreasing subsequences at the same time\n            inc = max(inc+arr[i], dec)\n            dec = max(dec+arr[i], inc)\n            \n        # Update the maximum sum\n        max_sum = max(max_sum, inc+dec)\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # check if the array is empty or contains only one element\n    if len(arr) < 2:\n        return arr[0]\n    \n    # initialize the maximum sum and the current sum variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # iterate through the array\n    for i in range(len(arr)):\n        # if the current element is increasing and the next element is decreasing\n        if arr[i] < arr[i+1] and arr[i+1] > arr[i+2]:\n            # add the current element to the current sum and continue iterating\n            current_sum += arr[i]\n        # if the current element is decreasing and the next element is increasing\n        elif arr[i] > arr[i+1] and arr[i+1] < arr[i+2]:\n            # subtract the current element from the current sum and continue iterating\n            current_sum -= arr[i]\n        # if the current element is neither increasing nor decreasing\n        else:\n            # add the current sum to the maximum sum and reset the current sum variable\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n            \n    # add the last current sum to the maximum sum if it is greater than 0\n    max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    left = [float('-inf')] * n\n    right = [float('-inf')] * n\n    \n    # Calculate left and right arrays\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            left[i] = max(left[i-1], right[i-1]) + arr[i]\n        else:\n            left[i] = max(left[i-1], right[i-1])\n        \n    for i in range(n-2, -1, -1):\n        if arr[i] < arr[i+1]:\n            right[i] = max(left[i+1], right[i+1]) + arr[i]\n        else:\n            right[i] = max(left[i+1], right[i+1])\n            \n    # Calculate maximum sum subsequence\n    max_sum = float('-inf')\n    for i in range(1, n-1):\n        if right[i] - left[i] > max_sum:\n            max_sum = right[i] - left[i]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    if len(arr) < 3:\n        return 0\n    \n    left = [0] * len(arr)\n    right = [0] * len(arr)\n    \n    max_left = 0\n    max_right = 0\n    \n    for i in range(1, len(arr)):\n        left[i] = max(left[i-1], arr[i-1] + right[i-2])\n        right[i] = max(right[i-1], arr[i] + left[i-2])\n        max_left = max(max_left, left[i])\n        max_right = max(max_right, right[i])\n    \n    return max_left + max_right"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    \n    # Check if the array is bitonic or not\n    if arr[1] >= arr[n-1]:\n        # If the array is bitonic, then the maximum sum of a subsequence is just the maximum sum of the whole array\n        return max(arr)\n    \n    # If the array is not bitonic, then we need to find the bitonic subsequence with the maximum sum\n    max_sum = 0\n    prev = arr[0]\n    for i in range(1, n-1):\n        # Check if the next element is greater than the previous element\n        if arr[i+1] > prev:\n            # If the next element is greater, then we can continue the bitonic subsequence\n            prev = arr[i+1]\n        else:\n            # If the next element is not greater, then we have found a decreasing subsequence, so we need to find the subsequence with maximum sum\n            sub_arr = arr[i:n]\n            max_sub_sum = max(sub_arr)\n            if max_sub_sum > max_sum:\n                max_sum = max_sub_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables to keep track of the maximum sum and the subsequence\n    max_sum = arr[0]\n    curr_sum = 0\n    \n    # Loop through the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing and the previous element was decreasing\n        if arr[i] > arr[i-1] and arr[i-1] < arr[i-2]:\n            # Add the current element to the current sum\n            curr_sum += arr[i]\n        else:\n            # If the current element is decreasing, the maximum sum so far is the current sum\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n            # Reset the current sum\n            curr_sum = 0\n    \n    # If the last subsequence is not empty, add its value to the maximum sum\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    # first, check if the array is a valid bitonic sequence\n    if arr[1] >= 0:\n        for i in range(1, len(arr) - 1):\n            if arr[i] > arr[i+1] and arr[i] < arr[i-1]:\n                continue\n            else:\n                return -1\n        return arr[0] + arr[-1]\n    else:\n        return -1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    # Define the precision to use when checking for convergence\n    epsilon = 1e-6\n    \n    # Initialize the current guess and the previous guess\n    guess = number / 2\n    prev_guess = 0\n    \n    # Compute the square root using the babylonian method\n    while abs(guess**2 - number) > epsilon:\n        prev_guess = guess\n        guess = (number / guess) + guess / 2\n    \n    # Return the value of the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while guess**2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n\n    Parameters:\n    number (int): The number for which we want to compute its square root.\n\n    Returns:\n    float: The square root of the given number using the babylonian method.\n\n    Example:\n    >>> babylonian_squareroot(16)\n    4.0\n    '''\n\n    # Check if the number is negative or zero\n    if number <= 0:\n        raise ValueError('The input number must be positive.')\n\n    # Initialize variables\n    guess = number / 2\n    prev_guess = 0\n    epsilon = 0.00001\n\n    # Run the babylonian method\n    while abs(guess**2 - number) > epsilon:\n        prev_guess = guess\n        guess = (guess + number/guess) / 2\n\n    # Return the square root\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    def is_square(x):\n        \"\"\"\n        Returns True if x is a square number and False otherwise.\n        \"\"\"\n        return x*x == number\n\n    def iterative_sqrt(a, b, x):\n        \"\"\"\n        Returns the square root of x using the babylonian method.\n        \"\"\"\n        if a == b:\n            return a\n        elif x*x < number:\n            return iterative_sqrt(a, b, (a+b)/2)\n        else:\n            return iterative_sqrt(a, b, (a+b)/2)\n\n    # Find the initial interval\n    a = 0\n    b = number/2\n\n    # Iterate until the interval is small enough\n    while True:\n        x = iterative_sqrt(a, b, (a+b)/2)\n        if is_square(x):\n            return x\n        elif x < a:\n            a = x\n        else:\n            b = x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # initialize variables\n    x = number / 2\n    y = number\n    \n    # check if the number is even\n    if number % 2 == 0:\n        x = (x + y / x) / 2\n        y = number / x\n    \n    # check if the number is odd\n    else:\n        x = (x + y / x) / 2\n    \n    # iterate until the difference between x and y is less than or equal to 0.0000001\n    while abs(x - y) > 0.0000001:\n        x = (x + y / x) / 2\n        y = number / x\n    \n    # return the square root\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    x0 = number\n    x1 = number / 2\n    \n    # Iterate until the difference between x0 and x1 is less than a tolerance\n    while abs(x1 - x0) > 0.00001:\n        x2 = (x1 + x0) / 2\n        x0 = x1\n        x1 = x2\n        \n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Computes square roots using the babylonian method.\n    \"\"\"\n    guess = number / 2\n    while abs(guess*guess - number) > 0.001:\n        guess = (number/guess + guess)/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"The input number must be non-negative.\")\n    \n    # Babylonian method\n    x0 = number / 2\n    x1 = x0\n    while abs(x1 - x0) > 1e-10:\n        x2 = (x1 + number / x1) / 2\n        x1 = x0\n        x0 = x2\n        \n    return x0"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        guess_square = guess * guess\n        if abs(guess_square - number) < 0.000001:\n            break\n        elif guess_square > number:\n            guess = (guess + number / guess_square) / 2\n        else:\n            guess = (guess + number / guess_square) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 1e-10\n    x = 1\n    y = number / x\n    \n    while abs(y - x) > epsilon:\n        x = y\n        y = (number / x) + x / y\n    \n    return x"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(string):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(string)\n    table = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                table[i][j] = table[j][i - 1] + 2\n            else:\n                table[i][j] = max(table[i][j - 1], table[j][i])\n\n    return table[n - 1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a table to store the length of LPS for substrings of str \n    lps_table = [[0] * n for i in range(n)] \n    max_len = 0 \n    start = 0 \n    # Find LPS for all substrings of str \n    for i in range(n): \n        for j in range(i, n): \n            if i == j: \n                lps_table[i][j] = 1\n            elif str[i] == str[j]: \n                lps_table[i][j] = lps_table[i+1][j-1] + 2\n            else: \n                lps_table[i][j] = 0 \n            # Update the maximum length and starting index of LPS \n            if lps_table[i][j] > max_len: \n                max_len = lps_table[i][j] \n                start = i \n    # Return the longest palindromic subsequence \n    return str[start:start+max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(s)\n    lps_length = 1\n    max_length = 1\n    \n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            lps_length += 1\n            max_length = max(max_length, lps_length)\n        else:\n            lps_length = 1\n            \n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    if n <= 1:\n        return n\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position in the string\n    table = [[0] * n for _ in range(n)]\n    max_len = 1\n\n    # Check all possible substrings from index 0 to n-1 and update the table accordingly\n    for i in range(n):\n        table[i][i] = 1\n        if s[i] == s[i+1]:\n            table[i][i+1] = 2\n            max_len = 2\n\n    # Check all possible substrings from index 0 to n-2 and update the table accordingly\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            if table[i][j] > max_len:\n                max_len = table[i][j]\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Initialize table to store length of longest palindromic subsequence for each position\n    table = [[0 for j in range(n)] for i in range(n)]\n    # Initialize longest palindromic subsequence length to 0\n    max_length = 0\n    # Initialize start and end of longest palindromic subsequence to -1\n    start = -1\n    end = -1\n    # Fill table using dynamic programming approach\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                table[i][j] = 1\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n                if table[i][j] > max_length:\n                    max_length = table[i][j]\n                    start = i\n                    end = j\n            else:\n                table[i][j] = max(table[i][j-1], table[i+1][j])\n    return max_length, start, end"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a 2D array to store the lengths of palindromic subsequences\n    lps_arr = [[0] * n for i in range(n)]\n    # initialize the first column and row of the array\n    for i in range(n):\n        lps_arr[i][i] = 1\n    # fill in the rest of the array using dynamic programming\n    for j in range(1, n):\n        for i in range(j):\n            if str[i] == str[j]:\n                lps_arr[i][j] = lps_arr[i+1][j-1] + 2\n            else:\n                lps_arr[i][j] = max(lps_arr[i][j-1], lps_arr[i+1][j])\n    # return the length of the longest palindromic subsequence\n    return lps_arr[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # initialize a table to store the length of the longest palindromic subsequence for all prefixes of the string\n    table = [0] * n \n    # initialize the length of the longest palindromic subsequence for the empty string as 0\n    table[0] = 0\n    # calculate the length of the longest palindromic subsequence for each prefix of the string\n    for i in range(1, n): \n        # if the current character is the same as the previous character, then the length of the longest palindromic subsequence for the current prefix is the same as the length of the longest palindromic subsequence for the previous prefix plus 1 \n        if str[i] == str[i-1]: \n            table[i] = table[i-1] + 2\n        else: \n            # if the current character is different from the previous character, then the length of the longest palindromic subsequence for the current prefix is the maximum of the length of the longest palindromic subsequence for the previous prefix plus 1 and the length of the longest palindromic subsequence for the prefix of the string up to the previous character plus 1\n            table[i] = max(table[i-1], table[i-2]) \n    # return the length of the longest palindromic subsequence for the entire string\n    return table[n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(string):\n    n = len(string)\n    # create a 2D table to store the length of palindromic subsequences ending at each position\n    table = [[0] * n for i in range(n)]\n\n    # base case: if the string is empty or contains only one character, it is a palindrome\n    if n <= 1:\n        return n\n\n    # fill in the table\n    for i in range(1, n):\n        for j in range(1, n):\n            if string[i] == string[j]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # return the length of the longest palindromic subsequence\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Find the length of the input string \n    # Initialize a 2D array of size (n+1) x (n+1) to store the length of LPS for every substring of length i \n    length = [[0 for j in range(n+1)] for i in range(n+1)] \n\n    # Initialize the base cases for length[0][i], length[i][0] and length[i][i] \n    for i in range(1, n+1): \n        length[0][i] = 1 \n    for i in range(1, n+1): \n        length[i][0] = 1 \n\n    # Fill the remaining values in the 2D array using dynamic programming \n    for i in range(1, n+1): \n        for j in range(1, n+1): \n            if str[i-1] == str[j-1]: \n                length[i][j] = length[i-1][j-1] + 2 \n            else: \n                length[i][j] = max(length[i-1][j], length[i][j-1]) \n\n    # Find the length of the longest palindromic subsequence \n    max_length = 0 \n    for i in range(1, n+1): \n        max_length = max(max_length, length[i][i]) \n\n    # Return the length of the longest palindromic subsequence \n    return max_length "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n/harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Calculate the harmonic sum of the integers from 1 to n-1.\n    \"\"\"\n    # Initialize a variable to store the sum of the harmonic series\n    harmonic_sum = 0\n    # Loop through the integers from 1 to n-1\n    for i in range(1, n):\n        # Calculate the harmonic series for each integer and add to the sum\n        harmonic_sum += 1 / (i + 1)\n    # Return the harmonic sum\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (n - 1) / 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 / (n - 1)) * (2 * n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (1 / n) * ((n - 1) * (n - 1) - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    harmonic_sum = 1/n * (1/n + 1/n-1 +... + 1/1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        sum = 1.0/n\n        for i in range(1, n):\n            sum += 1.0/i\n        return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (1/n + 2/n + 3/n +... + n/n)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create two empty lists to store the intersection\n    intersect = []\n\n    # Iterate through each element in the first array\n    for num1 in array_nums1:\n\n        # Check if the element is present in the second array\n        if num1 in array_nums2:\n\n            # If the element is present, add it to the intersection list\n            intersect.append(num1)\n\n    # Return the intersection list\n    return intersect"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns their intersection.\n    \"\"\"\n    # Create a set of the unique elements in the first array\n    set1 = set(array_nums1)\n\n    # Create a set of the unique elements in the second array\n    set2 = set(array_nums2)\n\n    # Find the intersection of the two sets using the intersection() method\n    intersection = set1.intersection(set2)\n\n    # Convert the set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays and returns a new array containing only the elements that are present in both arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # create a new array to store the intersection\n    intersection = []\n    \n    # iterate through array_nums2 and check if each element is present in freq_dict\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums1 and then convert it to a list\n    set_nums1 = set(array_nums1)\n    # create a set from array_nums2 and then convert it to a list\n    set_nums2 = set(array_nums2)\n    # find the intersection of set_nums1 and set_nums2\n    intersection_set = set_nums1.intersection(set_nums2)\n    # convert the intersection set back to a list and return it\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create two sets to store the unique elements of the two arrays\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n\n    # create an empty list to store the intersection\n    intersection = []\n\n    # iterate over the unique elements of the two sets\n    for element in set_nums1.intersection(set_nums2):\n        # if the element is not already in the intersection list, add it\n        if element not in intersection:\n            intersection.append(element)\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common_set = set()\n\n    # Iterate through the arrays\n    for num1 in array_nums1:\n        for num2 in array_nums2:\n            # If the elements are equal, add them to the set\n            if num1 == num2:\n                common_set.add(num1)\n\n    # Convert the set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create two dictionaries to store the elements of both arrays\n    dict1 = {}\n    dict2 = {}\n    \n    # Iterate through the first array and add each element to the dictionary\n    for num in array_nums1:\n        dict1[num] = True\n        \n    # Iterate through the second array and add each element to the dictionary\n    for num in array_nums2:\n        dict2[num] = True\n        \n    # Create an empty list to store the intersection of the dictionaries\n    intersection = []\n    \n    # Iterate through the dictionary of the first array and check if the element is in the dictionary of the second array\n    for num in dict1:\n        if num in dict2:\n            intersection.append(num)\n    \n    # Return the intersection as a list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Given two arrays of numbers, returns a new array containing only the elements that are present in both arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(lst, element):\n    result = []\n    for i in range(len(lst)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        else:\n            new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for item in list:\n        new_list.append(item)\n        new_list.insert(0, element)\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num) for num in numbers.split()]\n    polar_coordinates = [(cmath.phase(num), cmath.abs(num)) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # convert to polar coordinates\n        r, theta = cmath.polar(num)\n        # append polar coordinates to result list\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        result.append((real, imag))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # extract the real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the magnitude and angle of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        \n        # convert the magnitude and angle to polar coordinates\n        radius = mag * cmath.cos(angle)\n        theta = angle\n        \n        # print the polar coordinates of the complex number\n        print(\"({}, {})\".format(radius, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coords = []\n    for number in numbers:\n        try:\n            complex_num = complex(number)\n            magnitude = abs(complex_num)\n            phase = cmath.phase(complex_num)\n            polar_coords.append((magnitude, phase))\n        except ValueError:\n            polar_coords.append(None)\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(\"Real part: \", real)\n        print(\"Imaginary part: \", imag)\n        print(\"Polar form: \", complex(real, imag))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coords = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        # Append the polar coordinates to the list\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each complex number in the list\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = abs(num)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(r, theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        real = number.real\n        imag = number.imag\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    result = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n\n    :param lst: the input list to count the integer elements from\n    :type lst: list\n    :return: the number of integer elements in the list\n    :rtype: int\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Use itertools.combinations_with_replacement to generate all combinations with repetition\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(len(l) - n + 1):\n        combo = tuple(l[i:i+n])\n        combos.append(combo)\n    return combos"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Create a generator object with all possible combinations of length n from the list\n    gen = combinations_with_replacement(l, n)\n    # Convert the generator object to a list of tuples\n    comb_list = list(gen)\n    # Return the list of tuples\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        comb_list.append(comb)\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = []\n    i = 2\n    while i <= n:\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if a number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    num = 2\n    \n    while num < n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        \n        if is_prime:\n            count += 1\n        \n        num += 1\n    \n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(n):\n    '''\n    A function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Create a list to store the prime numbers\n    prime_nums = []\n    # Loop through the range of numbers\n    for i in range(2, n+1):\n        # Check if the number is prime\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If the number is prime, add it to the list\n        if is_prime:\n            prime_nums.append(i)\n    # Return the length of the prime_nums list\n    return len(prime_nums)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: tuples must have the same length\")\n        return\n\n    # Initialize variables to keep track of the maximum value of each tuple element\n    max_1 = max_2 = float('-inf')\n\n    # Iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # Check if the element at index i in test_tup1 is greater than max_1\n        if test_tup1[i] > max_1:\n            max_2 = max_1\n            max_1 = test_tup1[i]\n        # Check if the element at index i in test_tup2 is greater than max_2\n        elif test_tup2[i] > max_2:\n            max_2 = test_tup2[i]\n\n    # Return the tuple with the maximum value\n    return (max_1, max_2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum value for each element.\n    '''\n    \n    max_tup1 = ()\n    max_tup2 = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1 = max_tup1 + (test_tup1[i],)\n        else:\n            max_tup2 = max_tup2 + (test_tup2[i],)\n            \n    if max_tup1 > max_tup2:\n        return max_tup1\n    else:\n        return max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Initialize max_tup1 and max_tup2 with the first two elements of test_tup1 and test_tup2, respectively\n    max_tup1 = (test_tup1[0], test_tup1[1])\n    max_tup2 = (test_tup2[0], test_tup2[1])\n\n    # Iterate over the remaining elements of test_tup1 and test_tup2\n    for tup in (test_tup1[2:], test_tup2[2:]):\n        # If a tuple element is greater than the corresponding element in max_tup1, replace max_tup1 with the new tuple\n        if tup[0] > max_tup1[0]:\n            max_tup1 = tup\n        # If a tuple element is greater than the corresponding element in max_tup2, replace max_tup2 with the new tuple\n        elif tup[0] > max_tup2[0]:\n            max_tup2 = tup\n\n    # Return the maximum tuple of test_tup1 and test_tup2\n    return max_tup1 if max_tup1[0] > max_tup2[0] else max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # compare the elements of each tuple and find the maximum value\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the length of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # compare each element of the tuples\n        for i in range(len(test_tup1)):\n            # compare the elements of both tuples\n            if test_tup1[i] < test_tup2[i]:\n                # if the first element of the first tuple is smaller than the second element of the second tuple,\n                # swap their values\n                test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n    \n    # Compare the elements of both tuples\n    max_value = test_tup1[0]\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_value:\n            max_value = test_tup1[i]\n    \n    for i in range(1, len(test_tup2)):\n        if test_tup2[i] > max_value:\n            max_value = test_tup2[i]\n    \n    print(\"The maximum element of the two tuples is:\", max_value)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    # Check if all elements of the input tuples are comparable\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], (int, float, complex)):\n            raise ValueError('All elements of both tuples must be comparable.')\n        if not isinstance(test_tup2[i], (int, float, complex)):\n            raise ValueError('All elements of both tuples must be comparable.')\n\n    # Create a list of tuples with the elements of the two input tuples as values\n    # and the indexes of each element as keys\n    index_dict = {i: j for i, j in zip(test_tup1, test_tup2)}\n\n    # Sort the list of tuples based on the values of the first element\n    sorted_list = sorted(index_dict.items(), key=lambda x: x[0])\n\n    # Create a new tuple with the elements of the first element of each tuple as values\n    max_tup = tuple([tup[0] for tup in sorted_list])\n\n    return max_tup"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # The first newman prime is 2\n    if n == 1:\n        return 2\n\n    # Find the nth newman prime\n    prime = 2\n    while True:\n        is_prime = True\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            break\n        prime += 1\n\n    # Find the nth newman prime number\n    for i in range(2, n + 1):\n        if i % prime == 0:\n            return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    p = 2\n    count = 0\n    prime = True\n\n    # loop through numbers to check if they are newman prime\n    while prime and count < n:\n        # check if the number is prime\n        if all(i % p!= 0 for i in range(2, p)):\n            prime = False\n        # increment count and check for newman prime\n        count += 1\n        p += 1\n\n    # return the nth newman prime\n    if prime:\n        return p\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize a variable to keep track of the number of prime numbers found so far\n    count = 0\n\n    # Start checking for primes from 2 to n\n    for i in range(2, n+1):\n        # If i is prime, check if its consecutive digits are all different\n        prime = True\n        for j in str(i):\n            if int(j) == i:\n                prime = False\n                break\n            if int(j) == i+1:\n                prime = True\n                break\n        # If i is prime and its consecutive digits are all different, add it to the count\n        if prime:\n            count += 1\n            if count == n:\n                return i\n    # If no n-th newman prime is found, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize the first two newman-shanks-williams primes\n    s = 2\n    while True:\n        if s**2 > n:\n            break\n        t = 2\n        while True:\n            if t**2 > n - s**2:\n                break\n            if s**2 + t**2 == n:\n                return s**2\n            t += 1\n        s += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return None\n\n    primes = []\n    p = 2\n    while len(primes) < n:\n        is_prime = True\n        for i in range(2, int(p**0.5) + 1):\n            if p % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(p)\n        p += 1\n\n    if len(primes) == 0:\n        return None\n    else:\n        return primes[n - 1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    \"\"\"\n    This function returns the nth newman-shanks-williams prime number.\n    \"\"\"\n    # Initialize the value of the prime number\n    prime = 2\n\n    # Iterate until n newman-shanks-williams primes are found\n    while len(set(range(2, prime))) < n:\n        prime += 2\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        k = 3\n        while True:\n            if is_prime(k):\n                if k == n:\n                    return k\n                k += 1\n            else:\n                k += 2\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    prime = 0\n    while prime < n: \n        if is_prime(i): \n            prime += 1\n        i += 1\n    return prime - 1\n\ndef is_prime(num): \n    '''\n    Returns True if the given number is prime, False otherwise.\n    '''\n    if num < 2: \n        return False\n    for i in range(2, int(num**0.5)+1): \n        if num % i == 0: \n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables for the nth newman prime number\n    prime = None\n    count = 0\n    \n    # Loop until the nth newman prime number has been found\n    while prime is None:\n        # Generate the next newman prime number\n        new_prime = 1\n        for i in range(2, int(n/2)+1):\n            if n % i == 0:\n                break\n            new_prime += i\n        \n        # Check if the newman prime number is prime\n        if is_prime(new_prime):\n            count += 1\n            \n            # If the nth newman prime number has been found, update the variable\n            if count == n:\n                prime = new_prime\n    \n    return prime\n\ndef is_prime(n):\n    '''\n    Check if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0: \n        return None\n    elif n == 1: \n        return 2\n    else: \n        p = 3\n        while p*p <= n: \n            if n % p == 0: \n                return None\n            p += 2\n        return p"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of both tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length!\")\n        return\n    \n    # Perform element-wise division of both tuples\n    result = tuple([num1 / num2 for num1, num2 in zip(test_tup1, test_tup2)])\n    \n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    division_result = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            print(\"Error: Division by zero not allowed!\")\n            return None\n        else:\n            division_result += (test_tup1[i] // test_tup2[i],)\n    return division_result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    # initialize a new tuple to store the results\n    result_tup = ()\n\n    # loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division of test_tup1[i] and test_tup2[i] and store the result in result_tup[i]\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    # return the result_tup\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero\")\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    result = []\n    for i in range(len(test_tup1)):\n        try:\n            result.append(test_tup1[i] / test_tup2[i])\n        except ZeroDivisionError:\n            result.append(float('inf'))\n\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements!\")\n        return None\n    \n    # iterate over the elements of the two tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Calculate the length of the first part of the list\n    part1_len = len(list1) // 2\n    \n    # Check if the length of the list is a multiple of 2\n    if part1_len * 2 == len(list1):\n        # If it is, make the second part empty\n        part2 = []\n    else:\n        # If not, make the second part of the list the same length as the first part\n        part2 = list1[part1_len:]\n        \n    # Split the list into the two parts\n    list1 = list1[:part1_len]\n    \n    # Return the resulting lists in a tuple\n    return (list1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The given list cannot be split into two parts with a length of less than L.\")\n    \n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L!= 0:\n        raise ValueError(\"The length of the list is not a multiple of L.\")\n    half_L = len(list1) // 2\n    return (list1[:half_L], list1[half_L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes a list and an integer L as input and returns two parts of the list where the length of the first part is L.\n    \"\"\"\n    if len(lst) < L:\n        return \"List length is less than the desired length of the first part.\"\n    \n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is within range of the length of the list\n    if L <= 0 or L > len(list1):\n        raise ValueError(\"L should be within the range of the length of the list\")\n    \n    # Split the list into two parts\n    list1_part = list1[:L]\n    list2_part = list1[L:]\n    \n    # Return the two parts as a tuple\n    return (list1_part, list2_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1) // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    part1 = lst[:L]\n    part2 = lst[L:]\n    return part1, part2"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if L <= 0 or L > n:\n        return \"Invalid input\"\n    else:\n        L1 = L\n        L2 = n - L\n        return (list1[:L1], list1[L1:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list `lst` and an integer `L` and splits it into two parts, where the length of the first part is `L`.\n    It returns the two resulting lists as a tuple.\n    '''\n    if len(lst) < 2*L:\n        print(\"Error: List should have at least two parts of length L.\")\n        return None\n    else:\n        first_part = lst[:L]\n        second_part = lst[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert the human age to dog years\n    dog_years = h_age * 7\n\n    # round down to the nearest integer\n    dog_years = int(dog_years)\n\n    # return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    dog_age = 7 * h_age\n    \n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = 7 * h_age\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * (h_age / 365.25)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 + (h_age / 5)\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    b_date = input(\"Enter your birthday (YYYY-MM-DD): \")\n    b_date = datetime.datetime.strptime(b_date, \"%Y-%m-%d\")\n    today = datetime.datetime.today()\n    age = today.year - b_date.year - ((today.month, today.day) < (b_date.month, b_date.day))\n    if today.month < b_date.month or (today.month == b_date.month and today.day < b_date.day):\n        age -= 1\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    years = (h_age / 12) * 7\n    return years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step\n    return [S[i:i+n] for i in range(0, len(S), n)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step <= 0:\n        raise ValueError('Step must be a positive integer.')\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Calculate the number of splits to make\n    num_splits = len(S) // step + 1 if len(S) % step == 0 else len(S) // step\n    \n    # Initialize an empty list to hold the resulting lists\n    result = []\n    \n    # Split the list for every nth element\n    for i in range(num_splits):\n        # Create an empty list to hold the split elements\n        split = []\n        \n        # Split the list for every nth element\n        for j in range(step):\n            # Add an element to the split list if it exists\n            if i*step+j < len(S):\n                split.append(S[i*step+j])\n        \n        # Add the split list to the result list\n        result.append(split)\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    # initialize an empty list to store the resulting lists\n    result = []\n\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new sublist from the input list starting from the current index\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_lists = []\n    for i in range(0, len(S), step):\n        split_lists.append(S[i:i+step])\n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    if n == 0:\n        return []\n    elif n == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, n, step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(step, int):\n        raise TypeError(\"Step must be an integer.\")\n    if step <= 0:\n        raise ValueError(\"Step must be greater than zero.\")\n\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l**2)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralSurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l ** 2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (6 * l * l) # formula to find the lateral surface area of a cube"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 1\n    total = 0\n    while count <= n:\n        total += count*count\n        count += 2\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    count = 0\n\n    for i in range(1, n+1, 2):\n        sum += i**2\n        count += 1\n\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to zero\n    total = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current number to the total\n        total += i**2\n        \n    # Return the total sum\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    count = 0\n    while count < n:\n        if count % 2 == 1:\n            sum_of_squares += count**2\n        count += 1\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop from 1 to n-1\n    for i in range(1, n):\n        # Calculate the square of the i-th odd natural number\n        square = i**2\n        \n        # Add the square to the sum\n        sum += square\n        \n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum_of_squares = 0\n    while count < n:\n        count += 1\n        sum_of_squares += count**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    odd_sum = 0\n    for i in range(1, n+1):\n        odd_sum += (i**2)\n    return odd_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result\n\nn = int(input(\"Enter the value of n: \"))\nprint(find_star_num(n))"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the star number as an empty string\n    star_num = ''\n    # Loop through the first n-1 digits of the number\n    for i in range(n-1):\n        # Add the appropriate number of asterisks to the star number\n        star_num += '*'\n    # Return the last digit of the star number plus one\n    return int(star_num[-1]) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize variables\n    result = 1\n    num_stars = 1\n\n    # loop through n-1 stars\n    for i in range(1, n):\n        # update result and num_stars\n        result *= num_stars\n        num_stars *= 2\n\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the base sequence of stars\n    sequence = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # Find the nth star number by multiplying the nth base sequence by 5\n    return sequence[n-1] * 5"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the count variable\n    count = 0\n    # Initialize the result variable\n    result = \"\"\n\n    # Loop through each digit of n and append the corresponding number of stars to the result\n    while n > 0:\n        count += 1\n        if n % 10 == 1:\n            result += \"*\"\n        elif n % 10 == 2:\n            result += \"**\"\n        elif n % 10 == 3:\n            result += \"***\"\n        elif n % 10 == 4:\n            result += \"****\"\n        elif n % 10 == 5:\n            result += \"*****\"\n        else:\n            result += \"******\"\n        n = n // 10\n\n    # Return the result as a string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    elif n == 3:\n        return \"***\"\n    else:\n        return \"*****\" + find_star_num(n-4)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the loop counter\n    i = 1\n    # initialize the star counter\n    count = 1\n    \n    # loop until the count reaches n\n    while count <= n:\n        # print the current star number\n        print(\"*\" * i)\n        # increment the star counter\n        count += 1\n        # increment the loop counter\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return '1'\n    else:\n        for i in range(1, n + 1):\n            print('*' * i)\n        return 'done'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Base case: if n=1, return 1\n    if n == 1:\n        return 1\n\n    # Recursive case:\n    # Let's assume the n-th star number is the sum of the n-1th and (n-1)th star numbers\n    # Let's calculate this sum using a loop\n    sum_n = 0\n    for i in range(1, n):\n        sum_n += i\n\n    return sum_n"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i): i for i in range(256)}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    return ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # if the current number is even\n            even_sum += arr[i]  # add it to the even_sum\n            count += 1  # increment the count\n    if count == 0:  # if there are no even numbers at even positions\n        print(\"There are no even numbers at even positions.\")\n    else:\n        print(\"The sum of even numbers at even positions is:\", even_sum)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n            if i == len(arr) - 1:\n                even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_indices = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_indices.append(i)\n    return even_sum, even_indices"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i**5\n    return total_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        num = 2**i\n        if num % 2 == 0:\n            sum += num\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    return sum(i ** 5 for i in range(2, n+1, 2))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    # loop through even numbers up to n\n    for i in range(2, n+1, 2):\n        # calculate sum of i raised to the fifth power\n        sum += i**5\n    # return sum of first n even natural numbers raised to the fifth power\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    # Initialize sum to 0\n    power_sum = 0\n\n    # Iterate over the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the current number raised to the fifth power\n        power = i ** 5\n        # Add the current power to the sum\n        power_sum += power\n\n    # Return the sum of the first n even natural numbers raised to the fifth power\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    for i in range(n):\n        sum_even_power += i**5\n    return sum_even_power"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple in test_list:\n        rear_list.append(tuple[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return result"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return tuple(result_tup)\n"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: the two tuples have different lengths\")\n        return\n    \n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the indices match\n        if i in test_tup2:\n            # Subtract the elements from the first tuple\n            test_tup1[i] -= test_tup2[i]\n        else:\n            # If the indices don't match, set the element in the first tuple to 0\n            test_tup1[i] = 0\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    sum_even_index_coeffs = 0\n    even_index = 0\n    \n    # loop through all possible values of n\n    while even_index <= n:\n        # find the binomial coefficient of even_index\n        if even_index % 2 == 0:\n            binomial_coeff = math.comb(n, even_index)\n        else:\n            binomial_coeff = 0\n        \n        # add the even index binomial coefficient to the sum\n        sum_even_index_coeffs += binomial_coeff\n        \n        # move on to the next even index\n        even_index += 2\n    \n    # return the sum of even index binomial coefficients\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum of even index binomial coefficients to zero\n    even_binomial_sum = 0\n    # Initialize counter for even index binomial coefficients\n    even_binomial_count = 0\n    # Loop through even indices of binomial coefficient array\n    for i in range(2, n+1, 2):\n        # Calculate binomial coefficient using math.comb() function\n        even_binomial = math.comb(n, i)\n        # Check if binomial coefficient is even\n        if even_binomial % 2 == 0:\n            # Add even binomial coefficient to sum and increment count\n            even_binomial_sum += even_binomial\n            even_binomial_count += 1\n    # Calculate and return average of sum of even index binomial coefficients\n    return even_binomial_sum / even_binomial_count"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if j % 2 == 0:\n                sum += math.comb(n,j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result += math.comb(n, i)\n    return result"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math  \n\ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Base case \n    if n == 1: \n        return 0\n    \n    # Initialize two variables \n    even_sum = 0\n    odd_sum = 0\n    \n    # Calculate even and odd sums \n    for i in range(1, n+1): \n        if i % 2 == 0: \n            even_sum += math.comb(n, i) \n        else: \n            odd_sum += math.comb(n, i) \n    \n    # Return the sum of even and odd sums \n    return even_sum + odd_sum "
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sum += math.comb(n, j) * (2*j+1) / (2*i-j+1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n\n    for i in range(2, n+1):\n        coeff_sum += math.comb(n, i-2) * 2**i\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(2, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even += coeff\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    even_sum = 0\n    for i in range(0, n+1, 2):\n        binomial_coeff = math.comb(n, i)\n        even_sum += binomial_coeff\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        coeff = math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n        if i % 2 == 0:\n            sum += coeff\n    return sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * (3.14 * r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159 * (r ** 2) * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = 3.14 * (r ** 2) * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r * r * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h / 3"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (3/4) * 3.14159 * r * r * h\n    return v"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\n    :param dict: A dictionary to be filtered.\n    :param n: An integer value representing the minimum value of the values to be included in the resulting dictionary.\n    :return: A new dictionary that contains only the entries with values greater than or equal to n.\n    \"\"\"\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i-1]!= test_tup[i]:\n                break\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i, item in enumerate(test_tup):\n        if i == 0:\n            continue\n        elif item!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    count = 0\n    for i in range(1, n+1):\n        count += i\n        decagonal += 2*count\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Find the length of the number system\n    num_system_len = len(str(n))\n    # Calculate the factorial of num_system_len\n    factorial = 1\n    for i in range(1, num_system_len + 1):\n        factorial *= i\n    # Calculate the nth decagonal number\n    decagonal_num = factorial // (n + 1)\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_num = 0\n    for i in range(n):\n        dec_num += (2 * (i+1))**2\n    return dec_num\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    This function will check if a number is a decagonal number or not.\n    A decagonal number is the sum of the squares of its sides.\n    \"\"\"\n    # Find the square of n\n    square_n = n ** 2\n    # Find the sum of the squares of the side of a decagonal number\n    side_sum = 1 + 8 * (n - 1)\n    # Check if the sum of squares of the side equals the square of n\n    if square_n == side_sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Convert n to a string\n    n = str(n)\n    # Initialize a variable to store the sum of the digits of n\n    sum_digits = 0\n    # Loop through each digit of n\n    for digit in n:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Multiply the digit by (n-digit_int) and add it to the sum_digits variable\n        sum_digits += (n[0] - digit_int) * (n[0] - digit_int)\n    # Return the sum of the digits raised to the power of 2\n    return sum_digits ** 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Calculate the length of the decagonal sequence\n    length = 2 * n - 1\n\n    # Initialize the sum of the decagonal sequence\n    sum = 0\n\n    # Loop through the sequence and add the terms to the sum\n    for i in range(1, length + 1):\n        sum += (i * (2 * i - 1))\n\n    # Check if the sum is equal to the nth decagonal number\n    if sum == 2 * n * (n + 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n    \n    # initialize variables\n    dec_num = 0\n    num = 1\n    \n    # iterate from n to 1\n    for i in range(n):\n        # add the current number to the sum of the previous two numbers\n        dec_num += num\n        \n        # update the current number to the next number\n        num += 2\n    \n    # return the sum of the first n decagonal numbers\n    return dec_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    # Helper function to calculate the n-th decagonal number\n    def decagonal(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return n * (n-1) + 1\n    \n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return False\n    \n    # Calculate and return the n-th decagonal number\n    return decagonal(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # calculate the sum of the first n natural numbers\n    sum_n = (n * (n + 1)) // 2\n    # calculate the square root of the sum of the first n natural numbers\n    sqrt_sum_n = int(sum_n ** 0.5)\n    # calculate the sum of the first sqrt_sum_n natural numbers\n    sum_sqrt_sum_n = (sqrt_sum_n * (sqrt_sum_n + 1)) // 2\n    # find the nth decagonal number\n    nth_decagonal = sum_sqrt_sum_n - sum_n + n\n    return nth_decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the sum of squares of the numbers from 1 to n\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n\n    # Calculate the square root of the sum of squares\n    sqrt_sum_of_squares = sum_of_squares**(0.5)\n\n    # Calculate the nth decagonal number\n    nth_decagonal = sqrt_sum_of_squares + sqrt_sum_of_squares + 1\n\n    # Check if the nth decagonal number is equal to n\n    if nth_decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i, value in enumerate(dlist):\n        if value == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and element as input and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    # Loop through the list of items and check if the current item is equal to the search item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # Return a tuple containing a boolean indicating if the item was found and the index position of the item\n            return True, i\n    # If the item was not found in the list, return a tuple containing a boolean indicating that it was not found and -1 as the index position\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    \n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    \n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set from the list to check for duplicates\n    set_obj = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(set_obj) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # create an empty set to store unique elements\n    unique_set = set()\n    # loop through each element in the list\n    for element in test_list:\n        # if the element is not already in the set, add it to the set\n        if element not in unique_set:\n            unique_set.add(element)\n        # if the element is already in the set, return False (the list has duplicate elements)\n        else:\n            return False\n    # if no duplicates were found, return True (the list has no duplicate elements)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function checks if the elements of a given list are unique or not.\n    \"\"\"\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set to store unique elements\n    unique_set = set()\n    # loop through each element in the list\n    for element in test_list:\n        # add the element to the set\n        unique_set.add(element)\n        # check if the set has duplicate elements\n        if len(unique_set)!= len(test_list):\n            # if there are duplicates, return False\n            return False\n    # if no duplicates are found, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n\n    # check if the length of the two lists are same\n    if len(nums1)!= len(nums2):\n        return \"The two lists are not of same length.\"\n\n    # create an empty list to store the result\n    result = []\n\n    # iterate over the two lists\n    for i in range(len(nums1)):\n        # subtract the elements element-wise\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check that the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length\")\n    # create an empty list to hold the result\n    result = []\n    # loop over the elements of the two lists\n    for i in range(len(nums1)):\n        # subtract the corresponding elements and append the result to the result list\n        result.append(nums1[i] - nums2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n    else:\n        result = [x - y for x, y in zip(nums1, nums2)]\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with the difference of the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # split the integer into a list of digits\n    digits = [int(d) for d in str(n)]\n    # count the frequency of each digit in the list\n    freq = [digits.count(d) for d in range(10)]\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    count = [0] * 10\n\n    # Count frequency of each digit in the integer\n    while n:\n        digit = n % 10\n        count[digit] += 1\n        n //= 10\n\n    # Check if frequency of each digit is less than or equal to the digit itself\n    for digit in count:\n        if digit > 0 and digit!= digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # iterate through the dictionary and check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > freq[digit]:\n            return False\n    \n    # if all digits have a frequency of 1 or less, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # Convert the integer to a list of digits\n    digits = [int(digit) for digit in str(n)]\n\n    # Initialize a dictionary to store the frequency of each digit in the list\n    freq = {}\n\n    # Iterate through the list of digits\n    for digit in digits:\n        # If the digit is already in the dictionary, increment its frequency by 1\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through the dictionary to check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    # If all the digits in the list have a frequency less than or equal to them, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize frequency list to zero\n    frequency = [0]*10\n    \n    # iterate through each digit in the integer\n    for digit in str(n):\n        # get the index of the digit in the frequency list\n        index = int(digit)\n        # increment the frequency of that digit\n        frequency[index] += 1\n    \n    # iterate through each frequency in the frequency list\n    for freq in frequency:\n        # check if the frequency is greater than the digit itself\n        if freq > n:\n            return False\n    \n    # if all digits have a frequency less than or equal to their value, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # initialize a dictionary to store the count of digits\n    digit_count = {}\n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its count\n        if digit in digit_count:\n            digit_count[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            digit_count[digit] = 1\n    # loop through each digit in the dictionary\n    for digit, count in digit_count.items():\n        # if the digit count is greater than the digit itself, return False\n        if count > digit:\n            return False\n    # if no digits in the dictionary have a count greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0]*10 # Initialize a list of 10 elements to store the frequency of each digit\n    while n > 0:\n        digit = n % 10 # Get the last digit of the integer\n        if freq[digit] >= digit: # Check if the frequency of the last digit is greater than or equal to the last digit itself\n            return False\n        freq[digit] += 1 # Increment the frequency of the last digit\n        n //= 10 # Remove the last digit from the integer\n    return True # If all digits are less than or equal to the digit itself, then the integer is valid"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = []\n    for i in range(10):\n        freq.append(n.count(str(i)))\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    for digit, count in freq.items():\n        if count > int(digit):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    num_str = str(n)\n\n    # Initialize the frequency dictionary\n    freq = {str(i): 0 for i in range(10)}\n\n    # Count the frequency of each digit in the integer\n    for digit in num_str:\n        freq[digit] += 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    if list[0] == element:\n        for i in range(1,len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:],element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a\\w{2,3}b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b(?:(2|3))?.*'\n    match = re.search(pattern, text, re.IGNORECASE)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    return bool(pattern.search(text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'\\ba(?=(b{2,3}))\\b'\n    matches = re.findall(pattern, text)\n\n    if len(matches) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba\\w{2,3}\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)b{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables for maximum sum and current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Loop through each element of the array\n    for i in range(n):\n        # If we have not yet reached the end of the current subarray, add the current element to the current sum\n        if i < k:\n            current_sum += a[i]\n        # If we have reached the end of the current subarray and have not repeated it yet, repeat the array k times\n        elif i >= k:\n            current_sum = a[i]\n            for j in range(k):\n                current_sum += a[i-j]\n        # If the current subarray sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum and temp_sum as 0\n    max_sum = 0\n    temp_sum = 0\n    \n    # Iterate through the array and find the sum of elements in the modified array\n    for i in range(n):\n        temp_sum += a[i]\n        # Check if the current sum exceeds the maximum sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        # If the current sum is greater than the maximum sum and the index of the current element is less than k, update the maximum sum to the current sum\n        elif temp_sum == max_sum and i < k:\n            max_sum = temp_sum\n    \n    # Repeat the modified array k times and find the maximum sum in the modified array\n    modified_array = [0] * k\n    for i in range(k):\n        modified_array[i] = a[i] * (k-i)\n        if modified_array[i] > max_sum:\n            max_sum = modified_array[i]\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize the maximum subarray sum and current subarray sum variables\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Iterate over the array and calculate the current subarray sum\n    for i in range(k):\n        curr_sum += a[i]\n\n    # Update the maximum subarray sum if the current subarray sum is greater\n    max_sum = max(max_sum, curr_sum)\n\n    # Iterate over the array again and calculate the maximum subarray sum\n    for i in range(k, n):\n        curr_sum += a[i] - a[i-k]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the max sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Iterate through the array and find the maximum subarray sum\n    for i in range(n):\n        current_sum += a[i]\n        if i >= k - 1:\n            current_sum -= a[i - k + 1]\n        max_sum = max(max_sum, current_sum)\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sum of the first k elements\n    max_sum = float('-inf')\n    sub_sum = sum(a[:k])\n    # Iterate over the rest of the array and calculate the sum of the last k elements\n    for i in range(n-k):\n        sub_sum += a[i] - a[i+k]\n        max_sum = max(max_sum, sub_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Check if k is valid\n    if k > len(a):\n        return None\n\n    # Create the modified array\n    modified_array = [x for x in a] * k\n\n    # Initialize variables\n    max_sum = max_sum_window = float('-inf')\n    current_sum_window = 0\n    start_index = 0\n    end_index = 0\n\n    # Iterate through the modified array\n    for i in range(k, n):\n        current_sum_window = current_sum_window - a[i-k] + a[i]\n        if current_sum_window > max_sum_window:\n            max_sum_window = current_sum_window\n            max_sum = a[i]\n            start_index = i - k + 1\n            end_index = i\n        elif current_sum_window == max_sum_window and a[i] > max_sum:\n            max_sum = a[i]\n            end_index = i\n\n    # Return the maximum sum and the indices of the maximum sum\n    return max_sum, start_index, end_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Compute the cumulative sum of the array\n    cum_sum = [0] * (n+1)\n    cum_sum[0] = a[0]\n    for i in range(1, n+1):\n        cum_sum[i] = cum_sum[i-1] + a[i-1]\n\n    # Initialize the maximum sum found so far\n    max_sum = float('-inf')\n\n    # Iterate through all possible subarrays of length k\n    for i in range(n-k+1):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += cum_sum[i+j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 1:\n        return a[0]\n    \n    # Take the first element of the array\n    sum_1 = a[0]\n    \n    # Find the sum of the first k elements\n    sum_k = sum(a[:k])\n    \n    # Initialize the largest sum to be negative infinity\n    max_sum = float('-inf')\n    \n    # Loop through the rest of the array\n    for i in range(n - k):\n        # Find the sum of the i+1th element to i+kth element of the array\n        sum_i_k = sum(a[i+1:i+k+1])\n        \n        # Update the sum of the kth element to be the sum of the i+1th element to i+kth element\n        # of the array repeated k times\n        sum_k = sum_k + sum_i_k - a[i+k]\n        \n        # Update the maximum sum if the current sum of the kth element is greater\n        if sum_k > max_sum:\n            max_sum = sum_k\n    \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Find the maximum sum of subarray of length 1\n    max_sum = max(a)\n\n    # Iterate over the array and find the maximum sum of subarray of length i\n    for i in range(2, n+1):\n        max_sum = max(max_sum + a[i-1], a[i-1])\n\n    # If the length of the subarray is k, then the maximum sum is the maximum sum of the entire array\n    if k == 1:\n        return max_sum\n\n    # Iterate over the array again and find the maximum sum of subarray of length k\n    for i in range(n-k+1):\n        max_sum = max(max_sum + a[i+k-1], a[i+k-1])\n\n    # If the length of the subarray is k, then the maximum sum is the maximum sum of the entire array\n    if k == n:\n        return max_sum\n\n    # If the length of the subarray is greater than k, then the maximum sum is the maximum sum of the entire array\n    if k > n:\n        return max_sum\n\n    # If the length of the subarray is less than k, then the maximum sum is the maximum sum of the subarray of length k\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    for i in range(k):\n        temp_sum = sum(a) * (i + 1)\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = [i for i in range(2, n+1, 2)] # List of even natural numbers\n    sum_of_squares = sum([x**2 for x in even_numbers]) # Sum of squares of even natural numbers\n    \n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current number to the sum\n        sum += i*i\n\n    # return the sum of squares of first n even natural numbers\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i ** 2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares\n\nn = int(input(\"Enter the value of n: \"))\nresult = square_Sum(n)\nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", result)"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the list.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > max(max_lengths):\n            max_lengths = [len(item)]\n        elif len(item) == max(max_lengths):\n            max_lengths.append(len(item))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_length_list):\n            max_length_list = list1[i]\n    return max_length_list\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    result = []\n    for lst in list1:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            result = [lst]\n        elif len(lst) == max_length:\n            result.append(lst)\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or len(sublist) == len(max_lengths) and all(len(x) == len(max_lengths[0]) for x in sublist):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(x) for x in sublist]\n        max_length = max(lengths)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > max(max_lengths):\n            max_lengths = [len(lst)]\n        elif len(lst) == max(max_lengths):\n            max_lengths.append(len(lst))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths):\n            max_lengths = sublist\n    return max_lengths\n"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_length_list):\n            max_length_list = sublist\n    return max_length_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    # initialize an array to store the count of ways to paint the fence\n    count = [[0] * (k + 1) for _ in range(n + 1)]\n\n    # base case for n = 1 or k = 1\n    for i in range(2, k + 1):\n        count[1][i] = 1\n\n    # calculate the count for n = 1 and k >= 2\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            count[i][j] = count[i - 1][j] + count[i][j - 1]\n\n    # return the last element in the count array, which stores the count of ways to paint the fence\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    dp = [1] * k\n    for i in range(1, k):\n        dp[i] = 1\n    for i in range(2, n):\n        for j in range(k):\n            if j >= 2 and dp[j-2] == 1:\n                dp[j] += dp[j-2]\n    return dp[k-1]\n\nn = int(input(\"Enter the number of posts: \"))\nk = int(input(\"Enter the number of colors: \"))\nprint(\"Number of ways of painting the fence is:\", count_no_of_ways(n, k))"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    def dfs(start, colors_left, ways):\n        if start == n:\n            if colors_left == 0:\n                ways += 1\n            return ways\n\n        ways += dfs(start+1, colors_left-1, ways)\n        ways += dfs(start+1, colors_left, ways)\n\n        return ways\n\n    return dfs(0, k, 0)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the number of ways to 1\n    ways = 1\n\n    # Loop through all possible pairs of colors\n    for i in range(k):\n        for j in range(i+1, k):\n            # Calculate the number of ways to paint the fence with these two colors\n            ways_with_color = n // 2\n            # If the remaining number of posts is not divisible by 2, we need to add 1 more color\n            if n % 2!= 0:\n                ways_with_color += 1\n            # Add the number of ways to paint the fence with both colors\n            ways += ways_with_color\n\n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If k is 1 or n is less than or equal to 2, we only need 1 way\n    if k == 1 or n <= 2:\n        return 1\n    \n    # Initialize a 2D list to store the number of ways for each color\n    ways = [[0] * (k+1) for _ in range(n+1)]\n    \n    # Initialize the first row and column with 1\n    ways[1][1] = 1\n    \n    # Iterate over the rest of the rows and columns\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n    \n    # Return the final value in the last row and column\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count variable to 1\n    count = 1\n    \n    # Initialize the count variable to 0\n    same_color = 0\n    \n    # Loop through the range of n+1\n    for i in range(n+1):\n        # If the number of same-color adjacent posts is less than or equal to k, increment the count variable\n        if same_color <= k:\n            count *= (n-i+1)\n            count //= i\n            same_color += 1\n    \n    # Return the count variable\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # Initialize a dictionary to store the count of each color\n    color_count = {}\n    \n    # Initialize a counter variable to keep track of the number of ways of painting the fence\n    num_ways = 0\n    \n    # Loop through all possible colors\n    for color in range(1, k+1):\n        # Increment the count of the current color by 1\n        color_count[color] = 0\n        \n        # Loop through all possible ways of painting the fence using the current color\n        for i in range(n):\n            # Check if the current color has already been used at an earlier index\n            if i > 0 and color == fence[i-1]:\n                # If it has, then it cannot be used at this index\n                continue\n            \n            # Increment the count of the current color by 1\n            color_count[color] += 1\n            \n            # Check if the count of the current color has exceeded 2\n            if color_count[color] > 2:\n                # If it has, then the current way of painting the fence is invalid\n                break\n            \n            # Check if the current way of painting the fence is valid\n            if sum(color_count.values()) <= 2:\n                # If it is, then increment the counter variable\n                num_ways += 1\n                \n            # Reset the count of the current color to 0\n            color_count[color] = 0\n    \n    # Return the number of ways of painting the fence\n    return num_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Step 1: Calculate the number of ways to paint the fence with n posts and k colors\n    ways = 1\n    for i in range(1, n+1):\n        ways *= k\n    # Step 2: Calculate the number of ways to paint the fence with n-1 posts and k colors\n    ways_without_last = 1\n    for i in range(1, k+1):\n        ways_without_last *= i\n    # Step 3: Calculate the number of ways to paint the fence with n-1 posts and k-1 colors\n    ways_without_last /= k\n    # Step 4: Multiply the two numbers to get the final answer\n    final_answer = ways * ways_without_last\n    return final_answer"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n % 2 == 0:\n        return 0\n\n    mod = n // 2\n    ways = 1\n\n    for i in range(1, k + 1):\n        ways = (ways * (i * (i - 1)) // (i - 1)) % (10**9 + 7)\n\n    for i in range(1, mod + 1):\n        ways = (ways * i) % (10**9 + 7)\n\n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    \n    # Initialize an array to keep track of the colors used so far\n    color_used = [False] * k\n    \n    # Initialize the first post as a single color\n    color_used[0] = True\n    \n    # Use a nested loop to iterate over the remaining posts\n    for i in range(1, n):\n        # Check if the current post should be of the same color as the previous one\n        if color_used[i-1] == True:\n            # If it is, then we can paint the current post with the previous post's color\n            color_used[i] = True\n        else:\n            # If not, we can paint the current post with a different color\n            color_used[i] = False\n        \n        # Check if we have painted 2 adjacent posts with the same color\n        if color_used[i] == True and color_used[i-1] == True:\n            count += 1\n        \n        # If we have painted 2 adjacent posts with different colors, then we cannot paint the fence\n        if color_used[i] == False and color_used[i-1] == False:\n            break\n        \n    return count"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    q = n // m\n    return q"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer) using the Babylonian method.\n    '''\n    # calculate the remainder of n divided by m\n    remainder = n % m\n    \n    # if the remainder is not zero, divide n by m and add 1 to the quotient\n    while remainder!= 0:\n        n = m\n        quotient += 1\n        \n        # calculate the remainder of n divided by m\n        remainder = n % m\n    \n    # return the calculated quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    return int(n / m)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    # Calculate the length of the third side\n    length = math.sqrt(area / math.sin(math.pi / 3))\n    # Return the third side\n    return length"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the third side\n    c = math.sqrt(w**2+h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    third_side = s/2\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    c = (w + h) / 2\n    return round(s, 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = (w**2 + h**2) ** 0.5\n    a = math.sqrt(w**2 + h**2)\n    b = (s - a) / 2\n\n    return b"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # calculate the square of the semi-perimeter\n    sp = s ** 2\n\n    # calculate the square of the other side of the triangle\n    os = (w ** 2 + h ** 2 - sp) ** 0.5\n\n    # calculate the hypotenuse\n    hyp = os ** 2\n\n    # find the third side of the triangle\n    third_side = math.sqrt(hyp)\n\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Formula to find the third side\n    c = (w**2 + h**2 - math.sqrt(w**2 + h**2)) / (2*w)\n    \n    # Return the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    # calculate the length of the perimeter\n    s = (w + h) / 2\n    \n    # calculate the area of the triangle\n    A = math.sqrt(s * (s-w) * (s-h))\n    \n    # calculate the side of the other triangle\n    C = 2 * math.sqrt(A)\n    \n    return C"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the square of the hypotenuse\n    hypo = math.sqrt(w**2 + h**2)\n    \n    # Calculate the distance from the hypotenuse to the opposite side\n    a = math.sqrt((w**2 + h**2) - (hypo**2))\n    \n    # Calculate the sum of the distances from the hypotenuse to the opposite sides\n    b = hypo - a\n    \n    # The third side is the square root of the sum of the squares of the distances from the hypotenuse to the opposite sides\n    c = math.sqrt(b**2 + hypo**2)\n    \n    return c"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for item in listval:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for item in listval:\n        if max_val is None or item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = max(listval)\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    '''\n    return max(lst)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    \"\"\"\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not isinstance(listval, list):\n        raise ValueError(\"Input must be a list.\")\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize a variable to store the sum of divisors\n    sum_divisors = 0\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number ** 0.5) + 1):\n        # check if the number is divisible by i\n        if number % i == 0:\n            # if it is, add i to the sum\n            sum_divisors += i\n\n    # return the sum of divisors\n    return sum_divisors"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    # initialize sum variable to 0\n    total = 0\n    # loop through each number from 1 to number/2\n    for i in range(1, number//2+1):\n        # check if number is divisible by i\n        if number % i == 0:\n            # add i to sum if it is\n            total += i\n    # return total sum of divisors\n    return total"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Sort the array in ascending order\n    arr = sorted(arr)\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and find the inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += len(arr) - j - i\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - i - j\n                arr[i], arr[j] = arr[j], arr[i]\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Traverse the sorted array\n    for i in range(n-1):\n        inv_count += (i+1)*(n-i-1)\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = arr[:mid]\n    right = arr[mid:]\n\n    left = merge_sort(left)\n    right = merge_sort(right)\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result += left[i:]\n    result += right[j:]\n\n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    count = 0\n    i = 0\n    j = len(sorted_arr) - 1\n\n    while i < j:\n        if sorted_arr[i] > sorted_arr[j]:\n            count += j - i\n            i += 1\n        else:\n            j -= 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    # initialize variables to keep track of the current inversion count and the largest index seen so far\n    inv_count = 0\n    largest_index = -1\n\n    # loop through the array and compare each element with the largest element seen so far\n    for i in range(len(arr)):\n        if arr[i] > arr[largest_index]:\n            # if the current element is greater than the largest element seen so far, increment the inversion count\n            # and update the largest_index to the current index\n            inv_count += largest_index + 1\n            largest_index = i\n\n    # return the final inversion count\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Count the inversions in the array\n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # iterate through the array and swap elements that are in decreasing order\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n-i-1 # calculate the number of swaps required to sort the array\n                break # break the inner loop to avoid unnecessary swaps\n        \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Store the length of the array\n    n = len(arr)\n\n    # Initialize a variable to store the count of inversions\n    inv_count = 0\n\n    # Use the merge sort algorithm to sort the array\n    merge_sort(arr, 0, n-1)\n\n    # Traverse the sorted array and calculate the count of inversions\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += i - j\n\n    return inv_count\n\n\ndef merge_sort(arr, low, high):\n    '''\n    Sort the array using the merge sort algorithm.\n    '''\n\n    # If the length of the array is less than or equal to 1, return\n    if low == high:\n        return\n\n    # Divide the array into two halves\n    mid = (low + high) // 2\n    merge_sort(arr, low, mid)\n    merge_sort(arr, mid+1, high)\n\n    # Merge the two sorted halves\n    i = low\n    j = mid+1\n    k = low\n    inv_count = 0\n\n    while i <= mid and j <= high:\n        if arr[i] < arr[j]:\n            arr[k] = arr[i]\n            i += 1\n        else:\n            arr[k] = arr[j]\n            inv_count += mid - i + 1\n            j += 1\n        k += 1\n\n    while i <= mid:\n        arr[k] = arr[i]\n        i += 1\n        k += 1\n\n    while j <= high:\n        arr[k] = arr[j]\n        j += 1\n        k += 1\n\n    # Update the count of inversions\n    global inv_count\n    inv_count += mid - low + 1\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Parameters:\n    lst (list): a nested list to flatten\n\n    Returns:\n    list: the flattened list\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # initialize an empty list to hold the flattened list\n    flattened_list = []\n    # loop through each element in the input list\n    for element in list1:\n        # if the element is a list, recursively call flatten_list on it\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            # otherwise, append the element to the flattened list\n            flattened_list.append(element)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for _, tup in enumerate(stdata):\n        max_aggr[tup[0]] += tup[1]\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for i in range(1, len(item)):\n            max_aggr[i] = max(max_aggr[i], max_aggr[i-1] + item[i])\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Initialize a defaultdict to store the maximum aggregate for each transaction\n    agg_max = defaultdict(int)\n\n    # Iterate over the list of tuples\n    for t in stdata:\n        # Get the total amount and the number of items\n        total = t[1]\n        num_items = t[2]\n\n        # Calculate the maximum aggregate for the transaction\n        agg = total * num_items\n\n        # Update the maximum aggregate in the defaultdict\n        agg_max[t[0]] = agg\n\n    # Find the maximum aggregate in the defaultdict\n    max_agg = max(agg_max.values())\n\n    # Return the maximum aggregate\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    customers = defaultdict(int)\n    for item in stdata:\n        customers[item[0]] += item[1]\n        max_sum = max(max_sum, sum(customers.values()))\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    \n    for i in stdata:\n        total = sum(i)\n        max_dict[total] += 1\n        if total > max_sum:\n            max_sum = total\n    \n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate\n    calculated from the list of tuples.\n    '''\n    # Create a defaultdict to store the aggregate counts for each transaction\n    agg_counts = defaultdict(int)\n\n    # Iterate over the list of tuples and update the aggregate counts\n    for transaction in stdata:\n        for item in transaction:\n            agg_counts[item] += 1\n\n    # Calculate the maximum aggregate from the aggregate counts\n    max_agg = max(agg_counts, key=agg_counts.get)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate value for each unique customer\n    max_aggs = defaultdict(int)\n\n    # loop through each tuple in the list of tuples\n    for customer, amount in stdata:\n        # update the maximum aggregate value for the customer\n        max_aggs[customer] = max(max_aggs[customer], amount)\n\n    # loop through the max_aggs dictionary and return the maximum aggregate value\n    return max(max_aggs.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n    '''\n    # Create a dictionary to store the aggregate of each purchase\n    purchase_agg = defaultdict(int)\n    # Iterate through each purchase in the list\n    for purchase in stdata:\n        # Add the amount to the aggregate for that purchase\n        purchase_agg[purchase[1]] += purchase[0]\n    # Find the maximum aggregate value\n    max_agg = max(purchase_agg.values())\n    # Return the maximum aggregate value\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # create a dictionary to store the count of each item in the list\n    count_dict = defaultdict(int)\n\n    # iterate through each tuple in the list\n    for item in stdata:\n        # split the tuple into item and quantity\n        item, quantity = item\n        # update the count of the item in the dictionary\n        count_dict[item] += quantity\n\n    # iterate through the dictionary and find the maximum aggregate\n    max_aggregate = 0\n    for item, count in count_dict.items():\n        # calculate the maximum aggregate for the current item and count\n        max_aggregate = max(max_aggregate, count * item)\n\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the max aggregate for each transaction.\n    max_aggs = defaultdict(int)\n    for trans, amount in stdata:\n        # Add the amount to the max aggregate for this transaction.\n        max_aggs[trans] += amount\n        # If the max aggregate for this transaction is greater than the max aggregate overall,\n        # update the max aggregate overall.\n        if max_aggs[trans] > max_aggs[max(max_aggs, key=max_aggs.get)]:\n            max_aggs[max(max_aggs, key=max_aggs.get)] = max_aggs[trans]\n    # Return the max aggregate overall.\n    return max(max_aggs.values())"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # Helper function to check if a binary sequence has a certain sum of first n bits and last n bits\n    def has_correct_sum(seq, n):\n        return sum(int(bit) for bit in seq[:n]) == sum(int(bit) for bit in seq[-n:])\n    \n    # Initialize count to 0 and create an empty list to store the sequences\n    count = 0\n    sequences = []\n    \n    # Loop through all possible sequences of length 2n\n    for i in range(2**n):\n        # Convert the binary representation to a binary string\n        seq_str = bin(i)[2:]\n        \n        # Check if the sequence has a correct sum of first n bits and last n bits\n        if has_correct_sum(seq_str, n):\n            # If it does, add it to the list of sequences and increment the count\n            sequences.append(seq_str)\n            count += 1\n    \n    # Return the count and the list of sequences\n    return count, sequences"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(1, 2**n+1):\n        sum_first_n = sum(int(digit) for digit in bin(i)[2:].zfill(n))\n        sum_last_n = sum(int(digit) for digit in bin(i)[-n:].zfill(n))\n        if sum_first_n == sum_last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n, -1):\n        total = 0\n        for j in range(n):\n            total += i % 2\n            i //= 2\n        if total == sum(range(1, n+1)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        for j in range(2**n, 2**2*n+1):\n            if sum(bin(i)[2:].zfill(n)) == sum(bin(j)[2:].zfill(n)):\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, 2**n+1):\n        binary_seq = bin(i)[2:].zfill(n)\n        binary_sum = int(binary_seq[:n], 2) + int(binary_seq[n:], 2)\n        if binary_sum == 2**n - 1:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    def get_binary_sequence(n):\n        binary_sequence = [0] * (2 * n)\n        for i in range(n):\n            binary_sequence[2 * i] = 1\n        for i in range(1, 2 * n):\n            binary_sequence[i] = binary_sequence[i - 1] ^ binary_sequence[i - 2]\n        return binary_sequence\n\n    def count_binary_seq_helper(binary_sequence, sum_last_n_bits):\n        count = 0\n        for i in range(len(binary_sequence)):\n            if i >= n:\n                if sum_last_n_bits == (sum(binary_sequence[i - n:i]) + sum(binary_sequence[i - 2 * n:i - n])):\n                    count += 1\n        return count\n\n    binary_sequence = get_binary_sequence(n)\n    count = 0\n    for i in range(len(binary_sequence)):\n        count += count_binary_seq_helper(binary_sequence, sum(binary_sequence[i:i + 2 * n]))\n\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # create a list to store the binary sequences\n    seq_list = []\n    # loop through all possible first n bits\n    for i in range(2**n):\n        # loop through all possible last n bits\n        for j in range(2**n):\n            # if sum of first n bits is same as sum of last n bits, append the binary sequence to the list\n            if ((2**n - i - j) & i == j):\n                seq_list.append(bin(i)[2:].zfill(n) + bin(j)[2:].zfill(n))\n    # return the count of binary sequences\n    return len(seq_list)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    # create a list to store the count of all sequences\n    count = []\n    # loop through all possible numbers of bits (2^n)\n    for i in range(2**n):\n        # extract the first n bits and the last n bits as integers\n        first = i // 2**(n-1)\n        last = i % 2**(n-1)\n        # calculate the sum of first n bits and the sum of last n bits\n        total_first = sum(bin(first)[2:].zfill(n))\n        total_last = sum(bin(last)[2:].zfill(n))\n        # if the sum of first n bits is equal to the sum of last n bits, increment the count\n        if total_first == total_last:\n            count.append(1)\n    # return the count of all binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        sum1 = sum(int(digit) for digit in bin(i)[2:])\n        sum2 = sum(int(digit) for digit in bin(i)[2:][::-1])\n        if sum1 == sum2:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        temp = bin(i)[2:]\n        sum_left = 0\n        sum_right = 0\n        for j in range(n):\n            sum_left += int(temp[j])\n            sum_right += int(temp[-j-1])\n        if sum_left == sum_right:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth to 0\n    depth = 0\n    # traverse through each key in dictionary\n    for key in d:\n        # if key is dictionary, traverse it recursively\n        if isinstance(d[key], dict):\n            depth += 1\n        # if key is not dictionary, increment depth by 1\n        else:\n            depth += 1\n    # return depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for _ in d.values():\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable\n    depth = 0\n    \n    # Iterate through the dictionary\n    for key, value in d.items():\n        # Check if the value is a dictionary\n        if isinstance(value, dict):\n            # Increment the depth by 1\n            depth += 1\n            # Recursively find the depth of the nested dictionary\n            dict_depth(value)\n    \n    # Return the depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key])) + 1\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(k) for k in d.keys())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    if not isinstance(d, dict):\n        raise ValueError(\"Argument must be a dictionary\")\n    depth = 0\n    for _, v in d.items():\n        if isinstance(v, dict):\n            depth = max(depth, dict_depth(v) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        for k, v in d.items():\n            depth = max(depth, dict_depth(v, depth+1))\n        return depth\n    else:\n        return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Check if index is valid or not\n    if index < 0 or index >= len(arr):\n        return \"Invalid index!\"\n\n    # Check if rotations is valid or not\n    if rotations < 0:\n        return \"Invalid rotations!\"\n\n    # Initialize a variable to store the answer\n    result = arr[index]\n\n    # Initialize a variable to store the rotation count\n    count = 0\n\n    # Initialize a variable to store the current element\n    current = arr[index]\n\n    # Iterate through the array to find the element at the given index\n    for i in range(index, len(arr)):\n\n        # If the current element is not equal to the given element,\n        # it means the element is at a different position, hence we can break\n        if arr[i]!= current:\n            break\n\n        # If the current element is equal to the given element,\n        # increment the rotation count and set the current element as the previous element\n        count += 1\n        current = arr[i]\n\n    # If the rotation count is greater than or equal to the given rotations,\n    # return the result\n    if count >= rotations:\n        return result\n    else:\n        return \"Invalid rotations!\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find element at a given index after a certain number of rotations.\n\n    Parameters:\n        arr (list): a list of integers representing the array.\n        ranges (list): a list of tuples representing the number of rotations to perform for each element.\n        rotations (int): the number of rotations to perform.\n        index (int): the index of the element to find after rotations.\n\n    Returns:\n        The element at the given index after the specified number of rotations.\n    \"\"\"\n    # Initialize a variable to store the element at the given index\n    element = None\n\n    # Loop through the ranges of rotations and perform them\n    for rot, range_start, range_end in ranges:\n        # Check if the current rotation matches the specified number of rotations\n        if rotations == rot:\n            # Find the element at the current index after the rotation\n            element = arr[(index + range_start) % len(arr)]\n            # Update the index to start the next rotation from\n            index = (index + range_end) % len(arr)\n            # Exit the loop after finding the element\n            break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, number of rotations, and an index as input.\n    It returns the element at the given index after rotating the array by the specified number of times.\n    \"\"\"\n    # Initialize variables\n    rotated_arr = arr\n    count = 0\n\n    # Rotate the array\n    for i in range(rotations):\n        rotated_arr = rotate(rotated_arr, ranges)\n        count += 1\n\n    # Find the element at the given index after rotating the array\n    rotated_index = (index + rotations - count) % len(rotated_arr)\n    return rotated_arr[rotated_index]\n\ndef rotate(arr, ranges):\n    \"\"\"\n    This function takes an array and a list of ranges as input.\n    It returns the rotated array.\n    \"\"\"\n    rotated_arr = arr.copy()\n\n    # Perform rotations on each range\n    for i in range(len(ranges)):\n        rotated_arr = rotate_range(rotated_arr, ranges[i], i)\n\n    return rotated_arr\n\ndef rotate_range(arr, range_size, range_index):\n    \"\"\"\n    This function takes an array, a range size, and a range index as input.\n    It returns the rotated array.\n    \"\"\"\n    # Initialize variables\n    rotated_arr = arr.copy()\n    left = range_index * range_size\n    right = (range_index + 1) * range_size\n\n    # Rotate the sub-array within the range\n    for i in range(range_size):\n        rotated_arr[left + i] = arr[right + i]\n        rotated_arr[right + i] = arr[left + i]\n\n    return rotated_arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n        arr: list, containing all the elements of the array.\n        ranges: list, containing the number of rotations required for each element.\n        rotations: list, containing the number of rotations required for each element.\n        index: int, representing the index of the element whose value is to be found after the number of rotations.\n\n    Returns:\n        element: int, representing the element at the given index after the number of rotations.\n    '''\n\n    # Function to find the minimum number of rotations required for a given element.\n    def find_min_rotations(arr,index) :\n        min_rotations = 0\n        for i in range(len(arr)) :\n            if i == index :\n                continue\n            if arr[i] > arr[index] :\n                min_rotations += 1\n        return min_rotations\n\n    # Function to rotate the array by a given number of rotations.\n    def rotate(arr,n) :\n        for i in range(n) :\n            temp = arr[0]\n            for j in range(len(arr)-1) :\n                arr[j] = arr[j+1]\n            arr[len(arr)-1] = temp\n\n    # Function to find the element at the given index after the number of rotations.\n    element = arr[index]\n    for i in range(rotations[index]) :\n        rotate(ranges,1)\n        element = arr[index]\n        rotate(ranges,ranges[index]-1)\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(rotations):\n        start = ranges[i][0]\n        end = ranges[i][1]\n        rotated_arr = arr[start:end]\n        count += len(rotated_arr)\n    subarr = arr[ranges[-1][0]:]\n    return subarr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a list of rotations, and an index.\n    It finds the element at the given index after the number of rotations.\n    \"\"\"\n    # Initialize variables to keep track of the index and value of the element we are looking for\n    current_index = index\n    current_value = arr[index]\n    \n    # Iterate through the ranges and rotations lists\n    for i in range(len(ranges)):\n        # If the current index falls within a range, add the number of rotations to the index\n        if current_index >= ranges[i][0]:\n            current_index += rotations[i]\n            \n        # If the current index is within the range but not the rotations, add the number of rotations to the index and the current value\n        elif current_index >= ranges[i][0] and current_index < ranges[i][1]:\n            current_index += rotations[i]\n            current_value = arr[current_index]\n            \n        # If the current index is out of the range, return the current value\n        else:\n            return current_value"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in the array, ranges, rotations and index as input and returns the element at the given index after rotations.\n    \"\"\"\n    if ranges == 0:\n        return arr[index]\n    elif ranges > 0:\n        for i in range(rotations):\n            arr = rotate_left(arr)\n        return arr[index]\n    else:\n        return arr[(index % len(arr)) + len(arr)]\n\ndef rotate_left(arr):\n    \"\"\"\n    This function takes in an array as input and returns the array rotated left by one index.\n    \"\"\"\n    temp = arr[-1]\n    arr = arr[:-1]\n    arr.append(temp)\n    return arr"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations and returns the element at the given index after the number of rotations.\n    \"\"\"\n    if rotations == 0:\n        return arr[index]\n    else:\n        current_index = 0\n        for i in range(0, len(ranges)):\n            if index >= ranges[i][0] and index < ranges[i][1]:\n                current_index = i\n                break\n        if current_index == len(ranges) - 1:\n            current_index = 0\n        else:\n            current_index += 1\n        return find_Element(arr, ranges, rotations - 1, index + (ranges[current_index][1] - ranges[current_index][0]))"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    total_rotations = sum(rotations)\n\n    # Calculate the range of the element at the given index\n    start_range = index + rotations[index] % total_rotations\n    end_range = (index + 1 + rotations[index] % total_rotations) % len(arr)\n\n    # Calculate the total number of elements in the sub-array\n    sub_array_size = (end_range - start_range + 1) // len(ranges)\n\n    # Calculate the indices of the sub-array\n    sub_array_indices = []\n    for i in range(len(ranges)):\n        sub_array_indices.extend(range(start_range + i * sub_array_size, start_range + (i + 1) * sub_array_size))\n\n    # Calculate the indices of the element in the sub-array\n    element_indices = [sub_array_indices.index(i) for i in arr[start_range:end_range + 1]]\n\n    # Find the element at the given index in the sub-array\n    if element_indices[index] == index:\n        return arr[start_range + index]\n    else:\n        return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Get the element at the given index\n    element = arr[index]\n    # Get the number of rotations required\n    rotations = rotations % len(ranges)\n    # Find the rotation that satisfies the index\n    rotation = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i]:\n            rotation = i\n            break\n    # Calculate the index after the rotation\n    new_index = (index - ranges[rotation - 1]) % (ranges[rotation] - ranges[rotation - 1])\n    # Find the element at the new index after rotation\n    new_element = arr[(index - ranges[rotation - 1]) % (ranges[rotation] - ranges[rotation - 1])]\n    return new_element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(r'^p', word, re.IGNORECASE):\n            p_words.append(word)\n    if len(p_words) == 2:\n        return p_words[0], p_words[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(\"^p\")\n    matches = [match.group() for match in pattern.finditer(words)]\n    if len(matches) == 0:\n        return None\n    else:\n        return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w')\n    for word in words:\n        if pattern.match(word):\n            return word, word[2:]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word, words[words.index(word)+1]\n    return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'\\b[Pp]\\w{3,}\\b') # regular expression to match words starting with 'p'\n    for word in words:\n        if re.search(pattern, word):\n            return word.split()[0], word.split()[1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    result = [word for word in words if pattern.match(word)]\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    return matches[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0].lower() == 'p':\n            p_words.append(word)\n        if len(p_words) == 2:\n            break\n    return p_words"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    max_ending_here = float('-inf')\n    end = 0\n    count = 0\n    \n    # Iterate from 0 to k - 1\n    for i in range(k):\n        # Update count and max_ending_here\n        count += 1\n        temp_sum += a[i]\n        max_ending_here = max(max_ending_here, temp_sum)\n        \n        # Check if temp_sum is greater than max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            end = i\n    \n    # Check if ith index is greater than k - 1\n    if index > k - 1:\n        return -1\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    max_ending_here = float('-inf')\n    start = index\n    count = 0\n    \n    # Iterate from 0 to index\n    for i in range(start, index):\n        # Update count and max_ending_here\n        count += 1\n        temp_sum += a[i]\n        max_ending_here = max(max_ending_here, temp_sum)\n        \n        # Check if temp_sum is greater than max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            end = i\n    \n    # Check if kth element is after the ith index\n    if a[k] > a[index]:\n        return max_sum\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    temp_sum = 0\n    max_ending_here = float('-inf')\n    start = index\n    count = 0\n    \n    # Iterate from 0 to index\n    for i in range(start, index):\n        # Update count and max_ending_here\n        count += 1\n        temp_sum += a[i]\n        max_ending_here = max(max_ending_here, temp_sum)\n        \n        # Check if temp_sum is greater than max_sum\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            end = i\n    \n    # Update max_sum and end\n    max_sum += a[k] - a[index]\n    end += 1\n    \n    # Return maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize the maximum sum and maximum subsequence so far\n    max_sum = float('-inf')\n    max_subseq = [0] * (n+1)\n\n    # Loop through all possible indices from index to n\n    for i in range(index, n+1):\n\n        # Calculate the sum of the increasing subsequence from prefix to i\n        sum_i = 0\n        for j in range(i):\n            sum_i += a[j]\n\n        # If the sum of the increasing subsequence from prefix to i is greater than the maximum sum so far and also including k, then update the maximum sum and the maximum subsequence\n        if sum_i > max_sum and i < k:\n            max_sum = sum_i\n            max_subseq = [0] * (i+1)\n            for j in range(i):\n                max_subseq[j+1] = a[j]\n\n    # Return the maximum sum and maximum subsequence\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize a list to store the maximum sum of increasing subsequence from each prefix to i\n    max_sum_list = [0] * n\n    max_sum_list[index] = a[index]\n\n    # Loop from 1 to i-1\n    for i in range(1, index):\n        # If the sum of the current prefix till i is less than or equal to the maximum sum of increasing subsequence from prefix till i-1, then the sum of the current prefix till i will be the maximum sum of increasing subsequence from prefix till i-1 plus the value of the ith element\n        if max_sum_list[i] <= max_sum_list[i-1] + a[i]:\n            max_sum_list[i] = max_sum_list[i-1] + a[i]\n        # If the sum of the current prefix till i is greater than the maximum sum of increasing subsequence from prefix till i-1 plus the value of the ith element, then the sum of the current prefix till i will be the sum of the current prefix till i-1 plus the value of the ith element\n        else:\n            max_sum_list[i] = max_sum_list[i-1] + a[i]\n\n    # Initialize a list to store the maximum sum of increasing subsequence from each prefix to i, including the ith element\n    max_sum_list_including_k = [0] * n\n    max_sum_list_including_k[index] = max(a[index], a[index] + max_sum_list[index-1])\n\n    # Loop from 0 to i-1\n    for i in range(index-1, -1, -1):\n        # If the sum of the current prefix till i is less than or equal to the maximum sum of increasing subsequence from prefix till i-1, then the sum of the current prefix till i will be the maximum sum of increasing subsequence from prefix till i-1 plus the value of the ith element\n        if max_sum_list_including_k[i] <= max_sum_list[i-1] + a[i]:\n            max_sum_list_including_k[i] = max_sum_list[i-1] + a[i]\n        # If the sum of the current prefix till i is greater than the maximum sum of increasing subsequence from prefix till i-1 plus the value of the ith element, then the sum of the current prefix till i will be the sum of the current prefix till i-1 plus the value of the ith element\n        else:\n            max_sum_list_including_k[i] = max_sum_list_including_k[i+1] + a[i]\n\n    # Initialize a variable to store the maximum sum of increasing subsequence including the kth element\n    max_sum_including_k = 0\n\n    # Loop from i+1 to n-1\n    for i in range(index, n):\n        # If the sum of the current prefix till i is greater than the maximum sum of increasing subsequence from prefix till i-1 plus the value of the kth element, then the sum of the current prefix till i will be the sum of the current prefix till i-1 plus the value of the kth element\n        if max_sum_list_including_k[i] > max_sum_list[i-1] + a[k]:\n            max_sum_including_k = max(max_sum_including_k, max_sum_list_including_k[i])\n\n    # Return the maximum sum of increasing subsequence including the kth element\n    return max_sum_including_k\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n:\n        return 0, []\n    if index == k:\n        return max_sum_increasing_subseq(a, n, index + 1, k) + a[index] - a[k - 1], [a[index]]\n    max_sum, max_sum_subseq = max_sum_increasing_subseq(a, n, index + 1, k)\n    if a[index] > a[k - 1]:\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k + 1)[0] + a[index] - a[k - 1])\n        max_sum_subseq = max_sum_subseq + [a[index]]\n    return max_sum, max_sum_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # create a list of zeros of size n\n    dp = [0] * n\n\n    # initialize maximum sum to the first element\n    dp[0] = a[0]\n\n    # fill the rest of the list with the maximum of the first element and the sum of the previous element\n    for i in range(1, n):\n        dp[i] = max(dp[i-1] + a[i], a[i])\n\n    # initialize maximum sum to the first element\n    max_sum = dp[0]\n\n    # initialize a list to store the indices of the elements in the increasing subsequence\n    inc_subseq = []\n\n    # loop from 0 to index\n    for i in range(index):\n        # if the maximum sum of the subsequence so far is greater than the sum of the current element and the maximum sum of the subsequence excluding the current element\n        if dp[i] > dp[i-1] + a[i]:\n            dp[i] = dp[i-1] + a[i]\n\n        # if the maximum sum of the subsequence so far is greater than the maximum sum of the increasing subsequence excluding the current element and the current element\n        if dp[i] > max_sum and i < k:\n            max_sum = dp[i]\n            inc_subseq = [i]\n        # if the maximum sum of the subsequence so far is equal to the maximum sum of the increasing subsequence excluding the current element and the current element\n        elif dp[i] == max_sum and i < k:\n            inc_subseq.append(i)\n\n    # return the indices of the elements in the increasing subsequence and the maximum sum\n    return inc_subseq, max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize a list to store the maximum sum of increasing subsequence from prefix until ith index\n    max_sum = [-float('inf')] * (n - index + 1)\n\n    # Initialize a list to store the indices of the maximum sum of increasing subsequence from prefix until ith index\n    max_index = [0] * (n - index + 1)\n\n    # Initialize a variable to store the maximum sum of increasing subsequence including kth element\n    max_sum_including_k = -float('inf')\n\n    # Initialize a variable to store the index of the maximum sum of increasing subsequence including kth element\n    max_index_including_k = -1\n\n    # Initialize a variable to store the maximum sum of increasing subsequence from prefix until kth index\n    max_sum_from_prefix_to_k = -float('inf')\n\n    # Initialize a variable to store the index of the maximum sum of increasing subsequence from prefix until kth index\n    max_index_from_prefix_to_k = -1\n\n    # Loop through all possible values of i\n    for i in range(index, n):\n\n        # Initialize a variable to store the current sum of increasing subsequence from prefix until ith index\n        current_sum = a[i]\n\n        # Initialize a variable to store the current index of the maximum sum of increasing subsequence from prefix until ith index\n        current_index = i\n\n        # Loop through all possible values of j less than i\n        for j in range(i):\n\n            # Update the current sum of increasing subsequence from prefix until ith index\n            current_sum += a[j]\n\n            # Update the current index of the maximum sum of increasing subsequence from prefix until ith index\n            if current_sum > max_sum[current_index]:\n                max_sum[current_index] = current_sum\n                max_index[current_index] = j\n\n        # Update the maximum sum of increasing subsequence including kth element\n        if a[i] + a[k] > max_sum_including_k:\n            max_sum_including_k = a[i] + a[k]\n            max_index_including_k = i\n\n        # Update the maximum sum of increasing subsequence from prefix until kth index\n        if a[i] > max_sum_from_prefix_to_k:\n            max_sum_from_prefix_to_k = a[i]\n            max_index_from_prefix_to_k = i\n\n        # If the current sum of increasing subsequence from prefix until ith index is greater than the maximum sum of increasing subsequence from prefix until ith index, update the maximum sum of increasing subsequence from prefix until ith index\n        if max_sum[i - index] < current_sum:\n            max_sum[i - index] = current_sum\n            max_index[i - index] = i - index\n\n        # If the current sum of increasing subsequence from prefix until kth index is greater than the maximum sum of increasing subsequence from prefix until kth index, update the maximum sum of increasing subsequence from prefix until kth index\n        if max_sum_from_prefix_to_k < current_sum:\n            max_sum_from_prefix_to_k = current_sum\n            max_index_from_prefix_to_k = i\n\n    # Return the maximum sum of increasing subsequence from prefix until kth index and the index of the maximum sum of increasing subsequence from prefix until kth index\n    return max_sum_from_prefix_to_k, max_index_from_prefix_to_k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(index, n):\n        if a[i] > a[index]:\n            current_sum += a[i]\n        else:\n            if i == index:\n                current_sum += a[i]\n            else:\n                current_sum = 0\n        if current_sum > max_sum and current_sum >= a[i]:\n            max_sum = current_sum\n    if max_sum >= a[k]:\n        return max_sum\n    else:\n        return max_sum + a[k]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if k > index:\n        return 0, []\n\n    prefix_sum = 0\n    current_sum = a[0]\n    current_seq = [0]\n    for i in range(1, n):\n        if a[i] > current_sum + a[i]:\n            current_seq.append(i)\n            current_sum += a[i]\n        elif a[i] > current_sum:\n            prefix_sum += current_sum - a[current_seq[-1]]\n            current_sum = a[i]\n            current_seq = [i]\n        else:\n            current_seq.append(i)\n\n    if k < n:\n        prefix_sum += current_sum - a[current_seq[-1]]\n\n    max_sum = prefix_sum\n    max_seq = current_seq\n\n    for i in range(index, k):\n        current_sum = current_sum - a[current_seq.pop()]\n        prefix_sum += current_sum - a[current_seq[-1]]\n        max_sum = max(max_sum, prefix_sum)\n        max_seq = current_seq\n\n    return max_sum, max_seq\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    dp = [0] * (n+1)\n    dp[0] = 0\n    \n    for i in range(1, n+1):\n        if a[index-i] > a[index-i-1]:\n            dp[i] = dp[index-i-1] + a[index-i]\n        else:\n            dp[i] = dp[index-i]\n            \n    for i in range(k-index+1, n+1):\n        if a[index-i] > a[index-i-1]:\n            dp[i] = max(dp[i], dp[index-i-1] + a[index-i])\n        else:\n            dp[i] = max(dp[i], dp[index-i])\n            \n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n\n    max_sum = float('-inf')\n    start_index = 0\n    end_index = 0\n\n    for i in range(n):\n        if i < index:\n            a[i] = 0\n        if a[i] == 0:\n            continue\n\n        if i == k - 1:\n            if k > index:\n                a[i] = a[index]\n            else:\n                a[i] = 0\n\n        if i >= index:\n            if a[i] > a[start_index]:\n                a[i], a[start_index] = a[start_index], a[i]\n                start_index = i\n\n        if i <= index and i!= k - 1:\n            a[i] = 0\n\n        if a[i] > max_sum:\n            max_sum = a[i]\n            end_index = i\n\n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    new_tuplex = tuple(tuple(new_tuplex[i:i+m]) for i in range(0, len(new_tuplex), n))\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize a new tuple to store the colon\n    colon = ()\n    # Loop through the given tuple\n    for i in range(m):\n        # Loop through the given tuple again\n        for j in range(n):\n            # Append the element at position i,j to the colon tuple\n            colon += (tuplex[i][j],)\n    # Return the colon tuple\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # divide the tuple into m parts\n    parts = [new_tuplex[i:i+m] for i in range(0,len(new_tuplex),m)]\n    \n    # create a new tuple with n elements per part\n    colon = tuple(tuple(part[:n]) for part in parts)\n    \n    # return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Make a deep copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Initialize an empty list to store the colon\n    colon = []\n    # Loop through the first m elements of the tuple\n    for i in range(m):\n        # Add the i-th element of the input tuple to the colon\n        colon.append(tuplex_copy[i])\n        # Shift all the elements starting from i+1 to the end of the tuple\n        for j in range(i+1, m):\n            tuplex_copy[j-1] = tuplex_copy[j]\n    # Add the i-th element of the last m elements of the tuple to the colon\n    colon.append(tuplex_copy[m-1])\n    # Reverse the colon to obtain the desired colon\n    colon.reverse()\n    # Return the colon\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex) # make a copy of the original tuple\n    new_tuplex = new_tuplex[::m] # get every mth element\n    new_tuplex = new_tuplex[:n] # get the first n elements\n    return tuple(new_tuplex) # convert the list back to a tuple\n"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = tuple()\n    for i in range(m):\n        row = tuple()\n        for j in range(n):\n            row += (tuplex[i][j],)\n        col += (row,)\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # Check if the tuple has m elements\n    if len(tuplex)!= m:\n        raise ValueError(\"The tuple should have m elements.\")\n\n    # Create a new list to store the colon\n    colon = []\n\n    # Loop through the tuple\n    for i in range(m):\n        # Create a new tuple with n elements\n        new_tuplex = tuple(deepcopy(tuplex[i:i+n]))\n        colon.append(new_tuplex)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if isinstance(tuplex, tuple):\n        return tuple(deepcopy(tuplex[:m])) + (tuplex[m],) + tuple(deepcopy(tuplex[m+1:n]))\n    else:\n        return tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for i in range(m):\n        row.append(tuplex[i][n-1])\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the original tuple\n    col = deepcopy(tuplex)\n    # loop through each element in the tuple\n    for i in range(m):\n        # find the index of the element with the maximum value\n        max_index = i\n        for j in range(i+1, m):\n            if col[j] > col[max_index]:\n                max_index = j\n        # swap the maximum value with the element at index i\n        col[i], col[max_index] = col[max_index], col[i]\n        # loop through the remaining elements in the tuple\n        for j in range(i+1, n):\n            # find the index of the element with the maximum value\n            max_index = j\n            for k in range(j+1, n):\n                if col[k] > col[max_index]:\n                    max_index = k\n            # swap the maximum value with the element at index j\n            col[j], col[max_index] = col[max_index], col[j]\n    return tuple(col)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in the two lists\n    max_val = max(max(nums1), max(nums2))\n    \n    # Initialize the product list with zeros\n    product_list = [0]*N\n    \n    # Loop through the N elements of the product list\n    for i in range(N):\n        # Find the largest product among the two selected factors\n        product_list[i] = max(nums1[i], nums2[i]) * max(nums1[i+N], nums2[i+N])\n    \n    # Return the maximum value in the product list\n    return max(product_list)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum product and the count of products\n    max_product = nums1[0] * nums2[0]\n    product_count = 1\n\n    # Iterate through the sorted lists\n    for i in range(1, N):\n        # Calculate the next product and update the count\n        next_product = nums1[i] * nums2[i]\n        product_count += 1\n\n        # If the next product is greater than the current maximum, update the maximum and the count\n        if next_product > max_product:\n            max_product = next_product\n            product_count = 1\n\n    # Return the maximum product and the count of products\n    return max_product, product_count"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Initialize two empty lists to store the largest products\n    largest_products1 = []\n    largest_products2 = []\n\n    # Loop through the two lists and find the largest products using the specified number of factors\n    for i in range(len(nums1)):\n        largest_product1 = max(nums1[i] * nums2[j] for j in range(N))\n        largest_products1.append(largest_product1)\n\n    for i in range(len(nums2)):\n        largest_product2 = max(nums1[k] * nums2[i] for k in range(N))\n        largest_products2.append(largest_product2)\n\n    # Find the indices of the largest products in the two lists\n    indices1 = [nums1.index(largest_product) for largest_product in largest_products1]\n    indices2 = [nums2.index(largest_product) for largest_product in largest_products2]\n\n    # Return the indices of the largest products\n    return indices1, indices2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    This function takes in two lists of numbers and an integer N representing the number of largest products to be selected.\n    It returns a list of the selected products.\n    \"\"\"\n    # Sort the first list in descending order\n    nums1.sort(reverse=True)\n    \n    # Initialize a list to store the products\n    products = []\n    \n    # Loop through the first list to find the largest N products\n    for i in range(N):\n        # Calculate the product of the i-th largest number in nums1 and the remaining numbers in nums2\n        product = nums1[i] * sum(nums2[i:])\n        \n        # Add the product to the list of products\n        products.append(product)\n    \n    return products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the largest product of two numbers\n    def largest_product_of_two(a, b):\n        return max(a * b, b * a)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Iterate over all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            # Find the largest product of the current pair\n            largest_product = largest_product_of_two(nums1[i], nums1[j])\n            largest_product = max(largest_product, largest_product_of_two(nums2[i], nums2[j]))\n            largest_product = max(largest_product, largest_product_of_two(nums1[j], nums2[i]))\n            largest_product = max(largest_product, largest_product_of_two(nums2[j], nums1[i]))\n            # If the current pair satisfies the given condition, add it to the list of largest products\n            if largest_product > largest_product_of_two(nums1[i], nums2[j]) * 2:\n                largest_products.append(largest_product)\n                # Keep track of the number of pairs that satisfy the condition\n                num_pairs = 1\n                # Iterate over all possible pairs of factors after the current one\n                for k in range(j+1, len(nums1)):\n                    # Check if the current pair of factors satisfies the given condition\n                    if largest_product_of_two(nums1[i], nums1[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[i], nums2[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[i], nums1[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[i], nums2[k]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[k], nums1[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums1[k], nums2[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[k], nums1[j]) * 2 == largest_product:\n                        num_pairs += 1\n                    if largest_product_of_two(nums2[k], nums2[j]) * 2 == largest_product:\n                        num_pairs += 1\n                # If the current pair satisfies the given condition multiple times, add it to the list of largest products\n                if num_pairs == N:\n                    largest_products.append(largest_product)\n\n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Find the N largest products from the first list\n    largest_products = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        largest_products.append(product)\n\n    # Find the N largest products from the second list\n    second_largest_products = []\n    for i in range(N):\n        product = nums2[i] * nums1[i]\n        second_largest_products.append(product)\n\n    # Find the sum of the largest products from both lists\n    total_sum = sum(largest_products + second_largest_products)\n\n    return total_sum"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    total = 0\n    for i in range(N):\n        total += nums1[i] * nums2[i]\n\n    return total"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables to store the largest products and the current product\n    largest_product = float('-inf')\n    current_product = 1\n    \n    # Loop through the first list of N elements\n    for i in range(N):\n        # Multiply the current product with the first element of the first list and the second element of the second list\n        current_product *= nums1[i] * nums2[i]\n        \n        # If the current product is greater than the largest product, update the largest product\n        if current_product > largest_product:\n            largest_product = current_product\n        \n        # If the number of elements processed is N, reset the current product to 1 and start over from the beginning of the list\n        if i == N-1:\n            current_product = 1\n            \n    return largest_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum product of any two numbers in nums1\n    max_product1 = max(nums1[0] * nums1[1], nums1[0] * nums1[N-1], nums1[1] * nums1[N-1])\n    \n    # Find the maximum product of any two numbers in nums2\n    max_product2 = max(nums2[0] * nums2[1], nums2[0] * nums2[N-1], nums2[1] * nums2[N-1])\n    \n    # Calculate the difference between the maximum products and the product of the minimum numbers in the two lists\n    total_difference = max_product1 - max_product2\n    \n    # Calculate the number of pairs of indices that sum up to the total difference\n    pairs_count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == total_difference:\n                pairs_count += 1\n    \n    # Calculate the ratio of the total number of pairs to the specified N\n    pairs_ratio = pairs_count / (len(nums1) * len(nums2))\n    \n    # Calculate the required number of largest products\n    required_products = int(N * pairs_ratio)\n    \n    # Find the indices of the largest products in each list\n    largest_products1 = []\n    largest_products2 = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] + nums2[j] == max(nums1[i] * nums1[j], nums2[i] * nums2[j]):\n                largest_products1.append(i)\n                largest_products2.append(j)\n    \n    # Return the indices of the largest products in each list and the ratio of the largest products to the total number of pairs\n    return largest_products1, largest_products2, largest_products1 + largest_products2, pairs_ratio"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum product of all pairs of elements in both lists\n    max_product = max(nums1[i]*nums2[j] for i in range(len(nums1)) for j in range(len(nums2)))\n    # Initialize two lists to store the largest products for each factor\n    largest_products1 = []\n    largest_products2 = []\n    # Loop through each element in the first list\n    for i in range(len(nums1)):\n        # Loop through each element in the second list and find the maximum product for each pair\n        max_product_i = 0\n        for j in range(len(nums2)):\n            max_product_ij = max(nums1[i]*nums2[j], nums1[i]*max(nums2[j], nums2[j+1]), nums1[i+1]*max(nums2[j], nums2[j+1]))\n            max_product_i = max(max_product_i, max_product_ij)\n        # If the maximum product for the current factor is greater than the maximum product found so far, update the list of largest products for that factor\n        if max_product_i > max(largest_products1) and max_product_i > max(largest_products2):\n            largest_products1 = [max_product_i] if len(largest_products1) == 0 else largest_products1\n            largest_products2 = [max_product_i] if len(largest_products2) == 0 else largest_products2\n    # Return the list of largest products for each factor\n    return (max(largest_products1), max(largest_products2))"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\n\nprint(maximum(4, 5))   # Output: 5\nprint(maximum(10, 2))  # Output: 10\nprint(maximum(-1, 0))  # Output: 0\nprint(maximum(0, -2))  # Output: -2"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple\n    tup = tuple(lst)\n    # Return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    # set the rightmost bit to 1\n    n |= n & (-n)\n    # loop until the leftmost bit is set to 1\n    while not n & 1:\n        # clear the leftmost bit\n        n &= n - 1\n    # return the result\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to keep track of the leftmost unset bit\n    unset_bit = 0\n\n    # Iterate over all bits in the number\n    for i in range(31):\n        # If the current bit is 0, set it to 1 and move on to the next bit\n        if not (n & (1 << i)):\n            unset_bit = i\n            n |= (1 << i)\n            break\n\n    # Return the modified number with the leftmost unset bit set to 1\n    return n | (1 << unset_bit)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    bit_len = len(bin(n)[2:]) # get the number of bits in the binary representation of n\n    while bit_len > 0:\n        bit = (1 << bit_len) - 1 # get the value of the rightmost bit for the current bit length\n        if (n & bit) == 0: # check if the current bit is not set (i.e., set_left_most_unset_bit is the leftmost unset bit)\n            n |= bit # set the current bit to 1\n            break # exit the loop\n        bit_len -= 1 # decrement the bit length by 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Convert the integer to a binary string\n    binary_str = bin(n)[2:]\n    # Loop through the binary string from right to left\n    for i in range(len(binary_str)-1, -1, -1):\n        # If the bit at index i is 0, set it to 1 and move on\n        if binary_str[i] == '0':\n            binary_str[i] = '1'\n            break\n    # Convert the binary string back to an integer and return\n    return int(binary_str, 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit of a given number.\n    '''\n    bit = 1 << 31  # Initialize the bit to the leftmost bit set\n    while (bit & n) == 0:\n        bit <<= 1\n    \n    # Set the leftmost unset bit\n    n |= bit\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in a given integer n.\n    \"\"\"\n    # Convert n to binary string and split into list of bits\n    bits = [int(digit) for digit in bin(n)[2:]]\n    # Set the left most unset bit to 1\n    bits[0] = 1\n    # Convert bits back to integer and return\n    return int(''.join(str(bit) for bit in bits), 2)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    while n & 1 == 0: \n        n >>= 1 \n        \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        # check the rightmost bit\n        if n & 1:\n            # if it is 1, then we have to set the leftmost unset bit\n            return n | (1 << n.bit_length())\n        else:\n            # if it is 0, then we need to check the next power of 2\n            return set_left_most_unset_bit(n >> 1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the index of the leftmost unset bit\n    i = 0\n    while (n & (1 << i)) == 0:\n        i += 1\n\n    # Set the leftmost unset bit\n    n |= (1 << i)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone.\n    \n    Parameters:\n        r: float, the radius of the base of the cone\n        h: float, the height of the cone\n    \n    Returns:\n        float, the volume of the cone\n    \n    \"\"\"\n    vol = math.pi * r**2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return math.pi * r**2 * h / 3"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (1/3) * math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    area_cone = math.pi * r * r\n    volume_cone = area_cone * h / 3\n    return volume_cone"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius r and height h of a cone as inputs and returns the volume of the cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power < n:\n        power <<= 1\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # check if the input number is less than or equal to 1\n    if n <= 1:\n        return 1\n    \n    # if the input number is greater than 1, find the highest power of 2 that is less than or equal to n\n    # by iteratively dividing n by 2 and adding 1 to the result until n becomes 1\n    while n > 1:\n        n //= 2\n    \n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Initialize power variable to 0\n    power = 0\n    \n    # While n is greater than 0\n    while n > 0:\n        \n        # Check if remainder of n divided by 2 is equal to 0\n        if n % 2 == 0:\n            \n            # If n is even, update power variable\n            power += 1\n            \n            # Divide n by 2 to get n/2\n            n /= 2\n            \n        # If n is odd, divide n by 2\n        else:\n            n /= 2\n            \n    # Return the highest power of 2\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize highest power of 2 to 0\n    highest_power = 0\n    \n    # loop through all numbers from 0 to n\n    for i in range(0, n+1):\n        # if the number is a power of 2, check if it is greater than the current highest power\n        if i == 0 or (i & (i-1)) == 0:\n            if i > highest_power:\n                highest_power = i\n    \n    # return the highest power of 2 that is less than or equal to n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 to 1\n    highest_power = 1\n    # Check each bit of the number until the highest power of 2 is less than or equal to n\n    while highest_power <= n:\n        # Check if the highest power of 2 is a power of 2\n        if highest_power & (highest_power - 1) == 0:\n            return highest_power\n        # Increment the highest power of 2 by 1\n        highest_power <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 1 << highest_Power_of_2(n//2)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        # check if n is already a power of 2\n        if n & (n-1) == 0:\n            return n\n        else:\n            # find the next highest power of 2 that is greater than the input n\n            power = 1\n            while power <= n:\n                power <<= 1\n            return power-1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    # convert n to binary\n    binary = bin(n)[2:]\n    \n    # initialize max power of 2\n    max_power_of_2 = 0\n    \n    # loop through the binary string from right to left\n    for i in range(len(binary)-1, -1, -1):\n        # if the binary digit is 1, set the max power of 2 to i+1\n        if binary[i] == '1':\n            max_power_of_2 = i+1\n            break\n    \n    # return max power of 2\n    return max_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    This function finds the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all possible numbers of bits to check for the highest power of 2\n    for i in range(32):\n        # if n is a power of 2, return it\n        if n & (1 << i):\n            return 1 << i\n    # if we made it this far, n is not a power of 2, so return None\n    return None"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th Lucas number.\n    \"\"\"\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # initialize the first two numbers of the sequence\n    a = 2\n    b = 1\n    if n == 1:\n        return a\n    elif n == 2:\n        return b\n    else:\n        # loop through the remaining numbers in the sequence\n        for i in range(2, n+1):\n            # calculate the next number in the sequence\n            c = a + b\n            # update the values of a and b for the next iteration\n            a = b\n            b = c\n        return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    \n    # Initialize first two numbers of lucas sequence\n    a, b = 2, 1\n    \n    # Initialize sum of lucas sequence\n    lucas = a + b\n    \n    # Loop to generate nth number in lucas sequence\n    for i in range(2, n+1):\n        # Compute next number in lucas sequence\n        c = lucas + a\n        \n        # Update sum of lucas sequence\n        lucas = b\n        b = c\n    \n    return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find then'th Lucas number using the formula L(n) = 2*L(n-1) - L(n-2).\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = 2\n        for i in range(2, n+1):\n            lucas += lucas - 1\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer `n` as input and returns then'th lucas number.\n    The lucas number is defined as the sum of the first two numbers in the sequence, which are 2 and 1.\n    In other words, then'th lucas number is the sum of the (n-1)th and (n-2)th lucas numbers.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two lucas numbers\n    a, b = 2, 1\n    \n    # Loop through the number of times required\n    for i in range(2, n+1):\n        # Calculate the next lucas number\n        c = a + b\n        \n        # Update the values of a and b for the next iteration\n        a = b\n        b = c\n        \n    # Return the nth lucas number\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Apply the format string to each element in the list\n    list_ = [string.format(x) for x in list_]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(i, string) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_item = string.format(item)\n        formatted_list.append(formatted_item)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize empty dictionary to store the final output\n    result = {}\n    \n    # iterate through the lists and add their elements to the dictionary\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l3[i]\n    \n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Create a dictionary for the first list\n    d1 = {}\n    for i in range(len(l1)):\n        d1[str(i+1)] = l1[i]\n\n    # Create a dictionary for the second list\n    d2 = {}\n    for i in range(len(l2)):\n        d2[str(i+1)] = l2[i]\n\n    # Create a dictionary for the third list\n    d3 = {}\n    for i in range(len(l3)):\n        d3[str(i+1)] = l3[i]\n\n    # Combine the three dictionaries into a single dictionary\n    d = {**d1, **d2, **d3}\n\n    # Return the combined dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n\n    return nested_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final result\n    result = {}\n\n    # Iterate through each list and add the elements to the dictionary\n    for i in range(len(l1)):\n        # Add the first list element as the key for the inner dictionary\n        inner_dict = {l1[i]: l2[i]}\n        # Add the second list element as the value for the inner dictionary\n        inner_dict[l3[i]] = l2[i]\n        # Add the inner dictionary to the result dictionary\n        result[i] = inner_dict\n    \n    # Return the result dictionary\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]][l3[i]] = l3[i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        *args: One or more lists to convert.\n\n    Returns:\n        Nested dictionary of the lists converted.\n    \"\"\"\n    result = {}\n\n    for arg in args:\n        if isinstance(arg, list):\n            for item in arg:\n                if isinstance(item, dict):\n                    for key, value in item.items():\n                        result.setdefault(key, []).append(value)\n                else:\n                    result[item] = []\n        else:\n            result[arg] = []\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        if i % 2 == 0:\n            if l1[i] not in result:\n                result[l1[i]] = {l2[i]: l3[i]}\n            else:\n                result[l1[i]][l2[i]] = l3[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the nested dictionaries\n    nested_dict = {}\n    # Iterate over the three lists and append the values to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i][j]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for l in args:\n        for i, item in enumerate(l):\n            if isinstance(item, list):\n                result[i] = convert_list_dictionary(*item)\n            else:\n                result[i] = item\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    # if n is even, the maximum sum possible is n\n    if n % 2 == 0:\n        return n\n    \n    # if n is odd, the maximum sum possible is the sum of the first n/2, n/3, n/4, and n/5\n    else:\n        return (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def fibonacci(n):\n        if n <= 1:\n            return n\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, fibonacci(i))\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n\n    if n == 2:\n        return 5\n\n    if n == 3:\n        return 14\n\n    if n == 4:\n        return 28\n\n    if n == 5:\n        return 45\n\n    if n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n\n\n    else:\n        return get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n + get_max_sum(n/5)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, get_max_sum(n//2))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    if n == 1:\n        return n\n    elif n == 2:\n        return 8\n    elif n == 3:\n        return 22\n    elif n == 4:\n        return 63\n    elif n == 5:\n        return 177\n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n\n    elif n == 2:\n        return 2\n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    \n    half_sum = get_max_sum(n//2)\n    three_sum = get_max_sum(n//3)\n    four_sum = get_max_sum(n//4)\n    five_sum = get_max_sum(n//5)\n    \n    return max(half_sum + three_sum + four_sum + five_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case for n = 1\n    if n == 1:\n        return n\n    \n    # Recursive case for n > 1\n    else:\n        # Calculate the maximum sum for n/2\n        max_sum_n_2 = get_max_sum(n//2)\n        \n        # Calculate the maximum sum for n/3\n        max_sum_n_3 = get_max_sum(n//3)\n        \n        # Calculate the maximum sum for n/4\n        max_sum_n_4 = get_max_sum(n//4)\n        \n        # Calculate the maximum sum for n/5\n        max_sum_n_5 = get_max_sum(n//5)\n        \n        # Calculate the maximum sum for n\n        max_sum_n = max(max_sum_n_2+max_sum_n_3+max_sum_n_4+max_sum_n_5, n)\n        \n        return max_sum_n"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with the maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    max_list = None\n\n    # Loop through the list and find the maximum length\n    for item in input_list:\n        length = len(str(item))\n        if length > max_length:\n            max_length = length\n            max_list = item\n\n    # Return the maximum length list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    This function takes a list as input and returns the list with the maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = [item]\n        elif length == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the set has any elements\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # use set() to remove duplicates\n    test_set = set(test_tup)\n    # check if set is empty\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count of each character in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # loop through the dictionary and find the first non-repeating character\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(string):\n    '''\n    This function takes a string as input and returns the first non-repeated character in the string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    frequency = {}\n    for char in string:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n\n    # Find the first non-repeated character in the string\n    for char in string:\n        if frequency[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Given a string, return the first non-repeating character.\n\n    Args:\n    str1: a string to search for a non-repeating character in\n\n    Returns:\n    The first non-repeating character in str1, or None if there is none.\n    \"\"\"\n    char_set = set()  # create an empty set to store unique characters\n    for char in str1:  # iterate over each character in str1\n        if char not in char_set:  # check if the character is not already in the set\n            char_set.add(char)  # add the character to the set\n    if not char_set:  # if the set is empty, there are no non-repeating characters\n        return None\n    else:\n        return min(char_set)  # return the first element in the set (the first non-repeating character)"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as an argument and returns the first non-repeating character in the string.\n    If no non-repeating character is found, then it will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # iterate through the characters in the string again\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store unique characters in the string\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Iterate through the dictionary and find the first character with a count of 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n\n    # If no character has a count of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each character in the string\n    freq = {}\n    # Initialize a variable to store the first non-repeating character\n    first_non_repeat = None\n    \n    # Iterate over each character in the string\n    for char in str1:\n        # If the character has not been seen before, update the frequency count and set the first_non_repeat\n        if char not in freq:\n            freq[char] = 1\n            first_non_repeat = char\n        # If the character has already been seen before, update its frequency count\n        else:\n            freq[char] += 1\n            \n    # If no non-repeating character has been found, return None\n    if first_non_repeat is None:\n        return None\n    \n    # Otherwise, return the first non-repeating character\n    else:\n        return first_non_repeat"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char in str1:\n        if char_dict[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re \n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Check if the string matches the given regex pattern\n    match = re.match(regex, string)\n    \n    # If the string matches, return True\n    if match:\n        return True\n    \n    # If the string does not match, return False\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the median\n    mid = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        median = sorted_numbers[mid]\n\n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function finds the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    num_list = sorted([a, b, c])\n\n    # Calculate the median based on the length of the list\n    if len(num_list) % 2 == 0:\n        median = (num_list[len(num_list)//2] + num_list[(len(num_list)//2)-1]) / 2\n    else:\n        median = num_list[len(num_list)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    nums = [a, b, c]\n    nums.sort()\n    # Find the median of the three numbers\n    if len(nums) % 2 == 1:\n        # If the length of the sorted array is odd, the median is the middle number\n        median = nums[len(nums)//2]\n    else:\n        # If the length of the sorted array is even, the median is the average of the two middle numbers\n        median = (nums[len(nums)//2 - 1] + nums[len(nums)//2]) / 2\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n\n    # Sort the three numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Calculate the median of the three numbers\n    median = numbers[len(numbers) // 2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers\n    numbers = sorted([a, b, c])\n    \n    # Find the median\n    if len(numbers) % 2 == 0:\n        # If the length of the list is even, take the average of the middle two elements\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        # If the length of the list is odd, take the middle element\n        median = numbers[len(numbers)//2]\n    \n    # Return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Calculates the median of three numbers using the Quickselect algorithm.\n\n    Args:\n    a (int): the first number\n    b (int): the second number\n    c (int): the third number\n\n    Returns:\n    int: the median of the three numbers\n    \"\"\"\n\n    # Create a list containing all three numbers\n    numbers = [a, b, c]\n\n    # Sort the list using the quicksort algorithm\n    numbers = quicksort(numbers)\n\n    # Calculate the indices of the two middle numbers\n    middle = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[middle - 1] + numbers[middle]) / 2\n    else:\n        median = numbers[middle]\n\n    return median\n\n\ndef quicksort(numbers):\n    \"\"\"\n    Sorts the given list of numbers using the Quickselect algorithm.\n\n    Args:\n    numbers (list): the list of numbers to be sorted\n\n    Returns:\n    list: the sorted list of numbers\n    \"\"\"\n\n    # Base case: if the list has only one element, it's already sorted\n    if len(numbers) <= 1:\n        return numbers\n\n    # Choose a pivot element randomly\n    pivot = random.choice(numbers)\n\n    # Partition the list into two parts: elements smaller than the pivot and elements greater than the pivot\n    left = [x for x in numbers if x < pivot]\n    middle = [x for x in numbers if x == pivot]\n    right = [x for x in numbers if x > pivot]\n\n    # Recursively sort the left and right partitions\n    left = quicksort(left)\n    right = quicksort(right)\n\n    # Merge the sorted left and right partitions with the middle partition to obtain the sorted list\n    sorted_list = left + middle + right\n\n    return sorted_list\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a,b,c])\n    \n    # find the middle number of the sorted list\n    middle_number = sorted_numbers[1]\n    \n    # calculate the median\n    if sorted_numbers.count(middle_number) % 2 == 0:\n        median = (sorted_numbers[sorted_numbers.index(a)] + sorted_numbers[sorted_numbers.index(b)])/2\n    else:\n        median = sorted_numbers[sorted_numbers.index(middle_number)]\n    \n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle two numbers in the sorted array\n    middle_index = len(sorted_numbers) // 2\n    middle_numbers = sorted_numbers[middle_index - 1: middle_index + 2]\n\n    # Calculate the median as the average of the middle two numbers\n    median = sum(middle_numbers) / len(middle_numbers)\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # get the length of the array\n    length = len(nums)\n\n    # if the length of the array is odd, the median is the middle number\n    if length % 2!= 0:\n        median = nums[length // 2]\n    # if the length of the array is even, the median is the average of the two middle numbers\n    else:\n        mid1 = length // 2 - 1\n        mid2 = length // 2\n        median = (nums[mid1] + nums[mid2]) / 2\n\n    # return the median value\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the length of the sorted array\n    length = len(sorted_numbers)\n    \n    # If the length is odd, the median is the middle number\n    if length % 2 == 1:\n        return sorted_numbers[length // 2]\n    \n    # If the length is even, the median is the average of the two middle numbers\n    else:\n        return (sorted_numbers[length // 2 - 1] + sorted_numbers[length // 2]) / 2"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        for digit in str(num):\n            sum_digits += int(digit)\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        # convert the number to a string and compute the sum of its digits\n        digits_sum = sum(int(digit) for digit in str(num))\n        # add the result to the result list\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sums\n    sums = []\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Initialize a variable to store the sum of digits\n        sum_of_digits = 0\n        \n        # Convert the number to a string and loop through each character\n        for digit in str(num):\n            # Convert the character to an integer and add it to the sum of digits\n            sum_of_digits += int(digit)\n            \n        # Add the sum of digits to the sums list\n        sums.append(sum_of_digits)\n        \n    # Return the sums list\n    return sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit = num % 10\n            digit_sum += digit\n            num //= 10\n        total += digit_sum\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        sum += temp\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        result += temp\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The input tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # convert tuples to lists for bitwise xor operation\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # perform bitwise xor operation on each list element\n    result = [x ^ y for x, y in zip(list1, list2)]\n    # convert result to tuple and return it\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor = 0\n    for i in range(len(test_tup1)):\n        xor = xor ^ test_tup1[i] ^ test_tup2[i]\n    return xor\n"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_sum = 0\n    for i in range(len(test_tup1)):\n        xor_sum = xor_sum ^ test_tup1[i] ^ test_tup2[i]\n    return xor_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: input tuples must have the same length.\"\n    \n    # Iterate over the tuples and perform the bitwise xor operation\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    \n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    # Initialize variables to hold the result and the bitwise xor value\n    result = 0\n    xor_value = 0\n    \n    # Iterate over the tuple elements and perform the bitwise xor operation\n    for i in range(len(test_tup1)):\n        xor_value = test_tup1[i] ^ test_tup2[i]\n        result |= xor_value\n    \n    # Return the result as the final xor value\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Iterate through each element of the list\n    for elem in test_list:\n        # Convert the element to a tuple\n        tup = tuple(elem)\n        # Add the tuple to the set\n        unique_tuples.add(tup)\n    # Return the length of the set, which will be the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(sorted(item)))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Use set() to convert the list to a set of tuples\n    unique_tuples = set(test_list)\n\n    # Use len() to get the length of the unique_tuples set\n    unique_tuple_count = len(unique_tuples)\n\n    return unique_tuple_count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    unique_freq_dict = {}\n    for key, value in freq_dict.items():\n        if value == 1:\n            unique_freq_dict[key] = value\n\n    return len(unique_freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store the unique tuples\n    unique_tuples = set()\n    \n    # Loop through the list and add each tuple to the set\n    for tup in test_list:\n        unique_tuples.add(tup)\n    \n    # Return the size of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[0])):\n            test_tup1[i][j] += test_tup2[i][j]"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if the given input is a tuple or not\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError(\"Both the input must be tuples\")\n    \n    # Check if the lengths of the tuples are equal or not\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have same length\")\n    \n    # Perform addition of tuple elements index wise\n    for i in range(len(test_tup1)):\n        test_tup1[i] += test_tup2[i]\n    \n    # Return the modified tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples should have same length.\")\n        return\n    \n    result = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= tuple:\n            print(\"Error: All elements in both input tuples should be tuples.\")\n            return\n        \n        if type(test_tup2[i])!= tuple:\n            print(\"Error: All elements in both input tuples should be tuples.\")\n            return\n        \n        for j in range(len(test_tup1[i])):\n            if len(test_tup1[i])!= len(test_tup2[i]):\n                print(\"Error: Both nested tuple should have same length.\")\n                return\n            \n            if type(test_tup1[i][j])!= type(test_tup2[i][j]):\n                print(\"Error: All elements in both nested tuples should have same data type.\")\n                return\n            \n            if type(test_tup1[i][j])!= int and type(test_tup1[i][j])!= float:\n                print(\"Error: All elements in both nested tuples should have numeric data type.\")\n                return\n            \n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    \n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both input tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Loop through both tuples\n    for i in range(len(test_tup1)):\n        # If elements are not of same type, raise exception\n        if not isinstance(test_tup1[i], type(test_tup2[i])):\n            raise TypeError(\"Element type mismatch for tuple1 and tuple2!\")\n        # Add the elements of both tuples\n        test_tup1[i] += test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Initialize the result tuple with the length of the first tuple\n    result = (0,) * len(test_tup1)\n\n    # Loop through the tuple elements and add them at their respective index\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] + test_tup2[i]\n\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = []\n        for j in range(len(test_tup1[i])):\n            temp.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    This function takes in two numbers and returns the minimum value.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    This function takes two tuples as input and checks if the element exists within the first tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(\"The element exists within the first tuple.\")\n    else:\n        print(\"The element does not exist within the first tuple.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    for i in tuplex:\n        if i in tuple1:\n            return True\n\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        print(f\"{tuplex} is in {tuple1}\")\n    else:\n        print(f\"{tuplex} is not in {tuple1}\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    This function takes in a tuple of integers and another tuple of integers.\n    It then checks whether the element in the first tuple exists within the second tuple.\n    \"\"\"\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x as input and returns True if the parity of x is odd, and False otherwise.\n    '''\n    if x%2!=0: # If x is odd\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    # Check if x is a number\n    if not isinstance(x, int):\n        return \"Error: x is not a number.\"\n\n    # Calculate the parity of x\n    parity = 1 if x % 2 == 0 else 0\n\n    # Return the parity\n    return \"The parity of \" + str(x) + \" is \" + str(parity)"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0:\n        return \"The number is odd.\"\n    else:\n        return \"The number is even.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # determine the parity of the number using bitwise operators\n    parity = (x & 1) == 1\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # check if the number is even or odd\n    if x % 2 == 0:\n        # if even, return False\n        return False\n    else:\n        # if odd, return True\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    n_max = max(int(digit) for digit in digits)\n    index = digits.index(str(n_max))\n    digits.insert(index+1, str(n_max))\n    digits.pop(index)\n    new_n = int(''.join(digits))\n    return new_n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    next_bigger = 0\n    for i in range(len(digits)):\n        next_bigger += digits[i] * (10**(len(digits)-1-i))\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number to a list of digits\n    digits = [int(d) for d in str(n)]\n    \n    # find the largest digit in the list\n    max_digit = max(digits)\n    \n    # loop through the digits starting from the end\n    for i in range(len(digits) - 1, 0, -1):\n        # if the digit is greater than the maximum digit, swap it with the maximum digit\n        if digits[i] > max_digit:\n            digits[i], digits[len(digits) - 1] = digits[len(digits) - 1], digits[i]\n    \n    # convert the list of digits back to a number\n    result = int(\"\".join(str(d) for d in digits))\n    \n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Find the largest digit in the number\n    largest = max(str(n))\n    # Find the smallest digit that's smaller than the largest digit\n    smallest = next(d for d in str(n) if d < largest)\n    # Rearrange the digits of the number by swapping the smallest and largest digits\n    n = str(n)[0] + smallest + largest + str(n)[1:]\n    # Convert the rearranged number back to an integer and add 1\n    return int(n) + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # split the number into digits\n    digits = [int(digit) for digit in str(n)]\n    # reverse the digits\n    digits.reverse()\n    # iterate over the digits and find the first digit that's greater than 9\n    for digit in digits:\n        if digit > 9:\n            # find the index of the first digit that's greater than 9\n            index = digits.index(digit)\n            # swap the first digit with the index\n            digits[index], digits[0] = digits[0], digits[index]\n            # join the digits back into a number and return it\n            return int(''.join(str(digit) for digit in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    digits = [int(d) for d in str(n)]\n    max_num = 0\n    for i in range(len(digits)):\n        for j in range(i+1, len(digits)):\n            if digits[i] * 10 + digits[j] > max_num:\n                max_num = digits[i] * 10 + digits[j]\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a list of digits of the input number\n    digits = list(str(n))\n    \n    # find the index of the digit with the maximum value\n    max_index = digits.index(max(digits))\n    \n    # swap the digits at the beginning and maximum index\n    digits[0], digits[max_index] = digits[max_index], digits[0]\n    \n    # convert the list of digits back to an integer and return it\n    return int(''.join(digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Find the length of the number\n    num_len = len(num_str)\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate through the digits of the number\n    for digit in num_str:\n        # Get the position of the digit in the result string\n        pos = num_str.index(digit)\n        \n        # If the digit is a 0, decrement the position and add the digit to the result\n        if digit == '0':\n            pos -= 1\n            result += str(pos)\n        \n        # If the digit is a 9, increment the position and add the digit to the result\n        elif digit == '9':\n            pos += 1\n            result += str(pos)\n        \n        # If the digit is not a 0, 9, or a digit, add it to the result\n        else:\n            result += digit\n    \n    # Convert the result string to an integer and add 1\n    result = int(result) + 1\n    \n    # Return the next bigger number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # split the number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # reverse the list of digits\n    digits.reverse()\n    # convert the list of digits to a string\n    digits_str = ''.join(str(digit) for digit in digits)\n    # convert the string to an integer\n    next_bigger = int(digits_str)\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Helper function to get the next digit after the given digit\n    def next_digit(digit, base):\n        return (digit + 1) % base\n\n    # Helper function to swap two digits\n    def swap_digits(num, digit1, digit2):\n        return num // 10 * 10 + (num % 10 + digit2) % 10\n\n    # Rearrange the digits of the given number\n    num = n\n    while num > 0:\n        next_num = 0\n        for digit in str(num):\n            next_digit_value = next_digit(int(digit), 10)\n            next_num = swap_digits(next_num, int(digit), next_digit_value)\n        num = next_num\n\n    return next_num"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for i in range(len(nums1)):\n        heapq.heappush(min_heap, [nums1[i], nums2[0]])\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n        for j in range(1, len(nums2)):\n            if nums2[j] < min_heap[0][0]:\n                heapq.heappop(min_heap)\n            else:\n                heapq.heappush(min_heap, [nums1[i], nums2[j]])\n    result = []\n    while min_heap:\n        result.append(min_heap[0][1:])\n        heapq.heappop(min_heap)\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # convert the two arrays into a single array\n    nums = nums1 + nums2\n    \n    # create a min heap to store the smallest k pairs\n    heap = []\n    heapq.heapify(heap)\n    \n    # iterate through the array and add each element to the heap\n    for num in nums:\n        heapq.heappush(heap, num)\n        \n        # if the heap has more than k elements, remove the smallest element\n        if len(heap) > k:\n            heapq.heappop(heap)\n            \n    # return the smallest k pairs as a list of tuples\n    pairs = []\n    while heap:\n        pairs.append((heapq.heappop(heap), heapq.heappop(heap)))\n        \n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n        nums1 (list): A list of integers.\n        nums2 (list): A list of integers.\n        k (int): The number of pairs to find.\n\n    Returns:\n        list: A list of tuples, where each tuple contains the smallest element from the first array and the smallest element from the second array.\n\n    Examples:\n        >>> k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)\n        [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (7, 6), (11, 2), (11, 4), (11, 6)]\n    \"\"\"\n\n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # Initialize variables to keep track of the number of elements in each array and the current smallest pair\n    n1, n2 = len(nums1), len(nums2)\n    current_pair = None\n\n    # Iterate over the second array and add each element to the min heap\n    for num in nums2:\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n\n    # Iterate over the first array and find the smallest k pairs\n    result = []\n    for num in nums1:\n        if len(result) < k:\n            # Check if there's a smaller pair in the min heap\n            if current_pair is None or current_pair[0] > num:\n                # Get the smallest pair from the min heap, excluding the current number\n                pair = heapq.heappop(min_heap)\n                if pair is not None:\n                    # Add the current number to the result and update the current pair\n                    result.append((pair, num))\n                    current_pair = (pair, num)\n                else:\n                    # If there are no smaller pairs left in the min heap, start with the current number\n                    current_pair = (num, num)\n        else:\n            # If we have found k pairs, add the current number to the result\n            result.append((current_pair[0], num))\n            if current_pair[0]!= num:\n                # If the current pair is no longer the smallest, remove it from the min heap\n                heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a list to store the pairs\n    pairs = []\n    \n    # Create a min-heap to store the first element of the first array\n    heap1 = []\n    heapq.heapify(heap1)\n    \n    # Create a min-heap to store the first element of the second array\n    heap2 = []\n    heapq.heapify(heap2)\n    \n    # Add the first element of the first array to the heap1\n    heapq.heappush(heap1, float('-inf'))\n    heapq.heappush(heap2, nums1[0])\n    \n    # Loop through the remaining elements of the first array\n    for i in range(1, len(nums1)):\n        # If the first element of the second array is greater than the first element of the current pair,\n        # add a new pair to the list and update the heaps\n        if heap2[0] < nums1[i]:\n            heapq.heappush(heap2, nums1[i])\n            pairs.append((heap1[0], nums1[i]))\n            \n            # If the length of the pairs list is equal to k, return the pairs list\n            if len(pairs) == k:\n                return pairs\n                \n            # Remove the minimum element of the first heap and add it to the second heap\n            heap1.pop(0)\n            heapq.heappush(heap2, heap1[0])\n            \n        # If the first element of the second array is less than or equal to the first element of the current pair,\n        # remove the minimum element of the second heap and add it to the first heap\n        else:\n            heapq.heappop(heap2)\n            heapq.heappush(heap1, heap2[0])\n            \n            # If the length of the pairs list is equal to k, return the pairs list\n            if len(pairs) == k:\n                return pairs\n                \n    # If the length of the pairs list is less than k, return the pairs list\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    heap = []\n    min_heap = []\n\n    for num in nums1 + nums2:\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            min_heap.append(num)\n\n        if len(min_heap) == k:\n            heapq.heappush(heap, -heapq.heappop(min_heap))\n\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap to store the smallest k pairs\n    min_heap = []\n    \n    # Iterate through the first array and for each element, find the k smallest pairs from the second array using the heapq module\n    for num1 in nums1:\n        heapq.heappush(min_heap, (-num1, -num1))\n        while len(min_heap) > k:\n            heapq.heappop(min_heap)\n        \n        # Iterate through the second array and for each element, find the k smallest pairs from the first array using the heapq module\n        for num2 in nums2:\n            while len(min_heap) < k:\n                heapq.heappush(min_heap, (num2, -num2))\n            while len(min_heap) > k:\n                heapq.heappop(min_heap)\n            \n            # Print the smallest pairs\n            if len(min_heap) > 0:\n                pair = (-heapq.heappop(min_heap)[0], -heapq.heappop(min_heap)[0])\n                print(pair)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Sort the given arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap of size k\n    min_heap = []\n\n    # Initialize two pointers i and j to track the indices in the sorted arrays\n    i = 0\n    j = 0\n\n    # Initialize two variables count and total to keep track of the count of pairs and the total sum of pairs\n    count = 0\n    total_sum = 0\n\n    # Iterate over the sorted arrays and find the smallest pairs\n    while count < k and i < len(nums1) and j < len(nums2):\n        # Calculate the current sum\n        current_sum = nums1[i] + nums2[j]\n\n        # Add the current pair to the min heap if it is the smallest so far\n        if not min_heap or current_sum < min_heap[0][1]:\n            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n\n        # Remove the smallest pair from the min heap if it is greater than the current sum\n        elif current_sum > min_heap[0][1]:\n            heapq.heappop(min_heap)\n\n        # If the min heap size is greater than k, remove the smallest pair from the end of the heap\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n        # Increment the count of pairs and the total sum of pairs\n        count += 1\n        total_sum += current_sum\n\n        # Move the pointers to the next elements in the arrays\n        i += 1\n        j += 1\n\n    # Return the count and total sum of pairs\n    return count, total_sum"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n\n    # Build the min heap\n    for num in nums1 + nums2:\n        if not heap or num < heap[0][0]:\n            heapq.heappush(heap, (num, -heapq.heappushpop(heap)[1]))\n        else:\n            heapq.heappush(heap, (-heapq.heappushpop(heap)[0], -heapq.heappushpop(heap)[1]))\n\n    # Find the k smallest pairs\n    while len(heap) > 1 and len(result) < k:\n        pair = (-heapq.heappop(heap)[0], heapq.heappop(heap)[0])\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1.sort()\n    nums2.sort()\n    pairs = []\n    i, j = 0, 0\n    while len(pairs) < k:\n        if j == len(nums2):\n            pairs.append((nums1[i], None))\n            i += 1\n        elif i == len(nums1):\n            pairs.append((None, nums2[j]))\n            j += 1\n        elif nums1[i] < nums2[j]:\n            pairs.append((nums1[i], None))\n            i += 1\n        else:\n            pairs.append((None, nums2[j]))\n            j += 1\n    return pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function takes a list of tuples and returns the minimum product of the pairs of tuples.\n    \n    Args:\n        list1 (list): A list of tuples.\n        \n    Returns:\n        int: The minimum product of the pairs of tuples.\n    '''\n    \n    # Initialize variables\n    min_product = float('inf')\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the pairs of tuples\n            product = list1[i][0]*list1[j][1]\n            \n            # Check if the product is less than the current minimum product\n            if product < min_product:\n                min_product = product\n    \n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(lst):\n    '''\n    Find the minimum product of pairs of tuples within a list.\n\n    Args:\n    lst (list): The list of tuples.\n\n    Returns:\n    int: The minimum product of pairs of tuples.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for tup1 in lst:\n        # Loop through the other elements of the tuple\n        for tup2 in lst:\n            # Check if the current tuple is different from the previous one\n            if tup1!= tup2:\n                # Calculate the product of the two tuples and check if it is smaller than the minimum\n                product = tup1[0] * tup2[0] * tup1[1] * tup2[1]\n                if product < min_product:\n                    min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of pairs of tuples\n    '''\n    lst = sorted(lst, key=lambda x: x[0]*x[1]) # sort the list based on the first element and second element\n    min_product = lst[0][0] * lst[0][1] # initialize the minimum product to the first pair of tuples\n    for i in range(1, len(lst)): # loop through the remaining pairs of tuples\n        if lst[i][0] * lst[i][1] < min_product: # check if the current pair of tuples has a smaller product\n            min_product = lst[i][0] * lst[i][1] # if yes, update the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    if len(list1) < 2:\n        return None\n    \n    min_prod = float('inf')\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                prod = list1[i][0] * list1[j][1]\n                if prod < min_prod:\n                    min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Find the product of the corresponding tuples and compare with minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort() # sort the list in ascending order\n    product = list1[0] * list1[-1] # calculate the product of the first and last elements\n    min_product = product\n    for i in range(len(list1)-2): # iterate over the other elements\n        product = list1[i] * list1[i+1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(lst):\n    '''\n    This function takes a list of tuples as input and returns the minimum product of the pairs.\n    '''\n    # Initialize variables to store the minimum product and its indices\n    min_product = float('inf')\n    min_idx = None\n    max_product = float('-inf')\n    max_idx = None\n\n    # Iterate through each tuple in the list\n    for i, tup in enumerate(lst):\n        # Calculate the product of the first and second elements\n        product = tup[0] * tup[1]\n\n        # Check if the product is less than the current minimum\n        if product < min_product:\n            min_product = product\n            min_idx = i\n\n        # Check if the product is greater than the current maximum\n        if product > max_product:\n            max_product = product\n            max_idx = i\n\n        # If the product is equal to the current minimum and maximum, update the indices\n        if min_product == max_product and min_idx < max_idx:\n            min_idx = i\n            max_idx = i\n\n    # Calculate the minimum and maximum products based on the indices\n    min_product = lst[min_idx][0] * lst[min_idx][1]\n    max_product = lst[max_idx][0] * lst[max_idx][1]\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = float('inf')\n    for item in listval:\n        if type(item) < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    This function takes in a list of values and returns the minimum value in the list.\n    '''\n    if not isinstance(listval, list):\n        return None\n\n    min_value = None\n    for value in listval:\n        if min_value is None or value < min_value:\n            min_value = value\n\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        return None\n    \n    min_val = listval[0]\n    \n    for val in listval[1:]:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(lst):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in it.\n\n    Args:\n        lst: The list whose minimum value needs to be found.\n\n    Returns:\n        The minimum value in the list.\n    \"\"\"\n    min_num = lst[0]\n    for i in lst[1:]:\n        if i < min_num:\n            min_num = i\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0] # initialize the minimum value to the first element of the list\n    for i in range(1, len(listval)): # loop through the rest of the list\n        if listval[i] < min_val: # if the current element is less than the minimum value, update the minimum value\n            min_val = listval[i]\n    return min_val # return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for i in listval:\n        if min_val is None or i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = re.findall(r'(?<!^)(?=[A-Z])', word)\n\n    # Convert the first word to camel case\n    result = words[0].lower()\n\n    # Convert the other words to camel case\n    for word in words[1:]:\n        result += '_' + word.lower()\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])', word)\n    camel_case = ''.join(word.title() for word in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert the given snake case string to camel case string.\n\n    Args:\n    word: A string in snake case format.\n\n    Returns:\n    A string in camel case format.\n    \"\"\"\n    # Split the word into words separated by underscores\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except for the first word\n    camel_words = [words[0]]\n    for i in range(1, len(words)):\n        camel_words.append(words[i].capitalize())\n\n    # Join the words with a capital letter before the first letter\n    return ''.join(camel_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert all lowercase letters to uppercase letters\n    word = word.upper()\n    # Split the word into words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with underscores\n    camel_case_word = '_'.join(words)\n    # Convert the camel case word to lowercase letters\n    camel_case_word = camel_case_word.lower()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    # split the word into words\n    words = re.findall(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])', word)\n\n    # capitalize the first letter of each word and join them back together\n    return ''.join([word[0].upper() + w.lower() for w in words])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    \n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    \n    # Join the words with camel casing\n    return ''.join(words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    \n    # Convert the first word to uppercase\n    first_word = words[0]\n    first_word = first_word.capitalize()\n    \n    # Convert the rest of the words to camel case\n    rest_words = [word.capitalize() for word in words[1:]]\n    \n    # Join the camel case words into a single string and return it\n    return first_word + ''.join(rest_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.capitalize()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda match: match.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2!= 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Removes odd numbers from a list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    result = []\n    for num in l:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # initialize an empty list to store the odd numbers\n    odd_list = []\n    # loop through each number in the given list\n    for num in l:\n        # if the number is odd, append it to the odd_list\n        if num % 2 == 1:\n            odd_list.append(num)\n    # return the odd_list\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if isinstance(list1, list) and isinstance(n, int) and n >= 1:\n            if n <= len(list1):\n                return list1[n-1]\n            else:\n                return None\n        else:\n            return None\n    except TypeError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples\n    '''\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1[0]) is tuple:\n        return list1[n-1][1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, tuple):\n        return list1[n-1]\n    elif isinstance(list1, list):\n        return [extract_nth_element(item, n) for item in list1]\n    else:\n        raise TypeError(\"Invalid input type.\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Convert the list of tuples into a list of lists\n    list2 = []\n    for tup in list1:\n        list2.append(list(tup))\n\n    # Extract the nth element from the list of lists\n    return list2[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return None\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(len(list1)):\n            if i == n-1:\n                return list1[i][1]\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        index = n - 1\n        result = []\n        for item in list1:\n            result.append(item[index])\n        return result\n    except IndexError:\n        return \"The index is out of range\""
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for i in list1:  \n        if i in list2:  \n            return True  \n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    return any(x in list1 or x in list2 for x in list1 + list2)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence or not.\n\n    Args:\n    - list1 (list): A sequence of values.\n    - list2 (list): Another sequence of values.\n\n    Returns:\n    - bool: True if any value in list1 exists in list2, else False.\n\n    \"\"\"\n    if len(list1) > len(list2):\n        list1, list2 = list2, list1\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # create a set of values in list1 to check if any value is in list2\n    set1 = set(list1)\n\n    # loop through values in list2 and check if any value is present in set1\n    for item in list2:\n        if item in set1:\n            return True\n\n    # if no overlapping values are found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value in the first list that exists in the second list or False otherwise.\n    '''\n    if len(list1) > len(list2):\n        for num in list1:\n            if num in list2:\n                return True\n    else:\n        for num in list2:\n            if num in list1:\n                return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function checks whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): A sequence of values.\n    list2 (list): A sequence of values.\n\n    Returns:\n    bool: Returns True if any value in list1 exists in list2 or False otherwise.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    # Create a set of the elements of list1\n    set1 = set(list1)\n\n    # Loop through the elements of list2 and check if any of them are present in set1\n    for element in list2:\n        if element in set1:\n            print(f\"{element} exists in both sequences.\")\n            return True\n\n    # If we make it through the loop without finding any common values, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns a tuple containing the pair with the highest product.\n    If there are multiple pairs with the same highest product, the function returns the pair with the smallest index.\n    If there are no pairs with a highest product, the function returns None.\n    '''\n\n    # Initialize variables\n    max_pair = None\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Loop through the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the two elements\n            product = arr[i] * arr[j]\n\n            # If the product is greater than the current maximum product, update the variables\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n            # If the product is less than the current minimum product, update the variables\n            elif product < min_product:\n                min_product = product\n\n    # If there are no pairs with a highest product, return None\n    if max_pair is None:\n        return None\n\n    # Return the pair with the highest product\n    else:\n        return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    max1 = arr[-1] * arr[-2]\n    max2 = arr[0] * arr[1]\n    if max1 > max2:\n        return (max1, max2)\n    else:\n        return (max2, max1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_product_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            \n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = (arr[i], arr[j])\n    \n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize two variables to keep track of the maximum product seen so far and the pair of elements that give it\n    max_product = float('-inf')\n    max_pair = []\n    min_product = float('inf')\n    min_pair = []\n    \n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Update the maximum product and the pair of elements that give it\n        if arr[i] * arr[i] > max_product:\n            max_product = arr[i] * arr[i]\n            max_pair = [arr[i], arr[i]]\n        elif arr[i] * arr[i] == max_product:\n            max_pair[0] = arr[i]\n            max_pair[1] = arr[i]\n        \n        # Update the minimum product and the pair of elements that give it\n        if arr[i] * arr[i] < min_product:\n            min_product = arr[i] * arr[i]\n            min_pair = [arr[i], arr[i]]\n        elif arr[i] * arr[i] == min_product:\n            min_pair[0] = arr[i]\n            min_pair[1] = arr[i]\n\n    # Return the pair of elements that give the maximum product\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    \n    # Initialize maximum product and two integers to store the pair\n    max_prod = arr[0]\n    max_1 = arr[0]\n    max_2 = arr[0]\n    \n    # Iterate through the array and update the maximum products and pair\n    for num in arr:\n        if num > max_prod:\n            max_2 = max_1\n            max_1 = num\n            max_prod = num\n        elif num > max_1 and num < max_prod:\n            max_2 = max_1\n            max_1 = num\n        elif num > max_2 and num < max_1:\n            max_2 = num\n            \n    # Return the pair with the highest product\n    return (max_1, max_2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    max_product = float('-inf')\n    max_pair = (0, 0)\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a pair of integers with the highest product.\n    \"\"\"\n    max_product1 = max_product2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max_product1:\n            max_product2 = max_product1\n            max_product1 = arr[i]\n        elif arr[i] > max_product2:\n            max_product2 = arr[i]\n    return max_product1 * max_product2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    product1 = max1 * min2\n    product2 = max2 * min1\n    \n    if product1 > product2:\n        return (max1, min2)\n    else:\n        return (max2, min1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max1 = arr[0]\n    max2 = arr[0]\n\n    min1 = arr[0]\n    min2 = arr[0]\n\n    for i in range(len(arr)): \n        if arr[i] > max1: \n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2: \n            max2 = arr[i]\n\n        if arr[i] < min1: \n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2: \n            min2 = arr[i]\n\n    max_product = max1 * max2\n    min_product = min1 * min2\n\n    return (max_product, min_product)\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if not common_element:\n            common_element = tuple[0]\n        else:\n            if common_element == tuple[0]:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for item in Input:\n        if common_element is None:\n            common_element = item[0]\n        elif item[0] == common_element:\n            continue\n        else:\n            common_element = None\n            break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for i in range(len(Input)):\n        if Input[i][0] not in common:\n            common.append(Input[i][0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = None\n    for i in range(len(Input)):\n        if not common:\n            common = Input[i][0]\n        else:\n            if Input[i][0] == common:\n                common = common\n            else:\n                common = None\n                break\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Create an empty dictionary to store the count of each element\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        elem = tup[0]\n\n        # If the element is already in the dictionary, increment its count\n        if elem in count_dict:\n            count_dict[elem] += 1\n        # Otherwise, add the element and its count to the dictionary\n        else:\n            count_dict[elem] = 1\n\n    # Iterate through the dictionary and find the common elements\n    common = []\n    for key, value in count_dict.items():\n        if value == len(Input):\n            common.append(key)\n\n    # Return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store unique tuples and their common elements\n    common_tuples = {}\n\n    # Loop through the given list of tuples\n    for tup in Input:\n        # If the tuple already exists in the dictionary, add the second element to its common elements\n        if tup in common_tuples:\n            common_tuples[tup].append(tup[1])\n        # If the tuple doesn't exist in the dictionary, add it as a new key in the dictionary with the first element as its common element\n        else:\n            common_tuples[tup] = [tup[0]]\n\n    # Initialize an empty list to store the unique common elements\n    unique_elements = []\n\n    # Loop through the dictionary of common elements\n    for tup, common in common_tuples.items():\n        # If the length of the common elements is 1, add it to the unique_elements list\n        if len(common) == 1:\n            unique_elements.append(common[0])\n        # If the length of the common elements is greater than 1, find the common elements that are unique and add them to the unique_elements list\n        else:\n            unique_common = list(set(common))\n            unique_elements.append(unique_common[0])\n\n    # Return the unique common elements\n    return unique_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                common_element = Input[i][0]\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = set()\n\n    for i in Input:\n        if len(set(i)) == 1:\n            common_elements.add(i[0])\n\n    return sorted(common_elements)\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_element = []\n    for i in Input:\n        if len(common_first_element) == 0 or i[0] == common_first_element[0]:\n            common_first_element.append(i[0])\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first elements of the tuples and the values are the number of occurrences of the first element.\n    \"\"\"\n    # Create an empty dictionary to store the results\n    result = {}\n    # Iterate through the list of tuples\n    for i in Input:\n        # Extract the first element from the tuple\n        element = i[0]\n        # Check if the element is already in the dictionary\n        if element in result:\n            # If it is, increment its count by 1\n            result[element] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            result[element] = 1\n    # Return the dictionary of results\n    return result"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # find the maximum length in the list\n    max_length = max(len(i) for i in lst)\n    # create an empty list to store the elements with maximum length\n    max_lst = []\n    # loop through the list and append the elements with maximum length to the max_lst\n    for i in lst:\n        if len(i) == max_length:\n            max_lst.append(i)\n    # return the maximum element of max_lst\n    return max(max_lst)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_length:\n            max_length = len(str(element))\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    # iterate through the list to find the maximum length and element\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n            \n    # return the maximum element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    return total * len(lst)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(\"Total sum:\", total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_sum = 0\n    i = 0\n    while i < n:\n        if i%2 == 0:\n            even_sum += i**3\n        i += 1\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    #initialize the sum and count variables\n    sum = 0\n    count = 0\n\n    #loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        #calculate the cube of the number and add it to the sum and count variables\n        cube = i ** 3\n        sum += cube\n        count += 1\n\n    #return the sum of the cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize variables to keep track of the sum and the current number\n    cube_sum = 0\n    num = 0\n    \n    # iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the current even number\n        cube_sum += i**3\n        \n        # update the current number\n        num = i\n    \n    # return the cube sum\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i*i*i\n\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    num = 2\n    while num <= n:\n        sum_cubes += num ** 3\n        num += 2\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # cube each number\n        cube = i ** 3\n        # add the cube to the sum\n        sum += cube\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    #initialize the sum variable to zero\n    sum = 0\n    #initialize the count variable to zero\n    count = 0\n    #initialize the sum variable to zero\n    even_sum = 0\n    #iterate n times\n    for i in range(2, n+1, 2):\n        #calculate the cube of i\n        cube = i**3\n        #add the cube to the sum\n        sum += cube\n        #increment the count variable\n        count += 1\n        #calculate the even sum of cubes\n        even_sum += cube\n        #add the even cube sum to the sum\n        sum += even_sum\n    #return the sum\n    return sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \" \"\n    concatenated_string = \"\"\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to store the concatenated string\n    concatenated_string = ''\n    # iterate through each element of the tuple\n    for element in test_tup:\n        # concatenate the element with the delimiter\n        concatenated_string += str(element) + ', '\n    # remove the extra comma and space from the end of the string\n    concatenated_string = concatenated_string[:-2]\n    # return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ', '\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_string = delimiter.join(map(str, test_tup))\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    concatenated_string = ''\n    for elem in test_tup:\n        concatenated_string += str(elem) + delimiter\n    return concatenated_string[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = []\n    for element in test_tup:\n        result.append(str(element))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string to store the concatenated string\n    result = \"\"\n    # iterate through each element of the tuple\n    for elem in test_tup:\n        # add the element to the result string\n        result += str(elem)\n    # return the concatenated string\n    return result\n"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(str(e) for e in test_tup)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1):  \n        sum += i ** 3  \n    average = sum / n  \n    print(\"The average of cubes of first\", n, \"natural numbers is\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i ** 3\n    average = cube_sum / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    average = total/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cube = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_cube += i**3\n        count += 1\n    return sum_cube/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    avg = sum/n\n    return avg"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    return sum_cubes / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i**3\n    average = total / n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    average_of_cubes = cube_sum/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i ** 3\n        count += 1\n    average = total / count\n    return average"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        if i == len(test_tuple)-1:\n            rear_list.append(test_tuple[i])\n        else:\n            rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            result.append(item)\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i, item in enumerate(test_tuple):\n        if i == len(test_tuple) - 1:\n            rear_list.append(item)\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [string[-1] for string in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for element in test_tuple:\n        rear_elements.append(element[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(string[-1] for string in test_tuple)"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for lst in list1: \n        if x in lst: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers from the input list.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = [num for num in nums if num % 2!= 0]\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Filter odd numbers using a list comprehension\n    result = [num for num in nums if num % 2!= 0]\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    # initialize a new empty list to store odd numbers\n    result = []\n    \n    # iterate through each number in the input list\n    for num in nums:\n        # if the number is odd, append it to the result list\n        if num % 2 == 1:\n            result.append(num)\n    \n    # return the filtered list of odd numbers\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regex pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Search for the date format in the input string\n    match = re.search(pattern, dt)\n\n    # If the date format is found, replace it with the new format\n    if match:\n        # Get the matched groups\n        year, month, day = match.groups()\n\n        # Convert the date to the new format\n        new_dt = day + '-' + month + '-' + year\n\n        return new_dt\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove the year from the date string\n    dt = re.sub(r'(\\d{4})', '', dt)\n    # Insert the '-' in between the month and day\n    dt = dt.replace('-', '/')\n    # Convert the string to datetime object\n    dt_obj = datetime.datetime.strptime(dt, '%d/%m/%Y')\n    # Format the date to dd-mm-yyyy format\n    dt_str = dt_obj.strftime('%d-%m-%Y')\n    return dt_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    regex = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(regex, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Extract the year, month and day from the date string\n    yyyy = dt[0:4]\n    mm = dt[5:7]\n    dd = dt[8:10]\n\n    # Convert the date to dd-mm-yyyy format\n    new_date = f'{dd}-{mm}-{yyyy}'\n\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})\"\n    # Use the re.sub() method to replace the format with dd-mm-yyyy\n    dt = re.sub(pattern, r\"\\3-\\2-\\1\", dt)\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the date format in the input string\n    match = re.match(pattern, dt)\n    \n    # Extract the year, month, and day from the match object\n    year = match.group(1)\n    month = match.group(2)\n    day = match.group(3)\n    \n    # Format the output date string in dd-mm-yyyy format\n    output = f'{day}-{month}-{year}'\n    \n    return output"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define regex pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match pattern in date string\n    match = re.match(pattern, dt)\n    # Extract groups from match object\n    year, month, day = match.groups()\n    # Construct new date string with DD-MM-YYYY format\n    new_date = f'{day}-{month}-{year}'\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.groups()\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define a pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # use the re.search() function to search for the pattern in the input string\n    match = re.search(pattern, dt)\n    # if match is not None, replace the format characters with the appropriate values\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        # define the new format for the date string\n        new_format = '%d-%m-%Y'\n        # use the str() function to convert the date string to a new format\n        new_date = dt.replace(year, year[::-1]).replace(month, month[::-1]).replace(day, day[::-1]).strftime(new_format)\n        # return the new date string\n        return new_date\n    else:\n        # if the pattern is not found in the input string, return the input string as is\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern to match date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.search() function to search for a match in the input string\n    match = re.search(pattern, dt)\n    # If a match is found, split the string into components and reverse them\n    if match:\n        day, month, year = match.groups()\n        return '-'.join([year, month, day])\n    # If a match is not found, return the input string unchanged\n    return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > key:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Setting the gap at a value which is greater than n/2, where n is the length of the array\n    gap = n // 2\n    # Starting the iteration until the gap is less than or equal to 1\n    while gap > 0:\n        # Starting the inner iteration until the gap is greater than 1\n        for i in range(gap, n):\n            # Moving the elements which are greater than gap to its correct position\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # Decrementing the gap by 1\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Finding the maximum value in the array\n    max_val = my_list[0]\n    for i in range(1, len(my_list)):\n        if my_list[i] > max_val:\n            max_val = my_list[i]\n    \n    # Sorting the array using the shell sort algorithm\n    gap = max_val // 2\n    while gap > 0:\n        for i in range(len(my_list) - gap):\n            # Insertion sort\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                temp = my_list[j - gap]\n                my_list[j - gap] = my_list[j]\n                my_list[j] = temp\n                j -= gap\n        # Reducing the gap to find the next value of max_val\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap//2"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples are not of the same length.\")\n        return None\n    else:\n        and_tup = ()\n        for i in range(len(test_tup1)):\n            and_tup = and_tup + (test_tup1[i] & test_tup2[i],)\n        return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] & test_tup2[i],)\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(zip(test_tup1, test_tup2, (test_tup1[i] & test_tup2[i]) for i in range(len(test_tup1))))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check that the inputs are tuples\n    if not isinstance(test_tup1, tuple) or not isinstance(test_tup2, tuple):\n        raise ValueError(\"Both inputs must be tuples.\")\n\n    # Check that the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length.\")\n\n    # Extract the elementwise and tuples\n    and_tup = tuple(test_tup1 & test_tup2)\n\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(zip(*[test_tup1, test_tup2]))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples have different lengths.\")\n        return\n\n    # Extract the elementwise and tuples\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n\n    # Return the and tuples\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n    return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n\n    if delta < 0:\n        print(\"There is no real root.\")\n    else:\n        root1 = (-b + delta**0.5)/2*a\n        root2 = (-b - delta**0.5)/2*a\n\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The other directrix is:\", root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"The parabola is not a parabola.\"\n    else:\n        D = -b / (2 * a)\n        return D"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c \n    if delta > 0: \n        x1 = (-b + delta**0.5)/(2*a) \n        x2 = (-b - delta**0.5)/(2*a) \n        print(\"The directrix is:\", (x1+x2)/2) \n    elif delta == 0: \n        x1 = (-b)/(2*a) \n        x2 = (-b)/(2*a) \n        print(\"The directrix is:\", (x1+x2)/2) \n    else: \n        print(\"There is no real root for the given values of a, b and c.\") "
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": ""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        return x1, x2\n    elif discriminant == 0:\n        x1 = (-b)/(2*a)\n        return x1, x1\n    else:\n        print(\"No real roots\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n\n    :param a: Coefficient of the first order term in the quadratic equation.\n    :type a: float\n    :param b: Coefficient of the second order term in the quadratic equation.\n    :type b: float\n    :param c: Coefficient of the constant term in the quadratic equation.\n    :type c: float\n    :return: The directrix of the parabola.\n    :rtype: float\n    '''\n\n    delta = b ** 2 - 4 * a * c\n    if delta > 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n    else:\n        x1 = (-b) / (2 * a)\n        x2 = (-b) / (2 * a)\n\n    return x1"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes three parameters, a, b, and c, which represent the coefficients of the parabola equation ax^2 + bx + c = 0.\n    It calculates the directrix of the parabola by dividing the equation by a and then taking the reciprocal, which is the x-intercept of the parabola.\n    '''\n    directrix = (b**2 - 4*a*c) / (2*a)\n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a) \n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    This function takes in the coefficients of a parabola and returns its directrix.\n    '''\n    discriminant = b ** 2 - 4 * a * c\n\n    if discriminant >= 0:\n        return (-b + discriminant ** 0.5) / (2 * a)\n    elif discriminant < 0:\n        return (-b - discriminant ** 0.5) / (2 * a)\n    else:\n        return \"The equation of the parabola has no real roots\""
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through each element in the first list\n    for element in list1:\n        # Check if the element is in the second list\n        if element in list2:\n            # If it is, return True\n            return True\n    \n    # If no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Check if at least one of the lists is empty\n    if not list1 or not list2:\n        return False\n    \n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # Check if the intersection of the sets is not empty\n    return bool(set1 & set2)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = set(list1) & set(list2)\n    if len(common_elements) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through the list1 and check if each element is in list2\n    for element in list1:\n        if element in list2:\n            return True\n\n    # If we make it through the loop without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n        base1: int, the length of the first base of the trapezium.\n        base2: int, the length of the second base of the trapezium.\n        height: int, the height of the trapezium.\n\n    Returns:\n        float, the median length of the trapezium.\n    \"\"\"\n    if height % 2 == 0:\n        # Find the lengths of the trapezium's left and right halves.\n        left_half_length = base1 + base2\n        right_half_length = 2 * base1 + 2 * base2\n\n        # Find the lengths of the trapezium's two halves, and then their midpoints.\n        left_half_midpoint = (left_half_length + right_half_length) / 2\n        right_half_midpoint = left_half_midpoint + height\n\n        # Find the midpoint of the trapezium's left and right halves.\n        midpoint_trapezium = (left_half_midpoint + right_half_midpoint) / 2\n\n        # Check which half the midpoint falls in, and return the median length.\n        if midpoint_trapezium <= base1:\n            return left_half_length\n        else:\n            return right_half_length\n    else:\n        # Find the lengths of the trapezium's left and right halves.\n        left_half_length = base1 + base2\n        right_half_length = 2 * base1 + 2 * base2\n\n        # Find the lengths of the trapezium's two halves, and then their midpoints.\n        left_half_midpoint = (left_half_length + right_half_length) / 2\n        right_half_midpoint = left_half_midpoint + height\n\n        # Find the midpoint of the trapezium's left and right halves.\n        midpoint_trapezium = (left_half_midpoint + right_half_midpoint) / 2\n\n        # Check which half the midpoint falls in, and return the median length.\n        if midpoint_trapezium <= base1:\n            return left_half_length\n        else:\n            return right_half_length + 1"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    semi_perimeter = 0.5 * (base1 + base2 + height)\n    mid_point = 0.5 * (semi_perimeter + height)\n    length1 = (area * (mid_point - height) + base1 * (semi_perimeter - height)) / (area + base1)\n    length2 = (area * (mid_point - height) + base2 * (semi_perimeter - height)) / (area + base2)\n    \n    if area > 0:\n        return math.sqrt(length1 * length1 + length2 * length2)\n    else:\n        return None"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium using Heron's formula\n    s = 0.5 * (base1 + base2 + height) * height\n    # Calculate the area of the smaller trapezium using Heron's formula\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    # Calculate the area of the larger trapezium\n    area3 = s - area1 - area2\n    # Calculate the areas of the trapeziums\n    areas = [area1, area2, area3]\n    # Sort the areas in ascending order\n    areas.sort()\n    # Calculate the median area\n    median_area = areas[1]\n    # Calculate the length of the trapezium using the formula\n    length = 0.5 * s / median_area\n    # Return the length of the trapezium\n    return length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the height of the trapezium\n    trapezium_height = 0.5 * area\n\n    # Calculate the length of the base of the trapezium\n    trapezium_base = (height / 2) * (base1 + base2)\n\n    # Calculate the area of the base of the trapezium\n    base_area = 0.5 * trapezium_base * trapezium_height\n\n    # Calculate the height of the base of the trapezium\n    base_height = 0.5 * base_area\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_base + base_height\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculating the area of the trapezium\n    area = (base1 + base2) * height / 2\n    \n    # Sorting the base1 and base2 lengths\n    sorted_lengths = sorted([base1, base2])\n    \n    # Finding the median length\n    median = (sorted_lengths[0] + sorted_lengths[1]) / 2\n    \n    # Finding the area of the trapezium after the median length is changed\n    area_after_median = (sorted_lengths[0] + sorted_lengths[1]) * height / 2\n    \n    # Calculating the difference between the areas of the two trapeziums\n    difference = area - area_after_median\n    \n    # Returning the median length and the difference between the areas\n    return median, difference"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height\n    trapezium_length = 2 * area / 5\n    return trapezium_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    length1 = base1 + base2\n    length2 = height - base1 - base2\n    median1 = length1 / 2\n    median2 = length2 / 2\n    if length1 > length2:\n        return median1\n    elif length1 < length2:\n        return median2\n    else:\n        return (median1 + median2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the length of the trapezium side with the highest length\n    if base1 > perimeter / 2 and base2 > perimeter / 2:\n        highest_side = base1\n    else:\n        highest_side = base2\n\n    # Calculate the area of the trapezium side with the highest length\n    area_highest_side = highest_side * height\n\n    # Calculate the area of the trapezium with the highest area\n    area_highest_area = 0.5 * highest_side * highest_side * height\n\n    # Calculate the difference between the areas of the trapezium and its highest area\n    area_diff = abs(area - area_highest_area)\n\n    # Calculate the difference between the areas of the trapezium and its highest side\n    area_side_diff = abs(area_highest_side * height - area_highest_area)\n\n    # Calculate the median of the two sides with the highest length\n    median_highest = math.sqrt(area_diff * area_side_diff)\n\n    # Calculate the median of the trapezium\n    median = 0.5 * (area_highest_side + median_highest)\n\n    # Return the median length of the trapezium\n    return round(median, 2)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    return 0.5 * math.sqrt(area)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * base2 * height\n    # Calculate the sum of the height of the base1 and base2\n    sum_base1 = 0.5 * base1 * base1\n    sum_base2 = 0.5 * base2 * base2\n    # Calculate the sum of the areas of the trapezium\n    sum_area = area + sum_base1 + sum_base2\n    # Calculate the sum of the height of the trapezium\n    sum_height = height * height\n    # Calculate the median of the height of the trapezium\n    median_height = (sum_area - sum_height) / sum_area\n    # Calculate the length of the base1 and base2 of the trapezium\n    length_base1 = 0.5 * (base1 + base2)\n    length_base2 = 0.5 * (base1 + base2)\n    # Calculate the median of the length of the base1 and base2\n    median_length = (length_base1 + length_base2) / 2\n    # Calculate the median of the area and the length of the trapezium\n    median_area = area + 0.5 * base1 * base1 * height + 0.5 * base2 * base2 * height\n    median_trapezium = (median_area + median_height) / 2\n    # Return the median of the length of the trapezium\n    return median_trapezium"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    # Iterate through the array and compare each element to the entered number\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    This function takes in an array and a number as input and returns True if the number is greater than all the elements in the array, and False otherwise.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(True)\n            break\n    else:\n        print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            print(f\"{number} is greater than {element}\")\n            return True\n    print(f\"{number} is not greater than any element of the array\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(\"The number is greater than the element.\")\n            return\n    print(\"The number is not greater than the elements.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for num in arr:\n        if num > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for element in arr:\n        if element > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_found = False\n    for element in arr:\n        if number > element:\n            greater_found = True\n            break\n    return greater_found"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(?=b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns a boolean value indicating whether the string contains a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.+b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return 'Found a match:'+ str(matches[0])\n    else:\n        return 'No match found'"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=[b]+)b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of the number.\n    \"\"\"\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the given number to string\n    str_n = str(n)\n    # find the length of the string\n    length = len(str_n)\n    # return the last digit of the number\n    return int(str_n[length-1])"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    # Dividing the given number by 10 and taking the integer part gives the last digit\n    last_digit = n % 10\n    \n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    '''\n    This function finds the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns the negative numbers in the list.\n    \"\"\"\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    Write a Python function to return the negative numbers in a list.\n    \"\"\"\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():\n            new_str += char\n        elif char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    return ''.join(char for char in str1 if char.isalpha())"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    \n    # iterate through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result string\n        if int(char) % 2!= 0:\n            result += char\n    \n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # convert string to list of characters\n    chars = list(str1)\n\n    # loop through list and remove odd characters\n    for i in range(len(chars)):\n        if chars[i] % 2!= 0:\n            del chars[i]\n\n    # convert list of characters back to string and return\n    return ''.join(chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if ord(char) % 2!= 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Create an empty string to store the resulting string\n    result = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, append it to the result string\n        if char % 2 == 1:\n            result += char\n    # Return the resulting string\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0], test_list[j][0]) in test_list[j]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0]) and (test_list[i][1] > test_list[j][1]):\n                count += 1\n            if (test_list[i][0] > test_list[j][0]) and (test_list[i][1] < test_list[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i][1:] and (test_list[j][0], test_list[i][0]) in test_list[j][1:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j] == test_list[i][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize a variable to store the sum of all integers in the list\n    sum_of_integers = 0\n    \n    # loop through each integer in the list and add it to the sum\n    for i in L:\n        sum_of_integers += i\n    \n    # return the sum of all integers in the list\n    return sum_of_integers"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # Initialize an empty integer to store the result\n    result = 0\n    \n    # Iterate over the list of integers\n    for num in L:\n        # Check if the integer is multiple of 2\n        if num % 2 == 0:\n            # If the integer is multiple of 2, add it to the result\n            result += num\n        else:\n            # If the integer is not multiple of 2, subtract it from the result\n            result -= num\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    if len(L) > 1:\n        return sum(L)\n    else:\n        return L[0]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples, where each tuple contains the first adverb and its position in the sentence.\n    '''\n    pattern = re.compile(r'\\b\\w*ed\\b')\n    matches = pattern.findall(text)\n    positions = []\n    for i, match in enumerate(matches):\n        pos = text.find(match)\n        positions.append((match, pos))\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'\\b(adverb|adv)\\b')\n    adverb_positions = []\n    matches = adverb_pattern.findall(text)\n    if matches:\n        for match in matches:\n            if match.lower() == 'adverb':\n                position = text.find(match)\n                if position > 0:\n                    adverb_positions.append((position, position + len(match)))\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define regular expressions for adverbs\n    adverb_pattern = r'\\b(really|very|well|fairly|little|actually|actually|much|actually|absolutely|actually|sorta|actually|really|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|actually|act"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a sentence as input and returns a list of tuples containing the first adverb and its position in the sentence.\n    '''\n    # Remove any non-alphanumeric characters from the sentence\n    text = re.sub(r'[^\\w\\s]', '', text)\n    \n    # Split the sentence into words\n    words = text.split()\n    \n    # Initialize an empty list to store the adverb and its position in the sentence\n    adverbs = []\n    \n    # Loop through each word in the sentence\n    for i, word in enumerate(words):\n        # If the word is an adverb and is the first word in the sentence, add it to the list of adverbs and its position in the sentence\n        if word in ['very','seriously', 'amazingly', 'finally', 'amazing', 'terribly', 'awfully'] and i == 0:\n            adverbs.append((word, i))\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find the first adverb in the sentence\n    adverb = re.search('\\b\\w*adverb\\w*\\b', text)\n\n    # If the adverb is found, find its position in the sentence\n    if adverb:\n        pos = text.find(adverb.group())\n        # Return the first adverb and its position\n        return (adverb.group(), pos)\n    else:\n        # If the adverb is not found, return None\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for finding adverbs\n    pattern = r'\\b\\w*ed\\b|\\b\\w*ing\\b|\\b\\w*ly\\b|\\b\\w*ly\\b'\n    # Find all the occurrences of adverbs in the given sentence\n    matches = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of adverbs\n    positions = []\n    # Loop through all the matches and store their positions in the positions list\n    for match in matches:\n        positions.append(text.index(match))\n    # Return the positions of adverbs in the sentence\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Compile a regular expression pattern to find adverbs\n    pattern = r'\\b(\\w+)(?:\\'s)?\\s*(?:of|from|on|at|to|in|by|around|beside|across|behind|ahead|before|behind|after)\\b'\n\n    # Use the re.findall() function to find all adverbs in the text\n    adverbs = re.findall(pattern, text)\n\n    # If there are no adverbs in the text, return None\n    if not adverbs:\n        return None\n\n    # Create a dictionary to store the positions of the adverbs\n    adverb_positions = {}\n\n    # Iterate over the adverbs and their positions\n    for i, adverb in enumerate(adverbs):\n        # Get the position of the adverb in the text\n        position = text.find(adverb)\n\n        # If the position is already in the dictionary, add the current index to it\n        if position in adverb_positions:\n            adverb_positions[position].append(i)\n        # If the position is not in the dictionary, add it with a list containing the current index\n        else:\n            adverb_positions[position] = [i]\n\n    # Sort the dictionary by position\n    sorted_adverb_positions = sorted(adverb_positions.items(), key=lambda x: x[0])\n\n    # Return the first adverb and its position(s)\n    return sorted_adverb_positions[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expressions for detecting adverbs and their positions\n    adverb_pattern = r'\\b(not|only|too|just|almost|very|very\\s+(much|little))\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    adverbs = re.findall(adverb_pattern, text)\n    # If no adverbs are found, return None\n    if not adverbs:\n        return None\n    # Sort the list of adverbs by their positions in the text\n    sorted_adverbs = sorted(adverbs, key=lambda x: text.find(x))\n    # Return the sorted adverbs and their positions\n    return sorted_adverbs, sorted_adverbs[0]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Compile regex pattern for adverbs\n    pattern = re.compile(r'(\\w+)(\\w*)\\s+(?:to|for|about|in|at|near|with|from|through|as|before|after|around|behind|up|down|on|below|above|between|inside|outside|around|through)')\n\n    # Find all matches of the pattern in the given text\n    matches = pattern.finditer(text)\n\n    # Create a dictionary to store the positions of all the adverbs\n    adverb_positions = {}\n\n    # Iterate over all the matches and store their positions in the dictionary\n    for match in matches:\n        adverb = match.group(1)\n        positions = match.span()\n        adverb_positions[adverb] = positions\n\n    # Return the dictionary with the positions of all the adverbs\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n\n    # calculate the surface area of a cube\n    surface_area = 6 * (l**2)\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    This function calculates the surface area of a cube of a given length.\n    \n    Args:\n        l (float): The length of the cube.\n    \n    Returns:\n        float: The surface area of the cube.\n    \"\"\"\n    # Calculate the surface area of the cube using the formula:\n    # surface area = 6 * l^2\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = (6 * l ** 3) + (12 * l ** 2) + (8 * l)\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    :param l: length of the cube's sides\n    :type l: float\n    :return: surface area of the cube\n    :rtype: float\n    \"\"\"\n    # Convert the length to a square root and multiply it by the length\n    return l**2 * 6"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6 * l * l\n    surface_area = area * 6\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the input array to a mutable array type\n    nums = array('i', nums)\n\n    # Initialize variables to keep track of positive and negative numbers\n    pos_count = 0\n    neg_count = 0\n\n    # Iterate through the array and count the number of positive and negative numbers\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n\n    # Calculate the ration of positive numbers\n    if pos_count > 0:\n        pos_ratio = pos_count / len(nums)\n    else:\n        pos_ratio = 0\n\n    # Calculate the ration of negative numbers\n    if neg_count > 0:\n        neg_ratio = neg_count / len(nums)\n    else:\n        neg_ratio = 0\n\n    # Return the ration of positive numbers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create a list to store the positive numbers\n    pos_nums = []\n    # loop through the array and append positive numbers to the list\n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)\n    # calculate the total number of positive numbers\n    total_pos = len(pos_nums)\n    # calculate the ration of positive numbers as a float\n    pos_ratio = total_pos / len(nums)\n    # return the ration as a float\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert list to array\n    pos_count = 0\n    neg_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    pos_ratio = pos_count / (pos_count + neg_count)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # initialize an array to store the number of positive numbers\n    count_array = array('i', [0] * len(nums))\n\n    # iterate through the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            count_array[num] += 1\n\n    # calculate the ration of positive numbers\n    positive_count = sum(count_array) / len(nums)\n\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)  # convert the list to an array of integers\n    count_positive = 0\n    count_total = len(nums)\n\n    for num in arr:\n        if num > 0:\n            count_positive += 1\n\n    return count_positive / count_total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_array = array('i', nums)\n    positive_sum = 0\n    total_length = len(num_array)\n\n    for i in range(total_length):\n        if num_array[i] > 0:\n            positive_sum += 1\n\n    return positive_sum / total_length"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Create an array of integers with the given numbers\n    arr = array('i', nums)\n\n    # Initialize variables to keep track of the count and the sum of positive numbers\n    count = 0\n    positive_sum = 0\n\n    # Loop through the array and count the number of positive numbers\n    for num in arr:\n        if num > 0:\n            count += 1\n            positive_sum += num\n\n    # Find the ration of positive numbers\n    positive_ratio = 0\n    if count > 0:\n        positive_ratio = positive_sum / count\n\n    # Return the ratio of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_list = []\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    pos_count = len(num_list)\n    total_count = len(nums)\n    if pos_count == 0:\n        return 0.0\n    else:\n        return (pos_count / total_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n\n    if positive_count == 0:\n        return 0\n    else:\n        return positive_count / negative_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize largest negative number to be the first element of the list\n    largest = lst[0]\n\n    # Iterate through the list starting from the second element\n    for i in range(1, len(lst)):\n        # If an element is negative, update largest\n        if lst[i] < 0:\n            largest = lst[i]\n\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    neg_list = [num for num in list1 if num < 0]\n    return max(neg_list)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf') # initializing the largest variable to negative infinity\n    for num in list1: # iterating through the list1\n        if num < 0 and num > largest: # checking if the current number is negative and larger than the current largest\n            largest = num # updating the largest variable if necessary\n    return largest # returning the largest negative number"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -1\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > largest:\n            largest = list1[i]\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list as input and returns the largest negative number in the list.\n    \"\"\"\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')  # initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number found in the list.\n    '''\n    largest = -1000000000   # Initialize the largest variable to a large negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[i] for i in range(len(tup)) if i % K!= 0)\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    # iterate through the list of tuples and trim each tuple by k\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j >= K:\n                del test_list[i][j]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # convert each tuple to a list and trim each element by k\n        new_tup = [i for i in tup[:K]]\n        # convert the list back to a tuple and append it to the trimmed list\n        trimmed_list.append(tuple(new_tup))\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if len(tup) > K:\n            result.append(tup[:K])\n        else:\n            result.append(tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(t[i:i+K]) for t in test_list for i in range(len(t)-K+1)]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i]) - K + 1):\n            test_list[i] = test_list[i][:j] + test_list[i][j+K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        new_tuple = tuple(test_list[i])\n        trimmed_tuple = (new_tuple[0], new_tuple[1][K:])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n    # Initialize the result tuple\n    result = ()\n    # Loop through the indices of the tuples\n    for i in range(len(test_tup1)):\n        # Perform the multiplication and append the result to the result tuple\n        result += (test_tup1[i] * test_tup2[i],)\n    # Return the result tuple\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if the length of both tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have same length')\n    # initialize a new tuple with length of the first tuple\n    result_tup = [0] * len(test_tup1)\n    # perform index wise multiplication of each element of the two tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have same length.\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] *= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count:\n            if item in result:\n                result[item] += 1\n            else:\n                result[item] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    This function takes a tuple and a list as input and returns a dictionary where the keys are the elements of the list and the values are the frequency of occurrence of each element in the list in the tuple.\n    \"\"\"\n    count_dict = {}\n    for element in lst:\n        if element in tup:\n            count_dict[element] = tup.count(element)\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter()\n    for element in tup:\n        for sub_element in lst:\n            if element == sub_element:\n                count[element] += 1\n                break\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(tup)\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes in a tuple and a list and returns a dictionary where the keys are the elements of the list and the values are the number of times each element appears in the tuple.\n    '''\n\n    count_dict = {} \n    for element in lst: \n        count_dict[element] = tup.count(element) \n        \n    return count_dict "
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_lst = set(lst) \n    # count the occurrence of each element in the tuple\n    count_dict = Counter(tup) \n    # create a dictionary with the elements of the tuple as keys and their count in the list as values\n    count_dict_lst = {k: count_dict[k] for k in count_dict} \n    # merge the two dictionaries to create a final dictionary with the count of each element in the tuple\n    final_dict = {**count_dict_lst, **unique_lst: count_dict_lst[unique_lst]} \n    # return the final dictionary\n    return final_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Creating a dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Looping through the list and counting the occurrence of each element in the tuple\n    for i in lst:\n        count_dict[i] = count_dict.get(i, 0) + tup.count(i)\n        \n    # Returning the dictionary containing the count of each element in the list\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input.\n    It counts the number of occurrences of all elements in the list in the tuple.\n    '''\n    count = Counter()\n    for elem in lst: \n        count[elem] += 1 \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a set so that we can count the occurrence of elements\n    set_tup = set(tup)\n    # Count the occurrence of each element in the list using the Counter function from the collections module\n    count_lst = Counter(lst)\n    # Filter the set of elements in the tuple using the list of elements from the list and count the occurrence of each element\n    result = {i: count_lst[i] for i in set_tup if i in count_lst}\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # initialize variables\n    perrin_num = 1\n    sum = 0\n\n    # loop through perrin numbers\n    while perrin_num <= n:\n        sum += perrin_num\n        perrin_num += 1\n\n    # return the sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1): \n        sum += i*i*i \n    return sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    \n    # Calculate the sum of perrin numbers\n    for i in range(1, n+1):\n        sum += i\n    \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # define the first perrin number\n    p = 2\n\n    # initialize the sum of perrin numbers\n    sum_p = 0\n\n    # loop through each perrin number until n is reached\n    while p <= n:\n\n        # add the perrin number to the sum\n        sum_p += p\n\n        # calculate the next perrin number\n        p += 4\n\n    # return the sum of perrin numbers\n    return sum_p"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    perrin_numbers.append(1)\n    perrin_numbers.append(2)\n    perrin_numbers.append(3)\n\n    for i in range(3, n+1):\n        perrin_numbers.append(2*i-1)\n        perrin_numbers.append(2*i)\n        perrin_numbers.append(2*i+1)\n\n    perrin_sum = sum(perrin_numbers)\n    return perrin_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n        if total_sum > n:\n            break\n    return total_sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = cal_sum(n)\nprint(\"The sum of Perrin numbers is:\", result)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(0, len(l), l):\n        result.append(l[i:i+l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:l])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        if len(l[i]) == l[i]:\n            result.append(l[i])\n        else:\n            continue\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of strings and an integer l as input and returns a list of strings of length l extracted from the input list.\n    '''\n    return [str_list[i:i+l] for i in range(0, len(str_list), l)]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            new_list.append(str_list[i])\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str for str in str_list if len(str) == size]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_strings.append(string[:size])\n        else:\n            extracted_strings.append(string)\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a specified size as input and returns a new list of strings containing the extracted strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a specified size as input and returns a list of the specified size of strings from the given list of string values.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        if i == size - 1:\n            extracted_list.append(str_list[i])\n            break\n        else:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    # Remove any leading or trailing whitespaces\n    text1 = text1.strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub('\\s+','', text)\n    # Use strip() method to remove leading and trailing whitespaces\n    return text.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('[\\s]+','', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text2 = re.sub(r'\\s+','', text1)\n    # Removing all whitespaces from the string\n    return text2.strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the string\n    text1 = re.sub(r'\\s+', '', text1)\n    # remove all tabs from the string\n    text1 = re.sub(r'\\t+', '', text1)\n    # remove all newline characters from the string\n    text1 = re.sub(r'\\n+', '', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_whitespaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    # Using regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Removing leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount / actual_cost * 100\n    if loss_percentage > 0:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_rate = 0.05 #loss rate\n    if sale_amount > actual_cost: #if sale amount is greater than actual cost\n        loss_amount = sale_amount - actual_cost #calculate loss amount\n    else: #if sale amount is less than actual cost\n        loss_amount = 0 #no loss\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        loss = sale_amount - actual_cost\n        return loss\n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum of even factors to 0\n    evenSum = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(2, n+1): \n        # check if i is even and divisible by n\n        if i % 2 == 0 and n % i == 0: \n            # if i is even and divisible by n, add it to the evenSum\n            evenSum += i \n\n    return evenSum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    if n > 2 and n % 2 == 0:\n        even_sum += n\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    if n % 2 == 0:\n        sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a number as input and returns the sum of its even factors.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors += i\n    return even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize variables for sum and count of even factors\n    even_sum = 0\n    even_count = 0\n\n    # loop through odd factors of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        # check if i divides n without leaving a remainder\n        if n % i == 0:\n            # if i is even, add it to the sum and increment the count\n            if i % 2 == 0:\n                even_sum += i\n                even_count += 1\n\n    # add the last factor (n) to the sum if it's even\n    if n % 2 == 0:\n        even_sum += n\n        even_count += 1\n\n    # return the sum of even factors\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\nprint(sumofFactors(10)) # Output: 22"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_even_factors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum_even_factors += i\n    return sum_even_factors"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    words = re.findall(pattern, text)\n    return words\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b\\s+z\\b\\s*|\\b[a-zA-Z]+\\s+z\\b\\s*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+z\\b'\n    words_with_z = re.findall(pattern, text)\n    return words_with_z"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Use regex to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b(z)\\w*\\b')\n    match = pattern.findall(text)\n    return match"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    # Check if the month number is a valid number between 1 and 12\n    if not isinstance(monthnum2, int) or monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number\"\n\n    # Check if the month number has 31 days\n    if monthnum2 == 2:\n        return \"February has 28 or 29 days\"\n    elif monthnum2 in (4, 6, 9, 11):\n        return \"March, May, September, and November have 30 days\"\n    else:\n        return \"All other months have 31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number.\"\n    else:\n        if monthnum2 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                return \"31 days\"\n            else:\n                return \"29 days\"\n        elif monthnum2 in [4, 6, 9, 11]:\n            return \"30 days\"\n        else:\n            return \"31 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_num = int(monthnum)\n    if 1 <= month_num <= 12:\n        if month_num == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1, 13):\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        elif monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return False\n        else:\n            raise ValueError(\"Invalid month number.\")\n    else:\n        raise ValueError(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum2 in [4,6,9,11]:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    elif monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum = int(monthnum2)\n    if monthnum in [4, 6, 9, 11]:\n        return False\n    elif monthnum == 2:\n        return monthnum2[0:2] in [\"02\", \"04\", \"06\", \"09\", \"11\"]\n    elif 1 <= monthnum <= 9:\n        return monthnum2[0:2] in [\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"]\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    month_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n    if monthnum2 in month_days:\n        if month_days[monthnum2] == 31:\n            return True\n        else:\n            return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print(\"Invalid month number.\")\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        if (year2 % 4 == 0 and year2 % 100!= 0) or (year2 % 400 == 0):\n            if monthnum2 == 2 and (daynum2 <= 29):\n                return True\n            elif monthnum2 == 2 and (daynum2 > 29):\n                return False\n        else:\n            if monthnum2 == 2 and (daynum2 <= 28):\n                return True\n            elif monthnum2 == 2 and (daynum2 > 28):\n                return False\n    else:\n        if (monthnum2 % 2 == 0 and monthnum2 % 3 == 0) or (monthnum2 % 100 == 0 and monthnum2 % 400!= 0):\n            if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                if daynum2 == 30:\n                    return True\n                else:\n                    return False\n            else:\n                if daynum2 == 31:\n                    return True\n                else:\n                    return False\n        else:\n            if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n                if daynum2 == 31:\n                    return True\n                else:\n                    return False\n            else:\n                if daynum2 == 30:\n                    return True\n                else:\n                    return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        result.append(reversed_string)\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # Reverse the string using slicing\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_stringlist = []\n    for s in stringlist:\n        reversed_stringlist.append(s[::-1])\n    return reversed_stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_len = len(lst[0])\n    min_lst = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize the minimum length and sublist\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n\n    # Loop through all the sublists\n    for i in range(1, len(lst)):\n\n        # Check if the current sublist has a smaller length\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                min_len = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length and index of minimum length\n    min_length = float('inf')\n    min_index = None\n\n    # Loop through each sublist\n    for i, sublist in enumerate(lst): \n        # Check if length of current sublist is less than minimum length\n        if len(sublist) < min_length: \n            # If yes, update minimum length and index\n            min_length = len(sublist)\n            min_index = i\n\n    # Return the sublist with minimum length\n    return lst[min_index]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize variables for minimum sublist length and minimum sublist\n    min_len = float('inf')\n    min_sublist = []\n\n    # Loop through each element of the list\n    for i in range(len(lst)):\n        # Create a new sublist containing all elements from lst[:i+1]\n        sublist = lst[:i+1]\n        # Check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n            # If it is, update the minimum length and the minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    sublist = None\n    \n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            current_length = j - i + 1\n            if current_length < min_length:\n                min_length = current_length\n                sublist = lst[i:j+1]\n    \n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    result = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            result = sublist\n    \n    return result"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize minimum length and sublist\n    min_len = float('inf')\n    min_sublist = []\n    \n    # loop through each sublist\n    for i in range(len(lst)):\n        # loop through each element of the sublist\n        for j in range(i, len(lst)):\n            # check if length of the sublist is smaller than the minimum length\n            if j - i + 1 < min_len:\n                # update minimum length and sublist\n                min_len = j - i + 1\n                min_sublist = lst[i:j+1]\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = None\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_sublist = [] # initialize empty list to store minimum sublist\n    \n    for sublist in lst:\n        if len(sublist) < min_length: # check if length of sublist is less than minimum\n            min_length = len(sublist) # update minimum length\n            min_sublist = sublist # update minimum sublist\n            \n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(\"The area of the rectangle is:\",area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define regex pattern to match uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    # find all the uppercase substrings in the string\n    matches = re.findall(pattern, str1)\n    # remove all the uppercase substrings from the string\n    for match in matches:\n        str1 = re.sub(r'(?i)'+match, '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'([A-Z][a-z]+)')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase substrings from the string\n    str2 = re.sub(r'[A-Z]+', '', str1)\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Create a regular expression pattern to match uppercase substrings\n    uppercase_pattern = re.compile(r'(?i)[A-Z]+')\n    # Find all uppercase substrings in the input string\n    uppercase_matches = re.findall(uppercase_pattern, string)\n    # Remove the uppercase substrings from the input string\n    result = re.sub(uppercase_pattern, '', string)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # create a regular expression to match uppercase substrings\n    uppercase_pattern = re.compile(r'[A-Z]+')\n    # find all uppercase substrings in the string using the regular expression\n    uppercase_matches = uppercase_pattern.findall(str1)\n    # loop through the list of uppercase substrings and replace them with empty strings\n    for match in uppercase_matches:\n        str1 = str1.replace(match, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes all uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function removes uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern for uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use search() method to search for uppercase substrings in the given string\n    result = pattern.sub('', str1)\n    # Return the modified string with uppercase substrings removed\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(string):\n    pattern = r'\\b[A-Z]\\w+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list.\n\n    Args:\n    lst: a list of sublists\n\n    Returns:\n    a list of the first elements of each sublist in the original list\n    \"\"\"\n    result = []\n    for sublist in lst:\n        if len(sublist) > 0:\n            result.append(sublist[0])\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the extracted elements\n    extracted_list = []\n    # loop through each sublist in the input list\n    for sublist in lst:\n        # check if the sublist is not empty\n        if sublist:\n            # if the sublist is not empty, add the first element to the extracted_list\n            extracted_list.append(sublist[0])\n        # if the sublist is empty, skip it and move on to the next one\n    return extracted_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.append(item[0])\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    \"\"\"\n    This function extracts the first element of each sublist in a given list.\n    \"\"\"\n    if not lst:  # base case: empty list\n        return []\n    else:\n        # extract the first element of each sublist recursively\n        sublist_head = Extract(lst[1:])\n        # add the head of the current sublist to the sublist_head list\n        sublist_head.append(lst[0])\n        # return the sublist_head list\n        return sublist_head"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            for j in i:\n                result.append(j)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as input and returns a list containing the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    This function takes a list as an argument and returns a list with the first element of each sublist.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i][0])\n    return res"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function counts the number of upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the number of upper case characters in it.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create an empty list to store the combinations\n    combinations = []\n    \n    # create a function to generate all combinations of length n\n    def generate_combinations(n, indices, combination):\n        # base case: if n is zero, append the combination to the list and return\n        if n == 0:\n            combinations.append(combination[:])\n            return\n        \n        # recursive case: generate combinations of length n-1\n        generate_combinations(n-1, indices, combination)\n        \n        # for each index i in the indices list:\n        for i in indices:\n            # add the i-th element to the combination and generate all combinations of length n-1 with i+1 appended to the indices list\n            generate_combinations(n-1, indices[:i] + indices[i+1:], combination+[list1[i]])\n    \n    # initialize the indices list\n    indices = range(len(list1))\n    \n    # generate all combinations of length n\n    generate_combinations(len(list1), indices, [])\n    \n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Find the length of the list\n    length = len(list1)\n\n    # Create an empty list to store the combinations\n    combinations = []\n\n    # Loop through the list of elements\n    for i in range(1, length + 1):\n\n        # Loop through the list of elements\n        for j in range(length - i + 1):\n\n            # Create a combination of the current elements\n            combination = list1[j:j+i]\n\n            # Append the combination to the list of combinations\n            combinations.append(combination)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    \n    # Generate all possible combinations of the elements of the list\n    combinations_list = list(combinations(list1, len(list1)))\n    \n    return combinations_list"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    # create an empty list to store the combinations\n    comb = []\n\n    # for each element in the list\n    for i in range(len(list1)):\n        # initialize two empty lists for the current combination\n        curr_comb = []\n        prev_comb = []\n\n        # for each previous combination\n        for j in range(i):\n            # if the current element is different from the previous element, append it to the current combination\n            if list1[i]!= list1[j]:\n                curr_comb.append(list1[i])\n\n        # add the current combination to the main list\n        comb.append(curr_comb)\n\n        # add the previous combination to the main list\n        comb.append(prev_comb)\n\n    # return the final list of combinations\n    return comb"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    n = len(list1)\n    result = []\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    result = []\n    for i in range(1, len(list1)+1):\n        for combination in itertools.combinations(list1, i):\n            result.append(list(combination))\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list_len = len(list1)\n    for i in range(1, list_len+1):\n        for j in range(list_len-i+1):\n            yield list1[j:j+i]"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        current_product = max(current_product, max_ending_here)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        if current_product < 0:\n            current_product = 1\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n    max_ending_here = 1\n    for num in arr:\n        if num < 0:\n            current_product, max_ending_here = max_ending_here, current_product\n        current_product = max(current_product * num, num)\n        max_ending_here = max(max_ending_here, current_product)\n        max_product = max(max_product, max_ending_here)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product = max(max_product, arr[i])\n        min_so_far = min(min_so_far, arr[i])\n        max_so_far = max(max_so_far, max_product, min_so_far)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 1:\n        return arr[0], 1\n\n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far, max_ending_here\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Returns:\n    The maximum product subarray of the given array.\n    \"\"\"\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values in the dictionary are same.\")\n    else:\n        print(\"There are different values in the dictionary.\")"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if i == dict.values()[0]:\n            count += 1\n        else:\n            break\n\n    if count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if the length of the dictionary is less than or equal to 1\n    if len(dict) <= 1:\n        return True\n    # Check if all the values in the dictionary are same\n    for i in range(len(dict)):\n        if i == 0:\n            if dict[i]!= dict[i+1]:\n                return False\n        else:\n            if dict[i] == dict[i+1]:\n                return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if val!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and a number n as input and returns True if all values of the dictionary are same for the first n keys, False otherwise.\n    '''\n    for i in range(min(n, len(dict))):\n        if len(set(dict.values())) == 1:\n            return True\n        elif len(set(dict.values())) > 1:\n            return False\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    if len(set(dict.values())) == 1:\n        return True\n    \n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = set()\n    for value in dict.values():\n        values.add(value)\n    return len(values) == 1 and values.pop() == n"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for val in dict.values():\n        if len(set(val)) == 1:\n            return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # check if all values are same\n    if all(value == dict[list(dict.keys())[0]] for value in dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for value in dict.values():\n        all_values.append(value)\n    return all_values.count(all_values[0]) == len(all_values)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key in dict1:\n        if len(dict1[key]) == 0:\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= \"\":\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Loop through each key in the dictionary\n    for key in dict1:\n        # If the value for that key is an empty string, remove it from the dictionary\n        if dict1[key] == '':\n            del dict1[key]\n    return dict1"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k: v for k, v in dict1.items() if v}\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            max_ending_here = max(max_ending_here, min_ending_here * arr[i])\n            min_ending_here = min(min_ending_here, max_ending_here // arr[i])\n            \n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n    current_product = 1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is smaller than the previous element, update the current product\n        if arr[i] < arr[i-1]:\n            current_product *= arr[i]\n            max_product_ending_here = max(max_product_ending_here, current_product)\n        else:\n            # If the current element is larger than the previous element, update the current product and the max product ending here\n            current_product = 1\n            max_product_ending_here = arr[i]\n        \n        # Update the max product so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = float('-inf')\n    prev_num = 0\n\n    for i in range(n):\n        curr_num = arr[i]\n        for j in range(i):\n            if curr_num <= arr[j]:\n                break\n            if curr_num - arr[j] < 0:\n                break\n            if curr_num - arr[j] > max_product:\n                max_product = curr_num - arr[j]\n        if curr_num > prev_num:\n            prev_num = curr_num\n\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    if len(arr) <= 1:\n        return 0\n\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    min_product = arr[0]\n    for i in range(1, n):\n        max_product = max(max_product * arr[i], max_product, arr[i])\n        min_product = min(min_product * arr[i], min_product, arr[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    # Initialize maximum and minimum values\n    max_so_far = arr[0]\n    min_so_far = arr[0]\n    \n    # Initialize variables for left and right pointers\n    left = 0\n    right = 0\n    \n    # Loop through the array and update max and min values\n    for i in range(1, len(arr)):\n        # Update maximum value\n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            left = i\n        # Update minimum value\n        elif arr[i] < min_so_far:\n            min_so_far = arr[i]\n            right = i\n    \n    # Return the maximum product\n    return max(max_so_far * arr[left], min_so_far * arr[right])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            sub_array = arr[i:j+1]\n            sub_array.sort()\n            max_subproduct = sub_array[-1] * sub_array[-2]\n            if max_subproduct > max_product:\n                max_product = max_subproduct\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return max(arr[0], arr[1])\n    else:\n        # Find the maximum product of the last two elements\n        max_product_last_two = max(arr[-1] * arr[-2], arr[0] * arr[1])\n        # Find the maximum product of the first and the last element\n        max_product_first_and_last = max(arr[0] * arr[-1], arr[1] * arr[-1])\n        # Find the maximum product of the first three elements\n        max_product_first_three = max(arr[0] * arr[1] * arr[2], arr[0] * arr[2] * arr[1], arr[1] * arr[2] * arr[0])\n        # Find the maximum product of the first four elements\n        max_product_first_four = max(arr[0] * arr[1] * arr[2] * arr[3], arr[0] * arr[1] * arr[3] * arr[2], arr[0] * arr[2] * arr[3] * arr[1], arr[1] * arr[2] * arr[3] * arr[0], arr[0] * arr[2] * arr[3] * arr[1])\n        # Return the maximum of all the products\n        return max(max_product_first_three, max_product_last_two, max_product_first_and_last, max_product_first_four)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables\n    max_product = 0\n    current_product = 1\n    max_product_ending_here = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current number is smaller than the last product\n        if arr[i] < 0:\n            # If so, swap the last product with the current number\n            current_product, max_product_ending_here = max_product_ending_here, current_product\n\n        # Update the current product\n        current_product *= arr[i]\n\n        # Update the maximum product\n        max_product = max(max_product, max_product_ending_here)\n\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length % 2!= 0:\n        return None\n\n    # Calculate the sum of all the elements except for the last element\n    first_half = sum(test_tup[:-1])\n    second_half = sum(test_tup[1:])\n\n    # Find the sum of the elements in the middle\n    middle_sum = test_tup[length//2]\n\n    # Return the sum of the two sums\n    return first_half + second_half + middle_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i] - test_tup[i-1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize the sum to zero\n    sum = 0\n    \n    # Get the length of the tuple\n    length = len(test_tup)\n    \n    # Loop through the tuple and add the pairwise sums\n    for i in range(length-1):\n        sum += test_tup[i] + test_tup[i+1]\n    \n    # Return the sum of the pairwise additions\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return None\n\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] + test_tup[i + 1] == 0:\n            return test_tup[i] + test_tup[i + 1]\n    else:\n        return None"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return test_tup\n    else:\n        first = test_tup[0]\n        second = test_tup[1]\n        result = first + second\n        for i in range(2, n-1):\n            result += test_tup[i+1]\n        return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # initialize variables\n    sum_1 = test_tup[0]\n    sum_2 = sum_1\n    \n    # loop through the tuple and add each neighboring pair of elements\n    for i in range(1, len(test_tup)):\n        sum_2 += test_tup[i]\n    \n    return sum_2"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Create a copy of the tuple to avoid modifying the original\n    t = test_tup[:]\n    # Loop through the tuple and calculate the pairwise addition of the neighboring elements\n    for i in range(len(t) - 1):\n        t[i] += t[i+1]\n    return t"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Initialize variables for the sum and the count of elements\n    sum_elements = 0\n    count_elements = 0\n\n    # Loop through the tuple and add the pairwise elements\n    for i in range(len(test_tup)-1):\n        sum_elements += test_tup[i] + test_tup[i+1]\n        count_elements += 2\n\n    # Return the sum of the pairwise elements and its count\n    return (sum_elements, count_elements)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and an integer as input and returns the product of their array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr: \n        result = (result * i) % n \n    return result "
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    # multiply all the elements of the array\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    \n    # return the product modulo n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize result to 1\n    result = 1\n\n    # Loop through array and multiply each element with result\n    for num in arr:\n        result = (result * num) % n\n\n    # Return result\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Returns the product of the array multiplication modulo n.\n    \"\"\"\n    # Find the product of the array elements\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Find the remainder of the product divided by n\n    remainder = product % n\n    \n    # Return the remainder\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array `arr` and an integer `n` as input and returns the product of the array multiplication modulo `n`.\n    '''\n    product = 1\n    for num in arr: \n        product = (product * num) % n\n    \n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array arr and an integer n as inputs, and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n\n    for num in arr:\n        product = (product * num) % n\n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number 'n' and returns the product of the array multiplication modulo n.\n    '''\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Iterate through the array and multiply each element with the product\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    This function takes a list `l` and returns True if the list contains consecutive numbers, otherwise, it returns False.\n    '''\n    # Check if the length of the list is less than 2\n    if len(l) < 2:\n        return False\n    \n    # Check if the first element is 0\n    if l[0] == 0:\n        return False\n    \n    # Check if the second element is less than the first element\n    if l[1] < l[0]:\n        return False\n    \n    # Iterate over the list from the second element\n    for i in range(1, len(l)):\n        # Check if the current element is less than the previous element\n        if l[i] < l[i-1]:\n            # If the current element is less than the previous element, return False\n            return False\n    \n    # If the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i]+1!= l[i+1]: \n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # initialize variables\n    consecutive = False\n\n    # loop through the list\n    for i in range(len(l)-1):\n        # check if the difference between the current element and the next element is 1\n        if l[i+1] - l[i] == 1:\n            # if it is consecutive, set consecutive to True\n            consecutive = True\n        else:\n            # if it is not consecutive, set consecutive to False\n            consecutive = False\n\n        # if consecutive is True, return True\n        if consecutive == True:\n            return True\n\n    # if the loop completes without finding any consecutive numbers, return False\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    for i in range(n-1): \n        if l[i] + 1 == l[i+1]: \n            return True \n    return False "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # initialize the counter variable to 0\n    counter = 0\n    \n    # loop through the list\n    for i in range(len(l)-1): \n        # check if the current number is consecutive to the previous number\n        if l[i]+1 == l[i+1]:\n            # if it is consecutive, increment the counter\n            counter += 1\n        else:\n            # if it's not consecutive, reset the counter\n            counter = 0\n    \n    # check if the list is empty\n    if len(l) == 0:\n        return \"The list is empty.\"\n    # check if there is only one element in the list\n    elif len(l) == 1:\n        return \"The list has only one element.\"\n    # check if the counter is greater than 1\n    elif counter > 1:\n        return \"The list contains consecutive numbers.\"\n    # if all the conditions fail, the list does not contain consecutive numbers\n    else:\n        return \"The list does not contain consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            print(\"The list contains consecutive numbers!\")\n            return True\n    print(\"The list doesn't contain consecutive numbers!\")\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l) - 1): \n        if l[i] + 1 == l[i + 1]: \n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns a new tuple list that contains the intersection of elements\n    irrespective of their order.\n    \"\"\"\n    intersection = []\n    for i in range(min(len(test_list1), len(test_list2))):\n        if test_list1[i] in test_list2 and test_list2[i] in test_list1:\n            intersection.append(test_list1[i])\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of the elements of the first list to remove duplicates\n    set1 = set(test_list1)\n    # Create an empty list to store the intersection of the two sets\n    intersection = []\n    # Iterate through the second list and check if each element is in the first set\n    for elem in test_list2:\n        if elem in set1:\n            # If it is, add it to the intersection list\n            intersection.append(elem)\n    # Return the intersection list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # Find the intersection of two lists using set()\n    intersection = set(test_list1) & set(test_list2)\n\n    # Convert the intersection list back to tuple\n    intersection_tuple = tuple(intersection)\n\n    return intersection_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = set()\n    for t1 in test_list1:\n        for t2 in test_list2:\n            if t1 == t2:\n                intersection.add(t1)\n                break\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_list = []\n    for i in range(len(test_list1)):\n        if all(x == test_list1[i] for x in test_list2):\n            intersection_list.append(test_list1[i])\n    return tuple(intersection_list)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first list\n    set1 = set(test_list1)\n\n    # Create a set from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a tuple list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes in two tuple lists and returns the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set of unique elements from both lists\n    unique_elements = set(test_list1 + test_list2)\n\n    # create an empty set to store the intersection\n    intersection = set()\n\n    # iterate through the unique elements and add them to the intersection set if they are present in both lists\n    for element in unique_elements:\n        if element in test_list1 and element in test_list2:\n            intersection.add(element)\n\n    # return the intersection set\n    return intersection"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # loop through the list of characters and replace the character to be replaced\n    for i in range(len(lst)):\n        if lst[i] == ch:\n            lst[i] = newch\n    # convert the list back to a string and return the result\n    return ''.join(lst)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n\n    Args:\n        str1 (str): The original string.\n        ch (str): The character to be replaced.\n        newch (str): The character that will replace the original character.\n\n    Returns:\n        str: The modified string with the specified character replaced.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Check if the input string is valid\n    if not isinstance(str1, str):\n        raise TypeError('Input string must be a string.')\n    \n    # Check if the input character is valid\n    if not isinstance(ch, str) or not isinstance(newch, str):\n        raise TypeError('Input character must be a string.')\n    \n    # Check if the input string contains the character to be replaced\n    if ch not in str1:\n        raise ValueError('The character to be replaced is not found in the input string.')\n    \n    # Replace the character\n    new_str = str1.replace(ch, newch)\n    \n    return new_str"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a Counter object to count the frequency of each value in the dictionary\n    count = Counter(dict1.values())\n    \n    # Sort the Counter object by value in descending order\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with the sorted Counter object as its values\n    sorted_dict = {}\n    for value, freq in sorted_count:\n        sorted_dict[value] = freq\n        \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda item: item[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_counter = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = float('-inf')\n    min_num = float('inf')\n\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        elif num < min_num:\n            min_num = num\n\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    This function takes an array of numbers as input and returns the sum of the largest and smallest value in the array.\n    '''\n    # initialize two variables to hold the largest and smallest values in the array\n    largest = float('-inf')\n    smallest = float('inf')\n    \n    # iterate through the array and update the largest and smallest variables as needed\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"Array should have at least two elements.\")\n    max_num = nums[0]\n    min_num = nums[0]\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # get the length of the array\n    n = len(nums)\n    \n    # initialize the largest and smallest values to the first element\n    largest = smallest = nums[0]\n    \n    # loop through the remaining elements\n    for i in range(1, n):\n        # update the largest and smallest values\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    \n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the largest and smallest values in the array\n    max_num = nums[0]\n    min_num = nums[0]\n    # Loop through the array again to find the sum of the largest and smallest values\n    for num in nums:\n        if num > max_num:\n            max_num = num\n        if num < min_num:\n            min_num = num\n    # Return the sum of the largest and smallest values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # get the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # calculate the sum of the two values\n    sum_vals = max_val + min_val\n    # return the sum\n    return sum_vals"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return nums[0]\n    elif len(nums) == 2:\n        return nums[0] + nums[1]\n    else:\n        return max(nums) + min(nums)"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n    # Find the largest and smallest values in the array\n    largest = nums[-1]\n    smallest = nums[0]\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Create a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Match the pattern in the string\n    matches = re.findall(pattern, str1)\n    # Remove the lowercase substrings from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = r'[a-z]+'\n    # Use the re.findall() function to find all substrings that match the pattern\n    lowercase_substrings = re.findall(pattern, str1)\n    # Loop through the list of lowercase substrings and remove them from the original string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1, flags=re.IGNORECASE)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # Remove all lowercase substrings\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Initialize a list to store lowercase substrings\n    lowercase_list = []\n    # Loop through each character in the string\n    for i in str1:\n        # If the character is lowercase, add it to the list\n        if i.islower():\n            lowercase_list.append(i)\n        # If the character is not lowercase, return the list\n        else:\n            return lowercase_list\n    # If the loop completes without returning a list, the function has not found any lowercase substrings\n    return \"No lowercase substrings found.\""
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings in the string\n    lowercase_substrings = re.findall(r'[a-z]+', str1)\n    \n    # Loop through the substrings and remove them from the original string\n    for substring in lowercase_substrings:\n        str1 = re.sub(r'\\b'+substring+'\\b', '', str1)\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into lowercase and uppercase substrings\n    substrings = re.findall(r'[a-z]+', str1)\n    \n    # Remove the lowercase substrings from the string\n    for substring in substrings:\n        str1 = str1.replace(substring, '')\n    \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expression to find all lowercase substrings\n    pattern = re.compile(r'\\b\\w+\\b', re.IGNORECASE)\n    # Use findall() method to get all the matches\n    matches = pattern.findall(str1)\n    # Remove all the matches from the string\n    new_str = re.sub(pattern, '', str1)\n    return new_str"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer as input and returns the first digit of the number.\n    '''\n    first_digit = str(n)[0]\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the input number to a string\n    n = str(n)\n    # Get the first character of the string\n    first_char = n[0]\n    # Convert the first character to a number\n    first_num = int(first_char)\n    # Return the first number as the result\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of that number.\n    '''\n    return int(str(n)[0])"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as an input and returns its first digit.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string and then access the first character of the string\n    first_char = str(n)[0]\n    # convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # find the first digit in the string and convert it to an integer\n    digit = int(num[0])\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n >= 10:\n        return n % 10\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a list of only the odd integers in the list.\n    \"\"\"\n    result = []\n    for num in lst:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [num for num in list if num % 2 == 1]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers and returns a new list with only the odd numbers from the original list.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    # Calculate the sum of the cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the sum of the first n natural numbers\n    total = sum(range(1, n+1))\n    # Find the difference between the two sums\n    difference = abs(cubes - total)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # sum of first n natural numbers\n    first_n_sum = n * (n + 1) // 2\n    # sum of cubes of first n natural numbers\n    first_n_cube_sum = (n * (n + 1) * (2 * n + 1)) // 6\n    # difference between the two sums\n    difference = abs(first_n_sum - first_n_cube_sum)\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    diff = abs(sum_cubes - sum_natural)\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum([x**3 for x in range(1,n+1)])\n    sum_of_natural_numbers = sum(range(1,n+1))\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_natural = sum(range(1, n+1))\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    # calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    # calculate the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    # calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    This function takes an integer n as input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    cube_sum = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    num_sum = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return cube_sum - num_sum"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # calculate the sum of cubes of the first n natural numbers\n    cubes = [i**3 for i in range(1, n+1)]\n    cube_sum = sum(cubes)\n\n    # calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # return the difference between the sum of cubes and the sum of natural numbers\n    return cube_sum - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum(x**3 for x in range(n+1))\n    \n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(n+1))\n    \n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i*i*i\n        sum_of_numbers += i\n    \n    diff = sum_of_cubes - sum_of_numbers\n    \n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    # Create a dictionary to store the count of each number in the array\n    count_dict = {}\n    \n    # Loop through the array\n    for i in A :\n        # If the number is already in the dictionary, increment its count\n        if i in count_dict :\n            count_dict[i] += 1\n        # Otherwise, add it to the dictionary with a count of 1\n        else :\n            count_dict[i] = 1\n    \n    # Initialize the count of odd xor pairs to 0\n    odd_count = 0\n    \n    # Loop through the dictionary again\n    for i in count_dict :\n        # If the count is odd, increment the count of odd xor pairs\n        if count_dict[i] % 2 == 1 :\n            odd_count += 1\n        \n        # If the count is even, check if the sum of the number and its previous number is odd\n        if count_dict[i] % 2 == 0 :\n            if i - 1 in count_dict :\n                if count_dict[i] + count_dict[i - 1] % 2 == 1 :\n                    odd_count += 1\n    \n    # Return the final count of odd xor pairs\n    return odd_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        xor = sum(A[i:i+2])\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    count = 0\n\n    for i in range(N):\n        xor_value = xor_value ^ A[i]\n        count += 1\n\n    if xor_value % 2 == 1:\n        return count\n    else:\n        return count - 1"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    xor = 0\n    for i in range(N):\n        xor ^= A[i]\n    if xor % 2 == 1:\n        count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    xor_value = 0\n    count = 0\n\n    for i in range(N):\n        xor_value ^= A[i]\n\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value ^= (A[i] ^ A[j])\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    # Calculate the XOR of all the elements of the array A\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n\n    # Count the number of odd XOR values\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor_val = 0\n        for j in range(i+1,N):\n            xor_val ^= A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        elif char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.upper() if c.islower() else c.lower() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        elif char.isupper():\n            new_char = char.lower()\n        else:\n            new_char = char\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c) ^ 32) if c.isupper() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the two numbers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n\n    # initialize the sum of differences to zero\n    diff_sum = 0\n\n    # loop through each digit in the two numbers\n    for i in range(len(num1_str)):\n        # subtract the corresponding digits and add the result to the sum of differences\n        diff_sum += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the sum of the per-digit differences\n    digit_sum = sum([abs(digit1 - digit2) for digit1, digit2 in zip(digits1, digits2)])\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # create two lists of integers for the digits of the two numbers\n    digit_n1 = [int(digit) for digit in str(n1)]\n    digit_n2 = [int(digit) for digit in str(n2)]\n\n    # loop through the two digit lists and calculate the difference\n    sum_diff = 0\n    for i in range(len(digit_n1)):\n        sum_diff += abs(digit_n1[i] - digit_n2[i])\n\n    # return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to lists of digits\n    n1_digits = [int(d) for d in str(n1)]\n    n2_digits = [int(d) for d in str(n2)]\n\n    # Initialize the sum to 0\n    sum_digits = 0\n\n    # Loop through each digit in the first integer\n    for i in range(len(n1_digits)):\n        # Subtract the corresponding digit in the second integer\n        diff_digit = n1_digits[i] - n2_digits[i]\n        # Add the per-digit difference to the sum\n        sum_digits += diff_digit * diff_digit\n\n    # Return the sum of per-digit differences\n    return sum_digits"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n    '''\n    # initialize the sum variable to zero\n    sum = 0\n    # convert the input integers to lists of digits\n    num1_digits = list(map(int, str(n1)))\n    num2_digits = list(map(int, str(n2)))\n    # loop through the digits of the two numbers and calculate the per-digit difference\n    for i in range(len(num1_digits)):\n        sum += abs(num1_digits[i] - num2_digits[i])\n    # return the sum of the per-digit differences\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    sum_diff = 0\n\n    for i in range(10):\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n\n        sum_diff += abs(digit1 - digit2)\n\n        n1 //= 10\n        n2 //= 10\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_diff = 0\n    for i in range(10):\n        diff = abs(n1 % 10 - n2 % 10)\n        sum_of_diff += diff\n        n1 //= 10\n        n2 //= 10\n    return sum_of_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Convert the integers to strings\n    s1 = str(n1)\n    s2 = str(n2)\n\n    # Create a list of tuples to store the difference between the digits of the two integers\n    diff_list = []\n\n    # Loop through each character in the two strings and append the difference to the diff_list\n    for i in range(len(s1)):\n        diff = int(s1[i]) - int(s2[i])\n        diff_list.append(diff)\n\n    # Calculate the sum of the differences\n    sum_diff = sum(diff_list)\n\n    # Return the sum of the differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    list1 = [int(d) for d in str(n1)]\n    list2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference\n    diff = [abs(d1 - d2) for d1, d2 in zip(list1, list2)]\n    \n    # Calculate the sum of the differences\n    total_diff = sum(diff)\n    \n    # Return the total difference\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Function to calculate the sum of per-digit differences between two integers\n    def sum_of_per_digit_diffs(n1, n2):\n        sum = 0\n        for i in range(10):\n            diff = abs(n1 % 10 - n2 % 10)\n            sum += diff\n            n1 //= 10\n            n2 //= 10\n        return sum\n\n    # Call the function to calculate the sum of per-digit differences between n1 and n2\n    result = sum_of_per_digit_diffs(n1, n2)\n    return result"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n        elif current_sum < 0:\n            current_sum = 0\n    \n    return a[start:start+max_sum]"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables for the current sum and maximum sum\n    current_sum = 0\n    max_sum = float('-inf')\n    # Iterate through the list and calculate the current sum\n    for num in a:\n        current_sum += num\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n        # If the current sum is greater than the size of the sublist, reset the current sum\n        if current_sum > size:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size - 1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if i >= size-1:\n            break\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): List of integers to search for the maximum sublist sum.\n    size (int): The size of the sublist to search for the maximum sum.\n\n    Returns:\n    int: The sum of the largest contiguous sublist in the given list.\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list and calculate the sum of sublists of size'size'\n    for i in range(len(a)):\n        current_sum += a[i]\n        if i >= size - 1:\n            max_sum = max(max_sum, current_sum)\n            current_sum -= a[i - size + 1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i - size + 1\n            \n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 1:\n        return a[0]\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(size):\n        max_ending_here += a[i]\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        elif max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the max_sum variable to the first element of the list\n    max_sum = a[0]\n\n    # Initialize the current_sum variable to 0\n    current_sum = 0\n\n    # Iterate through the list from the second element to the end\n    for i in range(1, size):\n        # Calculate the sum of the current sublist using the formula\n        # current_sum = current_sum + a[i] - a[i-1]\n        current_sum = current_sum + a[i]\n\n        # If the current_sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into one\n    combined_tup = test_tup1 + test_tup2\n\n    # Find the unique elements of the combined tuple\n    unique_tup = list(set(combined_tup))\n\n    # Sort the unique elements in ascending order\n    sorted_tup = sorted(unique_tup)\n\n    # Output the sorted unique elements\n    print(sorted_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using the set() function to convert the tuples into sets, then joining them using the | (OR) operator\n    result = set(test_tup1) | set(test_tup2)\n    # Converting the result set back into a list, sorting it and returning it\n    return sorted(list(result))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # using set to remove duplicates and sort the tuple\n    union_set = sorted(set(test_tup1 + test_tup2))\n    # converting the set back to tuple\n    union_tup = tuple(union_set)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to hold the union of elements\n    union_set = set()\n    \n    # loop through each element of the two tuples\n    for element in test_tup1:\n        # add each element to the set of union elements\n        union_set.add(element)\n        \n    # loop through each element of the second tuple\n    for element in test_tup2:\n        # add each element to the set of union elements\n        union_set.add(element)\n        \n    # convert the set of union elements to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n    \n    # output the sorted union list\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n\n    # convert the tuples to sets\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # find the union of the sets\n    union_set = set1.union(set2)\n\n    # convert the union set to a list and sort it\n    sorted_union = sorted(list(union_set))\n\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set.update(test_tup2)\n    union_list = sorted(list(union_set))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty set to store the union of the tuples\n    union_set = set()\n\n    # Iterate through each element of the first tuple and add it to the union set\n    for element in test_tup1:\n        union_set.add(element)\n\n    # Iterate through each element of the second tuple and add it to the union set\n    for element in test_tup2:\n        union_set.add(element)\n\n    # Convert the union set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples using set()\n    union = set(test_tup1) | set(test_tup2)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union))\n    # Output the sorted list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n    # Convert the list to a set to remove duplicates\n    unique_set = set(combined_list)\n    # Convert the set back to a sorted list\n    sorted_list = sorted(unique_set)\n    # Output the sorted list\n    return sorted_list\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and finds their union and outputs the result in sorted order.\n    \"\"\"\n    # Convert the tuples to sets and find their union\n    union_set = test_tup1.union(test_tup2)\n    \n    # Convert the set back to a list and sort it\n    union_list = list(union_set)\n    union_list.sort()\n    \n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    curr_len = 0\n    for i in range(len(lst)):\n        if lst[i] == 1:\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n        else:\n            curr_len = 0\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = len(lst[i])\n        else:\n            max_length = max(max_length, len(lst[i]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 1\n    \n    # Iterate through the list\n    for i in range(1, len(lst)):\n        # If the current element is not equal to the next element, add 1 to the current length\n        if lst[i]!= lst[i-1]:\n            current_length += 1\n        # If the current element is equal to the next element, reset the current length to 1\n        else:\n            current_length = 1\n        \n        # If the current length is greater than the max length, update max_length\n        if current_length > max_length:\n            max_length = current_length\n    \n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize variables\n    max_length = 0\n    current_length = 0\n\n    # iterate through the list\n    for item in lst:\n        # increment the current length by 1\n        current_length += 1\n        # if the current length becomes greater than the maximum length, update the maximum length\n        if current_length > max_length:\n            max_length = current_length\n        # if the current length becomes equal to the maximum length, keep it as is\n\n    # return the maximum length found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # Initialize max_length to 0 and current_length to 0\n    max_length = 0\n    current_length = 0\n    \n    # Iterate through the list\n    for i in range(len(lst)):\n        # Add 1 to the current_length and compare it with max_length\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n        # If the current_length is greater than 1, reset it to 0 and add 1 to max_length\n        elif current_length == 1:\n            max_length += 1\n            current_length = 0\n            \n    # Return max_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list as input and returns the length of the longest sublist in the list.\n    \"\"\"\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_lst = lst[i:j+1]\n            if len(sub_lst) > max_len:\n                max_len = len(sub_lst)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0   # initialize the max_length variable to 0\n\n    # loop through each element in the list\n    for i in range(len(lst)):  \n\n        # initialize a variable to keep track of the current sublist length\n        current_length = 0  \n\n        # loop through each element after the current element\n        for j in range(i+1, len(lst)):  \n\n            # add the length of the current element to the current sublist length\n            current_length += 1  \n\n            # check if the current sublist length is greater than the max_length\n            if current_length > max_length:  \n                max_length = current_length\n\n    return max_length   # return the max_length value"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        curr_len = 0\n        for j in range(i, len(lst)):\n            curr_len += 1\n            if curr_len > max_len:\n                max_len = curr_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if i == len(lst) - 1:\n            max_length = max(max_length, current_length)\n        elif lst[i+1]!= lst[i]:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'(?<=\")\\w+(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Use a regular expression to find all the values between quotation marks\n    pattern = r'\"([^\"]+)\"'\n    values = re.findall(pattern, text)\n    \n    # Return the list of values\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text)\n    values = []\n    for match in matches:\n        values.append(match.strip())\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    :param text: A string with quotation marks.\n    :return: A list of extracted values.\n    \"\"\"\n    # Define a regular expression pattern for matching quotation marks\n    pattern = r'\"(.*?)\"'\n    \n    # Use the re.findall() method to extract all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the list of extracted values\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r\"(?<=\\\")([^\\\"]*)(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0 \n    for i in range(n-1): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1 \n    return count "
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    # initialize a counter for the number of pairs\n    count = 0\n\n    # loop through all pairs of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if both elements are unequal\n            if arr[i]!= arr[j]:\n                # if both are unequal, increment the counter\n                count += 1\n\n    # return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # Initialize an empty list to store characters\n    characters = []\n    \n    # Iterate over each character in the string\n    for char in word:\n        # Add the character to the list of characters\n        characters.append(char)\n    \n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # define an empty list to store the characters\n    characters = []\n    \n    # loop through each character in the word\n    for char in word:\n        # add the character to the list of characters\n        characters.append(char)\n    \n    # return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    \"\"\"\n    This function takes a string and returns a list of characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    string_n = str(n)\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character in the string and add its integer value to the sum\n    for digit in string_n:\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each digit in the integer and add it to the total\n    while n > 0:\n        total += n % 10\n        # Remove the last digit from the integer\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through each digit of the number\n    while n > 0:\n        # get the last digit of the number\n        digit = n % 10\n        # add the last digit to the sum variable\n        sum += digit\n        # remove the last digit from the number\n        n //= 10\n    # return the sum of all the digits in the number\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string and then use the built-in sum() function to sum up the digits\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the input integer to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    \n    # Initialize a variable to store the sum of digits\n    total = 0\n    \n    # Iterate over each digit in the list of digits and add it to the total\n    for digit in digits:\n        total += digit\n        \n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        raise ValueError(\"Input should be non-negative.\")\n    else:\n        return sum(int(d) for d in str(n))"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string\n    num_str = str(n)\n    # initialize a variable to store the sum of digits\n    digit_sum = 0\n    # loop through the digits of the integer\n    for digit in num_str:\n        # add the digit to the sum\n        digit_sum += int(digit)\n    # return the sum of digits\n    return digit_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string\n    s = str(n)\n    # Initialize a variable to store the sum\n    total = 0\n    # Loop through each digit in the string\n    for digit in s:\n        # Convert the digit to an integer and add it to the total\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to get its digits\n    digits = str(n)\n\n    # Initialize a variable to store the sum of digits\n    total = 0\n\n    # Loop through each digit in the string and add it to the total\n    for digit in digits:\n        total += int(digit)\n\n    # Return the sum of digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    if n < 2:\n        return True\n    for i in range(1, n):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # check if the list is empty or contains only one element\n    if len(list1) <= 1:\n        return True\n    \n    # check if the list is already sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    # if the list is sorted, return True\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list\n    for sublist in list1:\n        # Sort the sublist using the built-in `sorted()` function\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j].lower())  # convert to lowercase\n    \n    for i in range(len(list1)):\n        list1[i].sort()  # sort each sublist\n    \n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    for i in range(len(list1)):\n        list1[i].sort()\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list\n    for sublist in list1:\n        # sort the sublist in alphabetical order\n        sublist.sort()\n        # print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i, sublist in enumerate(list1):\n        list1[i] = sorted(sublist)\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n    nums: A list of lists, where each inner list contains the unique numbers from the original lists.\n\n    Returns:\n    A list containing the unique numbers from the original lists without duplicates.\n    \"\"\"\n\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n\n    # Loop through each inner list in the input list\n    for inner_list in nums:\n        # Loop through each number in the inner list\n        for num in inner_list:\n            # Check if the number is not already in the unique_nums list\n            if num not in unique_nums:\n                # Add the number to the unique_nums list\n                unique_nums.append(num)\n\n    # Return the unique_nums list with duplicates removed\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty set to store unique numbers\n    unique_nums = set()\n    # Loop through each list in the input\n    for num_list in nums:\n        # Loop through each number in the list\n        for num in num_list:\n            # Add the number to the set if it's not already in the set\n            if num not in unique_nums:\n                unique_nums.add(num)\n    # Convert the set back to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n\n    # create a set to store unique numbers\n    unique_nums = set()\n\n    # iterate through each list in the input list\n    for num_list in nums:\n        # iterate through each number in the list\n        for num in num_list:\n            # add each unique number to the set\n            unique_nums.add(num)\n\n    # convert the set back to a list\n    result = list(unique_nums)\n\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create an empty list to store unique numbers\n    unique_nums = []\n    # Loop through each number in the given lists\n    for num in nums:\n        # Check if the number is already in the unique_nums list\n        if num not in unique_nums:\n            # If the number is not in the list, add it to the list\n            unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                unique_nums.add(nums[i])\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # convert the lists to sets to remove duplicates\n    unique_nums = set(nums)\n\n    # convert the set back to a list\n    return list(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)  # create a set to remove duplicates\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set of unique numbers from the list\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(lst):\n    \"\"\"\n    Returns the product of the unique numbers in the given list.\n    \"\"\"\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    # Create a set to remove duplicates\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = sorted(list(set(list_data)))\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # convert list to set to remove duplicates\n    product = 1  # initialize product to 1\n    for number in unique_numbers:  # loop over unique numbers in set\n        product *= number  # multiply product by each unique number\n    return product  # return final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_set = set(list_data)\n    unique_list = sorted(unique_set)\n    product = 1\n    \n    for num in unique_list:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Initialize an empty dictionary to store the unique numbers and their counts\n    count_dict = {}\n\n    # Iterate over the list and count the unique numbers\n    for num in list_data:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for count in count_dict.values():\n        product *= count\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    '''\n    unique_list = []\n    \n    # iterate through the list and add unique elements to the unique_list\n    for element in list_data:\n        if element not in unique_list:\n            unique_list.append(element)\n    \n    # calculate the product of the unique numbers\n    product = 1\n    for element in unique_list:\n        product *= element\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = math.pi * r ** 2 + 2 * math.pi * r * h + math.pi * h ** 2\n    return surface_area\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nprint(\"The surface area of the cylinder is:\", surfacearea_cylinder(radius, height))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for surface area of a cylinder\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n\n    # Formula for surface area of a cylinder\n    # Area = 2*\u03c0r*h\n\n    return 2*3.14*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * (3.14 * r**2) + 2 * (3.14 * h * r)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius r and the height h of a cylinder as input and returns the surface area of the cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r * r + 2 * 3.14159 * h * r + 2 * 3.14159 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #calculating the surface area of the cylinder\n    surface_area = 2*3.14*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculates the surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: surface area of the cylinder\n    \"\"\"\n    return math.pi * r**2 * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)):\n        if A.count(B[i]) >= B.count(B[i]):\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) < len(B):\n        return False\n\n    j=0\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n        else:\n            j+=1\n            if j == len(A)-len(B)+1:\n                return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False \n\n    for i in range(len(B)): \n        if B[i] not in A: \n            return False \n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not B: #base case\n        return True\n    elif A[0] in B:\n        return is_Sub_Array(A[1:],B)\n    else:\n        return is_Sub_Array(A,B[1:]) #recursive case"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    if len(B) > len(A): \n        return False \n    for i in range(len(B)): \n        if A[i]!= B[i]: \n            return False \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(B) > len(A):\n        return False\n    \n    for i in range(len(B)):\n        if B[i] not in A:\n            return False\n    \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0 \n    j = 0 \n    n = len(A) \n    m = len(B) \n    \n    while j < m: \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n            if i == n: \n                return True \n        else: \n            i = i - j + 1 \n            j = 0 \n    \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    if len(A) >= len(B):\n        for i in range(len(A)-len(B)+1):\n            if A[i:i+len(B)] == B:\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        factorial *= n\n        n //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Find last digit of factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    # initialize a variable to store the last digit of factorial \n    last_digit = 0 \n    # loop through each digit of the factorial of n \n    for digit in str(n!): \n        # add the digit to the last_digit variable \n        last_digit += int(digit) \n    # return the last digit of the factorial \n    return last_digit "
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of its factorial.\n    \"\"\"\n    # Calculate the factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Extract the last digit of the factorial\n    last_digit = factorial % 10\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Get the factorial of the number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    \n    # convert the number to string\n    num = str(n)\n    \n    # get the last digit of the number\n    last_digit = num[-1]\n    \n    # convert the last digit to integer\n    last_digit = int(last_digit)\n    \n    # calculate the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit+1):\n        factorial *= i\n    \n    # return the factorial of the number\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # use a string to store the factorial of n\n    factorial = str(n)\n    # get the last digit of factorial\n    last_digit = factorial[-1]\n    return int(last_digit)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    This function takes a positive integer as input and returns the last digit in the factorial of the input number.\n    '''\n    # convert the input number to a string\n    num_str = str(n)\n    \n    # find the length of the string\n    length = len(num_str)\n    \n    # find the last digit of the factorial\n    last_digit = int(num_str[length-1])\n    \n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    for lst in [list1, list2, list3]:\n        for item in lst:\n            flat_list.append(item)\n            i += 1\n            if i == len(list1) + len(list2):\n                break\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # concatenate the lists\n    interleaved_list = list1 + list2 + list3\n    # reverse the order of the interleaved list\n    return interleaved_list[::-1]"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    if i < len(list1):\n        result.extend(list1[i:])\n    if j < len(list2):\n        result.extend(list2[j:])\n    if k < len(list3):\n        result.extend(list3[k:])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # create an empty list to hold the interleaved list\n    interleaved_list = []\n\n    # loop through each element in each list\n    for i in range(len(list1)):\n        # add the i-th element of list1 to interleaved_list\n        interleaved_list.append(list1[i])\n        # add the i-th element of list2 to interleaved_list\n        interleaved_list.append(list2[i])\n        # add the i-th element of list3 to interleaved_list\n        interleaved_list.append(list3[i])\n\n    # return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists are of the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        return \"Error: All lists must be of the same length.\"\n    # create an empty list to store the interleaved lists\n    interleaved_list = []\n    # iterate through each list and add its elements to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    index = 0\n    while index < len(list1):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists have the same length\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # concatenate the lists and return the result\n    return list1 + list2 + list3"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n\n    while i < len(list1) and j < len(list2):\n        result.append(list1[i])\n        result.append(list2[j])\n        i += 1\n        j += 1\n\n    while i < len(list1) and k < len(list3):\n        result.append(list1[i])\n        result.append(list3[k])\n        i += 1\n        k += 1\n\n    while j < len(list2) and k < len(list3):\n        result.append(list2[j])\n        result.append(list3[k])\n        j += 1\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Flatten the lists into a single list\n    flat_list = list1 + list2 + list3\n    # Interleave the elements from the lists using zip() function\n    interleaved_list = [x for x in zip(*[iter(flat_list)]*3)]\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples and returns a list of the elements that are present in the first tuple but not in the second tuple.\n    '''\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # iterate over the elements of the two tuples\n    for i in range(len(test_tup1)):\n        # if the elements are not equal, add them to the dissimilar list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    # return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set() to remove duplicate elements from both tuples\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n\n    # Finding the common elements in both tuples\n    common_elems = tup1.intersection(tup2)\n\n    # Finding the dissimilar elements by subtracting the common elements from both tuples\n    dissimilar_elems = tup1.difference(tup2).union(tup2.difference(tup1))\n\n    return list(dissimilar_elems)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set for the unique elements of the first tuple\n    unique_tup1 = set(test_tup1)\n    # Create a set for the unique elements of the second tuple\n    unique_tup2 = set(test_tup2)\n    # Find the elements that are not present in both tuples\n    dissimilar = unique_tup1.symmetric_difference(unique_tup2)\n    # Convert the set to a list and return the list as the output\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function finds the dissimilar elements in two tuples.\n    \"\"\"\n    # Initialize a set to store the dissimilar elements\n    dissimilar_elements = set()\n\n    # Loop through the elements of the first tuple\n    for element in test_tup1:\n        # Check if the element is also present in the second tuple\n        if element not in test_tup2:\n            # If not, add it to the dissimilar_elements set\n            dissimilar_elements.add(element)\n\n    # Return the set of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of elements which are present in one tuple but not in the other.\n    '''\n    return [element for element in test_tup1 if element not in test_tup2]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n\n    # create an empty set to store the dissimilar elements\n    dissimilar = set()\n\n    # iterate through the elements of both tuples\n    for elem in test_tup1:\n        # if the element is not in the second tuple\n        if elem not in test_tup2:\n            # add it to the dissimilar set\n            dissimilar.add(elem)\n\n    # iterate through the elements of both tuples\n    for elem in test_tup2:\n        # if the element is not in the first tuple\n        if elem not in test_tup1:\n            # add it to the dissimilar set\n            dissimilar.add(elem)\n\n    # return the dissimilar set\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # convert the tuple to a list\n    test_list = list(test_tuple)\n\n    # loop through the list and check if each element satisfies the even_fnc condition\n    for i in range(len(test_list)):\n        if not even_fnc(test_list[i]):\n            del test_list[i]\n\n    # convert the list back to a tuple\n    new_tuple = tuple(test_list)\n\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Filter out odd elements\n    filtered_list = [x for x in test_tuple if even_fnc(x)]\n    # Flatten the resulting list\n    flattened_list = [item for sublist in filtered_list for item in sublist]\n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input tuple is a nested mixed tuple\n    if not all(isinstance(t, tuple) for t in test_tuple):\n        raise TypeError(\"The input tuple is not a nested mixed tuple\")\n\n    # loop through the tuples in the tuple\n    for t in test_tuple:\n        # check if the tuple contains only even elements\n        if not all(even_fnc(e) for e in t):\n            raise ValueError(\"The input tuple contains uneven elements\")\n\n    # create a new tuple with only even elements\n    even_elements = [(even_fnc(e) for e in t) for t in test_tuple]\n\n    # return the new tuple\n    return tuple(even_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple: \n        if isinstance(elem, tuple): \n            even_list.extend(even_ele(elem, even_fnc)) \n        else: \n            even_list.append(even_fnc(elem)) \n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    even_list = []\n\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_list.append(even_ele(item, even_fnc))\n        else:\n            even_list.append(even_fnc(item))\n\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    def even_fnc_helper(t):\n        if isinstance(t, tuple):\n            return tuple(even_fnc_helper(x) for x in t)\n        elif isinstance(t, list):\n            return [even_fnc_helper(x) for x in t]\n        else:\n            return even_fnc(t)\n\n    return even_fnc_helper(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for element in test_tuple:\n        if type(element) in [list, tuple]:\n            even_list.extend(even_ele(element, even_fnc))\n        elif even_fnc(element):\n            even_list.append(element)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            result.append(even_ele(i, even_fnc))\n        elif isinstance(i, list):\n            result.append([even_fnc(j) for j in i])\n        elif isinstance(i, str):\n            result.append(even_fnc(i))\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # define an empty list to store the even elements\n    even_list = []\n    # loop through the tuple elements and add even elements to the even_list\n    for i in test_tuple:\n        if type(i) == tuple:\n            for j in i:\n                if even_fnc(j):\n                    even_list.append(j)\n        else:\n            if even_fnc(i):\n                even_list.append(i)\n    # return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple or not\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    # Iterate over the tuple and remove uneven elements\n    result_tuple = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            result_tuple.append(elem)\n\n    # Return the new tuple\n    return tuple(result_tuple)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s \n    print(\"The surface area of the square pyramid is\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(base, height):\n    '''\n    This function calculates the surface area of a square pyramid with a given base and height.\n\n    Parameters:\n    base (float): The length of the base of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    '''\n    \n    # Calculate the half the height\n    half_height = height / 2\n    \n    # Calculate the area of the base\n    area_base = base * base\n    \n    # Calculate the surface area of the pyramid\n    surface_area = (area_base + (half_height * half_height)) * height\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    base_area = b * b\n    height_area = s * s\n\n    total_area = base_area + (2 * base_area) + height_area\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the area of each half of the pyramid\n    area1 = (b * b)\n    area2 = (b * s)\n    area3 = (s * s)\n\n    # Calculate the total area of the pyramid\n    total_area = (area1 + area2 + area3) / 2\n\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of the pyramid\n    surface_area = 2 * b * s + 2 * b * b + 2 * b * b + 6 * b * b + 2 * b * b + b * b * b + 6 * b * b + 2 * b * b\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*b + 2*b*s + 0.5*s*s \n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b**2)*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the area of the base\n    base_area = b * b\n    # calculate the height\n    height = s\n    # calculate the surface area of the pyramid\n    surface_area = 2 * (base_area + base_area * height)\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (2 * b * s) + (2 * b * b) + (2 * s * s) "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    return 2*b*s + 2*s*s + 2*b*b"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    \n    Args:\n    dict1 (dict): A dictionary to be checked\n    \n    Returns:\n    bool: True if the dictionary is empty, False otherwise\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth Catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*catalan_number(n-1) // (n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n,k) = binomial(2n,n-k) / (1-C(n,k-1))\n    \n    where n is the integer for which we want to find the Catalan number,\n    and k is the integer for which we want to calculate the coefficient.\n\n    \"\"\"\n    if n < 0 or n % 1!= 0:\n        raise ValueError(\"n must be an integer greater than or equal to 0.\")\n\n    # Initialize the Catalan numbers as a list of zeros\n    catalan = [0] * (n+1)\n\n    # Initialize the binomial coefficients as a list of zeros\n    binomial = [0] * (n+1)\n\n    # Calculate the binomial coefficients up to 2n\n    for k in range(2, n+1):\n        binomial[k] = (k * binomial[k-1]) // (k-1)\n\n    # Calculate the Catalan numbers\n    catalan[0] = 1\n    catalan[1] = 1\n    for k in range(2, n+1):\n        catalan[k] = binomial[2*k] / (1 - catalan[k-1])\n\n    # Return the nth Catalan number\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    catalan = [0] * (n+1)\n    catalan[0] = 1\n    catalan[1] = 1\n    for i in range(2, n+1):\n        catalan[i] = catalan[i-1] + catalan[i-2]\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    catalan_numbers = [1]\n    for i in range(1, n+1):\n        catalan_numbers.append(2*catalan_numbers[-1] - catalan_numbers[-2])\n    return catalan_numbers[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + 2 * catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth catalan number using recursion.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2) + catalan_number(n-3)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Negative number is not allowed.\")\n    elif num == 0:\n        return 1\n    else:\n        catalan_num = 0\n        for i in range(1, num + 1):\n            catalan_num += i * catalan_number(num - i)\n        return catalan_num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        num_set = set(range(1, num+1))\n        sum_set = sum(num_set)\n        return 2*sum_set**2/((12*num_set)**2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regex pattern to match the adverb ending with ly\n    pattern = r'\\bly\\b'\n    # Use the re.findall() method to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Iterate through the matches and find the positions of the adverbs\n    for i in range(len(matches)):\n        # Split the match at the position of the adverb to get the adverb itself\n        adverb = matches[i].split('ly')[0]\n        # Find the positions of the adverb in the text\n        start_index = text.find(adverb)\n        end_index = start_index + len(adverb)\n        # Print the adverb and its positions\n        print(adverb, start_index, end_index)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w*[ly]\\w*\\b', text)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Iterate over all the matches and print the positions of the adverbs\n    for match in matches:\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb: {text[start:end]} (positions: {start}, {end})\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Adverbs found:\")\n        for i, match in enumerate(matches):\n            print(f\"{i+1}. {match}\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(\\w+ly)\\b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"It's a beautiful day for the party, we were planning to go to the park.\"\nadverbs = find_adverbs(text)\nprint(adverbs)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    This function takes a string as input and returns a list of all the positions of the first adverb ending with ly in the string.\n    '''\n    # Using regex to find the first adverb ending with ly in the text\n    pattern = r'\\b[a-zA-Z][aeiouAEIOU]*ly\\b'\n    positions = re.findall(pattern, text)\n\n    # Return the list of positions\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Find all the matches for adverbs ending with \"ly\"\n    matches = re.findall(r'\\bly\\b', text)\n\n    # Print the matches\n    for i, match in enumerate(matches):\n        print(f'{i+1}. {match}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = re.findall(r'\\bly\\w*(\\.|!|?)\\b', text)\n    if adverbs:\n        return adverbs\n    else:\n        return \"No adverbs found.\"\n\ntext = \"This is a sentence that contains a good amount of good news! I love you. Don't you think we're going to see each other again?\"\nprint(find_adverbs(text))"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n\n    # Use the re.findall() function to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Return a list of tuples containing the adverb and its position in the text\n    return [(match, text.index(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[aeiou][^aeiou]*ly\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    positions = [m.start() for m in matches]\n    return positions, matches\n\ntext = \"The quick brown fox jumped over the lazy dog.\"\npositions, matches = find_adverbs(text)\nprint(\"Adverbs:\", matches)\nprint(\"Positions:\", positions)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items in descending order based on their cost\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n    # Extract the first n items from the sorted list and return them\n    return [item[0] for item in sorted_items[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a max-heap of the first n items\n    max_heap = []\n    for item in items[:n]:\n        heapq.heappush(max_heap, -item)\n\n    # Add the remaining items to the heap\n    for item in items[n:]:\n        if item < -heapq.heappop(max_heap):\n            heapq.heappush(max_heap, -item)\n\n    # Extract the n most expensive items from the heap\n    return [-item for item in max_heap[:n]]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and a number n as input and returns a list of the n most expensive items.\n    \"\"\"\n    # Sort the items in descending order of price\n    items.sort(key=lambda x: x[1], reverse=True)\n    \n    # Initialize an empty list to store the n most expensive items\n    result = []\n    \n    # Iterate over the first n items in the sorted items list\n    for i in range(n):\n        # Add each item to the result list\n        result.append(items[i])\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Extract the top n items from the sorted list\n    top_n_items = sorted_items[:n]\n\n    # Extract the prices of the top n items\n    top_n_prices = [item[1] for item in top_n_items]\n\n    return top_n_prices"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef find_n_expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = [0] * n\n    for i, item in enumerate(items):\n        if i < n:\n            heapq.heappush(min_heap, item)\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x[1], reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # initialize a min-heap of size n to store the n most expensive items\n    heap = []\n    \n    # iterate over the dataset and add each item to the min-heap\n    for item in items:\n        heapq.heappush(heap, item)\n        \n        # if the heap size exceeds n, remove the smallest item\n        if len(heap) > n:\n            heapq.heappop(heap)\n            \n    # return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Given a dataset of items and a number n,\n    return the n most expensive items in the dataset.\n    '''\n    # Initialize the max-heap with the first n items\n    heapq.heapify(items[:n])\n\n    # Iterate over the remaining items, and add each to the max-heap\n    for i in range(n, len(items)):\n        item = items[i]\n        if item > heapq.heappop(items[:n]):\n            heapq.heappush(items[:n], item)\n\n    return items[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap and add the n most expensive items to it\n    min_heap = []\n    for item in items[:n]:\n        heapq.heappush(min_heap, -item)\n\n    # Add the remaining items to the min heap\n    for item in items[n:]:\n        if -item > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, -item)\n\n    # Extract the n most expensive items from the min heap and return them\n    return [-heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Define a function to split a list at the nth element\n    def split_at_nth(lst, n):\n        if n > len(lst) or n < 1:\n            return None\n        return lst[:n] + lst[n:]\n\n    # Split the list at the nth element and add the first part to the end\n    new_list = split_at_nth(l, n)\n    return l[n:] + new_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    # splitting the list at the nth element\n    first_part = l[:n]\n    second_part = l[n:]\n    # adding the first part to the end of the second part\n    l = second_part + first_part\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input. n is greater than the length of the list.\"\n    else:\n        split_list = l[:n]\n        rest_list = l[n:]\n        return split_list + rest_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the length of the list is less than n\n    if len(l) < n:\n        print(\"Error: List length is less than the nth element\")\n        return\n\n    # split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n\n    # add the first part of the list to the end of the second part\n    result = right + left\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: nth element out of range.\")\n        return None\n    else:\n        mid = len(l)//2\n        first_part = l[:mid]\n        second_part = l[mid:]\n        if n == mid:\n            return first_part + second_part\n        else:\n            return first_part + split_Arr(second_part, n-mid)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[:n]\n    second_part = l[n:]\n    l.extend(first_part)\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        print(\"Length of list is less than the nth element\")\n        return\n    \n    # Create a new list to store the first part of the list\n    first_part = l[:n]\n    \n    # Create a new list to store the second part of the list\n    second_part = l[n:]\n    \n    # Append the first part of the list to the end of the second part\n    second_part.extend(first_part)\n    \n    # Return the new list with the added element\n    return second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return None\n    first_part = l[:n]\n    second_part = l[n:]\n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n\n    Args:\n        listx (list): the list to be converted.\n\n    Returns:\n        tuple: the converted tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple_x = tuple(listx)\n    return tuple_x"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(lst):\n    '''\n    This function converts a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    \n    # Find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the difference between the two values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list must have at least two elements.\"\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between the largest and smallest value in a given list.\n    \"\"\"\n    if len(nums) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        # Find the largest and smallest values in the list\n        max_val = max(nums)\n        min_val = min(nums)\n        # Find the difference between the largest and smallest values\n        diff = max_val - min_val\n        return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as an argument and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        raise ValueError('The list should have at least 2 elements.')\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    min_val = min(nums)\n    max_val = max(nums)\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"List is empty\"\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    diff = largest - smallest\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the smallest value in the list\n    smallest = min(nums)\n    # find the largest value in the list\n    largest = max(nums)\n    # return the difference between the smallest and largest values\n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Initialize a list to store the perfect squares\n    perfect_squares_list = []\n    # Loop through the numbers from a to b\n    for i in range(a, b+1):\n        # Check if the square of the current number is equal to i\n        if i == (i ** 0.5):\n            perfect_squares_list.append(i)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize a list to store the perfect squares between a and b\n    perfect_squares_list = []\n    \n    # loop through a and b\n    for i in range(int(a), int(b)+1):\n        # check if the square is a perfect square\n        square_root = int(i ** 0.5)\n        if square_root * square_root == i:\n            # add the square to the list of perfect squares\n            perfect_squares_list.append(i)\n    \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n\n    # loop through the range of integers between a and b\n    for i in range(a, b+1):\n        # check if the square of the current integer is equal to the current integer\n        if i**2 == i:\n            # print the square if it's a perfect square\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize a set to store perfect squares\n    perfect_squares_set = set()\n\n    # loop through all numbers between a and b\n    for num in range(a, b + 1):\n        # check if num is a perfect square\n        square_root = int(num ** 0.5)\n        if square_root ** 2 == num:\n            # if it is, add it to the set\n            perfect_squares_set.add(num)\n\n    # return the set of perfect squares\n    return perfect_squares_set"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        square = i*i\n        if square == int(square):\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = set()\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            squares.add(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = int(i ** 0.5)\n        if i == square ** 2:\n            print(i)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n\n    # convert r to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes a polar coordinate (r, theta) and returns the corresponding rectangular coordinate.\n    \"\"\"\n    # Convert polar coordinate to rectangular coordinate\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(theta * 1j)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    :param x: The radius value of the complex number.\n    :param y: The angle value of the complex number in radians.\n    :return: Returns the rectangular coordinates as a tuple (x, y).\n    \"\"\"\n    r = cmath.sqrt(x ** 2 + y ** 2)\n    theta = cmath.phase(x + y * 1j)\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert polar coordinates to complex numbers\n    z = cmath.rect(x, y)\n    # Get real and imaginary parts of the complex number\n    r = z.real\n    theta = z.imag\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    \n    Args:\n    r (float): radius\n    theta (float): angle in radians\n    \n    Returns:\n    x (float): x-coordinate in rectangular coordinates\n    y (float): y-coordinate in rectangular coordinates\n    '''\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        print(\"List is empty\")\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        print(\"List must have at least two elements.\")\n        return\n    else:\n        # get the last element of the list\n        last_element = newList[-1]\n        # remove the last element from the list\n        newList.pop()\n        # add the last element to the first position\n        newList.insert(0, last_element)\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Swap the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # getting the length of the list\n    length = len(newList)\n    # checking if the list has less than two elements\n    if length < 2:\n        # if not, return the original list\n        return newList\n    # swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # returning the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Taking the length of the list\n    length = len(newList)\n    # Checking if the length of the list is 1 or less\n    if length <= 1:\n        return newList\n    # Swapping the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    # Returning the updated list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    # check if the list has at least two elements\n    if len(newList) >= 2:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        # return the modified list\n        return newList\n    else:\n        # return the original list if it has less than two elements\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2:\n        return \"The list must contain at least two elements.\"\n    else:\n        first, last = newList[0], newList[-1]\n        newList[0], newList[-1] = last, first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1 \n    elif k > n: \n        return 0\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum of the products to 0\n    sum = 0\n    # Loop through all possible combinations of k elements from 0 to n-k+1\n    for i in range(n-k+1): \n        # Compute the binomial coefficient at index i,j using the formula \n        # binomial(n,j) = n! / (j! * (n-j)!) \n        j = i+k-1\n        if j > n: \n            j = n\n        bin_coeff = math.factorial(n) / (math.factorial(j) * math.factorial(n-j)) \n        # Multiply the current binomial coefficient with the product of previous ones \n        sum += bin_coeff * (n-i-1) \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n: \n        return 0 \n\n    if k == 0 or k == n: \n        return 1\n\n    # Initialize the sum of the product of consecutive binomial co-efficients\n    sum = 0\n\n    # Calculate the first n terms of the series\n    for i in range(1, n+1):\n        if i <= k:\n            sum += (i ** k) // (k * (n - i + 1))\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Base case\n    if k == 0 or k == n: \n        return 1\n    \n    # Recursive case\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    else:\n        return (1 + binomial_Coeff(n - 1, k - 1)) * (n - k + 1) // k"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes in two integers n and k and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n<0 or k<0 or k>n: \n        return None \n    elif k==0 or k==n: \n        return 1 \n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    count = 0\n    # Base case for k = 0\n    if k == 0:\n        return 1\n    # Base case for k = n\n    elif k == n:\n        return 1\n    # If k is less than n\n    else:\n        for i in range(k, n+1):\n            sum += (i*(n-i+1))\n            count += 1\n        return sum/count"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n:\n        return 0\n    else:\n        return (binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initializing the sum variable\n    sum_coeff = 0\n\n    # checking if k is less than or equal to 0 or greater than n\n    if k <= 0 or k > n:\n        print(\"Invalid input. k should be between 1 and n.\")\n        return\n\n    # initializing the loop variables\n    i = 1\n    j = k\n\n    # finding the sum of the product of consecutive binomial co-efficients\n    while i <= n:\n        sum_coeff += (i*j)\n        i += 1\n        j += 1\n\n    # returning the sum of the product of consecutive binomial co-efficients\n    return sum_coeff"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_regex = r\"^\\d+\\.\\d+\\.\\d+\\.\\d+$\"\n    if re.match(ip_regex, ip):\n        ip_list = ip.split('.')\n        ip_list = [int(num) for num in ip_list]\n        ip_list = [num for num in ip_list if num!= 0]\n        return '.'.join(map(str, ip_list))\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from each octet using regular expressions\n    ip = re.sub(r'^(0)+', '', ip)\n    # Remove leading zeroes from each group of four octets using regular expressions\n    ip = re.sub(r'((?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_parts = re.findall(r'\\d+\\.\\d+\\.\\d+\\.\\d+', ip)\n    new_ip_parts = []\n    for part in ip_parts:\n        new_part = re.sub(r'^0+', '', part)\n        if new_part:\n            new_ip_parts.append(new_part)\n    new_ip = '.'.join(new_ip_parts)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    # remove leading zeros from each part of the ip address\n    parts = re.findall(r'(\\d+)', ip)\n    for i in range(len(parts)):\n        parts[i] = parts[i].lstrip('0')\n    # join the parts with dots\n    return '.'.join(parts)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        return re.sub(r'^\\d+\\.', '', ip)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    ip_pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        ip_list = [int(x) for x in ip_list]\n        while ip_list[0] == 0:\n            ip_list = ip_list[1:]\n        return '.'.join(str(x) for x in ip_list)\n    else:\n        return 'Invalid IP address format.'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        ip = ip.lstrip('0')\n        return ip\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize variables for first even and first odd numbers\n    first_even = 0\n    first_odd = 0\n    \n    # iterate through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n        else:\n            first_odd = num\n            \n    # calculate the difference between the first even and first odd numbers\n    diff = first_even - first_odd\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += 1\n        else:\n            odd_num += 1\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if the input list is empty\n    if len(list1) == 0:\n        return \"The list is empty.\"\n    \n    # Check if the input list contains only even or only odd numbers\n    even_exists = False\n    odd_exists = False\n    for num in list1:\n        if num % 2 == 0:\n            even_exists = True\n        else:\n            odd_exists = True\n        if even_exists and odd_exists:\n            break\n    \n    # If the input list contains only even or only odd numbers, find the difference between the first two even and odd numbers\n    if even_exists and odd_exists:\n        even_num = [num for num in list1 if num % 2 == 0][0]\n        odd_num = [num for num in list1 if num % 2!= 0][0]\n        diff = even_num - odd_num\n        return \"The difference between the first even and first odd number is: \" + str(diff)\n    else:\n        return \"The list does not contain any even or odd numbers.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even_num = [num for num in list1 if num % 2 == 0][0]\n    odd_num = [num for num in list1 if num % 2 == 1][0]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return 'List is empty!'\n    \n    # find the first even and first odd number in the list\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    \n    # check if the first even and first odd number are present in the list\n    if even_num is None or odd_num is None:\n        return 'First even and first odd number not present in the list!'\n    \n    # find the difference of the even and odd numbers\n    diff = even_num - odd_num\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    # Iterate through the list and check if the number is even or odd\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    # Return the difference of even and odd numbers\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(lst):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_num = lst[0]\n    odd_num = lst[1]\n\n    return even_num - odd_num\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = abs(even_num - num)\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = abs(odd_num - num)\n    return even_num + odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    even = lst[0]\n    odd = lst[1]\n    \n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    for i in list1:\n        if i % 2 == 0:\n            if i!= list1[0]:\n                return i - list1[0]\n    return None"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # create a dictionary to store the frequency of each digit in each string\n    freq1 = {}\n    freq2 = {}\n    for digit in str1:\n        freq1[digit] = freq1.get(digit, 0) + 1\n    for digit in str2:\n        freq2[digit] = freq2.get(digit, 0) + 1\n\n    # find the common digits in both strings\n    common = set(freq1.keys()).intersection(set(freq2.keys()))\n\n    # calculate the minimum number of swaps required to convert the two strings to their binary equivalents\n    min_swaps = sum(freq1[digit] for digit in common)\n    for digit in common:\n        min_swaps += min(freq1[digit], freq2[digit])\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to another.\n    The function works by iterating over the two binary numbers and comparing them character by character. If the characters are different, it means that the corresponding bits in the binary number are different.\n    For each pair of characters that are different, we need to swap them. We can do this by comparing the corresponding bits in the binary numbers. If the bit in str1 is 1 and the bit in str2 is 0, we can swap the characters. If the bit in str1 is 0 and the bit in str2 is 1, we can swap the characters. \n    We can then keep track of the count of swaps and return it at the end.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            if str1[i] == '1' and str2[i] == '0':\n                str1[i], str1[i+1] = str1[i+1], str1[i]\n                count += 1\n            elif str1[i] == '0' and str2[i] == '1':\n                str2[i], str2[i+1] = str2[i+1], str2[i]\n                count += 1\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary arrays\n    arr1 = [int(i) for i in str1]\n    arr2 = [int(i) for i in str2]\n    \n    # Find the length of the longer binary string\n    length = max(len(arr1), len(arr2))\n    \n    # Initialize a dictionary to store the count of swaps required for each digit in the binary string\n    swap_count = {i: 0 for i in range(2)}\n    \n    # Initialize a variable to store the minimum number of swaps required\n    min_swaps = 0\n    \n    # Iterate through the digits of the longer binary string\n    for i in range(length):\n        \n        # If the digits are different, increment the count of swaps required for the digit in the longer string\n        if arr1[i]!= arr2[i]:\n            swap_count[arr1[i]] += 1\n            swap_count[arr2[i]] -= 1\n        \n        # Keep track of the minimum number of swaps required\n        min_swaps = min(min_swaps, sum(swap_count.values()))\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    This function takes two binary numbers as strings as input and returns the minimum number of swaps required to convert one binary number to the other.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    n1 = len(str1)\n    n2 = len(str2)\n    diff = abs(n1-n2)\n    i = 0\n    j = 0\n    count = 0\n    while i < n1 and j < n2:\n        if str1[i] == '0' and str2[j] == '0':\n            count += 1\n            i += 1\n            j += 1\n        elif str1[i] == '0' and str2[j] == '1':\n            i += 1\n        elif str1[i] == '1' and str2[j] == '0':\n            j += 1\n        else:\n            if abs(i-j) < diff:\n                diff = abs(i-j)\n                count = 1\n            else:\n                count += 1\n                i += 1\n                j += 1\n    if i < n1:\n        count += n1 - i\n    if j < n2:\n        count += n2 - j\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        return \"Invalid input strings\"\n    \n    # Initialize variables to store number of swaps and count of bits in each number\n    swaps = 0\n    num1_bits = 0\n    num2_bits = 0\n    \n    # Convert input strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    \n    # Iterate through each bit of each number\n    for bit in bin(num1)[2:]:\n        # If current bit in num2 is 1 and is not already in num1, swap them\n        if bit == \"1\" and not str1.count(bit):\n            num1, num2 = num2, num1\n            swaps += 1\n    \n    # Iterate through each bit of each number\n    for bit in bin(num2)[2:]:\n        # If current bit in num1 is 1 and is not already in num2, swap them\n        if bit == \"1\" and not str2.count(bit):\n            num1, num2 = num2, num1\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize two dictionaries to store the frequency of each digit in the binary number\n    freq1 = {}\n    freq2 = {}\n    \n    # Iterate through each character in the binary number and update the frequency of digits in str1 and str2\n    for char in str1:\n        freq1[char] = freq1.get(char, 0) + 1\n        \n    for char in str2:\n        freq2[char] = freq2.get(char, 0) + 1\n        \n    # Find the minimum number of swaps required to convert the two binary numbers to the same frequency\n    min_swaps = float('inf')\n    for key in freq1:\n        freq2[key] -= freq1[key]\n        if freq2[key] < 0:\n            min_swaps = min(min_swaps, len(freq2) + len(freq1) - 2 * freq1[key])\n        else:\n            min_swaps = min(min_swaps, len(freq2) + len(freq1) - 2 * freq2[key])\n            \n    # Return the minimum number of swaps required to convert the two binary numbers to the same frequency\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    #convert binary strings to lists\n    list1 = list(str1)\n    list2 = list(str2)\n    \n    #create a dictionary to store count of swaps required\n    count = {}\n    \n    #loop through each bit in each binary string\n    for i in range(len(list1)):\n        #if bits are different, increment count\n        if list1[i]!= list2[i]:\n            if list1[i] not in count:\n                count[list1[i]] = 1\n            else:\n                count[list1[i]] += 1\n                \n    #find the minimum count of swaps required\n    min_count = min(count.values())\n    \n    #calculate the total number of swaps required\n    total_swaps = 0\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            total_swaps += min_count\n    \n    return total_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    # Initialize two variables for each binary number\n    num1 = 0\n    num2 = 0\n    \n    # Iterate over the string representing the first binary number and check if the corresponding bit in the second binary number is 1\n    for bit in str1:\n        if bit == '1':\n            num1 += 2**(len(str1)-str1.index(bit))\n    \n    # Iterate over the string representing the second binary number and check if the corresponding bit in the first binary number is 1\n    for bit in str2:\n        if bit == '1':\n            num2 += 2**(len(str2)-str2.index(bit))\n            \n    # Return the minimum Hamming distance between the two binary numbers\n    return min(hamming_distance(num1,num2),hamming_distance(num2,num1))\n\ndef hamming_distance(num1,num2):\n    # Calculate the Hamming distance between two binary numbers\n    while num1!= num2:\n        if num1 > num2:\n            num1 -= (num1 & -num1)\n        else:\n            num2 -= (num2 & -num2)\n    return num1"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to integers and find the length of the longest string\n    len1 = len(bin(int(str1, 2)))\n    len2 = len(bin(int(str2, 2)))\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through all possible swaps\n    for i in range(len1):\n        for j in range(len2):\n            # Convert the binary strings to integers and swap the i-th and j-th bits\n            swapped_str1 = str1[:i] + str2[i] + str1[i+1:j] + str2[j] + str1[j+1:]\n            swapped_str2 = str2[:i] + str1[i] + str2[i+1:j] + str1[j] + str2[j+1:]\n\n            # Count the number of swaps required to convert the swapped strings\n            swaps = 0\n            for k in range(len1):\n                if swapped_str1[k]!= swapped_str2[k]:\n                    swaps += 1\n            for k in range(len2):\n                if swapped_str1[len1+k]!= swapped_str2[len2+k]:\n                    swaps += 1\n\n            # Update the minimum number of swaps if necessary\n            if swaps < min_swaps:\n                min_swaps = swaps\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    arr1 = [int(x) for x in str1]\n    arr2 = [int(x) for x in str2]\n\n    # Step 1: Initialize a dictionary to store the number of swaps required for each digit in the two binary numbers\n    swap_count = {}\n\n    # Step 2: Iterate through the digits in both binary numbers and count the number of swaps required to convert each number\n    for i in range(n):\n        if arr1[i]!= arr2[i]:\n            if arr1[i] not in swap_count:\n                swap_count[arr1[i]] = 0\n            swap_count[arr1[i]] += 1\n\n    # Step 3: Find the minimum number of swaps required to convert both binary numbers\n    min_swaps = float('inf')\n    for num in swap_count:\n        min_swaps = min(min_swaps, swap_count[num])\n\n    return min_swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for t in tuple_list:\n        total_size += sys.getsizeof(t)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Determine the size of the tuple by multiplying the number of elements by the size of each element in bytes\n    total_size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list[0])\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input, and returns the size in bytes of the \n    largest tuple in the list.\n    '''\n    max_size = 0\n    for tup in tuple_list:\n        size = sys.getsizeof(tup)\n        if size > max_size:\n            max_size = size\n    return max_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        for j in range(len(tuple_list[i])):\n            if isinstance(tuple_list[i][j], str):\n                total_size += sys.getsizeof(tuple_list[i][j])\n            else:\n                total_size += sys.getsizeof(tuple_list[i][j]) * 2\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # check if the input is a tuple\n    if not isinstance(tuple_list, tuple):\n        print(\"Input must be a tuple\")\n        sys.exit()\n    \n    # calculate the size of the tuple\n    size = 0\n    for i in tuple_list:\n        size += sys.getsizeof(i)\n    \n    # return the size of the tuple in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Size of tuple: \")\n    for i in range(len(tuple_list)):\n        sys.stdout.write(str(len(tuple_list[i])) + \" \")\n    sys.stdout.write(\"\\n\")\n    return sys.getsizeof(tuple_list)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m = len(arr1)\n    n = len(arr2)\n    i = j = 0\n    \n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n    \n    if i == m:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    if k > len(arr1):\n        return None\n    \n    i = 0\n    j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    \n    if i < len(arr1):\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Find the kth element in the merged array\n    kth_element = merged_arr[k-1]\n\n    return kth_element"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    if k > len(arr1) + len(arr2):\n        return None\n\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    \n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the smaller of the two lengths\n    min_len = min(n1, n2)\n\n    # Initialize variables to keep track of the current index in arr1 and arr2\n    i = 0\n    j = 0\n\n    # Initialize variable to keep track of the current index in the final sorted array\n    kth_index = 0\n\n    # Loop through the two arrays, comparing elements at each index and updating the kth_index variable\n    while i < min_len and j < min_len:\n        if arr1[i] < arr2[j]:\n            kth_index += 1\n            i += 1\n        else:\n            i += 1\n\n    # If there are still elements in arr1 or arr2, they must be in the remaining array\n    while i < min_len:\n        kth_index += 1\n        i += 1\n\n    while j < min_len:\n        kth_index += 1\n        j += 1\n\n    # If kth_index is less than k, there are less elements in the final array than k\n    if kth_index < k:\n        return None\n\n    # Otherwise, return the kth element from the final array\n    else:\n        return arr1[kth_index-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Find the minimum of the two arrays\n    if n1 < n2:\n        n = n1\n        arr = arr1\n    else:\n        n = n2\n        arr = arr2\n\n    # Find the middle index of the array\n    mid = n // 2\n\n    # Check if the middle element is present in both arrays\n    if arr[mid] in arr1 and arr[mid] in arr2:\n        return arr[mid]\n\n    # If the middle element is in arr1, find the kth element from arr2\n    elif arr[mid] in arr1:\n        return find_kth(arr1, arr2[mid+1:], k)\n\n    # If the middle element is in arr2, find the kth element from arr1\n    else:\n        return find_kth(arr1[mid+1:], arr2, k)"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    total = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to a string so we can iterate over its digits\n    num_str = str(number)\n\n    # initialize the sum to 0\n    sum = 0\n\n    # iterate over the digits of the number and add their cube to the sum\n    for digit in num_str:\n        digit = int(digit)\n        sum += digit ** 3\n\n    # check if the sum is equal to the original number\n    if sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check whether the given number is an armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    num_len = len(num_str)\n    sum_of_squares = 0\n    \n    for i in range(num_len):\n        digit = int(num_str[i])\n        square = digit * digit\n        sum_of_squares += square\n        \n    return sum_of_squares == num"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # get the number of digits in the number\n    digits_count = len(str(number))\n    \n    # calculate the sum of the cubes of the digits in the number\n    cube_sum = 0\n    for digit in str(number):\n        cube_sum += int(digit) ** 3\n    \n    # check if the calculated sum is equal to the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is armstrong or not.\n    \"\"\"\n    if n < 10:\n        return False\n    \n    temp = n\n    total = 0\n    \n    while temp > 0:\n        digit = temp % 10\n        total += digit ** 3\n        temp //= 10\n    \n    return total == n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function checks whether the given number is an Armstrong number or not.\n    \"\"\"\n    # Convert the input number to a string\n    number_str = str(number)\n    \n    # Initialize the sum of the powers of each digit in the number\n    sum_of_powers = 0\n    \n    # Calculate the power of each digit in the number\n    for digit in number_str:\n        power = int(digit)\n        sum_of_powers += power**len(number_str)\n    \n    # Check if the sum of the powers is equal to the original number\n    if sum_of_powers == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_digits = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum_of_digits += digit ** 3\n        temp //= 10\n    return number == sum_of_digits"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and reverse it\n    reversed_number = str(number)[::-1]\n    # Initialize the sum of the digits of the number\n    digit_sum = 0\n    # Iterate over the digits of the reversed number\n    for digit in reversed_number:\n        # Convert each digit to an integer and add it to the sum\n        digit_sum += int(digit)\n    # Compare the sum of the digits with the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n\n    sum = 0\n    temp = number\n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n\n    return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Return True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    n = str(n)\n    # Calculate the sum of the squares of each digit\n    power = len(n)\n    sum_of_squares = sum(int(digit) ** power for digit in n)\n    # Check whether the sum of the squares is equal to the original number\n    return n == str(sum_of_squares)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n\n    # initialize sum and count\n    sum = 0\n    count = 0\n\n    # iterate through first n numbers\n    for i in range(1, number + 1):\n        # add current number to sum\n        sum += i\n        # increment count\n        count += 1\n\n    # calculate average\n    average = sum / count\n\n    # return result as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum/count\n    print(\"Sum of first\", number, \"natural numbers is:\", sum)\n    print(\"Average of first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(number):\n        count += 1\n        sum += i\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # initialize variables\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    # find average\n    average = sum / count\n\n    # return result as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_of_numbers = 0\n    count = 0\n    while count < number:\n        num = int(input(\"Enter a natural number: \"))\n        sum_of_numbers += num\n        count += 1\n    average = sum_of_numbers / number\n    print(\"Sum of first\", number, \"natural numbers is:\", sum_of_numbers)\n    print(\"Average of first\", number, \"natural numbers is:\", average)\n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count to 0\n    sum = 0\n    count = 0\n\n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # add the current number to sum\n        sum += i\n\n        # increment the count\n        count += 1\n\n    # calculate the average and return as a tuple\n    return sum / count, sum"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize sum and count variables to zero\n    sum = 0\n    count = 0\n    # iterate over first n numbers\n    for i in range(1, number+1):\n        # add i to sum\n        sum += i\n        # increment count\n        count += 1\n    # calculate the average\n    average = sum/count\n    # return the result as a tuple\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count\n    sum = 0\n    count = 0\n\n    # loop through first n natural numbers\n    for i in range(number):\n        # add the current number to sum and increment count\n        sum += i\n        count += 1\n\n    # calculate average\n    average = sum / count\n\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in that string.\n    If no repeated character is found, it will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char, count in char_count.items():\n        if count == 2:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    If no repeated character is found, it will return None.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character in the string\n    freq = {}\n    \n    # Iterate over each character in the string and update the frequency of each character in the dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Initialize a variable to store the first repeated character\n    repeated_char = None\n    \n    # Iterate over each character in the string and update the variable to store the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            repeated_char = char\n            break\n    \n    # Return the first repeated character\n    return repeated_char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create an empty dictionary to store character frequencies\n    freq_dict = {}\n\n    # loop through the string\n    for char in str1:\n        # if the character is already in the dictionary, return its frequency\n        if char in freq_dict:\n            return freq_dict[char]\n        # otherwise, add the character to the dictionary and set its frequency to 1\n        else:\n            freq_dict[char] = 1\n\n    # if the loop completes without finding any repeated characters, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first repeated character and its count\n    for char, count in char_count.items():\n        if count > 1:\n            return char, count\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # loop through the string and keep track of the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first repeated character by looping through the string and comparing the frequency\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no character was repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize an empty dictionary to store the frequency of each character\n    char_freq = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its frequency\n        if char in char_freq:\n            char_freq[char] += 1\n        # If the character is not in the dictionary, add it with frequency 1\n        else:\n            char_freq[char] = 1\n            \n    # Initialize an empty list to store the repeated characters\n    repeated_chars = []\n    \n    # Loop through the dictionary and find the characters with frequency greater than 1\n    for char, freq in char_freq.items():\n        if freq > 1:\n            repeated_chars.append(char)\n            \n    # If there are no repeated characters, return None\n    if len(repeated_chars) == 0:\n        return None\n    \n    # Return the first repeated character\n    return repeated_chars[0]"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    for i in range(2, n+1):\n        ludics.append(i*i*i)\n    return ludics"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            lucid_set.add(i)\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            if j * (j + 1) <= i:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n\n    lucid_numbers = []\n\n    # Generate all Lucid numbers up to n\n    for i in range(2, n + 1):\n        lucid_numbers.append(i * (i + 1))\n\n    # Return the list of Lucid numbers\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if i == 1:\n            lucid.append(i)\n        elif i == 2:\n            lucid.append(i)\n        else:\n            is_lucid = True\n            j = 2\n            while j < i:\n                if i % j == 0:\n                    is_lucid = False\n                    break\n                j += 1\n            if is_lucid:\n                lucid.append(i)\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == lucid_number(i):\n            ludic_numbers.append(i)\n    return ludic_numbers\n\ndef lucid_number(n):\n    '''\n    Write a function to determine if a given integer is a lucid number or not.\n    '''\n    if n == 0:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if sum(int(j)**2 for j in str(i)) > 1:\n            ludic.append(i)\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    current_number = 1\n\n    while current_number <= n:\n        if is_lucid(current_number):\n            lucid_numbers.append(current_number)\n        current_number += 1\n\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number or not.\n    '''\n    lucid_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return n in lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    i = 1\n    while i <= n:\n        lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the list of words\n    words.reverse()\n    # Join the reversed words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.insert(0, word)\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them back together with spaces\n    reversed_words =''.join([word[::-1] for word in words])\n    # return the reversed string\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Remove leading and trailing spaces\n    s = s.strip()\n    # Split the string into words\n    words = s.split()\n    # Reverse each word in the list\n    words = [word[::-1] for word in words]\n    # Join the words back into a string\n    s =''.join(words)\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    reversed_str =''.join(words)\n    return reversed_str"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Initialize an empty string to build the reversed string\n    reversed_s = \"\"\n    # Iterate over the list of words in reverse order\n    for word in words[::-1]:\n        # Append the reversed word to the reversed string\n        reversed_s += \" \" + word\n    # Remove the leading space from the reversed string\n    return reversed_s[1:]"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string by spaces\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words with spaces\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)//2):\n        words[i], words[-i-1] = words[-i-1], words[i]\n    return \" \".join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # check if the given number is equal to 2\n    elif num == 2:\n        return True\n\n    # check if the given number is divisible by 2\n    elif num % 2 == 0:\n        return False\n\n    # check if the given number is divisible by any number between 3 and the square root of the number\n    for i in range(3, int(num**0.5)+1, 2):\n        if num % i == 0:\n            return False\n\n    # if none of the above conditions are true, the given number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Write a function to convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n    \"\"\"\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radians = degree * (math.pi / 180)\n    return radians"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi/180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.find(match)\n            end_index = start_index + len(match)\n            print(\"Match: %s, Start Index: %d, End Index: %d\" % (match, start_index, end_index))\n    else:\n        print(\"No matches found.\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m:\n        return m.group(), m.start(), m.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = []\n        end_index = []\n        for match in matches:\n            start_index.append(text.find(match))\n            end_index.append(start_index[-1] + len(match))\n        return matches, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = matches[0].start()\n        end_index = matches[-1].end()\n        literal = text[start_index:end_index+1]\n        return literal, start_index, end_index\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex search to find all the matches of the pattern\n    matches = re.findall(pattern, text)\n\n    # Check if there are any matches\n    if not matches:\n        return None\n\n    # Get the first match\n    match = matches[0]\n\n    # Split the match at the literal pattern\n    literal, pattern = match.split(pattern)\n\n    # Use regex to find the start and end index of the literal pattern in the text\n    literal_pattern = re.compile(pattern)\n    literal_match = literal_pattern.search(text)\n\n    if literal_match:\n        start = literal_match.start()\n        end = literal_match.end()\n        return literal, start, end\n\n    return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.findall() to find all substrings that match the pattern\n    matches = re.findall(pattern, text)\n    \n    # If matches is empty, return None\n    if not matches:\n        return None\n    \n    # Otherwise, return a list of tuples containing the matching substrings, start indices, and end indices\n    return [(m[0], text.index(m[0]), text.index(m[0])+len(m[0])) for m in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(), match.start(), match.end()"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, -1, -1"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # base case: n=0 and n=1 are Bell numbers\n    if n == 0 or n == 1:\n        return n\n\n    # nth Bell number is (n+1)th Bell number minus (n+1)th Bell number\n    return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    c = 0\n\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 0\n    b = 1\n    for i in range(2, n+1):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 0:\n        return \"Invalid input! Please enter a non-negative integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_Number(n-1) - bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        bell = bell_Number(n-1) + 2*bell_Number(n-2)\n        return bell"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th Bell number is\", bell_Number(n))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Remove the kth element from a list.\n    \"\"\"\n    # Create a copy of the list to avoid modifying the original list\n    list2 = list1.copy()\n    # Get the length of the list\n    n = len(list2)\n    # Check if k is valid\n    if L > n:\n        return \"Invalid input: k is greater than the length of the list.\"\n    # Remove the kth element\n    del list2[L-1]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    \n    # Move all the elements except the k'th to the left of the list\n    for i in range(k):\n        list1[i] = list1[i+1]\n    \n    # Remove the k'th element\n    list1.pop()\n    \n    # Move all the remaining elements to the right of the k'th element\n    for i in range(k, n-1):\n        list1[i] = list1[i+1]\n    \n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L-1)\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return []\n    elif L == len(list1):\n        return [1]*L\n    else:\n        n = len(list1)\n        k = L\n        for i in range(n-1):\n            if i+1 == k:\n                return list1[:i] + list1[i+2:]\n            elif i+1 > k:\n                return list1[:i] + [list1[i]] + list1[i+1:]\n        return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = list1[:L-1]\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L-1) # remove the k'th element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    n = len(list1)\n    k = L - 1\n    for i in range(n-k):\n        list1[i], list1[i+k] = list1[i+k], list1[i]\n    return list1[:k]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(L):\n        new_list.append(list1[i])\n        if i!= L-1:\n            list1.pop(0)\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    elif L % 2 == 0:\n        return remove_kth_element(list1[:-1], L//2)\n    else:\n        return remove_kth_element(list1[:-2], L//2) + [list1[-1]]"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col_max = []\n    for i in range(len(test_list)):\n        col_max.append(max(test_list[i][N-1]))\n    return max(col_max)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        max_val = max(test_list[i][N-1], test_list[i][N-2])\n        print(max_val)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if len(row) > N-1:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        col_max = max(test_list[i])\n        if col_max > max_val:\n            max_val = col_max\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        elif max_val < max(test_list[i]):\n            max_val = max(test_list[i])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # get the length of the first row\n    row_length = len(test_list[0])\n    \n    # initialize an empty list to store the max values\n    max_values = []\n    \n    # loop through the rows of the matrix\n    for i in range(len(test_list)):\n        # get then'th column value\n        nth_col = test_list[i][N-1]\n        \n        # check if this value is greater than any previous max values\n        if len(max_values) == 0 or nth_col > max_values[-1]:\n            max_values.append(nth_col)\n    \n    # return the max value(s)\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if N > len(matrix[0]):\n        return None\n    max_val = float('-inf')\n    for row in matrix:\n        max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    if len(test_list) == 0 or len(test_list[0]) == 0:\n        return None\n    \n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        elif i > N-1:\n            max_val = max(max_val, test_list[i][N-1])\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Determine the maximum value in the nth column\n    max_value = float('-inf')\n    for row in test_list:\n        if row[N-1] > max_value:\n            max_value = row[N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize the maximum value to negative infinity\n    max_val = float('-inf')\n    \n    # Iterate over the rows of the matrix\n    for row in test_list:\n        # Check if the current row has N elements and if so, compare the nth element to the maximum value\n        if len(row) == N:\n            if row[N-1] > max_val:\n                max_val = row[N-1]\n                \n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists, where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        first, second = sublist\n        merged_lst.append([first, second])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist)!= 2:\n            print(\"Invalid input. Each sublist should have exactly two elements.\")\n            return []\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            first = sublist[0]\n            second = sublist[1]\n            merged = [first, second]\n            result.append(merged)\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    # Loop through each element in the list\n    for num in test_list:\n        # Add the element to the cumulative sum\n        cum_sum += num\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum variable to 0\n    cum_sum = 0\n    # loop through each tuple in the test list\n    for tup in test_list:\n        # loop through each value in the tuple\n        for val in tup:\n            # add the value to the cumulative sum\n            cum_sum += val\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cumulative_sum = 0\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Add the value of each tuple to the cumulative sum variable\n        cumulative_sum += tup[1]\n    # Return the cumulative sum variable\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for value in test_list:\n        cumulative_sum += value\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize cumulative sum to 0\n    cum_sum = 0\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # add the current value to the cumulative sum\n        cum_sum += tup[1]\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cum_sum = 0\n    \n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cum_sum += val\n    \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for tup in test_list:\n        for val in tup:\n            cum_sum += val\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        if isinstance(item, int):\n            cum_sum += item\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        count = len(num_tuple)\n        avg = total / count\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        sum = 0\n        for j in range(len(nums[i])):\n            sum += nums[i][j]\n        result.append(sum/len(nums[i]))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = 0\n        count = 0\n        for i in num:\n            total += i\n            count += 1\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the averages\n    averages = []\n    # loop through each tuple in the tuple of tuples\n    for i in range(len(nums)):\n        # loop through each value in the current tuple\n        for j in range(len(nums[i])):\n            # add the current value to the running total\n            total = nums[i][j]\n            # add the current value to the averages list\n            averages.append(total / len(nums[i]))\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        average = sum(num) / len(num)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        averages.append(sum(tup) / len(tup))\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for t in nums:\n        total += sum(t)\n        count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for i in nums:\n        sum = 0\n        for j in i:\n            sum += j\n        avg = sum/len(i)\n        avg_list.append(avg)\n    return avg_list\n"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Calculate the average value for each tuple\n    avg_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total/len(tup)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([num1 % num2 for num1, num2 in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length\")\n        return\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] % test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    \"\"\"\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    \n    modulo_tup = ()\n    for i in range(len(test_tup1)):\n        modulo_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples do not have the same length.\")\n        return\n\n    # perform element-wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    # return the modified tuples\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return\n\n    # Perform element-wise modulo operation and store the result in a new tuple\n    result_tup = tuple(x % y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    steps = steps\n    d = d\n    n = len(steps)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = steps[0] // d\n\n    for i in range(2, n + 1):\n        # Check if the point is within the desired range\n        if steps[i - 1] // d == d:\n            # If the point is within the desired range, check if we can reach the point (d, 0) using a single jump\n            if i % 2 == 0:\n                dp[i] = dp[i - 1] + 1\n                continue\n\n            # If the point is outside the desired range, check if we can reach the point (d, 0) using a single or double jump\n            if i % 2!= 0:\n                dp[i] = max(dp[i - 1] + 1, dp[i - 2] + 1)\n                continue\n\n        # If the point is outside the desired range or not a valid point to reach (d, 0), we cannot reach it using any jump\n        dp[i] = dp[i - 1]\n\n    return dp[n]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def min_Jumps_helper(start_x, start_y, dest_x, dest_y, steps_left):\n        if (start_x, start_y) == (dest_x, dest_y) and steps_left == 0:\n            return 1\n        if start_y >= dest_y:\n            return 0\n        if start_x >= dest_x:\n            return 0\n        if start_x == dest_x:\n            return 0\n        if start_y == dest_y:\n            return 0\n        if start_x+1 == dest_x:\n            return steps_left + min_Jumps_helper(start_x+1, start_y, dest_x, dest_y, steps_left-1)\n        if start_y+1 == dest_y:\n            return steps_left + min_Jumps_helper(start_x, start_y+1, dest_x, dest_y, steps_left-1)\n        if start_x-1 == dest_x:\n            return steps_left + min_Jumps_helper(start_x-1, start_y, dest_x, dest_y, steps_left-1)\n        if start_y-1 == dest_y:\n            return steps_left + min_Jumps_helper(start_x, start_y-1, dest_x, dest_y, steps_left-1)\n        return 0\n\n    # initialize starting point\n    start_x = 0\n    start_y = 0\n\n    # initialize destination point\n    dest_x = d\n    dest_y = 0\n\n    # check if starting point is on the left or right of the destination point\n    if dest_x > start_x:\n        return min_Jumps_helper(start_x, start_y, dest_x, dest_y, steps)\n    elif dest_x < start_x:\n        return min_Jumps_helper(start_x, start_y, dest_x, dest_y, steps)\n\n    # check if starting point is above or below the destination point\n    if dest_y > start_y:\n        return 0\n    elif dest_y < start_y:\n        return 0\n\n    # check if starting point is at the same point as the destination point\n    if start_x == dest_x and start_y == dest_y:\n        return 0\n\n    # check if starting point is at the top left corner\n    if start_x == 0 and start_y == 0:\n        return 0\n\n    # check if starting point is at the bottom right corner\n    if start_x == d and start_y == 0:\n        return 0\n\n    # check if starting point is at the top right corner\n    if start_x == d and start_y == d:\n        return 0\n\n    # check if starting point is at the bottom left corner\n    if start_x == 0 and start_y == d:\n        return 0\n\n    # check if starting point is at the middle of the grid\n    if (start_x == d//2 and start_y == d//2) or (start_x == d//2 and start_y == d//2-1) or (start_x == d//2-1 and start_y == d//2) or (start_x == d//2-1 and start_y == d//2-1):\n        return steps\n\n    # check for other cases\n    return 0"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    n = len(steps)\n    dp = [1]*n\n    jumps = [0]*n\n    lis = [1]*n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if steps[i-1] + d <= steps[j]:\n                if dp[j] < dp[i]:\n                    dp[i] = dp[j] + 1\n                    jumps[i] = max(jumps[i], jumps[j]+1)\n        lis[i] = max(lis[i], dp[i])\n    \n    if dp[-1] > n:\n        return jumps[n]\n    else:\n        return n+1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    #initializing variables\n    jumps = 0\n    current_pos = (0,0)\n\n    #looping through the steps to check for the number of jumps required\n    for step in steps:\n        current_pos = tuple(map(lambda x: x+step, current_pos))\n        if current_pos[0] == d and current_pos[1] == 0:\n            jumps += 1\n            break\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    # Initialize variables\n    jumps = 0\n    current_level = 0\n    remaining_steps = steps\n\n    # Traverse the levels in steps\n    while remaining_steps > 0:\n        # Move to the next level by one step\n        current_level += 1\n\n        # Check if we reached the goal level (d, 0)\n        if current_level == d:\n            return jumps + 1\n\n        # Calculate the maximum number of steps left in the current level\n        max_steps = remaining_steps - current_level + 1\n\n        # Update the remaining steps and the jumps count\n        remaining_steps = max_steps\n        jumps += 1\n\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    jumps = 0\n    curr_step = 0\n    curr_x = 0\n    curr_y = 0\n\n    # Iterate through steps\n    while curr_step < len(steps):\n        # Move in the direction of the current step\n        if steps[curr_step] == 1:\n            curr_x -= 1\n        else:\n            curr_x += 1\n\n        # Check if we have reached the target point\n        if curr_x == d and curr_y == 0:\n            return jumps\n\n        # Check if we have exceeded the maximum allowed number of jumps\n        if jumps >= steps[curr_step]:\n            return -1\n\n        # Update the current step and its corresponding x and y positions\n        curr_step += 1\n        curr_x = max(curr_x, 0)\n        curr_y = min(curr_y + 1, steps[curr_step])\n        jumps += 1\n\n    # If we make it to the end of the list without finding the target point, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Check if d is greater than or equal to 2\n    if d < 2:\n        return 0\n\n    # Initialize variables\n    distance = 0\n    jumps = 0\n\n    # Loop through steps and calculate the distance and jumps\n    while distance < steps:\n        distance += d\n        jumps += 1\n\n    # Check if the distance is greater than or equal to the steps\n    if distance >= steps:\n        return jumps\n\n    # If the distance is less than the steps, calculate the jumps required\n    else:\n        return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Step 1: Initialize variables\n    i = 0  # current position in the array\n    curr_pos = 0  # current position of the start point\n    steps_taken = 0  # number of steps taken\n\n    # Step 2: Iterate through the array\n    while i < len(steps):\n        steps_taken += steps[i]\n        i += 1\n\n        # Step 3: If we reach the end point, return the number of steps taken\n        if steps_taken >= d:\n            return steps_taken\n\n    # If we reach here, it means that we didn't reach the end point\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    if steps == 0:\n        return 0\n    elif steps == 1:\n        return 1\n    elif steps == 2:\n        return 1 if d == 1 else 2\n    elif steps == 3:\n        return 1 if d == 1 else 3\n    elif steps == 4:\n        return 1 if d == 1 else 4\n    elif steps == 5:\n        return 1 if d == 1 else 5\n    elif steps == 6:\n        return 1 if d == 1 else 6\n    else:\n        total_jumps = 1\n        curr_jumps = 1\n        for step in range(steps - 7):\n            curr_jumps += 1\n            total_jumps += curr_jumps\n            if d == curr_jumps:\n                break\n        return total_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    # Check if the number of steps is greater than 0\n    if steps <= 0:\n        return 0\n\n    # Initialize variables\n    count = 0\n    end_point = (steps, 0)\n\n    # Initialize a boolean variable to mark if we need to move to (0, d)\n    need_jump = True\n\n    # Loop until the end point is reached\n    while end_point!= (0, 0):\n        # Move to (d, 0)\n        if need_jump:\n            end_point = (end_point[0] - 1, end_point[1])\n\n        # If we reach the end point, increment the count and set the need_jump flag to False\n        if end_point == (0, 0):\n            count += 1\n            need_jump = False\n\n        # If we need to move further, increment the count and set the need_jump flag to True\n        if end_point[0] > 0 and end_point[1] == d:\n            count += 1\n            need_jump = True\n\n        # If we need to move further, decrement the count and set the need_jump flag to False\n        if end_point[0] > 0 and end_point[1] < d:\n            count += 1\n            need_jump = False\n\n    return count"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append('Division by zero is not allowed')\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input, nums1 and nums2.\n    It divides the elements of nums1 by the elements of nums2 element-wise.\n    It returns the quotient of each element in nums1 divided by the corresponding element in nums2.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # iterate through each element of the lists\n    for i in range(len(nums1)):\n        # divide the two elements\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Check if the lengths of the two lists are equal\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have equal lengths\")\n\n    # Divide each element of the lists element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    return [num1 / num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and returns a new list which contains the element-wise division of the two lists.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # checking if the length of the lists is equal\n    if len(nums1)!= len(nums2):\n        print(\"Error: The length of the lists must be equal.\")\n        return\n    \n    # creating an empty list to store the result\n    result = []\n    \n    # looping through the lists element by element\n    for i in range(len(nums1)):\n        # calculating the result\n        result.append(nums1[i]/nums2[i])\n    \n    # returning the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Lists should have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n\n        # Check if the character is a number\n        if test_str[i].isdigit():\n\n            # Create a new list to store the non-number characters\n            non_num_list = []\n\n            # Loop through each character after the current one\n            for j in range(i, len(test_str)):\n\n                # If the character is a number, add it to the new list\n                if test_str[j].isdigit():\n                    non_num_list.append(test_str[j])\n                # If the character is not a number, add it to the end of the original list\n                else:\n                    test_str = test_str[:i] + non_num_list + test_str[i:]\n                    break\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store the numbers\n    nums = []\n    # initialize a variable to store the index of the next character to be processed\n    i = 0\n    # iterate over the characters in the input string\n    while i < len(test_str):\n        # if the current character is a number, add it to the list\n        if test_str[i].isdigit():\n            nums.append(test_str[i])\n        # move to the next character\n        i += 1\n    # reverse the list to move the numbers to the end\n    nums = nums[::-1]\n    # join the numbers back into a string and return it\n    return ''.join(nums)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty list to store numbers\n    nums = []\n    # loop through each character in the input string\n    for char in test_str:\n        # if the character is a number, append it to the list of numbers\n        if char.isdigit():\n            nums.append(char)\n        # if the character is not a number, append it to the original string\n        else:\n            test_str = test_str + char\n    # join the list of numbers and the original string into a single string\n    return ''.join(nums) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Check if the input is a string\n    if not isinstance(test_str, str):\n        return \"Input is not a string\"\n    \n    # Split the string into a list of characters and numbers\n    chars = list(test_str)\n    nums = [char for char in chars if char.isdigit()]\n    \n    # Reverse the list of numbers\n    nums.reverse()\n    \n    # Join the list of characters and numbers together\n    result = ''.join(chars + nums)\n    \n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_list = []\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n    for num in reversed(num_list):\n        new_str += num\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # initialize two pointers to start and end of the string\n    start = 0\n    end = len(test_str) - 1\n\n    # loop through the string until we find a non-numeric character\n    while end >= 0 and test_str[end].isdigit():\n        end -= 1\n\n    # if we didn't find any non-numeric characters, the string is already in the correct format\n    if end < 0:\n        return test_str\n\n    # otherwise, move all the non-numeric characters to the end of the string\n    while start < end:\n        test_str = test_str[:start] + test_str[start:end+1] + test_str[end+1:]\n        start += 1\n\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Check if the input is a string\n    if not isinstance(test_str, str):\n        return \"Input is not a string\"\n    \n    # Check if there are any numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n    if not numbers:\n        return \"No numbers found in the string\"\n    \n    # Move numbers to the end of the string\n    test_str = re.sub(r'\\d+', '', test_str) + ''.join(numbers)\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for char in test_str:\n        if char.isdigit():\n            nums.append(char)\n    nums.sort(reverse=True)\n    return ''.join(nums) + test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    count = 0\n    largest_size = 0\n    current_size = 0\n    # Traverse the list\n    for num in a:\n        # Check if the number is divisible by all numbers before it\n        divisible = True\n        for i in range(count):\n            if num % a[i]!= 0:\n                divisible = False\n                break\n        # Update the count, largest size and current size\n        if divisible:\n            count += 1\n            if current_size > largest_size:\n                largest_size = current_size\n        else:\n            count -= 1\n        current_size += 1\n    # Return the largest size\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Convert the list of numbers into a set to remove duplicates\n    a = set(a)\n\n    # Initialize the largest subset size to 0\n    max_size = 0\n\n    # Initialize a list of pairs to keep track of the current subset\n    current_subset = []\n\n    # Loop through the list of numbers, adding each number to the current subset\n    # and checking if it can be added to the current subset with a divisor of 2\n    for num in a:\n        can_add = True\n        for divisor in range(2, num+1):\n            if num % divisor!= 0:\n                can_add = False\n                break\n        if can_add:\n            current_subset.append(num)\n\n            # Update the maximum subset size if the current subset is larger\n            current_size = len(current_subset)\n            if current_size > max_size:\n                max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    subset = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                if len(subset) < max_size:\n                    max_size = len(subset)\n                    subset = [a[i], a[j]]\n                elif len(subset) == max_size:\n                    if a[i] > subset[0]:\n                        subset = [a[i], a[j]]\n    return max_size, subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize the maximum size and the set of pairs\n    max_size = 0\n    pairs = set()\n    \n    # Loop through each number in the list\n    for num in a:\n        # Check if the current number is divisible by every number in the set of pairs\n        for pair in pairs:\n            if num % pair[0] == 0 and num % pair[1] == 0:\n                # If the current number is divisible by both numbers in the pair, add the pair to the set of pairs and break out of the loop\n                pairs.add((num, pair[0]))\n                pairs.add((pair[0], num))\n                max_size = max(max_size, len(pairs))\n                break\n                \n    # Return the maximum size of the largest subset of pairs\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) < 2:\n        return 0\n    \n    # initialize variables\n    max_size = 0\n    subset = []\n    \n    # sort the list\n    a.sort()\n    \n    # loop through the list\n    for i in range(len(a)):\n        # if the current element is divisible by i, add it to the subset and update max_size if necessary\n        if a[i] % i == 0:\n            subset.append(a[i])\n            if len(subset) > max_size:\n                max_size = len(subset)\n                \n        # if the current element is not divisible by i, reset the subset and start a new one\n        else:\n            subset = []\n            \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in ascending order\n    a.sort()\n    # initialize the maximum subset size and the current subset size\n    max_size = 0\n    curr_size = 1\n    # loop through the list\n    for i in range(len(a)):\n        # if the next element is divisible by the current element, increment the current subset size\n        if a[i] % a[i+1] == 0:\n            curr_size += 1\n        else:\n            # if the current subset size is greater than the maximum subset size, update the maximum subset size\n            if curr_size > max_size:\n                max_size = curr_size\n            # reset the current subset size to 1\n            curr_size = 1\n    # if the last subset size is greater than the maximum subset size, update the maximum subset size\n    if curr_size > max_size:\n        max_size = curr_size\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    largest_subset_size = 0\n    i = 0\n    while i < n:\n        if a[i] % a[i+1] == 0:\n            largest_subset_size += 1\n        i += 1\n    return largest_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # initialize the largest subset size to 1\n    largest = 1\n    # loop through the sorted list\n    for i in range(1, len(a)):\n        # if the difference between the current element and the next element is divisible by 2, add 1 to the largest subset size\n        if a[i] % 2 == 0 and a[i-1] % 2 == 0:\n            largest += 1\n        # if the difference between the current element and the next element is not divisible by 2, reset the largest subset size to 1\n        else:\n            largest = 1\n    # return the largest subset size\n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    This function takes a list of integers as input and returns the size of the largest subset of the numbers\n    so that every pair of numbers in the subset are divisible by 2.\n    \n    Example:\n    a = [3, 6, 9, 12, 15, 18]\n    largest_subset(a) = 3\n    \n    a = [4, 6, 9, 12, 15, 18]\n    largest_subset(a) = 4\n    \n    a = [4, 5, 9, 12, 15, 18]\n    largest_subset(a) = 5\n    \n    a = [4, 5, 7, 9, 12, 15, 18]\n    largest_subset(a) = 6\n    \n    a = [4, 5, 7, 8, 9, 12, 15, 18]\n    largest_subset(a) = 7\n    \n    a = [4, 5, 7, 8, 9, 10, 12, 15, 18]\n    largest_subset(a) = 8\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 15, 18]\n    largest_subset(a) = 9\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 18]\n    largest_subset(a) = 10\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18]\n    largest_subset(a) = 11\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    largest_subset(a) = 12\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n    largest_subset(a) = 13\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 14\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 15\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 16\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 17\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 18\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 19\n    \n    a = [4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    largest_subset(a) = 20\n    \n    a = ["
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    max_size = 0\n    size = 0\n    prev = 0\n\n    for i in range(n):\n        while i+size < n and a[i+size] % a[i]!= 0:\n            size -= 1\n        if i+size > n:\n            break\n        max_size = max(max_size, size)\n        prev = a[i]\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= len(arr2):\n        raise ValueError('Both arrays must have the same length')\n\n    arr1.extend(arr2)\n    arr1.sort()\n\n    mid = len(arr1) // 2\n    if len(arr1) % 2 == 0:\n        return (arr1[mid - 1] + arr1[mid]) / 2\n    else:\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    length = len(arr)\n\n    if length % 2 == 0:\n        median = (arr[length//2 - 1] + arr[length//2]) / 2\n    else:\n        median = arr[length//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists and count the number of elements\n    merged_arr = arr1 + arr2\n    count = n + len(arr1) + len(arr2)\n    \n    # Sort the merged list\n    merged_arr.sort()\n    \n    # Calculate the median\n    median = 0\n    if count % 2 == 0:\n        median = (merged_arr[count//2 - 1] + merged_arr[count//2]) / 2\n    else:\n        median = merged_arr[count//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes two sorted lists of the same size and returns their median.\n    \"\"\"\n\n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the sum of the first half of the lists\n    sum1 = 0\n    for i in range(n // 2):\n        sum1 += arr1[i]\n\n    # Calculate the sum of the second half of the lists\n    sum2 = 0\n    for i in range(n // 2, n):\n        sum2 += arr2[i - n // 2]\n\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sum1 + sum2) / 2\n    else:\n        median = sum1\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1)!= n or len(arr2)!= n:\n        raise ValueError(\"Both arrays must have same size.\")\n    arr = arr1 + arr2\n    arr.sort()\n    mid = n // 2\n    if n % 2 == 1:\n        return arr[mid]\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted lists\n    sorted_list = arr1 + arr2\n    sorted_list.sort()\n    \n    # Calculate the median\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_list[mid-1] + sorted_list[mid]) / 2\n    else:\n        return sorted_list[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median based on the size of the list\n    if n % 2 == 0:\n        median = (merged_list[n//2] + merged_list[n//2 - 1]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n % 2 == 0:\n        # Find the median of the two lists\n        median = (max(arr1[n//2-1], arr2[n//2-1]) + min(arr1[n//2], arr2[n//2])) / 2\n    else:\n        # Find the median of the two lists\n        median = (max(arr1[n//2-1], arr2[n//2-1]) + min(arr1[n//2], arr2[n//2])) / 2.0\n    \n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase using slicing\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last element in a given list.\n    \"\"\"\n    if len(newList) >= 2:\n        # get the first and last elements of the list\n        first_element = newList[0]\n        last_element = newList[-1]\n        # set the first element to the last element\n        newList[0] = last_element\n        # set the last element to the first element\n        newList[-1] = first_element\n    else:\n        print(\"The list must have at least 2 elements to swap.\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find the index of the first and last element in the list\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n\n    # Swap the elements at the first and last indices\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    #swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # check if the input list is not empty\n    if len(newList) > 0:\n        # swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: # if the list has less than two elements, return the list as it is\n        return newList\n    \n    # first, move the last element to the first position\n    last = newList[-1]\n    newList[-1] = newList[0]\n    newList[0] = last\n    \n    # second, move the second last element to the last position\n    second_last = newList[-2]\n    newList[-2] = newList[-1]\n    newList[-1] = second_last\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # first and last index of the list\n    first_index = 0\n    last_index = len(newList) - 1\n\n    # swap the first and last element\n    newList[first_index], newList[last_index] = newList[last_index], newList[first_index]\n\n    # print the updated list\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n    # Check if the list has a length greater than 1\n    if length > 1:\n        # Swap the first and last element\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        # Print the updated list\n        print(newList)\n    else:\n        print(\"The list must have at least two elements\")"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define a variable to store the length of the list\n    length = len(newList)\n    \n    # Check if the length of the list is less than 2, which would cause an error\n    if length < 2:\n        print(\"Error: The list must have at least 2 elements to be swapped.\")\n    else:\n        # Swap the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        \n        # Print the new list\n        print(\"New list:\", newList)"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    # Formula for calculating the area of a triangle given its semi-perimeter\n    area = (r**2 * math.sin(math.pi/3)) / 3\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2*math.pi*r\n    \n    # Calculate the area of a regular triangle\n    area = 0.5*semi_perimeter**2\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_triangle = area\n    \n    # Return the area of the largest triangle that can be inscribed in the semicircle\n    return area_largest_triangle"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r**2\n    b = 0.5*r\n    c = 0.5*r**2\n    s = (a + b + c)**0.5\n    \n    # Calculate the area of the triangle\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = (3 * r ** 2) ** 0.5\n    \n    # Heron's formula for area of a triangle\n    area = math.sqrt(s * (s - r) * (s - r - 1))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-circle arc length\n    arc_length = 2*r\n    # calculate the area of a triangle that is 1 unit long\n    area = 0.5*r**2\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = area*arc_length\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Importing math module to use pi constant\n    import math\n    \n    # Calculating area of the largest triangle inscribed in a semicircle with given radius\n    a = 2*r*math.sqrt(2)\n    \n    # Returning the area\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-circle circumference\n    s = 2*math.pi*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semi-circle\n    area = (math.sqrt(3)*s)/(4*math.tan(math.pi/3))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # Find the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n    \n    # Find the area of the largest possible triangle with semi-perimeter 2r\n    area = (1/3) * (semi_perimeter ** 2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-perimeter of the semicircle\n    s = 2 * r * (1 - (1 / r) ** 2) ** 0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (r ** 2 + s ** 2) * (180 / 3.14159)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #Calculate the semi-perimeter of the semicircle\n    s = 2 * r\n\n    #Calculate the semi-perimeter of the smallest possible triangle\n    a = r\n\n    #Calculate the area of the smallest possible triangle\n    area1 = (s - a) ** 2 / 4\n\n    #Calculate the area of the largest possible triangle\n    area2 = 1 / 2 * s * r\n\n    #Find the maximum of the two areas\n    area = max(area1, area2)\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input,\n    and returns the first missing number in the sorted list.\n    \"\"\"\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    If the input list is empty or all the elements are present in the array, the function returns -1.\n    '''\n    # If the input list is empty, return -1\n    if len(array) == 0:\n        return -1\n    \n    # If the input list is not empty, sort it\n    array.sort()\n    \n    # If the start index is not provided, set it to 0\n    if start is None:\n        start = 0\n    \n    # If the end index is not provided, set it to the last index of the array\n    if end is None:\n        end = len(array) - 1\n    \n    # Initialize the missing number to the starting index\n    missing = start\n    \n    # Iterate over the range of indices between start and end\n    for i in range(start, end):\n        # If the current index is equal to the missing number, increment the missing number\n        if array[i] == missing:\n            missing += 1\n    \n    # If the missing number has not been found, return -1\n    if missing == len(array):\n        return -1\n    \n    # Return the missing number\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int, optional): The starting index of the sub-array. Defaults to 0.\n    end (int, optional): The ending index of the sub-array. Defaults to None, which means the entire array will be used.\n\n    Returns:\n    int: The smallest missing number in the sub-array.\n    \"\"\"\n    if end is None:\n        end = len(array)\n    else:\n        end = min(end, len(array))\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + start + 1\n"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the first missing number.\n    If end is not given, the function will assume the list ends at the end of the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # Check if the input array is sorted\n    if len(array)!= len(set(array)):\n        return None\n\n    # Initialize the start and end indices\n    if end is None:\n        end = len(array) - 1\n\n    # Iterate through the array from the start to the end\n    for i in range(start, end + 1):\n        # Check if the current index is the missing number\n        if array[i]!= i:\n            return i\n\n    # If no missing number is found, return the end index + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] == i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of sorted natural numbers as input and returns the smallest missing number.\n    If the input array is not sorted, it will first sort the array.\n    \"\"\"\n\n    # If the input array is not sorted, sort it\n    if start == 0 and end is None:\n        array.sort()\n    elif start > 0 and end is None:\n        array.sort(reverse=True)\n        array = array[start:]\n\n    # Iterate through the array and find the first missing number\n    for num in array:\n        if num!= num - 1:\n            return num - 1\n\n    # If no missing number is found, return the last element in the array\n    return array[-1] + 1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    '''\n    This function takes a list as input and returns a new list containing even numbers from the original list.\n    '''\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_numbers = []\n\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    n = max(abs(x), abs(y))\n    for i in range(n):\n        if x < 0:\n            x += 1\n        else:\n            x -= 1\n        if y < 0:\n            y += 1\n        else:\n            y -= 1\n        sub.append((x, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    \n    # adjacent positions in 4 directions\n    adj = [(x+1,y),(x-1,y),(x,y+1),(x,y-1),(x+1,y+1),(x+1,y-1),(x-1,y+1),(x-1,y-1)]\n    \n    # filter out subsets of adjacent positions\n    if sub:\n        adj = [p for p in adj if all(p in sub)]\n    \n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    adj = [] \n    if x > 0: \n        adj.append((x - 1, y)) \n    if x < 25: \n        adj.append((x + 1, y)) \n    if y > 0: \n        adj.append((x, y - 1)) \n    if y < 25: \n        adj.append((x, y + 1)) \n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 9:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 9:\n        adj.append((x, y+1))\n    adj += sub\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    if x > 0:\n        adj_list.append((x-1, y))\n    if x < len(sub)-1:\n        adj_list.append((x+1, y))\n    if y > 0:\n        adj_list.append((x, y-1))\n    if y < len(sub[0])-1:\n        adj_list.append((x, y+1))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Define the set of adjacent coordinates to search for\n    adjacent = {(-1, 0), (1, 0), (0, -1), (0, 1)}\n\n    # Extract the x and y coordinates of the element\n    x, y = ele\n\n    # Iterate through all adjacent coordinates and check if they are within the grid bounds\n    for i, j in adjacent:\n        if 0 <= x + i < 5 and 0 <= y + j < 5:\n            # If the adjacent element is not already in the sublist, add it to the sublist\n            if (x + i, y + j) not in sub:\n                sub.append((x + i, y + j))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Define a dictionary to store the coordinates of each element\n    coord = {\n        'a': [(0, 0), (0, 1), (1, 0), (1, 1)],\n        'b': [(0, 0), (0, 1), (1, 1)],\n        'c': [(0, 0), (0, 1), (1, 0), (1, 1)],\n        'd': [(0, 0), (1, 0), (0, 1), (1, 1)],\n        'e': [(0, 1), (1, 1)],\n        'f': [(0, 0), (0, 1), (1, 1)],\n        'g': [(0, 1), (1, 1)],\n        'h': [(0, 1), (1, 1)],\n        'i': [(0, 0), (0, 1)],\n        'j': [(0, 0), (1, 0)],\n        'k': [(0, 0), (1, 0), (1, 1)],\n        'l': [(0, 0), (0, 1), (1, 1)],\n       'm': [(0, 0), (1, 0), (0, 1)],\n        'n': [(0, 0), (1, 0), (0, 1)],\n        'o': [(0, 0), (0, 1), (1, 1)],\n        'p': [(0, 0), (1, 0), (1, 1)],\n        'q': [(0, 0), (1, 0), (0, 1)],\n        'r': [(0, 0), (1, 0), (1, 1)],\n       's': [(0, 1), (1, 1)],\n        't': [(0, 0), (1, 0)],\n        'u': [(0, 0), (1, 0), (0, 1)],\n        'v': [(0, 1), (1, 1)],\n        'w': [(0, 0), (1, 0), (1, 1)],\n        'x': [(0, 1), (1, 1)],\n        'y': [(0, 1), (1, 1)],\n        'z': [(0, 1), (1, 1)]\n    }\n\n    # Extract the coordinates of the given element\n    coordinates = coord[ele]\n\n    # Add the subelements to the coordinates if they exist\n    if len(sub) > 0:\n        for sub_ele in sub:\n            if sub_ele in coord:\n                coordinates.extend(coord[sub_ele])\n\n    return coordinates"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = set()\n\n    if len(ele) == 2:\n        sub.add(tuple(ele))\n\n    for direction in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        x, y = ele[0] + direction[0], ele[1] + direction[1]\n        if 0 <= x < len(ele[0]) and 0 <= y < len(ele[1]):\n            sub.add((x, y))\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele \n    if y % 2 == 0: \n        y_adj = y - 1 \n        x_adj = x \n    else: \n        y_adj = y + 1 \n        x_adj = x \n    adj_ele = (x_adj, y_adj) \n    if (x_adj, y_adj) not in sub: \n        sub.append((x_adj, y_adj)) \n    sub.append(adj_ele) \n    return sub "
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # get the x and y coordinates of the current element\n    x, y = ele\n    \n    # create a list of adjacent coordinates\n    adj = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    \n    # filter out the coordinates that are already in the sublist\n    adj = [adj[0] if adj[0] not in sub else None,\n           adj[1] if adj[1] not in sub else None,\n           adj[2] if adj[2] not in sub else None,\n           adj[3] if adj[3] not in sub else None]\n    \n    # return the list of adjacent coordinates\n    return [x for x in adj if x is not None]"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Split the input string into words\n    words = text.split()\n    \n    # Iterate over the words and replace whitespaces with underscores\n    for i in range(len(words)):\n        if words[i].isspace():\n            words[i] = \"_\"\n    \n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_').replace('_','')\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # convert the given string to lowercase\n    text = text.lower()\n    # replace spaces with underscores\n    text = text.replace(' ', '_')\n    # replace underscores with spaces\n    text = text.replace('_','')\n    # return the modified string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for i in range(len(text)):\n        if text[i] == \" \":\n            result += \"_\"\n        elif text[i] == \"_\":\n            result += \" \"\n        else:\n            result += text[i]\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # create a copy of the input list\n    num_list_copy = num_list.copy()\n    # iterate over the input list\n    for i in range(len(num_list_copy)):\n        # if the current element is zero, move it to the end of the list\n        if num_list_copy[i] == 0:\n            num_list_copy.pop(i)\n            num_list_copy.append(0)\n            # decrement the index to avoid looping over the same element again\n            i -= 1\n    # return the modified list\n    return num_list_copy"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            num_list.pop(num_list.index(num))\n            num_list.append(num)\n            zero_count += 1\n    return num_list, zero_count"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[zero_index] = num_list[zero_index], num_list[i]\n            zero_index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize an empty list to store non-zero numbers\n    non_zero_list = []\n    # Loop through the given list\n    for num in num_list:\n        # If the number is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero_list.append(num)\n        # If the number is zero, append it to the list at the beginning\n        else:\n            num_list.insert(0, num)\n            # If the list has more than one zero, remove all but the first\n            while len(num_list) > 1 and num_list[1] == 0:\n                num_list.pop(1)\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # initialize two pointers, one for current index and other for zero count\n    i = 0\n    j = 0\n    zero_count = 0\n\n    # traverse through the list\n    while i < len(num_list):\n        # if the current element is not zero, move it to the next index\n        if num_list[i]!= 0:\n            num_list[j], num_list[i] = num_list[i], num_list[j]\n            j += 1\n            i += 1\n        # if the current element is zero, increment the zero count\n        else:\n            zero_count += 1\n            i += 1\n\n    # move the remaining zeroes to the end of the list\n    while j < len(num_list):\n        num_list[j], num_list[len(num_list) - 1] = num_list[len(num_list) - 1], num_list[j]\n        j += 1\n\n    # return the list with all zeroes moved to the end\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = -1\n    \n    # Find the index of the first non-zero element in the list\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            zero_index = i\n            break\n    \n    # Move all zeroes to the end of the list\n    if zero_index!= -1:\n        for i in range(zero_index, len(num_list)-1):\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for index, value in enumerate(num_list):\n        if value == 0:\n            zero_index.append(index)\n\n    for i in range(len(num_list)-1, -1, -1):\n        if i in zero_index:\n            num_list.pop(i)\n        else:\n            break\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zeros = [i for i in num_list if i == 0]\n    non_zeros = [i for i in num_list if i!= 0]\n\n    return non_zeros + zeros"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n        i += 1\n    return new_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n % 2 == 0:\n        raise ValueError(\"The number of elements in the list must be odd for this function to work.\")\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i + 1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and their size n as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    # Initialize the sum variable to 0\n    xor_sum = 0\n\n    # Loop through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(n):\n            # If i is less than j, add the xor of i and j to the sum variable\n            if i < j:\n                xor_sum += arr[i] ^ arr[j]\n\n    # Return the xor sum of all pairs of numbers in the list\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    # Initialize sum to 0\n    sum = 0\n\n    # Iterate through the list\n    for i in range(len(arr)):\n        # Calculate xor of all pairs of numbers\n        xor = arr[i] ^ arr[(i+1) % n]\n\n        # Add the xor to the sum\n        sum += xor\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR operator to find the sum of xor of all pairs of numbers\n    xor_sum = sum(a^b for a in arr for b in arr if a<b)\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n): \n        xor_sum += (arr[i] ^ arr[i+1])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all pairs of integers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # Return the result\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap from the list\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # create a new list to hold the sorted items\n    sorted_list = []\n\n    # extract the minimum element from the min heap and append it to the new list\n    while heap:\n        sorted_list.append(heap[0])\n        heapq.heappop(heap)\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a min heap\n    heap = [heapq.heappushpop(iterable, -i) for i in iterable]\n    # Convert the min heap to a regular list\n    return [heapq.heappop(heap) for i in range(len(heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    result = []\n    while heap:\n        result.append(hq.heappop(heap))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sort the given list using the heap sort algorithm.\n\n    Time Complexity: O(n log n)\n\n    :param iterable: The list to be sorted.\n    :return: The sorted list.\n    \"\"\"\n    # Build the max heap from the iterable\n    for item in iterable:\n        hq.heappush(iterable, item)\n\n    # Extract the elements from the max heap and put them in a list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(heapq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a heap\n    heap = [None] * len(iterable)\n    for i, x in enumerate(iterable):\n        heap[i] = x\n        hq.heapify(heap, i)\n\n    # Extract the elements from the heap and store them in the sorted list\n    sorted_list = []\n    for _ in range(len(iterable)):\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heap sort algorithm.\n    '''\n    # Convert the list to a heap\n    heap = hq.heapify(iterable)\n    # Sort the heap by repeatedly extracting the smallest element from it\n    while len(heap) > 1:\n        # Remove the smallest element from the heap\n        hq.heappop(heap)\n        # Add the next element to the heap\n        hq.heappush(heap, iterable.pop(0))\n    # The sorted list is in the heap\n    return list(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the iterable\n    heap = hq.nlargest(len(iterable), iterable)\n    # convert the heap to a list and return it\n    return list(heap)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n\n    Input:\n    - iterable: A list to be sorted.\n\n    Output:\n    - A sorted list.\n    '''\n    # Convert the list to a max heap\n    heap = [float('-inf')] * len(iterable)\n    for i, num in enumerate(iterable):\n        if num > heap[0]:\n            heap[0] = num\n            hq.heapify(heap)\n        else:\n            hq.heappush(heap, num)\n\n    # Extract elements from the heap and convert back to a list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit\n    profit = sale_amount - actual_cost\n\n    # Check if the profit is greater than zero\n    if profit > 0:\n        return False\n\n    # Calculate the loss\n    loss = actual_cost - sale_amount\n\n    # Check if the loss is greater than zero\n    if loss > 0:\n        return False\n\n    # If the profit and loss are zero, it means that the given amount has no profit and no loss\n    return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n\n    Args:\n    actual_cost (float): The actual cost of the product or service.\n    sale_amount (float): The amount sold.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n\n    if actual_cost - sale_amount == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        print(\"No profit and no loss!\")\n    else:\n        print(\"Profit and loss!\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has profit of\",profit,\"and loss of\",loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    :param actual_cost: actual cost of the sale\n    :param sale_amount: amount to be checked for no profit and no loss\n    :return: boolean value indicating whether the sale has no profit and no loss\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if there is any profit and loss\n    if profit == 0 and loss == 0:\n        return \"No profit or loss\"\n    elif profit > 0 and loss > 0:\n        return \"Profit and Loss\"\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function takes in two arguments - actual cost and sale amount. \n    It returns True if the sale amount has no profit and no loss, and False otherwise.\n    A sale amount is said to have no profit and no loss if:\n    1. The actual cost is less than or equal to the sale amount.\n    2. The actual cost is greater than the sale amount and the sale amount is greater than 0.\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    elif actual_cost > sale_amount and sale_amount > 0:\n        return False\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    profit_loss = actual_cost - sale_amount\n    if profit_loss >= 0:\n        print(\"The amount has no profit and no loss\")\n    else:\n        print(\"The amount has a profit but no loss\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the given amount has no profit or no loss\n    if sale_amount >= actual_cost: \n        print(\"The given amount has no profit or no loss\")\n        return True\n    else: \n        print(\"The given amount has a profit or loss\")\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer for a given wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the temperature at the surface and lowest point on the ground\n    temp_surface = 273.15 + (t - 273.15) / 1.8\n    temp_lowest = 273.15 + (t - 273.15) / 1.8 * 0.75\n\n    # Calculate the wind chill index\n    wind_chill_index = math.ceil(((v * 1.609344) / 100) * (temp_lowest - temp_surface) ** 4)\n\n    # Return the wind chill index rounded to the nearest integer\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "To implement this function in Python, we first import the math library. Then, we define the wind_chill function using the formula. The function takes two arguments, v, which is the wind velocity in km/h, and t, which is the temperature in celsius. The function returns the wind chill index rounded to the nearest integer using the int() function."
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Calculate the wind chill\n    w_chill = 23.45 * (t - 273.15) / (t - 273.15) * math.exp((-v / 10.0) * (t - 273.15))\n    # Round the wind chill to the nearest integer\n    w_chill = round(w_chill)\n    return w_chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 13.12 + (0.6215*t) - (11.37*math.pow(t, 0.16)) + (0.3965*math.pow(t, 0.16))\n    return int(math.ceil(v / c))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    # convert wind velocity to m/s\n    v = v * 1000\n    \n    # convert temperature to kelvin\n    t = t + 273.15\n    \n    # calculate wind chill index\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * math.log(v) + 0.4275 * t * math.log(v) - 0.1468 * math.log(v) ** 2 + 0.0188 * t ** 2 - 0.0001 * v ** 2\n    \n    # round wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 0.622\n    c = 1.3\n    f = math.degrees(t) + 32.0\n    wind_speed_in_mph = v * 2.237\n    wind_speed_in_kph = v * 1.609\n    f_minus_c = f - c\n    v_minus_wind_speed = v - wind_speed_in_mph\n    if v_minus_wind_speed < 0:\n        v_minus_wind_speed = 0\n    if f_minus_c <= 0:\n        f_minus_c = 0\n    psi = (f_minus_c) / v_minus_wind_speed\n    psi = round(psi)\n    chill = k * (t - 32.0) + 237.3\n    chill = round(chill)\n    return chill"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # convert temperature to fahrenheit\n    t_f = (t*9/5)+32\n    # calculate the heat index\n    hi = 0.5*v**2 + 35*t_f - 160\n    # calculate the wind chill index\n    wc = hi + (32 - t_f)\n    # convert back to celsius and round to the nearest integer\n    return round((wc - 32) * 5/9)\n`"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 1:\n        return \"Error: Wind velocity must be greater than or equal to 1 km/h\"\n    elif t < -273.15:\n        return \"Error: Temperature must be greater than or equal to -273.15 degrees Celsius\"\n    else:\n        chill_temperature = 25.4 * ((7.511 + 0.6215 * t) / (237.7 * math.exp((17.625 * t) / (t + 243.5)))) - 459.67\n        if chill_temperature < -10:\n            return \"Error: Temperature must be greater than or equal to -10 degrees Celsius\"\n        else:\n            return int(round(chill_temperature))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer.\n    \n    :param v: wind speed in km/h\n    :param t: temperature in celsius\n    \n    :return: wind chill index rounded to the next integer\n    \"\"\"\n    wind_speed = v * 3.6  # convert to m/s\n    if wind_speed < 1:\n        # low wind speeds - windchill increases linearly with speed\n        c = 0.5 * (math.log(wind_speed) + 4.34)\n    elif wind_speed >= 1 and wind_speed < 4:\n        # intermediate wind speeds - windchill increases linearly with speed\n        c = 0.5 * (math.log(wind_speed) + 2.44) + 2.44\n    else:\n        # high wind speeds - windchill increases exponentially with speed\n        c = 0.5 * (math.log(wind_speed) + 2.44) + 2.44 * (0.14 * math.log(wind_speed) - 1.14)\n    \n    # convert celsius to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # calculate windchill index\n    wci = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 2) + 0.4275 * t_f - 0.28 * math.pow(t_f, 2)\n    \n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_mph = v * 1.60934  # convert km/h to miles per hour\n    c = 0.6219716  # specific heat of water at constant pressure (J/(kg*K))\n    rho = 1000  # density of water (kg/m^3)\n    W = math.sqrt(v**2 + 0.001*t**4)  # Wythoff number\n    \n    # calculate the wind chill index\n    wind_chill_index = 35.74 + 0.6215*t - 35.75*math.log(W) + 0.4275*t**2 - 11.37*math.log(t)\n    \n    # round the wind chill index to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of all names\n    name_lengths = 0\n    \n    # iterate over each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if not name[0].isupper():\n            # if it doesn't, add the length of the name to the running total\n            name_lengths += len(name)\n            \n    # return the total length of all names after removing those starting with lowercase letters\n    return name_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum(len(name) for name in valid_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of the names\n    sum_of_lengths = 0\n\n    # iterate through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip the name\n            continue\n        else:\n            # if it doesn't, add the length of the name to the sum\n            sum_of_lengths += len(name)\n\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length\n"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize sum variable to zero\n    total_length = 0\n    \n    # loop through each name in the list\n    for name in sample_names:\n        # if the first character of the name is uppercase, add the length of the name to the total_length variable\n        if name[0].isupper():\n            total_length += len(name)\n    \n    # return the total_length value\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of all the names that don't start with a lowercase letter\n    sum_length = 0\n    \n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if not name.startswith('a'):\n            # If it doesn't, add the length of the name to the sum\n            sum_length += len(name)\n    \n    # Return the sum of the lengths of the names that don't start with a lowercase letter\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name) for name in sample_names if name[0].isupper())"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    # create an empty list to store the names that start with a lowercase letter\n    lowercase_names = []\n\n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, append it to the lowercase_names list\n        if name[0].islower():\n            lowercase_names.append(name)\n\n    # use the len() function to get the length of the lowercase_names list\n    sum_length = len(lowercase_names)\n\n    # return the sum of the length of the lowercase_names list\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_with_length = []\n    for name in sample_names:\n        if name[0].isupper():\n            names_with_length.append(len(name))\n    return sum(names_with_length)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    # Define a regular expression pattern for matching parenthesis\n    pattern = r'\\([^)]*\\)'\n    # Use the re.sub() method to remove the matched parenthesis from the string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string as input and returns a new string with all the parenthesis and their contents removed.\n    '''\n    pattern = re.compile(r'(\\([^)]*\\))')\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    new_items = []\n    for item in items:\n        new_item = re.sub(pattern, '', item)\n        new_items.append(new_item)\n    return new_items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]+\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\((.*?)\\)')\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Finding all the parenthesis in the given string\n    parentheses = re.findall(r'\\([^)]*\\)', items)\n    # Iterating through the list of parenthesis and removing them\n    for parenthesis in parentheses:\n        items = items.replace(parenthesis, '')\n    # Returning the final string without parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'[^\\w\\s]+')\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # remove the parenthesis from the string\n    items = re.sub('\\(.*?\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function will remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)' # This pattern will match any parenthesis in the string\n    items = re.sub(pattern, '', items) # This will remove all the matches of the pattern from the string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n\n    # remove all parenthesis\n    items = re.sub(r'\\(.*?\\)', '', items)\n\n    # remove any whitespace around the parenthesis\n    items = re.sub(r'^\\s*\\(.*?\\)\\s*$', '', items)\n\n    # remove any whitespace after the parenthesis\n    items = re.sub(r'\\(.*?\\)\\s+$', '', items)\n\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n*(n-1))//2)*2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n as input and returns the nth nonagonal number.\n    '''\n    # initialize variables to hold the values\n    row = 1\n    col = 1\n    # initialize the sum to 0\n    sum = 0\n    # loop through the first row\n    for i in range(1, n+1):\n        # calculate the nonagonal number\n        nonagonal = (row * (row + 1)) // 2\n        # check if the current nonagonal number is greater than or equal to n\n        if nonagonal >= n:\n            return nonagonal\n        # add the nonagonal number to the sum\n        sum += nonagonal\n        # move to the next row and column\n        row += 1\n        col += 1\n    # if we get here, the nth nonagonal number is the sum of the first n nonagonal numbers\n    return sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"nonagonal number is\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return \"Please enter odd number.\"\n    else:\n        nonagonal_num = 2*n*(n-1)\n        return nonagonal_num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(1, n+1):\n        yield (i*(n-i))//2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    nonagonal_count = 0\n    for i in range(1, n+1):\n        nonagonal_count += i * (n-i+1)\n    return nonagonal_count"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return 2*is_nonagonal(n-1) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        for j in range(1, i+1):\n            print(j, end=' ')\n        print()"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(z)\\w+(?<!z)\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # define the pattern to match word 'z'\n    pattern = re.compile(r'\\b[zZ]\\w*\\b')\n    # find all words in the text\n    words = re.findall(pattern, text)\n    # check if the word 'z' is at the start or end of any word\n    if len(words) > 0:\n        if words[0][0] == 'z' or words[-1][-1] == 'z':\n            return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<![a-z])\\b[zZ]\\b(?![a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    regex = r'\\b[a-z]\\w*[z]\\w*[a-z]\\b'\n    match = re.search(regex, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'(?<=[a-z])z(?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'\\b(?<!\\w)z(?!\\w)\\b')\n    return regex.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b(z)\\b' # use r'\\b' for word boundary\n    return re.search(pattern, text) is not None\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    \"\"\"\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Find all words in the text\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Check if any word contains 'z' except at the start and end\n    for word in words:\n        if word[0]!= 'z' and word[-1]!= 'z':\n            return True\n\n    # If no words contain 'z' except at the start and end, return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function will reverse the array from 0 to k-1 inclusive.\n    '''\n    # reverse the array from 0 to k-1 inclusive\n    for i in range(k):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array upto k-1\n    for i in range(k-1, len(input)-1, -1):\n        temp = input[i]\n        input[i] = input[len(input)-1]\n        input[len(input)-1] = temp\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the first k elements\n    input[:k] = input[:k][::-1]\n    # reverse the rest of the elements\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-i-1] = input[len(input)-i-1], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the remaining elements of the array\n    for i in range(k, n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    # Reverse the last k elements of the array\n    for i in range(n-k):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from the beginning to the k-th index\n    input[0:k] = input[0:k][::-1]\n    # Reverse the array from the k-th index to the end\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes an array and a position k as input and returns the reversed array upto the given position.\n    '''\n    if k < 0 or k > len(input):\n        return \"Invalid input: Position k is out of range.\"\n    else:\n        left, right = 0, k-1\n        temp = []\n        while left < right:\n            temp.append(input[left])\n            temp.append(input[right])\n            left += 1\n            right -= 1\n        temp.append(input[k])\n        input[:k] = temp\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k, n):\n        input[i], input[i-1] = input[i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array and a position k as input and reverses the array upto the position k.\n    '''\n    for i in range(k-1, len(input)-1, -1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # initialize an empty list to store the reversed array\n    reversed_array = []\n\n    # iterate through the input array\n    for i in range(len(input)):\n        # if the current index is less than k, add the element to the reversed array\n        if i < k:\n            reversed_array.append(input[i])\n        # if the current index is greater than or equal to k, add the element to the input array\n        else:\n            input[i] = input[i-k]\n            input[i-k] = input[i]\n\n    return reversed_array"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup) # Convert the tuple to list to make it mutable\n    for key, value in test_dict.items():\n        test_tup.append(value)\n    return tuple(test_tup)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return tuple(test_tup) + tuple(test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_tup)\n    \n    # Update the dictionary with the values from the second tuple\n    for key, value in test_dict.items():\n        if key in test_dict:\n            test_dict[key] = value\n    \n    # Convert the dictionary back to a tuple\n    test_tup = tuple(test_dict.items())\n    \n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tuple = (test_tup[0], **test_dict)\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary and add the key-value pairs from the input dictionary to the new dictionary\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    # add the new dictionary to the input tuple and return the result\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs from the input dictionary\n    new_dict = {key: value for key, value in test_dict.items()}\n    # add the new dictionary to the input tuple\n    new_tup = (test_tup, new_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Use dictionary comprehension to add the dictionary to the tuple\n    new_tup = tuple([test_tup[i] if i in test_dict else test_dict[i] for i in range(len(test_tup))])\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Combine the two dictionaries into a single dictionary\n    new_dict = test_dict.copy()\n    for key, value in test_tup[1:]:\n        new_dict[key] = value\n    # Add the new dictionary to the tuple\n    test_tup = test_tup[:1] + (new_dict,) + test_tup[2:]\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = (test_tup[0], test_dict)\n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[i][N-1] = cost[i][N-1]\n\n    for j in range(1, N):\n        dp[0][j] = cost[0][j]\n        dp[N-1][j] = cost[N-1][j]\n\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if j == 0:\n                j_max = dp[i][j+1]\n            elif i == 0:\n                i_max = dp[i+1][j]\n            else:\n                i_max = max(dp[i+1][j], dp[i][j+1])\n                j_max = max(dp[i][j], dp[i-1][j+1])\n            if i == N-1 and j == N-1:\n                continue\n            avg = (dp[i][j] - j_max) + (dp[i][j] - i_max)\n            max_avg = max(avg, max_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + cost[i][j]\n\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == N-1:\n                curr_avg = dp[i][j] / (N*N)\n                max_avg = max(max_avg, curr_avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the number of rows and columns in the matrix\n    N = len(cost)\n\n    # Create a dictionary to store the maximum average and the path\n    max_avg = float('-inf')\n    max_path = None\n\n    # Iterate through all possible paths starting from the top-left cell\n    for i in range(N):\n        for j in range(N):\n            # Check if this cell is in the bottom-right corner of the matrix\n            if i == N-1 and j == N-1:\n                # Check if the current path is the longest so far\n                if max_path is None or len(max_path) < N:\n                    max_path = [0]*N\n                # Compute the average and add it to the dictionary if it's greater than the current maximum\n                avg = sum(cost[i][j:N]) + sum(cost[j:N][i])\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = [0]*N\n                    max_path[i] = 1\n                    max_path[j] = 1\n                elif avg == max_avg:\n                    # If two paths have the same average, add the path with the fewest cells\n                    if len(max_path) > 1:\n                        if len(max_path) - sum(max_path) > N - len(max_path):\n                            max_path[i] = 1\n                            max_path[j] = 1\n                    else:\n                        max_path[i] = 1\n                        max_path[j] = 1\n            else:\n                # If this cell is not in the bottom-right corner of the matrix, move to the next cell\n                if cost[i][j] > cost[i+1][j] and cost[i][j] > cost[i][j+1]:\n                    # Move down\n                    max_path[i] = 1\n                    max_path[j] = 0\n                else:\n                    # Move right\n                    max_path[i] = 0\n                    max_path[j] = 1"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize a dictionary to store the maximum averages of all existing paths\n    max_avg = {}\n\n    # Initialize a helper function to compute the average of a path\n    def compute_avg(path):\n        if len(path) == 1:\n            return cost[path[0][0]][path[0][1]]\n        else:\n            return (cost[path[0][0]][path[0][1]] + compute_avg(path[1:])) / 2\n\n    # Initialize a helper function to check if a path is valid\n    def is_valid_path(path):\n        if len(path) == 1:\n            return True\n        if path[0][0] == len(cost) - 1 and path[0][1] == len(cost[0]) - 1:\n            return True\n        return path[0][0] < len(cost) and path[0][1] < len(cost[0]) and (path[0][0]!= path[1][0] or path[0][1]!= path[1][1])\n\n    # Loop through all possible paths and compute their maximum average\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == len(cost) - 1 and j == len(cost[0]) - 1:\n                max_avg[(i, j)] = cost[i][j]\n            else:\n                if (i, j) not in max_avg or compute_avg([(i, j)]) > max_avg[(i, j)]:\n                    max_avg[(i, j)] = compute_avg([(i, j)])\n\n    # Find the path with the maximum average\n    max_avg_path = [(k, v) for k, v in max_avg.items() if v == max(max_avg.values())]\n\n    return max_avg_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    paths = [[0] * N for _ in range(N)]\n\n    def dfs(i, j, path):\n        if i == N-1 and j == N-1:\n            paths[i][j] = sum(cost[i][j]) / len(path)\n            return paths[i][j]\n        elif i == N-1 or j == N-1:\n            return float('-inf')\n        else:\n            for k in range(1, 4):\n                if i+k < N and j+k < N:\n                    new_path = path + [i+k, j+k]\n                    paths[i][j] = max(paths[i][j], paths[i+k][j+k], paths[i][j+k], paths[i+k][j]) + cost[i+k][j+k]\n                    dfs(i+k, j+k, new_path)\n\n    return dfs(0, 0, [])"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    \"\"\"\n    # Initialize the maximum average and the total cost\n    max_avg = 0\n    total_cost = 0\n\n    # Define the boundaries of the grid\n    n = len(cost)\n\n    # Iterate over all possible paths\n    for i in range(n):\n        for j in range(n):\n            # Check if this cell is the bottom right corner\n            if i == n-1 and j == n-1:\n                # If it is, update the maximum average and total cost\n                max_avg = max(max_avg, total_cost/((n-1)**2))\n                break\n\n            # Define the possible directions\n            directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n            # Iterate over all possible directions\n            for dx, dy in directions:\n                # Calculate the new position\n                new_i, new_j = i + dx, j + dy\n\n                # Check if the new position is within the bounds of the grid\n                if 0 <= new_i < n and 0 <= new_j < n:\n                    # If it is, add the cost of the new position to the total cost\n                    total_cost += cost[new_i][new_j]\n\n                    # Recursively call the function with the new position and update the maximum average\n                    max_avg = max(max_avg, maxAverageOfPath(cost)[0])\n\n    return (max_avg, total_cost/((n-1)**2))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i-1][j] > cost[i][j-1]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n            else:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n            max_avg = max(max_avg, dp[i][j])\n    return max_avg / N**2"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Define the matrix dimensions\n    N = len(cost)\n\n    # Initialize the variables for the maximum average and the current average\n    max_avg = float('-inf')\n    curr_avg = 0\n\n    # Initialize the current position in the matrix (top-left)\n    pos = (0, 0)\n\n    # Initialize a boolean flag to keep track of whether the current position is valid (i.e., within the matrix bounds)\n    valid_pos = True\n\n    # Initialize a list to store the visited cells\n    visited = [(0, 0)]\n\n    # Loop until the current position is no longer valid\n    while valid_pos:\n        # Calculate the cost of the current position\n        curr_cost = cost[pos[0]][pos[1]]\n\n        # Update the current average\n        curr_avg += curr_cost\n\n        # If the current position is the bottom right cell, update the maximum average\n        if pos[0] == N - 1 and pos[1] == N - 1:\n            max_avg = max(max_avg, curr_avg)\n\n        # Move to the next position based on the current cost\n        if curr_cost == 0:\n            # Move right\n            if pos[1] < N - 1:\n                pos = (pos[0], pos[1] + 1)\n            else:\n                # We cannot move right, so we can only move down\n                pos = (pos[0] + 1, 0)\n        else:\n            # Move down\n            if pos[0] < N - 1:\n                pos = (pos[0] + 1, pos[1])\n            else:\n                # We cannot move down, so we can only move right\n                pos = (0, pos[1] + 1)\n\n        # Add the current position to the visited cells list\n        visited.append(pos)\n\n        # Check if the current position is still within the matrix bounds\n        if pos[0] < 0 or pos[1] < 0 or pos[0] >= N or pos[1] >= N:\n            valid_pos = False\n\n    # Return the maximum average\n    return max_avg / len(visited)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[0 for j in range(N)] for i in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                visited[i][j] = 1\n                continue\n            if i > 0:\n                visited[i][j] += visited[i-1][j]\n            if j > 0:\n                visited[i][j] += visited[i][j-1]\n            if i > 0 and j > 0:\n                visited[i][j] += visited[i-1][j-1]\n            max_avg = max(max_avg, visited[i][j]/4)\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height > h and weight > w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[student] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            result[name] = data\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    filtered_students = {}\n\n    for name, data in students.items():\n        height, weight = data\n\n        if height > h and weight > w:\n            filtered_students[name] = data\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, student in students.items():\n        height, weight = student\n        if height > h and weight > w:\n            filtered_students[name] = student\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. \n    Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i] and nums1[i]!= nums1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    # Initialize an empty dictionary to store the counts of numbers\n    counts = {}\n\n    # Iterate over each number in the first list and count its occurrences\n    for num1 in nums1:\n        counts[num1] = counts.get(num1, 0) + 1\n\n    # Initialize an empty list to store the indices of pairs with the same values\n    pairs = []\n\n    # Iterate over each number in the second list and count its occurrences\n    for num2 in nums2:\n        # Check if the number is in the dictionary and if its count is equal to 1\n        if num2 in counts and counts[num2] == 1:\n            # Add the indices of the numbers to the pairs list\n            pairs.append((nums1.index(num2), nums2.index(num2)))\n\n    # Return the count of pairs\n    return len(pairs)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists must have the same length\"\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[i]), eq(nums1[i], nums2[i])):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert the base to a string\n    base_str = str(base)\n    # initialize the sum variable\n    total = 0\n    # loop through each digit in the base string\n    for digit in base_str:\n        # convert the digit to an integer\n        digit_int = int(digit)\n        # add the digit to the total\n        total += digit_int**power\n    # return the total sum\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n\n    # loop through each digit of the base\n    for digit in str(base):\n        # convert the current digit to an integer\n        digit_int = int(digit)\n\n        # calculate the current power of the digit\n        current_power = 1\n        for i in range(1, power+1):\n            current_power *= digit_int\n\n        # add the current power of the digit to the total sum\n        total_sum += current_power\n\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum variable\n    sum_digits = 0\n    \n    # Loop through each digit of the base and add it to the sum variable\n    for digit in base_str:\n        sum_digits += int(digit)\n        \n    # Calculate the power of the sum and return the result\n    return sum_digits**power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    base_str = str(base)\n    for i in range(power):\n        total += int(base_str[-1])\n        base_str = base_str[:-1]\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit**power\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable\n    sum = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the sum of the digit raised to the power\n        sum += digit_int ** power\n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += base % 10\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit ** power\n        base //= 10\n        power -= 1\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to zero\n    sum = 0\n    \n    # Iterate over each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        \n        # Calculate the power of the digit to the power of the power\n        power_digit = digit_int ** power\n        \n        # Add the power of the digit to the sum\n        sum += power_digit\n    \n    # Return the sum of all digits raised to the power of the power\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # use regular expressions to find the values between quotation marks \" \"\n    pattern = r'\"[^\"]*\"'\n    result = re.findall(pattern, text1)\n    # return the values between quotation marks\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n\n    Input:\n    text1: A string containing values to extract.\n\n    Output:\n    A list of extracted values.\n\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    if len(matches) > 0:\n        return matches[0]\n    else:\n        return \"No quotation found\"\n"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    This function extracts values between quotation marks \" \" of the given string.\n    \"\"\"\n    # Regular expression to match double or single quotes\n    pattern = r'\"(.*?)\"|\\'(.*?)\\''\n    # Find all matches with the pattern\n    matches = re.findall(pattern, text)\n    # Extract the quotation marks\n    quotation_marks = [match[0] if match[0] is not None else match[1] for match in matches]\n    # Join the quotation marks with spaces\n    extracted_text =''.join(quotation_marks)\n    return extracted_text"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # using regex to extract values between quotation marks\n    pattern = r'\"([^\"]*)\"'\n    match = re.search(pattern, text1)\n    if match:\n        return match.group(1)\n    else:\n        return \"No quotation found\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and extracts values between quotation marks \" \" of the string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")' # extract values between quotation marks\n    return re.findall(pattern, text1)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regex to find all the quotations\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    # Remove the double quotes from each match\n    quotations = [match.strip('\"') for match in matches]\n    return quotations"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expression to match quotation marks and capture the values between them\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    pattern = r'\"([^\"]*)\"'\n\n    # Search for pattern in the string\n    match = re.search(pattern, text1)\n\n    # If pattern found\n    if match:\n        # Extract the matched value and return it\n        return match.group(1)\n\n    # If pattern not found\n    else:\n        # Return None if no match found\n        return None"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i]*test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [None]*N\n    for i in range(N):\n        result[i] = test_tup[i]*test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = []\n    for i in range(len(test_tup)-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    result_tup = []\n    for i in range(len(t_list)-1):\n        result_tup.append(t_list[i]*t_list[i+1])\n    result_tup.append(t_list[-1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N+1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = tuple([t_i * test_tup[i+1] for i in range(N)])\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = [0]*N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns the sum of their elements.\n    '''\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n] and [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists as input and returns their sum.\n    '''\n    return lst1 + lst2"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result\n\nlst1 = [1, 2, 3]\nlst2 = [4, 5, 6]\nprint(sum_list(lst1, lst2))"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == len(group) - 1:\n            group.pop()\n\n    return list(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Convert the list to a set to remove duplicates\n    nums = set(nums)\n    # Group the set by consecutive duplicates\n    consecutive_duplicates = set(i for i, x in groupby(nums) if len(list(x)) > 1)\n    # Convert the set back to a list and return it\n    return list(consecutive_duplicates)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Convert the list to a set to get only unique elements\n    unique_nums = set(nums)\n    # Split the set into two lists - one containing unique elements and the other containing duplicates\n    unique_list, duplicate_list = [], []\n    for num in unique_nums:\n        if num == nums.index(num):\n            unique_list.append(num)\n        else:\n            duplicate_list.append(num)\n    # Remove consecutive duplicates from the duplicate list\n    for i in range(len(duplicate_list)):\n        if i == 0 or duplicate_list[i]!= duplicate_list[i-1] + 1:\n            duplicate_list[i] = duplicate_list[i]\n    # Combine the unique list and the duplicate list into a single list and return it\n    return unique_list + duplicate_list"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    nums = sorted(set(nums)) # remove duplicates\n    for k, g in groupby(nums):\n        if k > 0:\n            yield from g\n        else:\n            yield from nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n        else:\n            if len(seen) > 1:\n                result.append(num)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n\n    seen = set()\n    result = []\n    for num in nums:\n        if num in seen:\n            continue\n        else:\n            seen.add(num)\n            result.append(num)\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of numbers.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using formula (2)\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = (math.pi/4) * r * r * h  # Using the formula for the lateral surface area of a cone\n    return s"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula A = \u03c0r^2\n    area = math.pi * (r ** 2)\n    # Calculate the lateral surface area of the base using the formula A_base = \u03c0rh\n    area_base = math.pi * r * h\n    # Calculate the lateral surface area of the top using the formula A_top = \u03c0rh\n    area_top = math.pi * r * h\n    # Add up the lateral surface areas and return the result\n    return area + area_base + area_top"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = math.pi*(r**2)+(2*math.pi*r*h)\n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*(h/3)"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    lateral_surface = pi * r**2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    LSA = math.pi*r**2*(h/3)\n    return LSA"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # finding the area of the base\n    base_area = math.pi * (r ** 2)\n    \n    # finding the surface area of the cone\n    cone_surface_area = 2 * math.pi * r * h\n    \n    # finding the lateral surface area\n    lateral_surface_area = cone_surface_area - base_area\n    \n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # calculate the half-angle\n    theta = math.asin(r/h)\n    \n    # calculate the lateral surface area\n    lateral_surface_area = 2*r*math.tan(theta)\n    \n    # return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define regular expression pattern to replace spaces with colon\n    pattern = re.compile(r'\\s+')\n    # replace spaces with colon in text\n    text = pattern.sub(':', text)\n    # define regular expression pattern to replace commas with colon\n    pattern = re.compile(r',+')\n    # replace commas with colon in text\n    text = pattern.sub(':', text)\n    # define regular expression pattern to replace dots with colon\n    pattern = re.compile(r'\\.\\.')\n    # replace dots with colon in text\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    special_chars = [\",\", \".\", \" \"]\n    special_chars_re = re.compile(f\"[{''.join(special_chars)}]\")\n    text = special_chars_re.sub(\":\", text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'\\s|,|\\.'\n    # Use the re.sub() method to replace all matches with a colon\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'\\s|,|\\.')\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n\n    # define regular expression pattern to find occurrences of spaces, commas, or dots\n    pattern = re.compile(r'[\\s,\\.]')\n\n    # replace all occurrences of spaces, commas, or dots with a colon\n    result = pattern.sub(':', text)\n\n    # return the modified string\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[,\\. ]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s+|,|\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'([.,;:!?()])', r':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[^\\w\\s\\d\\:]'\n    text = re.sub(pattern, '', text)\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = re.compile(r'[^\\w\\s]|_')\n    # Replace all occurrences of spaces, commas, or dots with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes in two arguments:\n    A: The sorted array of integers\n    x: The integer to be searched for\n    \n    It returns the index of the first occurrence of x in the array A.\n    If x is not present in A, it returns -1.\n    '''\n    \n    # Initialize left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Iterate through the array using a while loop\n    while left <= right:\n        mid = left + (right - left) // 2\n        \n        # If the mid element is equal to x, return its index\n        if A[mid] == x:\n            return mid\n        \n        # If the mid element is greater than x, \n        # it means x is in the left half of the array\n        if A[mid] > x:\n            right = mid - 1\n            \n        # If the mid element is less than x, \n        # it means x is in the right half of the array\n        else:\n            left = mid + 1\n            \n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1  # x not found in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Returns the index of the first occurrence of a given number in a sorted array, or -1 if the number is not found.\n    \"\"\"\n    # check if the array is sorted in ascending order\n    if A[0] > A[-1]:\n        return -1\n\n    # use binary search to find the first occurrence of x\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # x was not found in the array\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A):\n        return -1\n    else:\n        j = i\n        while j < len(A) and A[j] == x:\n            j += 1\n        return j - 1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Returns the index of the first occurrence of a given number x in a sorted array A.\n    If x is not found in A, returns -1.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # Find the first occurrence of x in the array using binary search\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the element at the middle index is equal to x, return the index\n        if A[mid] == x:\n            return mid\n        \n        # If the element at the middle index is greater than x, update the right pointer\n        elif A[mid] < x:\n            left = mid + 1\n        \n        # If the element at the middle index is smaller than x, update the left pointer\n        else:\n            right = mid - 1\n    \n    # If the element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes in two arguments:\n    A: A sorted list of integers\n    x: An integer we want to find the first occurrence of\n    \n    This function returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    \"\"\"\n    \n    # Initialize a counter to keep track of the number of occurrences of x in A\n    count = 0\n    \n    # Loop through the list A and count the number of occurrences of x\n    for i in range(len(A)):\n        if A[i] == x:\n            count += 1\n            \n    # If count is 0, then x is not in A\n    if count == 0:\n        return -1\n    \n    # Loop through the list A again and find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n            \n    # If we reach this point, it means we never found the first occurrence of x in A\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    result = []\n    \n    # Create a 2D table to store the products of each sublist\n    # in each row, the first element corresponds to the product of the first element of the sublist and the second element corresponds to the product of the second element of the sublist and so on.\n    table = [[0 for j in range(2*n+1)] for i in range(2*n+1)]\n    \n    # Calculate the products of sublists of different lengths\n    for i in range(1, 2*n+1):\n        table[i][0] = 1\n        table[i][1] = arr[0]\n        for j in range(2, i):\n            table[i][j] = arr[j-1]*table[i-1][j-1]+arr[j-2]*table[i-1][j]\n    \n    # Find the sum of products of sublists of different lengths\n    for i in range(1, 2*n+1):\n        for j in range(i-1, -1, -1):\n            if j == 0:\n                result.append(table[i][j])\n            elif j == i-1:\n                result.append(table[i][j]*arr[j])\n            else:\n                result.append(table[i][j]*arr[j]+table[i][j-1]*arr[j-1])\n    \n    # Print the result\n    print(result)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the list.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of products of all possible sublists of the given list.\n    \"\"\"\n    n = len(arr)\n    total_product = 1\n    result = 0\n    for i in range(1, n):\n        total_product *= arr[i]\n        if i >= 2:\n            result += (total_product // arr[i - 1]) * (arr[i - 1] - 1)\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    max_sum = 0\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += arr[i]\n        max_sum = max(max_sum, subarray_sum)\n        for j in range(i + 1, n):\n            subarray_sum -= arr[j - 1]\n            subarray_sum += arr[j]\n            max_sum = max(max_sum, subarray_sum)\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    # Initialize prefix sum array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = arr[0]\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Initialize the sum of products and the product of the whole array\n    sum_of_products = 0\n    product_of_array = 1\n\n    for i in range(n):\n        # Calculate the sum of products of the current subarray\n        subarray_sum = prefix_sum[i + 1] - prefix_sum[i]\n        sum_of_products += subarray_sum * product_of_array\n\n        # Calculate the product of the current subarray\n        subarray_product = 1\n        for j in range(i, n):\n            subarray_product *= arr[j]\n        product_of_array *= subarray_product\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize variables\n    n = len(arr)\n    prod = 1\n    dp = [1] * n\n\n    # Calculate the product of all elements\n    for i in range(n):\n        prod *= arr[i]\n\n    # Calculate the sum of products of subarrays of length 1 to n\n    for i in range(1, n + 1):\n        dp[i - 1] = prod // i\n\n    # Calculate the sum of products of subarrays of length i to n\n    for i in range(n - 1, -1, -1):\n        dp[i] = (dp[i] + dp[i + 1]) * arr[i]\n\n    # Calculate the sum of products of subarrays of length i to n\n    sum_prod = 0\n    for i in range(n):\n        sum_prod += dp[i]\n\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    prod = 1\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i < j:\n                dp[i][j] = arr[i-1] * dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n                \n    sum_of_prod = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j < n:\n                sum_of_prod += dp[i][j] * dp[i][j+1] * dp[i][j+2] * dp[i][j+3] * arr[j-1] * arr[j] * arr[j+1] * arr[j+2] * arr[j+3]\n                \n    return sum_of_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_sum = arr[0]\n    min_sum = arr[0]\n    temp_sum = arr[0]\n\n    for i in range(1, n):\n        temp_sum += arr[i]\n        max_sum = max(max_sum, temp_sum)\n        min_sum = min(min_sum, temp_sum)\n\n    if max_sum == min_sum:\n        return max_sum\n\n    sub_array_sum = 0\n    for i in range(n):\n        sub_array_sum += arr[i]\n        temp_sum = sub_array_sum - min_sum\n        temp_sum -= max_sum\n        temp_sum *= arr[i]\n        subarray_prod_sum += temp_sum\n\n    return subarray_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    # Find maximum and minimum values in the list\n    max_val = max(arr)\n    min_val = min(arr)\n    \n    # Initialize variables for sum and product\n    sum_prod = 0\n    product = 1\n    \n    # Iterate through the list\n    for i in range(len(arr)):\n        \n        # Calculate the sum of products of sublists of length i\n        if i == 0:\n            sum_prod = product * arr[i]\n        elif i == len(arr) - 1:\n            sum_prod = product * arr[i]\n        else:\n            sum_prod = product * (arr[i] + arr[i-1])\n        \n        # Calculate the product of sublists of length i\n        if i == 0:\n            product = arr[i]\n        elif i == len(arr) - 1:\n            product = arr[i]\n        else:\n            product = arr[i] * product\n        \n        # Update the sum and product for the next sublist\n        sum_prod += product\n        product *= arr[i]\n        \n        # Calculate the sum of products of sublists of length i+1\n        if i == len(arr) - 2:\n            sum_prod -= product\n        else:\n            sum_prod -= product + product * arr[i+1]\n        \n        # Calculate the product of sublists of length i+1\n        product *= arr[i+1]\n        \n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. \n    https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    # base case for first element\n    dp[0][1] = arr[0]\n    # recursive case\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if j <= i:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1] * arr[i-1]\n    # for i in range(n+1):\n    #     print(dp[i])\n    # find sum of products of all possible sublists\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            sum += dp[j][n]\n    return sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 10**9 + 7\n    \n    # To store the products of subarrays\n    prod_subarray = [0] * (n + 1)\n    \n    # Initialize the first subarray\n    prod_subarray[1] = 1\n    \n    # Fill the rest of the subarrays\n    for i in range(2, n + 1):\n        prod_subarray[i] = (prod_subarray[i - 1] * arr[i - 1]) % mod\n    \n    # To store the sum of products of subarrays\n    sum_prod_subarray = 0\n    \n    # Calculate the sum of products of subarrays\n    for i in range(n):\n        # Calculate the product of the subarray ending at i\n        product_ending_at_i = (prod_subarray[n] * prod_subarray[i + 1]) % mod\n        \n        # Calculate the subarray starting from i and ending at j\n        j = i\n        while j < n:\n            sum_prod_subarray += product_ending_at_i\n            j += 1\n        \n        # Update the product of the subarray ending at i\n        prod_subarray[i + 1] = (prod_subarray[i + 1] * arr[i]) % mod\n    \n    return sum_prod_subarray"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    count = 0\n    for i in range(len(bin(n)[2:])):\n        count += 1\n        if count == 4:\n            n = n ^ (1 << i)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the number\n    length = len(bin(n)[2:])\n\n    # Initialize the first and last bits to 1\n    first_bit = (1 << (length - 2))\n    last_bit = 1 << (length - 1)\n\n    # Initialize the middle bits to 0\n    middle_bits = 0\n\n    # Find the first and last bits to exclude\n    first_exclude = n & first_bit\n    last_exclude = n & last_bit\n\n    # Calculate the middle bits to toggle\n    middle_bits = ~(first_exclude & last_exclude)\n\n    # Toggle the middle bits\n    n = n ^ middle_bits\n\n    # Set the first and last bits to their original values\n    n = n | first_exclude\n    n = n | last_exclude\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n_new = n & ~(1 << 31) # set the first bit to 0 and the last bit to 0\n    n_new |= (1 << 31) & ~(1 << 0) # set the first bit to 1 and the last bit to 0\n    return n_new"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    mask = ((1 << (n & 1)) - 1) ^ ((1 << (n & ~1)) - 1)\n    return (n ^ mask) & ~mask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    first_bit = n & 1  # get the first bit\n    last_bit = n >> 31  # get the last bit\n\n    n = n ^ (first_bit ^ last_bit)  # toggle the middle bits\n\n    n = n ^ first_bit  # toggle the first bit\n\n    n = n ^ last_bit  # toggle the last bit\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    # Get the binary representation of the input number\n    bin_num = bin(n)[2:]\n    # Check if the number of bits in the binary representation is odd or even\n    if len(bin_num) % 2 == 1:\n        # Toggle the middle bit\n        mid_bit = int(bin_num[len(bin_num)//2])\n        bin_num = bin_num[:len(bin_num)//2] + str(mid_bit ^ 1) + bin_num[len(bin_num)//2+1:]\n    else:\n        # Toggle the middle two bits\n        mid_bits = bin_num[len(bin_num)//2:len(bin_num)//2+2]\n        mid_bit = int(mid_bits[0] + mid_bits[1])\n        bin_num = bin_num[:len(bin_num)//2] + str(mid_bit ^ 1) + bin_num[len(bin_num)//2+2:]\n    # Convert the binary representation back to an integer\n    return int(bin_num, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # get the number of bits in the number\n    bits = len(bin(n)[2:])\n    \n    # loop through the number of bits\n    for i in range(1, bits-1):\n        # set the middle bit to the opposite of its current value\n        if (n & (1 << i))!= (n & (1 << (i+1))):\n            n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Toggle the first and the last bit\n    n = n ^ ((n ^ (n >> 1)) & ((n ^ (n >> 1)) >> 1))\n\n    # Toggle the middle bits\n    n = n ^ ((n ^ (n >> 2)) & ((n ^ (n >> 2)) >> 1))\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits\n    num_bits = len(bin(n)[2:])\n    # set the middle bit to 1\n    n |= (1 << num_bits)\n    # set the middle bit to 0\n    n &= ~(1 << num_bits)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # take the 1st and the 4th bit as middle bits\n    middle_bits = n & (1 << 1) | n & (1 << 3)\n\n    # toggle bits of n except first and last bits\n    n = (n ^ middle_bits) & ((1 << 1) - 1) | ((n ^ middle_bits) & (1 << 2) - 1)\n\n    # return the updated value of n\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    \"\"\"\n    # Use the bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # If the value is greater than all the elements in the array, return len(a)\n    if index == len(a):\n        return index\n    # If the value is smaller than all the elements in the array, return 0\n    elif index == 0:\n        return 0\n    # If the value is between two elements in the array, return the index of the left element\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Find the insertion point using bisect\n    index = bisect.bisect_left(a, x)\n\n    # Check if the value is already present\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # If the value is not present, insert it at the leftmost index\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a) or a[i]!= x:\n        i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    # Use binary search to find the index where x belongs to\n    index = bisect.bisect_left(a, x)\n    # If the value is already present, return the index\n    if index!= len(a) and a[index] == x:\n        return index\n    # Otherwise, insert x at the index found by binary search\n    a.insert(index, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Using bisect.bisect_left to find the left insertion point of x in the sorted list a.\n    left_index = bisect.bisect_left(a, x)\n    if left_index == len(a) or a[left_index]!= x:\n        # If x is not in the sorted list a or x is not equal to the value at the left_index,\n        # then return the index of the right insertion point.\n        return left_index\n    else:\n        # If x is equal to the value at the left_index, then return the left_index.\n        return left_index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use binary search to find the leftmost element that is greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If x is less than or equal to the leftmost element, return index\n    if index == 0 or a[index - 1] < x:\n        return index\n    # If x is greater than the leftmost element, return index - 1\n    return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string): \n        return True\n    else: \n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. \n    '''\n    # base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # recursive case: return n * (1 + geometric_sum(n-1))\n    else:\n        return n * (1 + geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/n) * (n - 1) + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * (1/n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    This function finds the index of the smallest triangular number with n digits. \n    It uses the formula given in the problem statement to find the smallest triangular number with n digits. \n    '''\n    \n    # Initialize variables \n    smallest = 0\n    triangular = 0\n    \n    # Calculate the smallest triangular number with n digits \n    while True:\n        triangular = int(math.log10(smallest) + math.log10(n)) + 1\n        triangular = triangular * triangular\n        triangular = triangular + smallest\n        \n        if triangular > 10**n:\n            break\n            \n        smallest = triangular\n    \n    # Find the index of the smallest triangular number with n digits \n    triangular = 0\n    index = 0\n    while True:\n        triangular = triangular + 1\n        index = int(math.log10(triangular) + math.log10(n))\n        \n        if triangular > 10**n:\n            break\n            \n        if int(triangular**index) == n:\n            return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to check if a number is a triangular number\n    def is_triangular(num):\n        if num < 0:\n            return False\n        for i in range(int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Function to find the index of smallest triangular number with n digits\n    def smallest_triangular_index(n):\n        # Calculate the maximum number of digits needed to represent n\n        max_digits = int(math.log10(n))+1\n        \n        # Iterate through all possible values of n\n        for i in range(1,n+1):\n            # Check if the number is a triangular number\n            if is_triangular(i):\n                # Find the index of the smallest triangular number with n digits\n                triangular_num = i\n                for j in range(1,max_digits):\n                    triangular_num *= 10\n                index = 0\n                while triangular_num < n:\n                    triangular_num *= 10\n                    index += 1\n                return index\n        return -1\n    \n    return smallest_triangular_index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Initializing the smallest number\n    smallest = 0\n    # Looping through all the possible digits\n    for i in range(1, n+1):\n        # Generating all the triangular numbers with n digits\n        triangular = 10**(i-1)\n        # Checking if the triangular number is smaller than smallest\n        if triangular < smallest:\n            smallest = triangular\n            # Finding the index of the smallest triangular number\n            index = (i-1)*(i-1)\n            # Returning the index\n            return index\n    # If all the possible triangular numbers with n digits have been generated, return -1 as there is no such number.\n    return -1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize the smallest triangular number with n digits to 1\n    smallest_triangular = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(2, n+1):\n        # Calculate the next triangular number using the formula for the nth triangular number\n        next_triangular = i * (i+1) // 2\n        \n        # If the next triangular number is smaller than the current smallest triangular number, update the smallest triangular number\n        if next_triangular < smallest_triangular:\n            smallest_triangular = next_triangular\n    \n    # Return the index of the smallest triangular number with n digits\n    return math.floor(math.log10(smallest_triangular) + 1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    def is_valid_triangle(n):\n        '''\n        A valid triangle must have n digits and all the digits must be distinct.\n        '''\n        return n == len(str(n))\n\n    def next_prime(num):\n        '''\n        Returns the next prime number after num.\n        '''\n        for i in range(num, 10**n):\n            if is_prime(i):\n                return i\n\n    def is_prime(num):\n        '''\n        Returns True if num is a prime number, False otherwise.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_valid_triangle_with_n_digits(n):\n        '''\n        Checks if the given number is a valid triangular number with n digits.\n        '''\n        for i in range(1, n+1):\n            triangular_num = i*(i+1)\n            if not is_prime(triangular_num):\n                return False\n        return True\n\n    def smallest_valid_triangle_with_n_digits(n):\n        '''\n        Returns the index of the smallest triangular number with n digits that is a valid triangle.\n        '''\n        for i in range(n, 1, -1):\n            if is_valid_triangle_with_n_digits(i):\n                return i\n        return None\n\n    index = smallest_valid_triangle_with_n_digits(n)\n    if index is not None:\n        return index\n    else:\n        print(\"No valid triangular number found with n digits:\", n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Initialize variables\n    max_triangular_num = 10**(n-1) # maximum triangular number with n-1 digits\n    min_triangular_num = max_triangular_num + 1 # minimum triangular number with n-1 digits\n    triangular_nums = [0]*(max_triangular_num - min_triangular_num + 1)\n    triangular_nums[0] = 1 # 0^0 = 1\n    triangular_nums[1] = 1 # 1^1 = 1\n    \n    for i in range(2, len(triangular_nums)):\n        triangular_nums[i] = triangular_nums[i-1] + triangular_nums[i-2]\n    \n    # Find the smallest triangular number with n digits\n    triangular_num = min_triangular_num\n    for i in range(n-1):\n        triangular_num *= 10\n    \n    return triangular_nums.index(triangular_num)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n    # Initialize index and smallest triangular number\n    index = 0\n    triangular_number = math.comb(n, index)\n    \n    # Check for smallest triangular number with n digits\n    while triangular_number < (10**n):\n        # Increment index and update smallest triangular number\n        index += 1\n        triangular_number = math.comb(n, index)\n        \n    # Return the index of the smallest triangular number with n digits\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize two variables\n    triangular = 1\n    index = 1\n\n    # Find the smallest triangular number with n digits\n    while index < n:\n        triangular = triangular + index\n        index += 1\n\n    # Find the index of the smallest triangular number\n    index = math.floor(math.log10(triangular))\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Define a function to check if a number is triangular or not\n    def is_triangular(num):\n        for i in range(int(math.sqrt(num))+1):\n            if num % (i+1) == 0:\n                return False\n        return True\n\n    # Define a function to find the index of smallest triangular number with n digits\n    def index_of_smallest_triangular(n):\n        index = 0\n        while not is_triangular(index**n):\n            index += 1\n        return index - 1\n\n    # Call the function to find the index of smallest triangular number with n digits\n    return index_of_smallest_triangular(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. \n    \"\"\"\n\n    def is_prime(num): \n        \"\"\"\n        This function checks if a given number is prime or not.\n        \"\"\"\n        if num < 2: \n            return False\n        for i in range(2, int(math.sqrt(num)) + 1): \n            if num % i == 0: \n                return False\n        return True\n\n    def find_smallest_prime_power(n):\n        \"\"\"\n        This function finds the smallest prime power of a given number.\n        \"\"\"\n        for i in range(2, n + 1):\n            if is_prime(i):\n                return i\n        return -1\n\n    def find_smallest_triangular_prime_power(n):\n        \"\"\"\n        This function finds the smallest triangular prime power of a given number.\n        \"\"\"\n        smallest_prime_power = find_smallest_prime_power(n)\n        smallest_triangular_prime_power = smallest_prime_power * smallest_prime_power\n        return smallest_triangular_prime_power\n\n    def find_smallest_triangular_number_with_n_digits(n):\n        \"\"\"\n        This function finds the smallest triangular number with n digits.\n        \"\"\"\n        smallest_triangular_prime_power = find_smallest_triangular_prime_power(n)\n        return smallest_triangular_prime_power // (smallest_triangular_prime_power % 10)\n\n    return find_smallest_triangular_number_with_n_digits(n)"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Initialize an empty dictionary\n    result = {}\n    \n    # Loop through the tuple and add each adjacent pair of elements to the dictionary\n    for i in range(0, len(test_tup)-1, 2):\n        result[test_tup[i]] = test_tup[i+1]\n        \n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i + 1]\n            dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dict_obj = {}\n    count = 0\n    for i in range(len(test_tup)):\n        dict_obj[count] = test_tup[i]\n        count += 1\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create an empty dictionary\n    result_dict = {}\n    \n    # Loop through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"Error: The length of the tuple should be even.\")\n        return None\n    else:\n        return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    dict_obj = {}\n    # loop through the tuple elements\n    for i in range(0, len(test_tup)-1, 2):\n        # add the key-value pair to the dictionary\n        dict_obj[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return dict_obj\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a list\n    tup_list = list(test_tup)\n\n    # Create an empty dictionary\n    dict_data = {}\n\n    # Traverse the list and add adjacent pairs to the dictionary\n    for i in range(0, len(tup_list), 2):\n        dict_data[tup_list[i]] = tup_list[i+1]\n\n    return dict_data"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # Create an empty dictionary\n    dictionary = {}\n    # Iterate over the tuple using zip function\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        dictionary[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    d = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if we are not at the last index\n        if i!= len(test_tup) - 1:\n            # add the current element and the next element to the dictionary\n            d[test_tup[i]] = test_tup[i+1]\n        # if we are at the last index\n        else:\n            # add the current element to the dictionary\n            d[test_tup[i]] = None\n    # return the dictionary\n    return d"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return s[0] == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    else:\n        return s[0] == s[1] and all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    count = 0\n    for char in s:\n        if count == 0:\n            first_char = char\n        else:\n            if char!= first_char:\n                return False\n        count += 1\n    return True if count == 0 else False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, and False otherwise.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n\n    :param s: the string to check\n    :return: True if all the characters are same, False otherwise.\n    \"\"\"\n\n    # convert the string to lowercase\n    s = s.lower()\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through the rest of the string and check if all the characters are the same\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n\n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and checks whether all the characters in the string are the same or not.\n    '''\n\n    # Checking if the string is empty or not\n    if len(s) == 0:\n        return True\n\n    # Checking if the length of the string is 1\n    if len(s) == 1:\n        return True\n\n    # Iterating over the string and comparing the characters\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    # If all the characters are the same, then the function returns True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6)*side*(side+1)*(side+2)*(side+3)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    return (1/6) * side ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3)/4 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate half of the longest side\n    half_long = side / 2\n    \n    # calculate semi-perimeter\n    semi_perimeter = half_long * (1 + math.sqrt(5)) / 2\n    \n    # calculate area using Heron's formula\n    area = math.sqrt(3) * semi_perimeter\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return math.sqrt(3) / 4 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (1 / 6) * math.sqrt(s * (s - 2 * math.sqrt(s)) * (s - 2 * math.sqrt(s)) * (s - 2 * math.sqrt(s)))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (1/6) * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the area of a triangle using Heron's formula\n    s = (side**2 + side**2 + side**2 + side**2)/12\n\n    # use Pythagorean theorem to calculate the area of the tetrahedron\n    area = s * (s - side) * (s - side) * (s - side) / 2\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = 1/3 * side**2\n    area = math.sqrt(s)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    area = 1/6 * side ** 3\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    for i in range(n-m):\n        temp = list[0]\n        for j in range(1, len(list)):\n            list[j-1] = list[j]\n        list[-1] = temp\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    if m > n:\n        return list\n    # reverse the list from m to end\n    list[:m] = list[:m][::-1]\n    # reverse the list from 0 to m-1\n    list[m:n] = list[m:n][::-1]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n  # To ensure that m is less than n\n    \n    # Transpose the list\n    list = [list[i] for i in range(n)]\n    for i in range(n):\n        for j in range(i+m, n):\n            list[i], list[j] = list[j], list[i]\n    \n    # Reverse the list\n    list = list[::-1]\n    \n    # Transpose the list back\n    list = [list[i] for i in range(n)]\n    for i in range(n):\n        for j in range(i+m, n):\n            list[i], list[j] = list[j], list[i]\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Rotate a list m items to the right direction.\n\n    Args:\n        list: a list of elements.\n        m: the number of items to rotate the list.\n\n    Returns:\n        A rotated list.\n    \"\"\"\n    n = len(list)\n    # Check if rotation is possible\n    if m >= n:\n        return list\n    # Rotate the list\n    list[n - m:] = list[:n - m]\n    list[:n - m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    for i in range(n):\n        list[i] = list[(i+m) % n]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Initialize the left index to 0\n    left = 0\n    \n    # Initialize the right index to the length of the list minus 1\n    right = len(list) - 1\n    \n    # While left index is less than right index\n    while left < right:\n        # Swap the elements at the left and right indices\n        list[left], list[right] = list[right], list[left]\n        \n        # Increment the left index\n        left += 1\n        \n        # Decrement the right index\n        right -= 1\n    \n    # If the length of the list is greater than 2n\n    if len(list) > 2*m:\n        # Initialize the mid index to m\n        mid = m\n        \n        # Initialize the new left index to 2n - 1\n        new_left = 2*m - 1\n        \n        # Initialize the new right index to the length of the list minus 1\n        new_right = len(list) - 1\n        \n        # While the new left index is less than the new right index\n        while new_left < new_right:\n            # Swap the elements at the new left and new right indices\n            list[new_left], list[new_right] = list[new_right], list[new_left]\n            \n            # Increment the new left index\n            new_left += 1\n            \n            # Decrement the new right index\n            new_right -= 1\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a list to the right by n items.\n\n    Parameters\n    ----------\n    lst : list\n        A list to be rotated.\n    n : int\n        The number of items to rotate the list.\n\n    Returns\n    -------\n    list\n        A rotated list.\n    \"\"\"\n    lst.rotate(n)\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:n-m], list[n-m:n] = list[n-m:n], list[0:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If m is greater than or equal to n, then simply return the original list.\n    if m >= n:\n        return list\n    # If m is not a positive integer, return an empty list.\n    elif m <= 0:\n        return []\n    # Otherwise, perform the rotation.\n    else:\n        # Create a new list of length n-m and copy elements from the original list to it.\n        new_list = list[-m:]\n        # Copy elements from the original list to the end of the new list.\n        for i in range(n-m, n):\n            new_list.append(list[i])\n        # Return the new list.\n        return new_list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    none_found = False\n    for value in test_tup:\n        if value is None:\n            none_found = True\n            break\n    return none_found"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % y == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    is_divisible_by_digits = lambda num: all(num % digit == 0 for digit in set(str(num)))\n    return filter(is_divisible_by_digits, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    :param startnum: The starting number within the range.\n    :type startnum: int\n    :param endnum: The ending number within the range.\n    :type endnum: int\n    :return: A list of numbers within the range that are divisible by every digit it contains.\n    :rtype: list[int]\n    \"\"\"\n    def check_digit(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n\n        :param num: The number to check.\n        :type num: int\n        :return: True if the number is divisible by every digit it contains, False otherwise.\n        :rtype: bool\n        \"\"\"\n        digit_count = [0] * 10\n        while num > 0:\n            digit_count[num % 10] += 1\n            num //= 10\n        return all(digit == 0 for digit in digit_count)\n\n    numbers = range(startnum, endnum + 1)\n    divisible_numbers = list(filter(check_digit, numbers))\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits_list = list(map(int, str(startnum))) + list(map(int, str(endnum)))\n    return list(filter(lambda x: all(digit % x == 0 for digit in digits_list), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda num: all(int(digit) % i == 0 for digit in str(num)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = set(str(n) for n in range(10))\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in digits), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    return list(filter(lambda x: all(digit in str(x) for digit in digits), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments - startnum and endnum - which are the range of numbers in which we need to find\n    numbers where every number is divisible by every digit it contains.\n\n    The function uses a lambda function to check if a number is divisible by a digit. The lambda function takes a number\n    and checks if it is a string and if it contains any digit. If both conditions are true, then it checks if the number is\n    divisible by that digit.\n\n    If both conditions are true, then the lambda function returns True. If any of the conditions are false, the lambda function\n    returns False.\n\n    The function then uses a list comprehension to iterate over the range of numbers and apply the lambda function to each\n    number. The resulting list contains all the numbers that meet the criteria.\n\n    Finally, the function returns the list of numbers that meet the criteria.\n    \"\"\"\n    # Define a lambda function to check if a number is divisible by a digit\n    is_divisible_by_digit = lambda num: isinstance(str(num), str) and any(char.isdigit() for char in str(num))\n\n    # Use a list comprehension to iterate over the range of numbers and apply the lambda function to each number\n    result = [num for num in range(startnum, endnum + 1) if is_divisible_by_digit(num)]\n\n    return result"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Calculate the sector's circumference\n    circumference = 2*math.pi*r\n    # Check if the angle is valid\n    if a > 360 or a < 0:\n        return None\n    # Calculate the area of the sector\n    area = circumference*math.sin(math.radians(a)/360)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        print(\"Angle must be less than or equal to 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r * r\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.pi*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"The angle cannot be greater than 360 degrees.\")\n        return None\n    else:\n        area = math.pi * r**2 * (math.cos(math.radians(a)))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = r*r*math.pi*a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * math.sin(a/2)\n        return area\n\nradius = float(input(\"Enter the radius of the sector: \"))\nangle = float(input(\"Enter the angle of the sector in degrees: \"))\n\nresult = sector_area(radius,angle)\n\nif result is not None:\n    print(\"The area of the sector is:\", result)\nelse:\n    print(\"Invalid angle. Please enter a value less than or equal to 360 degrees.\")"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*(r**2)*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n\n    # Step 1: Initialize an empty 2D table to store the length of LCS for all possible substrings\n    table = [[0 for j in range(o+1)] for i in range(n+1)]\n\n    # Step 2: Fill the table using dynamic programming approach\n    for i in range(1, n+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Step 3: Print the LCS of the three strings\n    print(\"The longest common subsequence of\", X, \"and\", Y, \"and\", Z, \"is:\")\n    i = n\n    j = o\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    print(lcs)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n                \n    return p[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # create a 2D matrix to store the length of LCS for subsequences of X, Y and Z\n    # X[0] = ''\n    # Y[0] = ''\n    # Z[0] = ''\n    # lcs = [[0 for j in range(len(X[0])+1)] for i in range(len(X)+1)]\n    # for i in range(1, len(X)+1):\n    #     for j in range(1, len(Y)+1):\n    #         if X[i-1] == Y[j-1]:\n    #             lcs[i][j] = lcs[i-1][j-1] + 1\n    #         else:\n    #             lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n\n    # using dynamic programming to find the length of LCS\n    # n = len(X)\n    # m = len(Y)\n    # p = len(Z)\n    # dp = [[0] * (p+1) for _ in range(n+1)]\n\n    # for i in range(1, n+1):\n    #     for j in range(1, m+1):\n    #         for k in range(1, p+1):\n    #             if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n    #                 dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n    #             else:\n    #                 dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    # # backtracking to find the LCS\n    # i = n\n    # j = m\n    # k = p\n    # lcs_list = []\n    # while i > 0 and j > 0 and k > 0:\n    #     if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n    #         lcs_list.append(X[i-1])\n    #         i -= 1\n    #         j -= 1\n    #         k -= 1\n    #     elif dp[i-1][j][k] == dp[i-1][j][k-1]:\n    #         i -= 1\n    #     elif dp[i][j-1][k] == dp[i-1][j][k]:\n    #         j -= 1\n    #     else:\n    #         k -= 1\n\n    # # reverse the LCS and return\n    # lcs_list.reverse()\n    # return ''.join(lcs_list)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # Initialize the matrix of size (len(X), len(Y))\n    dp = [[0 for i in range(len(Y)+1)] for j in range(len(X)+1)] \n\n    # Fill the matrix in bottom up manner\n    for i in range(1, len(X)+1): \n        for j in range(1, len(Y)+1): \n            if X[i-1] == Y[j-1]: \n                dp[i][j] = dp[i-1][j-1] + 1\n            else: \n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n\n    # Reconstruct the longest common subsequence using the matrix\n    lcs = []\n    i = len(X) \n    j = len(Y) \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif dp[i-1][j] > dp[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # Reverse the list to get the correct order of characters\n    lcs.reverse() \n    return \"\".join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. \n    \"\"\"\n    m = len(X) # length of X\n    n = len(Y) # length of Y\n    p = len(Z) # length of Z\n\n    # create a table to store lengths of LCS of subarrays\n    L = [[0] * (p+1) for i in range(m+1)] \n\n    # fill the table in bottom up fashion\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                    break\n                elif X[i-1] == Y[j-1]:\n                    L[i][j] = L[i-1][j]\n                elif X[i-1] == Z[k-1]:\n                    L[i][j] = L[i][j-1]\n                elif Y[j-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j]\n    # backtrack to find the LCS\n    i, j, k = m, n, p\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i-1] == Y[j-1]:\n            i -= 1\n        elif X[i-1] == Z[k-1]:\n            k -= 1\n        elif Y[j-1] == Z[k-1]:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    n = len(X) \n    m = len(Y) \n    p = [[0 for j in range(m + 1)] for i in range(n + 1)] \n  \n    # Step 1 \n    for i in range(n + 1): \n        for j in range(m + 1): \n            if i == 0 or j == 0: \n                p[i][j] = 0 \n            elif X[i - 1] == Y[j - 1]: \n                p[i][j] = p[i - 1][j - 1] + 1 \n            else: \n                p[i][j] = max(p[i - 1][j], p[i][j - 1]) \n  \n    # Step 2 \n    lcs = \"\" \n    i = n \n    j = m \n  \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs = X[i - 1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i - 1][j] > p[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store the length of LCS for every i and j\n    table = [[0 for j in range(p + 1)] for i in range(m + 1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, p + 1):\n            if X[i - 1] == Y[j - 1] and X[i - 1] == Z[i + j - 2]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            elif X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j]\n            elif X[i - 1] == Z[i + j - 2]:\n                table[i][j] = table[i][j - 1]\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # print the length of LCS for every i and j\n    for i in range(m + 1):\n        for j in range(p + 1):\n            print(table[i][j], end=' ')\n\n    # return the length of LCS\n    return table[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    This function returns the length of the longest common subsequence for three given string sequences.\n    \"\"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Creating a table to store lengths of longest common suffix for all prefixes of X, Y and Z\n    L = [[[0]*(n+1) for j in range(o+1)] for i in range(m+1)]\n\n    # Following steps build L[m+1][n+1] in bottom up fashion.\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i-1][j][k-1])\n\n    # Following code is to fill up the lcs array that will contain the actual LCS\n    lcs = [[\"\" for j in range(o+1)] for i in range(m+1)]\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n            lcs[i][j] = X[i-1]\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j][k]:\n            i -= 1\n        elif L[i][j-1][k] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Returning the length of the longest common subsequence\n    return len(lcs[i][j])"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a dictionary to store the lengths of subsequences\n    dp = {}\n\n    # Initialize the base cases\n    dp[(0, 0, 0)] = 0\n\n    # Calculate the lengths of subsequences for all possible pairs\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[(i, j, k)] = dp[(i-1, j-1, k-1)] + 1\n                else:\n                    dp[(i, j, k)] = max(dp[(i-1, j, k)], dp[(i, j-1, k)], dp[(i, j, k-1)])\n\n    # Return the length of the LCS\n    return dp[(len(X), len(Y), len(Z))]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    lcs_length = p[n][m]\n    lcs = []\n    i = n\n    j = m\n\n    while (i > 0) and (j > 0):\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # loop through each word and check if it starts with a capital letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            # if it does, add a space before it and remove it from the list\n            words[i] = words[i][1:]\n            words.insert(i,'')\n\n    # join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Split string by spaces\n    words = str1.split()\n    # Loop through words and add spaces before capital letters\n    new_words = []\n    for word in words:\n        if word.isupper():\n            new_words.append(word)\n        else:\n            new_words.append(''+ word)\n    # Join words with spaces and return\n    return''.join(new_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    str1 = re.sub(r'[^a-zA-Z0-9]', '', str1).lower()\n    \n    # Split the string into words\n    words = str1.split()\n    \n    # Capitalize the first word and join the words with spaces\n    result = words[0]\n    for i in range(1, len(words)):\n        result +='' + words[i]\n    \n    # Return the result\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to extract words starting with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Use a list comprehension to add spaces between words starting with capital letters\n    new_str =''.join([word[0].lower() + word[1:] for word in words])\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', string)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expression to find all the words in the given string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    \n    # Iterate through each word and add a space before capital letters\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    \n    # Join the words back into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z])([a-z]+)', r'\\1 \\2', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        result.append(word.capitalize())\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Use regular expressions to match words that start with capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Use a loop to iterate over the words and insert spaces between them\n    for i in range(len(words)):\n        if i == len(words) - 1:\n            # If the last word, simply append the space to the string\n            str1 = str1 + words[i] +''\n        else:\n            # Otherwise, append the space and the word to the string\n            str1 = str1 + words[i] +'' + words[i+1] +''\n\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'(?<=[A-Z])(?=[a-z])')\n    words = pattern.split(str1)\n    capital_words = [word.capitalize() for word in words]\n    return''.join(capital_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically.\n    '''\n    nums_str = list(map(str, nums_str))\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert the list of strings to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list of integers\n    nums.sort()\n\n    # Convert the sorted list of integers back to a list of strings\n    sorted_nums = [str(num) for num in nums]\n\n    # Return the sorted list of strings\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to integers\n    nums = [int(i) for i in nums_str]\n    # Sort the integers\n    nums.sort()\n    # Convert the sorted integers back to strings\n    sorted_nums_str = [str(i) for i in nums]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function sorts a given list of strings of numbers numerically.\n    '''\n    # convert all strings to numeric values\n    nums = [int(num) for num in nums_str if num.isdigit()]\n\n    # sort the numeric values in ascending order\n    nums.sort()\n\n    # convert the sorted numeric values back to strings and join them into a single string\n    sorted_nums_str = ''.join(map(str, nums))\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n        else:\n            nums.append(num_str)\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert the list to a list of integers\n    nums = [int(num) for num in nums_str]\n\n    # Sort the list numerically\n    nums.sort()\n\n    # Convert the sorted list back to a list of strings\n    sorted_nums = [str(num) for num in nums]\n\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Remove all non-numeric characters from the list\n    nums_str = [re.sub(r'[^0-9]', '', num_str) for num_str in nums_str]\n    \n    # Convert the list of numeric strings to a list of integers\n    nums_int = [int(num_str) for num_str in nums_str]\n    \n    # Sort the list of integers numerically\n    nums_int.sort()\n    \n    # Convert the list of integers back to a list of strings\n    sorted_nums_str = [str(num) for num in nums_int]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    # convert the strings to floats and sort them\n    nums_float = [float(num_str) for num_str in nums_str]\n    nums_float.sort()\n    # convert the floats back to strings and return them in a list\n    return [str(num) for num in nums_float]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_list:\n        if item not in test_tup:\n            test_list.append(item)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add tuple to list\n    test_list.append(test_tup)\n    # print updated list\n    print(\"Updated list:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The new list is:\", test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i]) + test_tup\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the left child is greater than the parent, then the parent node is not a min heap\n    if i*2+1 < len(arr) and arr[i] > arr[i*2+1]:\n        return False\n    \n    # If the right child is greater than the parent, then the parent node is not a min heap\n    if i*2+2 < len(arr) and arr[i] > arr[i*2+2]:\n        return False\n    \n    # If the left and right children are both greater than the parent, then the parent node is a min heap\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Call the helper function for each node in the array\n    for i in range(len(arr)//2 - 1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    \n    # If the array contains a single element and it is not the minimum, then the array is not a min heap\n    if len(arr) == 1 and arr[0]!= min(arr):\n        return False\n    \n    # The array is a min heap\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Check if the root is smaller than any of its children\n    if i < len(arr) // 2:\n        if arr[i] > arr[2 * i + 1] or arr[i] > arr[2 * i + 2]:\n            return False\n    # Check if the root is smaller than its parent\n    if i > 0:\n        if arr[i] > arr[i // 2]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    parent_index = (i - 1) // 2\n    if arr[i] < arr[parent_index]:\n        return False\n    else:\n        return check_min_heap_helper(arr, parent_index)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= 1:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n    else:\n        return True\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i * 2 + 1 >= len(arr):\n        return True\n    if arr[i] < min(arr[i * 2 + 1], arr[i * 2 + 2]):\n        return False\n    return check_min_heap_helper(arr, i * 2 + 1) and check_min_heap_helper(arr, i * 2 + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    \n    # base case: if i is out of range, it means the array is already a min heap\n    if i >= len(arr) / 2:\n        return True\n    \n    # check if left child is smaller than parent\n    if arr[i] > arr[2 * i + 1]:\n        return False\n    \n    # recursively call the function on left and right child\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef is_min_heap(arr):\n    '''\n    Check if the given array represents a min heap or not.\n    '''\n    \n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    if len(arr) < 2:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[0]:\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i+1\n    right = 2*i+2\n    smallest = i\n\n    # check if the left child is smaller than the current node\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n\n    # check if the right child is smaller than the current node\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n\n    # if the current node is not smaller than its children, then it is not a min heap\n    if i!= smallest:\n        return False\n    else:\n        # recursively check if the children of the current node are also min heaps\n        return check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0:\n        return True\n\n    if arr[i] < arr[i//2]:\n        return False\n\n    return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)//2-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    This function checks if the given array represents min heap or not.\n    \"\"\"\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (jacobsthal_num(n - 1) - 1) + 4 * jacobsthal_num(n - 2) + 2 * jacobsthal_num(n - 3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    # Initialize the first two terms of the series\n    a, b = 0, 1\n    # Initialize an array to store the series\n    series = []\n    # Calculate and append the first term of the series\n    series.append(a)\n    # Calculate and append the second term of the series\n    series.append(b)\n    # Iterate through the remaining terms\n    for i in range(2, n+1):\n        # Calculate the next term in the series using the formula a(i) = (2*a(i-1) - b(i-1)) // 2\n        c = (2*a - b) // 2\n        # Append the calculated term to the series\n        series.append(c)\n        # Update the values of a and b for the next iteration\n        a, b = b, c\n    # Return the nth term of the series\n    return series[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*n-1)*jacobsthal_num(n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return jacobsthal_num(n // 2) * jacobsthal_num(n // 2)\n    else:\n        return (jacobsthal_num(n // 2) * jacobsthal_num(n // 2) + 1) // 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Define the sequence of Jacobsthal numbers\n    jacobsthal = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, 5461, 10923, 21845, 43691, 87381, 174763, 349525, 699051, 1398101, 2796203, 5592405, 11184811, 22369621, 44739243, 89478485, 178956971, 357913941, 715827883, 1431655765, 2863311531, 5726623061, 11453246123, 22906492245, 45812984491, 91625968981, 183251937963, 366503875925, 733007751851, 1466015503701, 2932031007403, 5864062014805, 11728124029611, 23456248059221, 46912496118443, 93824992236885, 187649984473771, 375299968947541, 750599937895083, 1501199875790165, 3002399751580331, 6004799503160661, 12009599006321323, 24019198012642645, 48038396025285291, 96076792050570581, 192153584101141163, 384307168202282325, 768614336404564651, 1537228672809129301, 3074457345618258603, 6148914691236517205, 12297829382473034411, 24595658764946068821, 49191317529892137643, 98382635059784275285, 196765270119568550571, 39"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    j = 0\n    while True:\n        j += 1\n        if j**2 > n:\n            return j-1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    a = 0\n    b = 1\n    j = 0\n    while j < n:\n        c = a + b\n        if j % 2 == 0:\n            j += 1\n        else:\n            a = b\n            b = c\n        j += 1\n    return b"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    min_val = float('inf')\n    for i in range(len(test_list)):\n        if len(min_list) < K or test_list[i] < min_val:\n            min_list = [test_list[i]]\n            min_val = test_list[i]\n        elif len(min_list) == K and test_list[i] < min_list[0]:\n            min_list.pop(0)\n            min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Iterate through the list and update the frequency dictionary\n    for tup in test_list:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n\n    # Find the minimum frequency of each element in the dictionary\n    min_freq = {}\n    for key, value in freq.items():\n        if key in min_freq:\n            min_freq[key] = min(min_freq[key], value)\n        else:\n            min_freq[key] = value\n\n    # Create a list of tuples with the frequency of each element\n    freq_list = [(key, min_freq[key]) for key in sorted(min_freq.keys())]\n\n    # Sort the list in decreasing order of frequency\n    freq_list.sort(reverse=True)\n\n    # Find the minimum K elements and their frequencies\n    min_k_list = [freq_list[i][0] for i in range(K)][:K]\n    min_k_freq = [freq_list[i][1] for i in range(K)][:K]\n\n    # Create a new list of tuples with the minimum K elements and their frequencies\n    min_k_freq_list = [(tup[0], tup[1]) for tup in zip(min_k_list, min_k_freq)]\n\n    # Return the list of tuples with the minimum K elements and their frequencies\n    return min_k_freq_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    count = [0] * n\n    min_index = [0] * n\n\n    for i in range(n):\n        count[i] = len([x for x in test_list if x[1] == i])\n        min_index[i] = i\n\n    min_count = count[0]\n    min_index_list = [min_index[0]]\n\n    for i in range(1, n):\n        if count[i] < min_count:\n            min_count = count[i]\n            min_index_list = [min_index[i]]\n        elif count[i] == min_count:\n            min_index_list.append(min_index[i])\n\n    min_index_list = min_index_list[:K]\n\n    return min_index_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sorting the list based on the second element\n    test_list.sort(key=lambda x: x[1])\n\n    # Initializing minimum k\n    min_k_value = float('inf')\n\n    # Finding minimum k\n    for i in range(len(test_list) - K + 1):\n        temp = 0\n        for j in range(K):\n            temp += test_list[i + j][1]\n        if temp < min_k_value:\n            min_k_value = temp\n\n    return min_k_value\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and an integer K as input.\n    The function returns a list containing the K smallest tuples from the given list.\n    \"\"\"\n    if not test_list:\n        return []\n\n    # Find the minimum number of records from each group\n    min_records = {}\n    for i in range(len(test_list)):\n        key = test_list[i][0]\n        if key in min_records:\n            min_records[key].append(test_list[i][1])\n        else:\n            min_records[key] = [test_list[i][1]]\n\n    # Extract the smallest K records from each group\n    min_k_records = []\n    for key in min_records:\n        if len(min_records[key]) >= K:\n            min_k_records.extend(min_records[key])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    min_list = sorted(test_list, key=lambda x: x[1])[0:K]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and an integer K as input, and returns the minimum K records from the list.\n    '''\n    # Sort the tuple list by the first element (i.e., the value of the first element in the tuple) in ascending order\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize a variable to store the minimum K records from the list\n    min_list = []\n    \n    # Iterate through the sorted tuple list and keep track of the minimum K records\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            # If the current tuple is not equal to the last element in the minimum list, append it to the minimum list\n            if test_list[i]!= min_list[-1]:\n                min_list.append(test_list[i])\n                \n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function finds the minimum K records from a list of tuples.\n\n    Parameters:\n        test_list (list): A list of tuples.\n        K (int): The number of records to find.\n\n    Returns:\n        A tuple containing the minimum K records from test_list.\n    \"\"\"\n    # Sort the list in ascending order based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize the minimum K records as empty list\n    min_k_records = []\n\n    # Iterate over the sorted list and add K records to min_k_records\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n\n    return tuple(min_k_records)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    n = len(test_list)\n    min_set = set()\n    min_dict = {}\n\n    for i in range(n):\n        if i >= K:\n            min_set.remove(min_dict[min_set.pop()])\n        if i < K:\n            min_set.add(test_list[i])\n            min_dict[test_list[i]] = test_list[i]\n        if len(min_set) == K:\n            return min_dict[min_set.pop()]\n    return \"Not enough records found for K records\""
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    if K > len(test_list):\n        return None\n\n    min_val = float('inf')\n    min_k_records = []\n\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(i, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n                if count == K:\n                    if min_val > test_list[i]:\n                        min_val = test_list[i]\n                        min_k_records = [test_list[i]]\n                    elif min_val == test_list[i]:\n                        min_k_records.append(test_list[i])\n        if count == K:\n            min_val = test_list[i]\n            min_k_records = [test_list[i]]\n\n    if min_k_records:\n        return min_k_records\n    else:\n        return None"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n        elif l2[i] in l1 and l2[i] in l3:\n            common_elements.append(l2[i])\n        elif l3[i] in l1 and l3[i] in l2:\n            common_elements.append(l3[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Create a dictionary to store common elements found in all three lists\n    common = {}\n    \n    # Iterate through all indices in the first list\n    for i in range(len(l1)):\n        \n        # Check if the element at this index exists in all three lists\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common:\n            # If it does, add it to the dictionary with the value 1\n            common[l1[i]] += 1\n        elif l1[i] in l2 and l1[i] in l3:\n            # If it does not, but does exist in l2 and l3, add it to the dictionary with the value 2\n            common[l1[i]] = 2\n        elif l1[i] in l2:\n            # If it does not, but does exist in l2, add it to the dictionary with the value 3\n            common[l1[i]] = 3\n        elif l1[i] in l3:\n            # If it does not, but does exist in l3, add it to the dictionary with the value 4\n            common[l1[i]] = 4\n    \n    # Create a list of common elements\n    common_list = [key for key, value in common.items() if value == 1]\n    \n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # create an empty list to store the common elements\n    common_elements = []\n    \n    # loop through each index of each list\n    for i in range(len(l1)):\n        # loop through each element at that index in each list\n        for j in range(len(l1[i])):\n            # check if the current element is in both lists\n            if l1[i][j] in l2[i] and l1[i][j] in l3[i]:\n                # if it is, add it to the list of common elements\n                common_elements.append(l1[i][j])\n    \n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    \n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n            \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_list:\n            continue\n        elif l1[i] in l2 or l1[i] in l3 or l1[i] in common_list:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initialize the smallest and second smallest variables\n    smallest = float('inf')\n    second_smallest = float('inf')\n    # Loop through the list and compare each number to the current smallest and second smallest numbers\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Sort the list in ascending order\n    numbers.sort()\n\n    # Return the second element in the list\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()  # Sorting the list in ascending order\n    return numbers[1]  # Returning the second smallest number\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements\")\n    elif len(numbers) == 2:\n        return numbers[1]\n    else:\n        smallest = min(numbers)\n        return sorted([num for num in numbers if num!= smallest])[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    This function takes a list of numbers as input and returns the second smallest number.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    for i in range(2, len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest and numbers[i]!= smallest:\n            second_smallest = numbers[i]\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list should have at least two numbers.\"\n    else:\n        return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    numbers.sort()\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'ab+a'\n    result = re.search(pattern, text)\n    if result:\n        print('The string matched the pattern.')\n    else:\n        print('The string did not match the pattern.')"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+(?=a)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b.*b\\b.*a\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a\\w*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    # Define the regular expression pattern to match the given string\n    pattern = r'a[b]+'\n    # Use the re.search() function to search for the pattern in the text\n    match = re.search(pattern, text)\n    # If the match is found, return the matched string\n    if match:\n        return match.group()\n    # If the match is not found, return None\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n                \n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                reverse_pairs += 1\n    return reverse_pairs"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    # Helper function to swap characters in a string\n    def swap(s, i, j):\n        s = list(s)\n        s[i], s[j] = s[j], s[i]\n        return \"\".join(s)\n\n    # Create a set to store unique strings in the list\n    unique_strings = set()\n\n    # Iterate over each string in the list\n    for s in test_list:\n        # Reverse the string and add it to the set\n        unique_strings.add(s[::-1])\n\n    # Create a dictionary to store the count of reverse pairs\n    reverse_pairs = {}\n\n    # Iterate over each string in the list again\n    for s in test_list:\n        # Iterate over each unique string in the set\n        for t in unique_strings:\n            # If the two strings are reversed and not equal, increment the count in the dictionary\n            if (t[::-1]!= s) and (t, s[::-1]) not in reverse_pairs:\n                reverse_pairs[(t, s[::-1])] = 1\n\n    # Return the count of reverse pairs\n    return sum(reverse_pairs.values())"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j] and test_list[j][::-1] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    :param test_list: List of strings\n    :return: Integer count of reverse pairs\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j] and test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Create an empty dictionary to store the count of reverse pairs\n    reverse_dict = {}\n\n    # Iterate through the given list\n    for string in test_list:\n        # Reverse the string and check if it is already in the dictionary\n        reversed_string = string[::-1]\n        if reversed_string in reverse_dict:\n            # Increment the count of reverse pairs\n            reverse_dict[reversed_string] += 1\n        else:\n            # If it's not in the dictionary, add it with a count of 1\n            reverse_dict[reversed_string] = 1\n\n    # Iterate through the dictionary to count the pairs of reverse pairs\n    count = 0\n    for value in reverse_dict.values():\n        count += value * (value - 1) // 2\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # initialize two variables to count the number of pairs of reverse strings\n    count = 0\n    \n    # loop through the list of strings\n    for i in range(len(test_list)):\n        # loop through the remaining strings after i\n        for j in range(i+1, len(test_list)):\n            # check if the reverse of the ith string is a substring of the jth string\n            if str(test_list[i])[::-1] in test_list[j]:\n                # increment the count of pairs of reverse strings\n                count += 1\n    \n    # return the count of pairs of reverse strings\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store counts of unique sublists\n    count = {}\n    # loop through the list and convert each sublist to a tuple\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            count[tuple(list1[i:j])] = count.get(tuple(list1[i:j]), 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 0\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary\n    sublist_count = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the list to a tuple and check if it exists in the dictionary\n        if tuple(sublist) in sublist_count:\n            # If it does, increment the count for that tuple\n            sublist_count[tuple(sublist)] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            sublist_count[tuple(sublist)] = 1\n\n    # Return the dictionary containing the count of each unique sublist\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_dict = {}\n    for i in list1:\n        tuple_i = tuple(i)\n        if tuple_i in unique_dict:\n            unique_dict[tuple_i] += 1\n        else:\n            unique_dict[tuple_i] = 1\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create a dictionary to store the counts of unique sublists\n    counts = {}\n    \n    # Iterate over all possible sublists of the original list\n    for i in range(1, len(list1)+1):\n        for sublist in itertools.combinations(list1, i):\n            # Convert the sublist to a tuple and store its count in the dictionary\n            counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Convert all lists to tuples and count their occurrences in the original list\n    count_dict = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                if isinstance(j, tuple):\n                    count_dict[j] = count_dict.get(j, 0) + 1\n                else:\n                    count_dict[tuple(j)] = count_dict.get(tuple(j), 0) + 1\n        else:\n            if isinstance(i, tuple):\n                count_dict[i] = count_dict.get(i, 0) + 1\n            else:\n                count_dict[tuple(i)] = count_dict.get(tuple(i), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts\n    counts = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # check if the element is already a tuple\n        if isinstance(element, tuple):\n            # if it is, convert it to a string and check if it already exists in the dictionary\n            if str(element) in counts:\n                # if it does, increment its count\n                counts[str(element)] += 1\n            else:\n                # if it doesn't, add it to the dictionary with a count of 1\n                counts[str(element)] = 1\n        else:\n            # if it's not a tuple, create a tuple with it as the first element and convert it to a string\n            sublist = (element,)\n            # check if the sublist is already in the dictionary\n            if str(sublist) in counts:\n                # if it is, increment its count\n                counts[str(sublist)] += 1\n            else:\n                # if it doesn't, add it to the dictionary with a count of 1\n                counts[str(sublist)] = 1\n    \n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of unique sublists\n    sublist_count = {}\n\n    # iterate over every element in the original list\n    for i in range(len(list1)):\n        # get the current element\n        curr_elem = list1[i]\n\n        # if the current element is a list, convert it to a tuple and add it to the sublist_count dictionary\n        if isinstance(curr_elem, list):\n            sublist_tuple = tuple(curr_elem)\n            if sublist_tuple in sublist_count:\n                sublist_count[sublist_tuple] += 1\n            else:\n                sublist_count[sublist_tuple] = 1\n\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # initialize an empty dictionary to store the counts\n    counts = {}\n\n    # iterate through each item in the list\n    for item in list1:\n\n        # convert the item to a tuple\n        item_tuple = tuple(item)\n\n        # if the tuple is already in the dictionary, increment its count\n        if item_tuple in counts:\n            counts[item_tuple] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            counts[item_tuple] = 1\n\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Creating a dictionary to store the count of each tuple of lists in the original list\n    count_dict = {}\n    \n    # Looping through each element in the original list\n    for i in range(len(list1)):\n        # Converting the current element to a tuple\n        tuple_element = tuple(list1[i])\n        # If the tuple is not already in the dictionary, adding it with a count of 1\n        if tuple_element not in count_dict:\n            count_dict[tuple_element] = 1\n        # If the tuple is already in the dictionary, incrementing its count by 1\n        else:\n            count_dict[tuple_element] += 1\n    \n    # Returning the dictionary of count of each tuple of lists\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    if '.' in num and num.split('.')[1].isdigit() and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for digit in num:\n        if not digit.isdigit():\n            return False\n        elif int(digit) > 9:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n    except ValueError:\n        return False\n    \n    parts = num.split('.')\n    if len(parts) > 2:\n        return False\n    \n    if len(parts[0]) > 3 or len(parts[1]) > 2:\n        return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # check if the input string is a float number with a precision of 2\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.replace('.', '', 1).isdigit() and '.' not in num and num.replace('.', '', 1).isdecimal() and len(num.split('.')[0]) <= 8 and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    for digit in num:\n        if not digit.isdigit():\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Split the string into digits and decimal places\n    digits = num.split('.')\n    \n    # Check if there are at least two digits\n    if len(digits) < 2:\n        return False\n    \n    # Check if there are at most two digits after the decimal point\n    if len(digits[1]) > 2:\n        return False\n    \n    # Check if the digits are numeric\n    for digit in digits[0] + digits[1]:\n        if not digit.isdigit():\n            return False\n    \n    # Check if the integer part and the decimal part are separated by a decimal point\n    if '.' not in digits[0]:\n        return False\n    \n    # Convert the integer part and decimal part to integers\n    int_part = int(digits[0])\n    dec_part = int(digits[1])\n    \n    # Check if the integer part is 2 digits or more\n    if len(str(int_part)) < 2:\n        return False\n    \n    # Check if the integer part is numeric\n    if not int_part.isdigit():\n        return False\n    \n    # If all checks pass, the string is a decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    # Check for non-numeric characters\n    if not num.isnumeric():\n        return False\n\n    # Split the number into digits and convert to float\n    num_digits = [int(digit) for digit in num]\n    num_float = float('.'.join(str(digit) for digit in num_digits))\n\n    # Check if the number is within a range of 0 and 99\n    if num_float < 0 or num_float > 99:\n        return False\n\n    # Check if the number is a multiple of 0.1\n    if num_float % 0.1!= 0:\n        return False\n\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    if num.count('.') < 1:\n        return False\n    if num.count('.') > 1:\n        return False\n    for i in num:\n        if i in ['+', '-', '.']:\n            continue\n        if not i.isdigit():\n            return False\n    if num.count('.') == 1:\n        if num.find('.') > 0:\n            int_part = num[:num.find('.')]\n            dec_part = num[num.find('.')+1:num.find('.', num.find('.')+1)]\n            if len(int_part) > 10 or len(dec_part) > 2:\n                return False\n            for i in int_part:\n                if not i.isdigit():\n                    return False\n            for i in dec_part:\n                if not i.isdigit():\n                    return False\n        else:\n            if len(num) > 11:\n                return False\n            for i in num:\n                if not i.isdigit():\n                    return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = num.replace(',', '')\n    num = num.replace('.', '')\n    if num.find('.')!= -1 and len(num.split('.')[1]) == 2:\n        return True\n    return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == 0:\n        return \"The list is empty.\"\n    elif len(arr) == 1:\n        return \"The list has only one distinct element.\"\n    else:\n        unique_elements = set(arr)\n        if len(unique_elements) == 1:\n            return \"The list contains only one unique element.\"\n        else:\n            return \"The list contains multiple distinct elements.\""
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(arr)\n    # Check if the length of the set is equal to 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    This function takes a list of numbers as input and returns True if there is only one distinct element in the list, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not arr:\n        return False\n\n    # Initialize a set to store the unique elements of the list\n    unique_set = set()\n\n    # Loop through each element of the list\n    for num in arr:\n        # If the element is already in the set, it means there is more than one distinct element in the list\n        if num in unique_set:\n            return False\n        # Otherwise, add the element to the set\n        else:\n            unique_set.add(num)\n\n    # If the loop completes without finding any errors, it means there is only one distinct element in the list, so return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 0:\n        return False\n    elif len(arr) == 2:\n        return arr[0]!= arr[1]\n    else:\n        return (unique_Element(arr[1:]) or (arr[0] == arr[1]))"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            unique_count += 1\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_count = 0\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            unique_count += 1\n    if unique_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n    if monthnum3 in months and months[monthnum3] == 30:\n        print(\"True\")\n    else:\n        print(\"False\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(monthnum3, \"contains 30 days.\")\n    else:\n        print(monthnum3, \"does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n            if monthnum3 == 2:\n                if day <= 29:\n                    return True\n                else:\n                    return False\n        else:\n            if day <= 28:\n                return True\n            else:\n                return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if day <= 30:\n            return True\n        else:\n            return False\n    else:\n        if day <= 31:\n            return True\n        else:\n            return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        return f\"{monthnum3} does not contain 30 days.\"\n    elif monthnum3 % 2 == 1:\n        if monthnum3 % 10 == 0:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 1:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 2:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 3:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 4:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 5:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 6:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 7:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 8:\n            return f\"{monthnum3} does contain 30 days.\"\n        elif monthnum3 % 10 == 9:\n            return f\"{monthnum3} does contain 30 days.\"\n        else:\n            return f\"{monthnum3} does not contain 30 days.\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2 or monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Month number is not valid.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is valid\n    if monthnum not in range(1, 13):\n        return \"Invalid month number. Please provide a valid month number between 1 and 12.\"\n\n    # Check if the month has 30 days\n    if monthnum % 2 == 0:\n        if monthnum in [2, 4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the given month number is in the range of 1 to 12\n    if not 1 <= monthnum3 <= 12:\n        print(\"Invalid month number. Please enter a number from 1 to 12.\")\n        return\n    \n    # Convert the month number to a month name using the month dictionary\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    monthname = months[monthnum3 - 1]\n    \n    # Check if the month name contains \"February\"\n    if \"February\" in monthname:\n        if monthnum3 % 2 == 0:\n            print(monthname + \" has 30 days.\")\n        else:\n            print(monthname + \" has 29 days.\")\n    else:\n        print(monthname + \" does not have 30 or 29 days.\")"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array of n integers as input and returns the minimum difference between any two elements in the array.\n    '''\n    arr.sort()\n    min_diff = abs(arr[1] - arr[0])\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(1, n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    arr.sort()\n    min_diff = abs(arr[n-1] - arr[0])\n\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Traverse the array from the second element\n    for i in range(1, n):\n        # Calculate the difference between current and next elements\n        diff = arr[i] - arr[i - 1]\n\n        # Update the minimum difference if the difference is less than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')  # Initialize minimum difference as infinity\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])  # Find difference between two elements\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference to positive infinity\n    min_diff = float('inf')\n\n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between the current element and its next element\n        diff = arr[i + 1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller than the current minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference found\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size n as input and returns the minimum difference between any two elements in the array.\n    The function first initializes two variables, min_diff and min_ele, with very large values.\n    Then it loops through the array from index 0 to n-1, and for each element, it checks if the difference between it and the next element is less than min_diff.\n    If it is, then it updates min_diff and min_ele accordingly.\n    Finally, it returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n    min_ele = float('inf')\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_ele = arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in a list of integers and returns the minimum difference between any two elements in the list.\n    \"\"\"\n    arr.sort()  # sort the array in ascending order\n    \n    # initialize variables to store the minimum difference and the minimum element\n    min_diff = abs(arr[1] - arr[0])\n    min_element = arr[0]\n    \n    # loop through the array and compare each pair of adjacent elements\n    for i in range(1, n-1):\n        diff = abs(arr[i+1] - arr[i])\n        \n        # if the difference between adjacent elements is less than the current minimum difference,\n        # update the minimum difference and the minimum element\n        if diff < min_diff:\n            min_diff = diff\n            min_element = arr[i]\n            \n    return min_element, min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function returns the nth polite number.\n    '''\n    # Initialize the value of the polite number to 2\n    polite = 2\n    # Initialize the value of the count of the number of polite numbers so far to 1\n    count = 1\n    # Iterate through the range of numbers from 3 to n\n    for i in range(3, n+1): \n        # If the number is divisible by 3, it's a polite number\n        if i % 3 == 0: \n            # Add 1 to the count of the number of polite numbers so far\n            count += 1\n        # Otherwise, check if the number is divisible by 2\n        elif i % 2 == 0: \n            # If the number is divisible by 2 but not by 3, it's not a polite number\n            if i % 3!= 0: \n                continue\n        # If the number is not divisible by 2 or 3, it's a polite number\n        else: \n            # Check if the difference between the number and the next number is also a polite number\n            if math.gcd(i, i+1) == 1: \n                count += 1\n                polite += 1\n    # Return the value of the nth polite number\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number.\n    '''\n    # Calculate the nth polite number using the Euclid algorithm \n    a, b = 1, 2 \n    nth_polite = 1 \n    while b <= n: \n        a, b = b, a + b \n        if a == 1: \n            nth_polite = a \n            break \n        elif a % 2 == 1: \n            nth_polite = a \n            break \n    # Return the nth polite number \n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    a = 1\n    b = 2\n    c = 0\n    d = 1\n    e = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            a, b = b, a + b\n        else:\n            b, c = c, b + c\n        d, e = e, d + e\n    \n    return a + b * (n//2)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n\n    n: integer (positive)\n    returns: the nth polite number\n    \"\"\"\n\n    # Function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Check if n is odd\n    if n % 2 == 1:\n        return \"Not a polite number.\"\n\n    # Calculate the number of primes less than or equal to n\n    count = 0\n    for i in range(1, n):\n        if is_prime(i):\n            count += 1\n            if count == n:\n                break\n\n    # Calculate the nth polite number\n    nth_polite = (2 + math.sqrt(5)) / 2 * (2 * count + 1)\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_polite_num(num, i):\n        \"\"\"\n        Helper function to check if a number is polite or not.\n        \"\"\"\n        if is_prime(num):\n            return True\n        else:\n            if num % i == 0:\n                return True\n            else:\n                return False\n\n    def nth_polite_num(n):\n        \"\"\"\n        Main function to find the nth polite number.\n        \"\"\"\n        i = 1\n        while True:\n            if is_polite_num(i, i):\n                return i\n            i += 1\n\n    return nth_polite_num(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        return None\n    else:\n        polite_num = 1\n        for i in range(2, n+1):\n            if i % 2 == 0:\n                polite_num += i\n        return polite_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # initialize variables\n    count = 0\n    sum_of_squares = 0\n    i = 1\n    \n    # loop through the integers from 1 to n inclusive\n    while i <= n:\n        # check if i is a prime number\n        is_prime = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        \n        # calculate sum of squares of the first count primes\n        sum_of_squares += i**2\n        i += 1\n    \n    # check if difference between sum of squares and square of difference between sum of squares and square of n is less than 0.00001\n    if abs(sum_of_squares - (n*(n+1))**2) < 0.00001:\n        return True\n    else:\n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    i = 1\n    polite = 1\n    while i < n:\n        if i % 2 == 0:\n            polite += 2\n        else:\n            polite += 1\n        i += 1\n    return polite\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n\n    polite_count = 0\n    current_num = 1\n\n    while polite_count < n:\n        if is_prime(current_num):\n            polite_count += 1\n\n        current_num += 1\n\n    return current_num - 1\n\n\ndef is_prime(num):\n    if num < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    if n <= 0:\n        return 'Invalid input'\n    if n == 1:\n        return 'The only polite number is 1'\n    if n == 2:\n        return 'The only polite number greater than 1 is 2'\n    if n == 3:\n        return 'The only polite number greater than 2 is 3'\n    if n == 4:\n        return 'The only polite number greater than 3 is 4'\n    if n == 5:\n        return 'The only polite number greater than 4 is 5'\n    if n == 6:\n        return 'The only polite number greater than 5 is 6'\n    if n == 7:\n        return 'The only polite number greater than 6 is 7'\n    if n == 8:\n        return 'The only polite number greater than 7 is 8'\n    if n == 9:\n        return 'The only polite number greater than 8 is 9'\n\n    polite_numbers = []\n    i = 1\n\n    while len(polite_numbers) < n:\n        if is_prime(i):\n            polite_numbers.append(i)\n            i += 1\n\n    return polite_numbers[-1]\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            result.append((l1[i], l1[0]))\n            break\n        else:\n            result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Given a list, return a list of all pairs of consecutive items in the list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        for j in range(i+1, len(l1)):\n            result.append((l1[i], l1[j]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes in a list of numbers and a sum as input and returns the count of pairs in the list whose sum is equal to'sum'.\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the number of pairs whose sum is equal to the input sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    n = len(arr)\n\n    # Traverse through all pairs of elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # If sum of the pair is equal to the given sum, increment the count\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains the elements that are present in li1 but not in li2.\n\n    Args:\n        li1 (list): The first list.\n        li2 (list): The second list.\n\n    Returns:\n        list: A new list that contains the elements that are present in li1 but not in li2.\n    \"\"\"\n\n    # Create an empty list to store the elements that are in li1 but not in li2.\n    diff_list = []\n\n    # Iterate through the first list and check if each element is present in li2.\n    for i in li1:\n        if i not in li2:\n            # If the element is not present in li2, append it to the diff_list.\n            diff_list.append(i)\n\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    # Create an empty list to store the difference\n    diff = []\n\n    # Loop through each element in the first list\n    for element in li1:\n        # Check if the element is in the second list\n        if element not in li2:\n            # If it's not in the second list, add it to the diff list\n            diff.append(element)\n\n    # Return the diff list\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    else:\n        sum = 0\n        for i in range(1, n+1, 2):\n            sum += i**4\n        return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum of fourth power of odd natural numbers\n    sum_of_fourth_power = 0\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd natural number\n        fourth_power = i ** 4\n        # Add the fourth power to the sum of fourth power of odd natural numbers\n        sum_of_fourth_power += fourth_power\n\n    # Return the sum of fourth power of odd natural numbers\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # initialize sum variable to zero\n    sum_of_powers = 0\n    # loop through first n odd natural numbers\n    for i in range(n):\n        # compute the fourth power of the current odd number\n        fourth_pow = i**4\n        # add the fourth power to the sum variable\n        sum_of_powers += fourth_pow\n    # return the sum of the fourth powers of the odd numbers\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n): \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum to zero\n    sum = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is odd\n        if i % 2!= 0:\n            # Calculate fourth power of the number\n            power = i ** 4\n            # Add fourth power to the sum\n            sum += power\n\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # Create a deque to store opening and closing parentheses\n    stack = deque()\n\n    # Loop through the characters of the expression\n    for char in exp:\n\n        # If the character is an opening parenthesis, push it onto the stack\n        if char == '(':\n            stack.append(char)\n\n        # If the character is a closing parenthesis, pop the last opening parenthesis from the stack\n        elif char == ')':\n            if not stack:\n                return False\n            last_open = stack.pop()\n\n        # If the character is not an opening or closing parenthesis, it is not balanced\n        else:\n            return False\n\n    # If the stack is not empty, there are more opening parentheses than closing parentheses\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    balance = 0\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            stack.pop()\n        else:\n            balance += 1\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == \"(\":\n            stack.append(i)\n        elif exp[i] == \")\":\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_expression(exp):\n    \"\"\"\n    This function takes an expression as input and checks if it is balanced or not.\n    It uses a stack to keep track of opening parentheses and a deque to keep track of closing parentheses.\n    \"\"\"\n    stack = []\n    opening = deque()\n\n    for char in exp:\n        if char.isdigit():\n            stack.append(int(char))\n        elif char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack or stack.pop()!= char_mapping[char]:\n                return False\n            opening.append(char)\n        elif char in ['+', '-', '*', '/']:\n            if not stack or stack.pop() not in ['(', '[', '{']:\n                return False\n            stack.append(char)\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if not (char in ['(', '{', '['] and top_char in [')', '}', ']']):\n                return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n\n    # Split the string into words\n    words = test_str.split()\n\n    # Initialize a list to store the words with length K or less\n    result = []\n\n    # Iterate through each word\n    for word in words:\n\n        # Check if the length of the word is less than or equal to K\n        if len(word) <= K:\n\n            # Add the word to the result list\n            result.append(word)\n\n    # Join the result list into a string and return it\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()  # split the string into words\n    filtered_words = []  # create an empty list to store the filtered words\n\n    # iterate over each word in the list\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # if the word is not of length K, add it to the filtered list\n            filtered_words.append(word)\n\n    # join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Split the string into words\n    words = test_str.split()\n    # Create an empty list to store the new words\n    new_words = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than or equal to K\n        if len(word) <= K:\n            # If the length is less than or equal to K, append the word to the new list\n            new_words.append(word)\n    # Join the new words back into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        # Return a tuple with the occurrence and position of the match\n        return (match.group(0), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern,text)\n    \n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return (matches[0], pattern.find(matches[0]))\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all occurrences of pattern in text\n    matches = re.findall(pattern, text)\n\n    # if there are matches, return them as a list of tuples\n    if matches:\n        for match in matches:\n            # return the position of the match and the entire match\n            return (match.start(), match.group())\n    # otherwise, return None\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return (match.group(),match.start(),match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string. \n    Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        result = [(m.start(), m.end()) for m in matches]\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0 and i % 2!= nums[i]:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0: # Check if the current number is odd\n            for j in range(i+1, len(nums)): # Check if there are any odd numbers after the current odd number\n                if nums[j] % 2!= 0:\n                    return False # If there is an odd number after the current odd number, return False\n    return True # If the loop completes without returning False, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and i % 2 == 0:\n            print(\"No\")\n            return\n        if nums[i] % 2 == 0 and i % 2!= 0:\n            print(\"Yes\")\n            return\n    print(\"Yes\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    # iterate through the list\n    for i in range(0, len(nums)):\n        # check if the number at the current position is odd\n        if nums[i] % 2!= 0:\n            # iterate through the odd indices from the current position\n            for j in range(i+1, len(nums), 2):\n                # check if the number at the current odd index is odd\n                if nums[j] % 2!= 0:\n                    return False\n            # if we make it through the odd indices without finding an odd number, return True\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n\n    for i in range(0, len(nums), 2):\n        if len(set(str(nums[i]))) % 2 == 0:\n            return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(len(nums)) if j!= i])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    if len(nums) % 2 == 1:\n        return False\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i!= 0 and i!= len(test_str) - 1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0 and test_str[i-1] in vowels and test_str[i] not in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    prev_char = None\n    \n    for char in test_str:\n        if char in vowels and (prev_char is None or prev_char not in vowels):\n            count += 1\n        prev_char = char\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str)-1:\n            # skip first and last characters\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= len(test_str) - 1:\n            if test_str[i] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to keep track of elements in the list\n    count_dict = {}\n    # iterate through the list and count the number of occurrences of each element\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # create an empty list to store non-repeated elements\n    non_repeated_list = []\n    # iterate through the count dictionary and add elements that have a count of 1 to the non_repeated_list\n    for key, value in count_dict.items():\n        if value == 1:\n            non_repeated_list.append(key)\n    # return the sum of the non-repeated elements\n    return sum(non_repeated_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n    If there are no non-repeated elements, it returns 0.\n    \"\"\"\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # initialize the sum variable to 0\n    sum_non_repeated = 0\n\n    # iterate through the dictionary and add up the frequency of each element that is 1\n    for key, value in freq_dict.items():\n        if value == 1:\n            sum_non_repeated += int(key)\n\n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n\n    # Create a set to store unique elements\n    unique_set = set(arr)\n\n    # Find the sum of unique elements\n    unique_sum = sum(unique_set)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store the non-repeated elements\n    unique_elements = set(arr)\n    \n    # Initialize the sum variable to zero\n    sum_of_non_repeated_elements = 0\n    \n    # Iterate through the set and add up the non-repeated elements\n    for element in unique_elements:\n        sum_of_non_repeated_elements += element\n        \n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    arr = sorted(list(set(arr))) # removes duplicate elements from the list\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty dictionary to store the count of each element in the list\n    count_dict = {}\n    \n    # Iterate through the list and update the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # Iterate through the list again and find the sum of the non-repeated elements\n    sum_non_repeated = 0\n    for num in arr:\n        if count_dict[num] == 1:\n            sum_non_repeated += num\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # Use the sum() function to calculate the sum of non-repeated elements\n    sum_of_non_repeated = sum(unique_elements)\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to keep track of unique elements\n    unique_set = set(arr)\n    # calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    # Create a set of non-repeated elements\n    unique_elements = set(arr)\n\n    # Find the sum of non-repeated elements\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set of the non-repeated elements\n    unique_set = set(arr)\n    \n    # Calculate the sum of the unique elements\n    unique_sum = sum(unique_set)\n    \n    return unique_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def grouper(iterable, n):\n        args = [iter(iterable)] * n\n        return groupby(chain.from_iterable(args))\n\n    result = []\n    n = 1\n    for item in grouper(list1, n):\n        result.append(list(item))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    new_list = []\n    prev_val = None\n    for val, group in groupby(list1):\n        if prev_val == val:\n            group = list(group)\n            for i in range(1, len(group)):\n                group.insert(i, None)\n        else:\n            group = list(group)\n        new_list.append(group)\n        prev_val = val\n    return new_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(g) for k, g in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            continue\n        sublist = list(group)\n        if len(sublist) > 1:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by consecutive duplicates\n    grouped_list = groupby(list1, lambda x: x)\n    # unpack the grouped list\n    unpacked_list = [list(g) for k, g in grouped_list]\n    # return the unpacked list\n    return unpacked_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    # create a dictionary to store the counts of sublists\n    counts = {}\n    # convert each element in the list to a tuple and add it to the dictionary\n    for sublist in lst:\n        sublist = tuple(sublist)\n        if sublist in counts:\n            counts[sublist] += 1\n        else:\n            counts[sublist] = 1\n    # return the dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary\n    sublist_count = {}\n    \n    # Loop through each item in the list\n    for item in list1:\n        # Convert the item to a tuple if it's not already\n        if isinstance(item, list):\n            item = tuple(item)\n        # If the item is a tuple, add it to the dictionary\n        if item in sublist_count:\n            sublist_count[item] += 1\n        else:\n            sublist_count[item] = 1\n    \n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for item in list1:\n        if isinstance(item, list):\n            sublist = tuple(item)\n            if sublist in sublist_count:\n                sublist_count[sublist] += 1\n            else:\n                sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[sublist] = 1\n        else:\n            sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_dict:\n            sublist_dict[tuple_sublist] += 1\n        else:\n            sublist_dict[tuple_sublist] = 1\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_lists = {}\n    for item in list1:\n        for sublist in item:\n            if sublist not in unique_lists:\n                unique_lists[sublist] = 0\n            unique_lists[sublist] += 1\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(lst):\n    # Create a set to store unique tuples\n    unique_set = set()\n    \n    # Iterate through the list and convert each element to a tuple\n    for elem in lst:\n        unique_set.add(tuple(elem))\n    \n    # Create a dictionary to store the count of each tuple\n    count_dict = {}\n    \n    # Iterate through the set and count the number of occurrences of each tuple\n    for tup in unique_set:\n        count_dict[tup] = unique_set.count(tup)\n    \n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create an empty dictionary\n    count_dict = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Turn the sublist into a tuple\n        tup = tuple(sublist)\n\n        # Check if the tuple is already in the dictionary\n        if tup in count_dict:\n            # Increment the count of that tuple\n            count_dict[tup] += 1\n        else:\n            # Add the tuple to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each element in the list\n    for item in lst:\n        # If the element is a list, turn it into a tuple and add it to the counts dictionary\n        if isinstance(item, list):\n            tup = tuple(item)\n            if tup in counts:\n                counts[tup] += 1\n            else:\n                counts[tup] = 1\n\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n\n    # Iterate over all the sublists in the list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is already in the dictionary, increment its count\n        if sublist_tuple in counts:\n            counts[sublist_tuple] += 1\n        # If the tuple is not in the dictionary, add it and set its count to 1\n        else:\n            counts[sublist_tuple] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # combine all the tuples in the test_list into a single tuple\n    combined_list = tuple(x for sublist in test_list for x in sublist)\n    # create a set of tuples from the combined_list\n    unique_tuples = set(tuple(sorted(x)) for x in combined_list)\n    # create a list of tuples with unique elements, and then a list of tuples with unique sums\n    unique_tuples_list = [tuple(sorted(x)) for x in unique_tuples]\n    unique_sum_list = [sum(x) for x in unique_tuples_list]\n    # find all combinations of unique sums with tuples from unique_tuples_list\n    combinations_list = list(combinations(unique_sum_list, len(test_list)))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Initialize an empty list to store the combinations\n    combinations_list = []\n\n    # Sort the list in ascending order based on the first element of each tuple\n    test_list.sort()\n\n    # Loop through all possible pairs of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the first element of each tuple\n            sum1 = test_list[i][0]\n\n            # Calculate the sum of the second element of each tuple\n            sum2 = test_list[j][1]\n\n            # Check if the sum of the two elements is equal to the total sum of the list\n            if sum1 + sum2 == sum(test_list):\n                # Add the combination of the tuples to the list\n                combinations_list.append((test_list[i], test_list[j]))\n\n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Get the maximum sum from the list\n    max_sum = max(sum(i) for i in test_list)\n\n    # Get all possible combinations of sums from the list\n    all_combinations = combinations(test_list, len(test_list))\n\n    # Filter out the combinations that don't add up to the maximum sum\n    filtered_combinations = (c for c in all_combinations if sum(c) == max_sum)\n\n    # Get the list of unique combinations\n    unique_combinations = set(filtered_combinations)\n\n    # Convert the set back to a list and sort it in ascending order\n    unique_combinations = sorted(list(unique_combinations))\n\n    return unique_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a dictionary to store the indices of the elements in the list\n    index_dict = {}\n    for i, tup in enumerate(test_list):\n        for j, elem in enumerate(tup):\n            index_dict[elem] = (i, j)\n\n    # Define a function to find the combinations of sums with tuples in the list\n    def find_combination_sum(lst, target_sum):\n        # Sort the list in ascending order\n        lst.sort()\n\n        # Initialize an empty list to store the combinations\n        combinations = []\n\n        # Loop through all possible combinations of sums from the list\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst)):\n                # Check if the current combination is a tuple\n                if isinstance(lst[i] + lst[j], tuple):\n                    # Check if the sum of the current combination is equal to the target sum\n                    if lst[i] + lst[j] == target_sum:\n                        # If the combination is a tuple, add it to the combinations list\n                        combinations.append(lst[i] + lst[j])\n                    # Check if the current combination is a subset of the target sum\n                    elif isinstance(target_sum - lst[i] - lst[j], tuple) and (lst[i] + lst[j]) in target_sum - lst[i] - lst[j]:\n                        # If the combination is a subset, add it to the combinations list\n                        combinations.append(lst[i] + lst[j])\n\n        return combinations\n\n    # Test the function with some sample inputs\n    print(find_combination_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 15))\n    print(find_combination_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 16))\n    print(find_combination_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 17))\n    print(find_combination_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 18))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    total_sum = sum(test_list)\n    for i in range(2, total_sum + 1):\n        for combo in combinations(test_list, i):\n            print(combo)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    tuples = list(combinations(test_list, r=2))\n    return tuples"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    for i in range(1, total+1):\n        for j in combinations(test_list, i):\n            yield tuple(j)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Initialize the result list\n    result = []\n\n    # Iterate through all possible combinations of three tuples\n    for i in combinations(test_list, 3):\n        # Calculate the sum of the tuples in the combination\n        combo_sum = sum(i)\n\n        # Check if the combination sum is present in the test_list\n        if combo_sum in test_list:\n            # If it is, append the combination to the result list\n            result.append(i)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the tuple list\n    sorted_list = sorted(test_list)\n\n    # Create a set of tuples to store the unique combinations of sums\n    combinations_set = set()\n\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        for j in range(i+1, len(sorted_list)):\n            # Calculate the sum of the two tuples\n            current_sum = sorted_list[i][0] + sorted_list[j][0]\n\n            # Check if the current sum is present in the set of combinations\n            if current_sum in combinations_set:\n                # If it is, add the combination to the set of combinations\n                combinations_set.add((sorted_list[i], sorted_list[j]))\n\n    # Convert the set of combinations to a list and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Creating a set of tuples from the given list\n    tuples = set(tuple(x) for x in test_list)\n    # Finding the combinations of tuples with the given target sum\n    combinations_sum = list(combinations(tuples, len(test_list)))\n    # Printing the combinations of tuples with the given target sum\n    for combination in combinations_sum:\n        print(tuple(combination))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # calculate the square root of the given number\n    sqrt_n = math.sqrt(n)\n    # calculate the number of divisors of the given number\n    div_count = 0\n    for i in range(1, int(sqrt_n)+1):\n        if n % i == 0:\n            div_count += 1\n            if i!= n/i:\n                div_count += 1\n    # check if the count of divisors is even or not\n    if div_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n < 1:\n        return \"Invalid input\"\n\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n\n    if count % 2 == 0:\n        return \"The count of divisors is even\"\n    else:\n        return \"The count of divisors is odd\"\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    # calculate number of divisors\n    divisors = []\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n        i += 1\n    \n    # count even number of divisors\n    count = 0\n    for divisor in divisors:\n        count += divisor\n    \n    # check if count is even\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n    return divisors\n\nif __name__ == '__main__':\n    n = int(input(\"Enter a number: \"))\n    count = count_divisors(n)\n    print(\"The count of divisors of\", n, \"is even:\", sum(count) % 2 == 0)"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n\n    # Calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n\n    # Check whether the count of divisors is even\n    if len(divisors) % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the square root of n\n    square_root = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if int(square_root)!= square_root:\n        return False\n    \n    # Initialize the count of divisors\n    count = 0\n    \n    # Check all divisors up to the square root of n\n    for i in range(1, int(square_root) + 1):\n        # If the square root of n is a divisor of n\n        if i * i == n:\n            count += 1\n        # If the square root of n is not a divisor of n\n        elif n % i == 0:\n            count += 2\n    \n    # If the count of divisors is even\n    if count % 2 == 0:\n        return True\n    # If the count of divisors is odd\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. \n    https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    if n == 1:\n        return 1\n\n    divisors_count = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_count += 2\n\n    if n > 2:\n        divisors_count += 1\n\n    return divisors_count % 2"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 2:\n                return False\n    if n > 1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Find the number of divisors of n\n    div_list = [i for i in range(1, int(math.sqrt(n))+1) if n % i == 0]\n    div_list.append(n)\n    # Calculate the count of divisors\n    count = len(div_list)\n    # Check if count of divisors is even or odd\n    if count % 2 == 0:\n        print(\"The count of divisors of {} is even.\".format(n))\n    else:\n        print(\"The count of divisors of {} is odd.\".format(n))"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i] % 2!= 0:\n            sum += arr[i]\n            count += 1\n            if count % 2!= 0:\n                sum -= arr[i-1]\n                count -= 1\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if (j-i+1) % 2 == 1: # check if subarray length is odd\n                sub_arr = arr[i:j+1] # extract subarray\n                total += sum(sub_arr) # add up subarray elements\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            sum += arr[j]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    sum = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if j - i + 1 % 2 == 1:\n                sum += arr[j] - arr[i - 1]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n-1):\n        if i == 0 or arr[i] % 2!= arr[i-1] % 2:\n            temp = 0\n            for j in range(i, n):\n                temp += arr[j]\n                if j - i == 1:\n                    sum += temp\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_sum += sum(arr[i:j+1]) % 2\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum_odd = 0\n\n    for i in range(n):\n        # check if the length of the current subarray is odd\n        if i == 0 or i == n-1 or i == n-2 or i == n-3:\n            if i == n-1 or i == n-2 or i == n-3:\n                count += 1\n            else:\n                count = 1\n        else:\n            count += 1\n\n        # calculate the sum of the current subarray\n        if count % 2 == 1:\n            sum_odd += arr[i]\n\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Args:\n    arr: List of integers.\n\n    Returns:\n    The sum of all odd length subarrays.\n    \"\"\"\n    sum = 0\n    n = len(arr)\n\n    for i in range(n):\n        if i % 2 == 0:\n            continue\n\n        left = i + 1\n        right = n\n        while left < right:\n            subarr = arr[left:right]\n            if len(subarr) % 2 == 1:\n                sum += sum_odd_length_subarray(subarr)\n            left += 1\n            right -= 1\n\n    return sum\n\n\ndef sum_odd_length_subarray(subarr):\n    \"\"\"\n    Calculate the sum of the odd elements in a subarray.\n\n    Args:\n    subarr: List of integers.\n\n    Returns:\n    The sum of the odd elements in the subarray.\n    \"\"\"\n    return sum(subarr[i] for i in range(len(subarr)) if subarr[i] % 2 == 1)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays. \n    \"\"\"\n    n = len(arr)\n    # Initialize sum and count of odd length subarrays\n    sum_odd = 0\n    count_odd = 0\n\n    # Loop through all subarrays\n    for i in range(n):\n        # Calculate sum of odd length subarray\n        subarray_sum = sum(arr[i:i+2])\n        # Check if subarray has odd length\n        if i % 2 == 0:\n            # If odd length, update sum and count\n            sum_odd += subarray_sum\n            count_odd += 1\n\n    # Calculate and return sum of all odd length subarrays\n    return sum_odd * count_odd\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    sum_odd_length = 0\n\n    for i in range(n-2):\n        j = i+2\n        while j <= n-1:\n            sum_odd_length += arr[i]+arr[j]\n            j += 2\n\n    return sum_odd_length"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \"\"\"\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    h = 0\n    s = 0\n    v = cmax\n    if delta!= 0:\n        if cmax == r:\n            h = (g - b) / delta\n        elif cmax == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h = h * 60\n        if h < 0:\n            h += 360\n        s = delta / cmax\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r/255.0\n    g = g/255.0\n    b = b/255.0\n    \n    cmin = min(r, g, b)\n    cmax = max(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        s = delta / cmax\n        \n        h = 0\n        if r == cmax:\n            h = (g - b) / delta\n        elif g == cmax:\n            h = 2 + (b - r) / delta\n        elif b == cmax:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n            \n    v = cmax\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r)/255.0, float(g)/255.0, float(b)/255.0\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    delta = max_rgb - min_rgb\n\n    if max_rgb == min_rgb:\n        h = 0\n    elif max_rgb == r:\n        h = 60*(g-b)/delta\n    elif max_rgb == g:\n        h = 60*(2+b-r)/delta\n    else:\n        h = 60*(4+r-g)/delta\n\n    if h < 0:\n        h += 360\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta/max_rgb\n\n    v = max_rgb\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n\n    if r == g == b == 0:  # Black color\n        return (0, 0, 0)\n\n    if r == g == b:  # Gray color\n        return (0, 0, r)\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = (r + g + b) / 3  # Calculate H\n    s = max_val - min_val  # Calculate S\n    v = max_val  # Calculate V\n    c = v / s  # Calculate C\n\n    if s == 0:  # H is undefined in this case\n        return (0, 0, v)\n\n    if r == max_val:  # H is between (G-B) and (B-G)\n        h = (g - b) / (6 * c) + (g < b) * 6\n    elif g == max_val:  # H is between (B-R) and (R-B)\n        h = (b - r) / (6 * c) + 2\n    else:  # H is between (R-G) and (G-R)\n        h = (r - g) / (6 * c) + 4\n\n    if h < 0:\n        h += 360  # Convert H to 0-360 range\n\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, B to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n\n    # Find maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Find difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # Find the value for hue and saturation\n    if diff == 0:\n        hue = 0\n        saturation = 0\n    elif max_val == r:\n        hue = 60 * (((g - b) / diff) % 6)\n    elif max_val == g:\n        hue = 60 * (((b - r) / diff) + 2)\n    else:\n        hue = 60 * (((r - g) / diff) + 4)\n\n    if max_val == 1:\n        saturation = 0\n    else:\n        saturation = diff / max_val\n\n    return round(hue, 2), round(saturation, 2), round(max_val, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb values to float values\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Get maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate delta value\n    delta = max_val - min_val\n    \n    # Calculate h, s, and v values\n    if max_val == min_val:\n        h, s = 0, 0\n    else:\n        if max_val == r:\n            h = 60 * ((g - b) / delta) % 6\n        elif max_val == g:\n            h = 60 * ((b - r) / delta) + 120\n        else:\n            h = 60 * ((r - g) / delta) + 240\n        \n        if h < 0:\n            h += 360\n        \n        # Calculate s value\n        if max_val == 0:\n            s = 0\n        else:\n            s = delta / max_val\n    \n    # Calculate v value\n    v = max_val\n    \n    # Convert h, s, and v to int values and return the color in the form of tuple\n    return tuple([int(h * 255), int(s * 255), int(v * 255)])"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    \n    # Convert r, g, b to float values\n    r, g, b = map(float, (r, g, b))\n    \n    # Find the maximum value among r, g, b\n    max_value = max(r, g, b)\n    \n    # Find the minimum value among r, g, b\n    min_value = min(r, g, b)\n    \n    # Find the difference between max and min values\n    delta = max_value - min_value\n    \n    # If delta is 0, then color is gray\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        # Calculate the h, s values\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h % 6\n        \n        # Calculate the s value\n        if max_value == 0:\n            s = 0\n        else:\n            s = delta / max_value\n        \n        # Calculate the v value\n        v = max_value\n    \n    # Convert h, s, and v values to int values\n    h = int(h * 255)\n    s = int(s * 255)\n    v = int(v * 255)\n    \n    # Return the hsv values as a tuple\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n\n    Parameters:\n        r (int): Red color value.\n        g (int): Green color value.\n        b (int): Blue color value.\n\n    Returns:\n        h (float): Hue value in degrees.\n        s (float): Saturation value between 0 and 1.\n        v (float): Value between 0 and 1.\n    \"\"\"\n\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if delta == 0:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h * 60 if h < 0 else h * 60\n\n        if h < 0:\n            h += 360\n\n        s = delta / (max_val + delta)\n\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    h = 0\n    s = 0\n    v = max(r, g, b) / 255\n    \n    if v == 0:\n        s = 0\n    else:\n        delta = v - min(r, g, b)\n        s = delta / v\n        \n        if r == v:\n            h = (g - b) / delta\n        elif g == v:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n    \n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function converts an RGB color value to HSV.\n    Conversion formula:\n    H = (max(R, G, B) - min(R, G, B)) / max(R, G, B)\n    S = (max(R, G, B) == 0)? 0 : (max(R, G, B) - min(R, G, B)) / max(R, G, B)\n    V = max(R, G, B)\n    '''\n\n    # Find maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate hue\n    if max_value == min_value:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b) / (max_value - min_value)\n    elif max_value == g:\n        hue = 2 + (b - r) / (max_value - min_value)\n    else:\n        hue = 4 + (r - g) / (max_value - min_value)\n\n    # Calculate saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = (max_value - min_value) / max_value\n\n    # Calculate value\n    value = max_value\n\n    return (hue, saturation, value)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count!= 0:\n        return even_product\n    else:\n        return odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd number of a given list.\n    \"\"\"\n    even = [x for x in lst if x % 2 == 0]\n    odd = [x for x in lst if x % 2!= 0]\n\n    if not even or not odd:\n        print(\"List does not have even or odd numbers\")\n        return None\n\n    return even[0] * odd[0]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    # initialize even_num and odd_num to 0\n    even_num = 0\n    odd_num = 0\n\n    # loop through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    # return the product of even_num and odd_num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    first_even = -1\n    first_odd = -1\n    for num in list1:\n        if num % 2 == 0:\n            if first_even == -1:\n                first_even = num\n            else:\n                first_even *= num\n        else:\n            if first_odd == -1:\n                first_odd = num\n            else:\n                first_odd *= num\n    return first_even * first_odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    even_num = 0\n    odd_num = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        product *= num\n        \n    if even_count > 0 and odd_count > 0:\n        return product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for num in list1:\n        if num % 2 == 0:\n            even += num\n        else:\n            odd += num\n    if even > 0 and odd > 0:\n        return even * odd\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # initialize product variable to 1\n    product = 1\n    # loop through the list\n    for num in list1:\n        # check if the number is even\n        if num % 2 == 0:\n            # multiply product by even number\n            product *= num\n        # check if the number is odd\n        else:\n            # multiply product by odd number\n            product *= num\n    # return the product\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # split the string into a list of substrings\n    string_list = test_str.split(',')\n    \n    # create a new list to hold the converted integers\n    int_list = []\n    \n    # loop through the list of substrings and convert each one to an integer\n    for i in string_list:\n        int_list.append(int(i))\n    \n    # return the integer list as a tuple\n    return tuple(int_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the input string into a list of substrings\n    substrings = test_str.split(',')\n\n    # Create an empty list to hold the integer tuples\n    int_tuples = []\n\n    # Loop through each substring in the list\n    for substring in substrings:\n        # Split the substring into a list of integers\n        integers = list(map(int, substring.split(':')))\n\n        # Check if the length of the integers list is correct\n        if len(integers) == 2:\n            # If it is, append the tuple to the list of integer tuples\n            int_tuples.append(tuple(integers))\n        else:\n            print(\"Error: Incorrect tuple format.\")\n            return\n\n    # Return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string by comma and space\n    result = [int(x) for x in test_str.split(',')]\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Convert each string to an integer\n    int_list = [int(str_num.strip()) for str_num in str_list]\n    \n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Create an empty list to hold the integer values\n    int_list = []\n    \n    # Loop through the list of strings and convert each one to an integer\n    for str_item in str_list:\n        int_item = int(str_item.strip())\n        int_list.append(int_item)\n    \n    # Convert the list of integers back into a tuple\n    int_tuple = tuple(int_list)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the tuple string to a list\n    test_list = list(test_str.split(','))\n\n    # Convert each element of the list to an integer\n    test_int = tuple(int(x.strip()) for x in test_list)\n\n    return test_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        tuple_str = tuple(map(int, test_str.split()))\n        return tuple_str\n    except ValueError:\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by commas and spaces\n    tup_str = test_str.split(', ')\n    # Initialize an empty integer tuple\n    int_tup = ()\n    # Loop through each element in the tuple string\n    for elem in tup_str:\n        # Check if the element is an integer\n        if elem.isdigit():\n            # If it is, convert it to an integer and add it to the tuple\n            int_tup += (int(elem),)\n        else:\n            # If it's not an integer, raise an exception\n            raise ValueError('Tuple string must contain only integers.')\n    return int_tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Splitting the string by \",\" and creating a list of strings\n    str_list = test_str.split(\",\")\n    # Converting each string in the list to integer and creating a new list of integers\n    int_list = [int(i) for i in str_list]\n    # Converting the list of integers to tuple and returning it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define a list to hold the converted integers\n    int_list = []\n    \n    # Loop through each character in the string\n    for char in test_str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Convert the character to an integer and add it to the list\n            int_list.append(int(char))\n    \n    # Return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return None"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    elif x > a[index]:\n        return index + 1\n    else:\n        return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    :param a: sorted list of numbers\n    :param x: value to find insertion point for\n    :return: index of the right insertion point\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"aababbababbababb\"\nmatches = text_match_three(text)\nprint(matches)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{2})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a.*b{3}')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n\n    pattern = re.compile(r'\\ba{3}b\\b')\n    matches = pattern.findall(text)\n\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"a[b]{3}\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert string to list of characters\n    char_list = list(test_str)\n    # join list of characters into a string\n    new_str = ''.join(char_list)\n    # convert list to tuple\n    new_tuple = tuple(test_list + [new_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # converting string to list and joining all elements with comma separator\n    test_list_str = ','.join(test_list)\n    # splitting the string at comma separator and creating a new list\n    test_list_lst = test_list_str.split(',')\n    # creating a new tuple with the string as first element and the list as second element\n    return (test_str, test_list_lst)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple\n    new_list = tuple(test_list)\n    # Concatenate the two tuples\n    new_tuple = (test_str, new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return tuple(str(test_str) + str(x) for x in test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Define a new tuple with the given string and list\n    new_tuple = (test_str, test_list)\n    \n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # concatenate the string and the tuple\n    new_tuple = (test_str + str(test_tuple))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for num in nums[i:]:\n                if num % 2 == 0:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    if count == len(nums)//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if len(set(nums[i:i+2])) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # iterate through each index in the list\n    for i in range(len(nums)):\n        # if the current index is even and the value at the current index is odd, return False\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n\n    # if all even indexes contain even numbers, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n            if count == 2:\n                return True\n    return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if any(nums[i:i+2] % 2!= 0 for i in range(0, len(nums), 2)):\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_index = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_index.append(i)\n    for i in even_index:\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:  # check if index is even\n            if sum(nums[i:i+2]) % 2 == 0:  # check if even sum is even\n                count += 1\n    if count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Initialize the result variable to True\n    result = True\n    \n    # Iterate through the list of numbers\n    for i in range(len(nums)):\n        # Check if the current number is even\n        if nums[i] % 2 == 0:\n            # Check if the current index is even\n            if i % 2 == 0:\n                # If the current number is even and the current index is even, check if the next number in the list is also even\n                if i + 1 < len(nums) and nums[i + 1] % 2 == 0:\n                    # If the next number in the list is even, skip the next number in the list\n                    continue\n                else:\n                    # If the next number in the list is odd, return False\n                    result = False\n                    \n            # If the current index is odd, return False\n            else:\n                result = False\n                \n    # Return the result variable\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize empty list to store non-nested tuples\n    non_nested = []\n    # iterate over each tuple in the input tuple\n    for tup in test_tup:\n        # check if the current tuple is a nested tuple\n        if type(tup) == tuple:\n            # if it is, recursively call the function on the nested tuple\n            remove_nested(tup)\n        else:\n            # if it's not, add the non-nested tuple to the non_nested list\n            non_nested.append(tup)\n    # return the non-nested list\n    return non_nested"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            for sub_item in item:\n                new_tup.append(sub_item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            for sub_elem in elem:\n                new_list.append(sub_elem)\n        else:\n            new_list.append(elem)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    if isinstance(test_tup, tuple):\n        return tuple(elem for sublist in test_tup for elem in sublist if not isinstance(elem, tuple))\n    else:\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if isinstance(i, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_lists(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n\n    count = 0\n\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last\n    position of the element in the array. If the element is not present in the array, it\n    returns -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize left and right pointers to the first and last indices of the array\n    left = 0\n    right = len(arr) - 1\n\n    # loop through the array until the left pointer is greater than or equal to the right pointer\n    while left < right:\n        # calculate the mid index\n        mid = left + (right - left) // 2\n\n        # if the mid element is equal to x, return the mid index\n        if arr[mid] == x:\n            return mid\n\n        # if x is greater than the mid element, search in the left half of the array\n        elif x > arr[mid]:\n            left = mid + 1\n\n        # if x is less than the mid element, search in the right half of the array\n        else:\n            right = mid - 1\n\n    # if the element is not found in the array, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            right = mid - 1  # if the element is found, update the right pointer\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1  # if the element is not found, update the left pointer\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Find the index of the element x in the sorted array\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            right = mid - 1  # Move the right pointer to the previous index\n        elif arr[mid] < x:\n            left = mid + 1  # Move the left pointer to the next index\n        else:\n            right = mid - 1  # Move the right pointer to the previous index\n\n    return -1  # If the element is not found, return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: an array and an element.\n    It returns the index of the last occurrence of the element in the array.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last elements of the array, respectively\n    left = 0\n    right = len(arr) - 1\n\n    # Keep track of the index of the last occurrence of the element\n    last_occurrence = -1\n\n    # Iterate through the array using the left and right pointers\n    while left <= right:\n        # Calculate the midpoint of the array\n        mid = (left + right) // 2\n\n        # If the midpoint element is equal to the target element, update the last occurrence index and move to the right\n        if arr[mid] == x:\n            last_occurrence = mid\n            right = mid - 1\n        # If the midpoint element is less than the target element, move the left pointer to the right\n        else:\n            left = mid + 1\n\n    # Return the last occurrence index\n    return last_occurrence"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(l):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position as -1\n    last_position = -1\n\n    # Traverse the array from left to right\n    for i in range(len(arr)):\n        # If the current element is equal to x, then update the last position as i\n        if arr[i] == x:\n            last_position = i\n\n    return last_position"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(?=b)'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return \"Not found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*?b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'(?i)\\b(a.*?)\\b\\b'\n\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b$')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<![\\w\\s])a\\w*b(?![\\w\\s])'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize sum to zero\n    sum = 0\n    # Loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # Check if the number is odd (i.e. if its remainder when divided by 2 is 1)\n        if i % 2!= 0:\n            # If it is, add it to the sum\n            sum += i\n    # Return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    s = 0\n    for i in range(n):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize variables\n    sum = 0\n    i = 1\n    \n    # loop through odd numbers and add to sum\n    while i <= n:\n        if i % 2 == 1:\n            sum += i\n        i += 1\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initializing variables\n    sum_of_odd = 0\n    current_num = 1\n    \n    # loop to check all odd numbers between 1 and n\n    while current_num <= n:\n        # if current number is odd add it to sum\n        if current_num % 2!= 0:\n            sum_of_odd += current_num\n        # increment current number by 1\n        current_num += 1\n    \n    # return the sum of odd numbers\n    return sum_of_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    This function finds the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    for i in range(l, r+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # iterate through range of numbers up to n\n    for i in range(1, n+1, 2):\n        # add each odd number to sum variable\n        sum += i\n\n    # return the sum of all odd numbers\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_array(arr):\n    '''\n    This function takes in an array and returns the sum of all the elements in the array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0  \n    for i in arr:  \n        sum += i  \n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n\n    # Check if the number of bits to rotate is greater than the number of bits in the binary string\n    if len(binary_str) <= d:\n        return 0\n\n    # Get the number of bits to rotate and the rotation amount\n    bits_to_rotate = len(binary_str) - d\n    rotation_amount = n >> bits_to_rotate\n\n    # Rotate the binary string left by the rotation amount\n    rotated_binary_str = binary_str[rotation_amount:] + binary_str[:rotation_amount]\n\n    # Convert the rotated binary string to decimal\n    rotated_decimal = int(rotated_binary_str, 2)\n\n    return rotated_decimal"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n << d # Left shift the number to the left by d bits\n    n = n >> (32 - d) # Right shift the number to the right by 32-d bits\n    return n # Return the rotated number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary and extract the last d bits\n    shift_bits = bin(n)[2:].zfill(32)[:d]\n    # Concatenate the bits to form the rotated number\n    rotated_number = bin(int(shift_bits,2) << d)[2:].zfill(32)\n    # Convert the rotated number back to decimal\n    return int(rotated_number,2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d %= 32 # check if d is within the range of 32 bits\n    if d == 0: # if d is zero, return the original number\n        return n\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xffffffff # rotate left by d bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # mask = 0xFFFFFFFF - (1 << d)\n    mask = ((1 << d) - 1) << (32 - d)\n    return ((n << d) & mask) | (n >> (32 - d))"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert binary number to decimal\n    n = int(n, 2)\n\n    # Rotate left d bits\n    n = (n << d) | (n >> (32 - d))\n\n    # Convert decimal back to binary\n    return bin(n)[2:].zfill(32)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n << d\n    n = n & ((1 << 32) - 1)  # Mask off any bits that are shifted out\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n << d\n    n = n >> (32 - d)\n    return n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Remove all spaces from a given string.\n\n    Parameters:\n    text (str): The string to be processed.\n\n    Returns:\n    str: The processed string with all whitespaces removed.\n    \"\"\"\n    # Use the regular expression pattern to remove all spaces\n    text = re.sub(r'\\s+','', text)\n    # Remove any leading or trailing spaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespace characters\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define the regular expression pattern to match whitespaces\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to replace all whitespaces in the string with empty string\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a given string.\n    '''\n    # Remove all the whitespaces using regular expression\n    text = re.sub(r'\\s+', '', text)\n    # Return the modified string\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(len(x)):\n        if x[i] == y[i] and y[i] == z[i]:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(1,x+1):\n        for j in range(1,y+1):\n            for k in range(1,z+1):\n                if i == x-i and j == y-j and k == z-k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == z and z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Initialize variables to count the number of equal numbers\n    count = 0\n\n    # Iterate through each integer and count the number of equal numbers\n    for num in (x, y, z):\n        if num == x:\n            count += 1\n        elif num == y:\n            count += 1\n        elif num == z:\n            count += 1\n\n    # Return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    This function takes three integers as input and returns the number of equal numbers in the input.\n    \"\"\"\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == x and j == y and k == z:\n                    count += 1\n                elif i == x and j == y and k!= z:\n                    count += 1\n                elif i == x and j!= y and k == z:\n                    count += 1\n                elif i == x and j!= y and k!= z:\n                    count += 1\n                elif i!= x and j == y and k == z:\n                    count += 1\n                elif i!= x and j == y and k!= z:\n                    count += 1\n                elif i!= x and j!= y and k == z:\n                    count += 1\n                elif i!= x and j!= y and k!= z:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    else:\n        count += 0\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            return i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # Initialize two pointers, one at the beginning of the array and the other at the end\n    left = 0\n    right = n - 1\n\n    # Initialize a counter to keep track of the number of rotations\n    count = 0\n\n    # If the right pointer is already at its final position, return 1\n    if right == left:\n        return 1\n\n    # Initialize a variable to keep track of the maximum difference between elements in the array\n    max_diff = 0\n\n    # While the left pointer is less than the right pointer\n    while left < right:\n        # Calculate the current difference between the elements at the left and right pointers\n        diff = arr[right] - arr[left]\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n        # Move the right pointer to the next element\n        right -= 1\n\n        # Move the left pointer to the previous element\n        left += 1\n\n        # Increment the counter of rotations\n        count += 1\n\n    # If the maximum difference between elements in the array is 0, the array is already sorted, so return 0\n    if max_diff == 0:\n        return 0\n\n    # Return the number of rotations required\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # Find the minimum value in the array\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    # Count the number of rotations required to generate a sorted array\n    count = 0\n    for i in range(1, n):\n        if arr[i] > min_val:\n            min_val = arr[i]\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return 0\n    # check if the array has only one element\n    if n == 1:\n        return 0\n    # check if the array has only two elements\n    if n == 2:\n        if arr[0] < arr[1]:\n            return 1\n        else:\n            return 0\n    # check if the array has three elements\n    if n == 3:\n        if arr[0] > arr[1] and arr[1] > arr[2]:\n            return 1\n        elif arr[0] < arr[1] and arr[0] > arr[2]:\n            return 2\n        else:\n            return 0\n    # check if the array has more than three elements\n    count = 0\n    for i in range(n-2):\n        if arr[i] < arr[i+1] and arr[i+1] < arr[n-1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function counts the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Count the number of inversions\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversions += 1\n\n    # Calculate the number of rotations required\n    rotations = 0\n    for i in range(1, n):\n        rotations += (n - i)\n\n    return inversions // rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # find the largest element in the array\n    max_val = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    # find the largest element in the reversed array\n    max_val_rev = arr[n-1]\n    for i in range(n-2, -1, -1):\n        if arr[i] > max_val_rev:\n            max_val_rev = arr[i]\n    # check if the array is already sorted\n    if max_val == arr[n-1]:\n        return 0\n    # if not, count the number of rotations required\n    count = 0\n    if arr[0] < max_val_rev:\n        count += 1\n    if arr[n-1] < max_val:\n        count += 1\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    max_swaps = 0\n\n    # find the minimum element in the array\n    min_element = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_element:\n            min_element = arr[i]\n\n    # count the number of swaps required to sort the array\n    for i in range(n):\n        j = (i + min_element) % n\n        if arr[i] > arr[j]:\n            max_swaps += 1\n\n    return max_swaps"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an unsorted array as input and returns the number of rotations required to generate a sorted array.\n    \"\"\"\n    n = len(arr)\n    # check if the array is already sorted\n    if n <= 1:\n        return 0\n\n    # check for even length array\n    if n % 2 == 0:\n        # find the maximum element in the array\n        max_element = max(arr)\n        # count the number of times the maximum element occurs\n        count = arr.count(max_element)\n        # count the number of times the minimum element occurs\n        min_element = min(arr)\n        count -= arr.count(min_element)\n        # return the count of rotations required\n        return count * 2\n\n    # check for odd length array\n    else:\n        # find the median element of the array\n        arr.sort()\n        mid = n // 2\n        median = arr[mid]\n        # count the number of times the median occurs\n        count = arr.count(median)\n        # count the number of times the first and last elements occur\n        first_element = arr[0]\n        last_element = arr[-1]\n        count += arr.count(first_element) + arr.count(last_element)\n        # return the count of rotations required\n        return count * 2"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Using math library\n    import math\n\n    # Return true if the number is a perfect square, else false\n    return math.isqrt(n) ** 2 == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # Check if n is a positive integer\n    if n <= 0:\n        return False\n    \n    # Loop through all integers from 1 to n-1\n    for i in range(1, n):\n        \n        # Check if i*i is equal to n\n        if i*i == n:\n            return True\n    \n    # If no perfect square is found, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Helper function to check whether a number is a perfect square\n    def is_square(num):\n        \"\"\"\n        Helper function to check whether a number is a perfect square or not\n        \"\"\"\n        # Use a trial division method to check whether a number is a perfect square or not\n        i = 1\n        while i * i <= num:\n            if num % i:\n                return False\n            num = num // i\n            i += 1\n        return True\n\n    # Check if the number is a perfect square using the helper function\n    return is_square(n)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = int(n ** 0.5)\n    for i in range(sqrt_n, 0, -1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # calculate the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # iterate over a range of numbers from 1 to sqrt_n\n    for i in range(1, int(sqrt_n)+1):\n        # check if the square of i is equal to n\n        if i * i == n:\n            return True\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    x = n\n    y = 0\n    while x!= y:\n        y = (x + n // x) // 2\n        x = y * y\n    if x == y:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    This function checks whether the given number is a perfect square or not.\n    '''\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        for i in range(int(n**0.5)+1):\n            if n % i**2 == 0:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    if n == 0 or n == 1:\n        return True\n    a, b = 0, n\n    while b > a:\n        c = a + (b - a) // 2\n        if c**2 == b:\n            return True\n        elif c**2 < b:\n            a = c + 1\n        else:\n            b = c - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the given number to integer\n    n = int(n)\n\n    # Initialize the upper limit and lower limit of the binary search\n    upper_limit = n\n    lower_limit = 0\n\n    # Perform binary search to find if the given number is a perfect square or not\n    while upper_limit - lower_limit >= 1:\n        mid = (upper_limit + lower_limit) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            upper_limit = mid\n        else:\n            lower_limit = mid\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize product variable\n    product = 1\n\n    # Iterate over the array and multiply each element with the product variable\n    for num in arr: \n        product *= num\n\n    # Check if the product is even or odd\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1\n\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    if not lists:  # base case: empty list\n        return []\n\n    # find the maximum sum of any sublist\n    max_sum = max([max_sum_list(sublist) for sublist in lists])\n\n    # compute the sum of the maximum sum sublists\n    total_sum = sum([max_sum_list(sublist) for sublist in lists])\n\n    # compute the sum of the maximum sum of any sublist and itself\n    max_sum_of_max_sum = max([max_sum_list(sublist) + max_sum_list(lists) for sublist in lists])\n\n    # return the list in the original list of lists whose sum of elements is the highest\n    return [sublist for sublist in lists if sum(sublist) == total_sum] + [max_sum_list(lists) if sum(lists) == max_sum_of_max_sum else []]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Find the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n    lists (list of lists): a list of lists of integers.\n\n    Returns:\n    list: the list in the input list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize variables to store the maximum sum and the corresponding list\n    max_sum = float('-inf')\n    max_list = []\n\n    # Iterate over all lists in the input list\n    for sublist in lists:\n        # Calculate the sum of the elements in the current sublist\n        sublist_sum = sum(sublist)\n\n        # If the sum is greater than the current maximum, update the maximum sum and the corresponding list\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    # Return the maximum sum and the corresponding list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(j+1, len(lists[i])):\n                current_sum += lists[i][k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[0])):\n            current_sum = lists[i][j]\n\n            for k in range(i):\n                current_sum += lists[k][j]\n\n            for l in range(j):\n                current_sum += lists[i][l]\n\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    max_sum = 0\n    max_list = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n\n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to store the maximum sum and its corresponding list\n    max_sum = float('-inf')\n    max_list = None\n    \n    # Loop through each list in the list of lists\n    for lst in lists:\n        # Initialize variables to store the current sum and the current element in the list\n        current_sum = 0\n        current_elem = None\n        \n        # Loop through each element in the list\n        for elem in lst:\n            # Add the element to the current sum\n            current_sum += elem\n            \n            # If the current sum is greater than the maximum sum, update the maximum sum and the corresponding list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst\n    \n    # Return the maximum sum and list\n    return max_sum, max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        lst_sum = sum(lst)\n        if lst_sum > max_sum:\n            max_sum = lst_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n\n    return result\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    run_count = 0\n    uppercase_count = 0\n    i = 0\n\n    # Loop through the string\n    while i < len(test_str):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            run_count = 1\n        else:\n            run_count += 1\n\n        # Check if the run has exceeded the maximum run\n        if run_count > max_run:\n            max_run = run_count\n\n        # Move to the next character\n        i += 1\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    max_run = 0\n    current_run = 0\n    start_index = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n                start_index = i - max_run + 1\n            current_run = 0\n\n    return test_str[start_index:start_index+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    uppercase = False\n    \n    for char in test_str:\n        if char.isupper():\n            if uppercase:\n                if curr_run > max_run:\n                    max_run = curr_run\n                curr_run = 0\n            else:\n                curr_run += 1\n        else:\n            uppercase = False\n            if curr_run > max_run:\n                max_run = curr_run\n            curr_run = 0\n    \n    if curr_run > max_run:\n        max_run = curr_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    end = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            end = i\n            if end - start + 1 > max_run:\n                max_run = end - start + 1\n        else:\n            start = end = i\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            uppercase_count += 1\n        else:\n            if uppercase_count > max_run:\n                max_run = uppercase_count\n            current_run = 0\n            uppercase_count = 0\n\n    if uppercase_count > max_run:\n        max_run = uppercase_count\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    :param test_str: a string to analyze\n    :return: the maximum run of uppercase characters in the string, or None if none exist\n    \"\"\"\n\n    # initialize variables\n    max_run = None\n    cur_run = 0\n    prev_char = None\n\n    # loop over each character in the string\n    for char in test_str:\n\n        # if the character is uppercase and not the same as the previous one, increase the run\n        if char.isupper() and prev_char is not None and char!= prev_char:\n            cur_run += 1\n\n        # otherwise, reset the run to 1\n        else:\n            cur_run = 1\n\n        # update the max run if necessary\n        if max_run is None or cur_run > max_run:\n            max_run = cur_run\n\n        # update the previous character\n        prev_char = char\n\n    # if no run was found, return None\n    if max_run is None:\n        return None\n\n    # otherwise, return the maximum run\n    else:\n        return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase_count = 0\n\n    # loop through the string\n    for i in range(len(test_str)):\n        # check if the character is uppercase\n        if test_str[i].isupper():\n            # increment the count if it is, otherwise reset the count\n            if uppercase_count == 0:\n                current_run = 1\n            uppercase_count += 1\n        else:\n            # if the character is not uppercase, reset the count\n            uppercase_count = 0\n\n        # check if the current run is longer than the previous max run\n        if current_run > max_run:\n            max_run = current_run\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_start = 0\n    max_run = 1\n    current_run = 1\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            run_start = i - current_run + 1\n            current_run = 1\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return test_str[run_start:run_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    n = len(test_str)\n    count = 0\n    start = 0\n    end = 0\n    max_run = 0\n    for i in range(n):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_run:\n                max_run = count\n                start = i\n        else:\n            count = 0\n    return test_str[start:end+1]"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for elem in test_tup:\n        if elem == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for num in test_tup:\n        if num == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function checks if a given tuple contains the given K value or not.\n    \"\"\"\n    for tup in test_tup:\n        if tup[K] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for num in test_tup:\n        if num == K:\n            count += 1\n    if count == 0:\n        return \"Not Found\"\n    else:\n        return \"Found\""
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            count += 1\n    if count == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n        elif test_tup1[i] < test_tup2[i]:\n            continue\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Tuple lengths are not equal\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples do not have the same length.\"\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]